WEBVTT

NOTE duration:"01:19:14.9230000"

NOTE language:en-us

NOTE Confidence: 0.75983435

89877832-f2cc-4627-991e-2d8e45acf140
00:00:00.000 --> 00:00:02.180
On half subtractor know Nick.

NOTE Confidence: 0.75983435

9f74ce8f-8693-461c-a02c-7660303f21dc
00:00:02.180 --> 00:00:06.091
The idea is that now that you know how

NOTE Confidence: 0.75983435

cea62969-9986-41f4-9f50-f33f62cbfe8a
00:00:06.091 --> 00:00:09.600
to design half Adder and also full adder.

NOTE Confidence: 0.75983435

cbdeb5b1-a8c5-4f03-8fb0-cfd22c300eea
00:00:09.600 --> 00:00:12.648
So now you can generalize your knowledge to

NOTE Confidence: 0.75983435

56e13e7b-ea4f-4e2a-833a-67b2dd46d66d
00:00:12.648 --> 00:00:16.106
build a half subtractor or full subtractor.

NOTE Confidence: 0.75983435

490f3edb-1678-43cb-87ba-650ff12faa77
00:00:16.110 --> 00:00:19.574
So this is as a practice for you.

NOTE Confidence: 0.75983435

e0a320a0-aa61-4ae1-9c91-3573b5a1f527
00:00:19.580 --> 00:00:23.460
So you have to design 1/2 subtractor or

NOTE Confidence: 0.75983435

ec512875-d8ba-44c2-b16a-1c895bf9cd42
00:00:23.460 --> 00:00:26.719
full subtractor based on the knowledge that

NOTE Confidence: 0.75983435

91ec3a21-0352-427a-b15e-f3a6622282b7
00:00:26.719 --> 00:00:30.780
you gain from the full adder or half adder.

NOTE Confidence: 0.75983435

13f868d4-d802-4e71-8e75-6d1947f303e3
00:00:30.780 --> 00:00:33.066
So the same when we designed

NOTE Confidence: 0.75983435

781f47cc-a7d0-4484-b0f3-9ea8c091c457
00:00:33.066 --> 00:00:35.590
the half adder or full adder.

NOTE Confidence: 0.75983435

03924f3f-6417-4606-8bed-3446aaac470b
00:00:35.590 --> 00:00:37.996
We follow the same design procedure

NOTE Confidence: 0.75983435

8aeb3f29-c140-4ef8-a636-c16fe1a94684
00:00:37.996 --> 00:00:39.600
for designing any circuit.

NOTE Confidence: 0.75983435

3725c535-f00b-4388-91bd-a1f6bbab4e7d
00:00:39.600 --> 00:00:42.813
So we formed the truth table or we write

NOTE Confidence: 0.75983435

e2d8989b-3416-4128-8179-ba20ab0785cb
00:00:42.813 --> 00:00:46.418
the midterms and then we simplify that etc.

NOTE Confidence: 0.75983435

98978056-f4d2-4e16-a2fc-1546093312ce
00:00:46.420 --> 00:00:48.863
So the same is for half subtractor

NOTE Confidence: 0.75983435

dac5646e-ef8e-4056-855f-7d15c4e5723e
00:00:48.863 --> 00:00:50.830
in the half subtractor.

NOTE Confidence: 0.75983435

d96e774f-f079-4905-a673-d75c10d3ebfb
00:00:50.830 --> 00:00:53.848
You are subtracting only two bits.

NOTE Confidence: 0.75983435

4bc95be2-7a2c-42b8-b396-a1814a122a08
00:00:53.850 --> 00:00:55.622
For the full subtractor,

NOTE Confidence: 0.75983435

90043218-67bb-481b-a4eb-60bafc62f7bd
00:00:55.622 --> 00:00:57.837
you are subtracting 3 bits,

NOTE Confidence: 0.75983435

7ee8b89d-a297-40b4-a1f0-ede6b50793fd
00:00:57.840 --> 00:01:01.770
and if you need a N bit subtracter you have

NOTE Confidence: 0.75983435

36eff97a-5407-427e-a72b-8028e7e16d47
00:01:01.871 --> 00:01:05.807
to design A subtractor based on the design.

NOTE Confidence: 0.75983435

affdf313-cebb-4a0e-bb58-f3f7612e3ad9
00:01:05.810 --> 00:01:09.068
We said, uh, you can use.

NOTE Confidence: 0.75983435

b460f7b5-5cf8-4965-86e4-3e163bb07061
00:01:09.070 --> 00:01:11.275
N bit adder for subtraction

NOTE Confidence: 0.75983435

33ffa5da-3c60-4312-bde6-ec4fe0a98e6d
00:01:11.275 --> 00:01:12.598
in twos complement,

NOTE Confidence: 0.75983435

12da92c5-3154-490c-bc97-adc85098e713
00:01:12.600 --> 00:01:15.554
so these are the design patterns that

NOTE Confidence: 0.75983435

1d561d72-cff2-4de2-ae88-2cf4012e2f62
00:01:15.554 --> 00:01:18.767
you can follow for other design tasks.

NOTE Confidence: 0.75983435

e96f0674-968d-46ba-81af-cdbb7c650c2c
00:01:18.770 --> 00:01:22.172
So sometimes we do not cover some

NOTE Confidence: 0.75983435

84b83df2-7bd9-4edf-bf24-63a53603bfa9
00:01:22.172 --> 00:01:25.825
digital units and we leave it to you to.

NOTE Confidence: 0.75983435

375363dd-f3a9-4ffb-aed7-e3d9109a0d9a
00:01:25.830 --> 00:01:29.058
I mean you yourself practice and

NOTE Confidence: 0.75983435

d365d91a-5a01-4cea-983a-5c8f7a31f97b
00:01:29.058 --> 00:01:32.309
design that second or that unit.

NOTE Confidence: 0.75983435

8ad20fa2-7cab-4eed-88e5-091aa1fed086
00:01:32.310 --> 00:01:35.187
So I'm going to start today's lecture,

NOTE Confidence: 0.75983435

eaf0e60f-671b-488c-9e69-15f0c09a7926
00:01:35.190 --> 00:01:38.060
so let me. I think the yes,

NOTE Confidence: 0.75983435

2e2ea059-2a68-430b-9162-fa4e02d1a585
00:01:38.060 --> 00:01:40.120
the recording is already started.

NOTE Confidence: 0.75983435

f9a0e24f-8379-4d4f-9c51-452897ee88cc
00:01:40.120 --> 00:01:43.228
Thank you, Aria.

NOTE Confidence: 0.75983435

dfb047f0-67c2-4d30-ad82-1a963eb26b65
00:01:43.230 --> 00:01:46.278
So today we continue.

NOTE Confidence: 0.75983435

8b039405-91f4-422d-b20e-5221e2458c04
00:01:46.280 --> 00:01:50.188
On a more of.

NOTE Confidence: 0.75983435

66f09a5a-6799-404b-9ad9-eec58ff3e523
00:01:50.190 --> 00:01:54.138
Circuits in the that that are

NOTE Confidence: 0.75983435

535d7474-778a-47cc-bd64-ada49bdc4ca2
00:01:54.138 --> 00:01:57.810
needed for a computer system.

NOTE Confidence: 0.75983435

8ea6d0fa-9f9f-46b1-b916-04db030078b7
00:01:57.810 --> 00:02:02.750
So so far we covered.

NOTE Confidence: 0.75983435

ccd9bb64-42eb-415a-9c66-1fbe2de70e4c
00:02:02.750 --> 00:02:05.186
Some combination logic or those law?

NOTE Confidence: 0.75983435

dd89c82d-78f4-48d3-9cc3-3c270e181e70
00:02:05.190 --> 00:02:09.062
I mean a circuit that only you provide

NOTE Confidence: 0.75983435

2ac2efcc-75f3-4700-b8d4-baa234352741
00:02:09.062 --> 00:02:12.446
the input and you see the output.

NOTE Confidence: 0.75983435

9e8a9c01-c5ff-4087-9398-cbf233c81672
00:02:12.450 --> 00:02:16.640
So we covered the coders.

NOTE Confidence: 0.75983435

398c7a6b-e860-425c-b1a3-d800d826a0f8
00:02:16.640 --> 00:02:20.699
All kind of we can say that binary code

NOTE Confidence: 0.75983435

aec64904-211a-402d-9642-e465c65185a1
00:02:20.699 --> 00:02:24.288
coders so busy to access free and etc.

NOTE Confidence: 0.75983435

9b7179be-2e62-4cac-9e53-6cfefb58a3b1
00:02:24.290 --> 00:02:27.370
And we said that they were beneficial

NOTE Confidence: 0.75983435

c88ac69c-410b-45c7-b53b-4701835a83da
00:02:27.370 --> 00:02:30.140
for doing arithmetic on decimal system.

NOTE Confidence: 0.75983435

b5aeba71-21cb-4495-9c8c-18493e8e1744
00:02:30.140 --> 00:02:33.395
But based on the arithmetic on binary

NOTE Confidence: 0.75983435

bb7e9d87-f373-404d-9de7-babada061926
00:02:33.395 --> 00:02:37.335
system also for the Gray code or ASCII code,

NOTE Confidence: 0.75983435

f8e14255-7400-462a-ab3a-67c09fd378f0
00:02:37.340 --> 00:02:40.462
they are very good for transmission of

NOTE Confidence: 0.75983435

8b3abbc8-fb1e-4f9d-8f34-39a91d3da522
00:02:40.462 --> 00:02:42.740
the information between two systems.

NOTE Confidence: 0.75983435

5b999734-773e-4f7b-9137-357ae1661628
00:02:42.740 --> 00:02:46.205
And then we start with introducing some.

NOTE Confidence: 0.75983435

336cbaba-c70f-4f76-9eb6-0b6f6d4e4613
00:02:46.210 --> 00:02:48.838
These are units for the arithmetic and 

NOTE Confidence: 0.75983435

28e0b84c-902c-49de-b960-c05c4d03b781
00:02:48.838 --> 00:02:51.159
logical operation in terms of the.

NOTE Confidence: 0.75983435

9c5fc008-b095-4dc6-b9b1-2f69b56afc5c
00:02:51.160 --> 00:02:53.844
Arithmetic we introduced binary

NOTE Confidence: 0.75983435

a8c81862-5506-4c5f-a5a4-3052e4e3bd66
00:02:53.844 --> 00:02:55.857
adder and subtractor.

NOTE Confidence: 0.75983435

16fd8b84-7112-42fb-b99d-308d73f62030
00:02:55.860 --> 00:02:58.158
What do we build the subtracter

NOTE Confidence: 0.75983435

6678400f-3347-4171-aab4-7d9368e3363a
00:02:58.158 --> 00:02:59.690
based on the other?

NOTE Confidence: 0.75983435

fca5806b-bf80-484b-863f-f3a620a8264c
00:02:59.690 --> 00:03:01.979
Because of the idea we could we

NOTE Confidence: 0.75983435

8e78a5b2-5d37-48b5-b5c3-26ba312de929
00:03:01.979 --> 00:03:04.369
could employ or we could use the

NOTE Confidence: 0.75983435

0e5a49fe-98a7-4800-b954-b8122bb854ce
00:03:04.369 --> 00:03:06.373
idea of the Two's complement in

NOTE Confidence: 0.75983435

a42436eb-4013-4716-a52d-4e0fc5cd94f9
00:03:06.445 --> 00:03:08.810
Two's complement and subtraction is

NOTE Confidence: 0.75983435

3f60e321-381d-4208-8896-9cd2c84f6017
00:03:08.810 --> 00:03:11.562
addition with two complements or as

NOTE Confidence: 0.75983435

cab5ed8f-983f-4a87-abe2-2347b0e00d27
00:03:11.562 --> 00:03:14.236
a result we could build a subtracter.

NOTE Confidence: 0.75983435

edc39d66-ab02-4a8c-9c47-863459305611
00:03:14.240 --> 00:03:16.620
So today we are going to continue

NOTE Confidence: 0.75983435

9cf2f882-3f69-4d62-af98-544fddcdbd9e
00:03:16.620 --> 00:03:18.946
with the binary multiplier and then

NOTE Confidence: 0.75983435

75d08d97-e94e-41b4-a421-24b1beadf402
00:03:18.946 --> 00:03:21.406
binary comparator an if you have

NOTE Confidence: 0.75983435

eb042728-7b2d-49bf-8b0b-98a276fa261b
00:03:21.406 --> 00:03:23.867
enough time we continue with the

NOTE Confidence: 0.75983435

a27887be-c0e9-4324-a572-7abb4c4cf472
00:03:23.867 --> 00:03:25.847
second category which is about.

NOTE Confidence: 0.75983435

cba11c54-9071-45d8-9e52-4f874e4ee3d5
00:03:25.850 --> 00:03:28.290
Data transmission.

NOTE Confidence: 0.75983435

8336f0a7-0f3b-4be1-90eb-ab55b111f2ac
00:03:28.290 --> 00:03:30.858
As you can see here in this part

NOTE Confidence: 0.75983435

e10dc3e9-93b7-4254-8287-4ba46fd042c3
00:03:30.858 --> 00:03:33.579
we have another digital unit which

NOTE Confidence: 0.75983435

253d3d32-cc60-42c5-af09-dc110df1a46f
00:03:33.579 --> 00:03:36.074
is called decoder or encoder.

NOTE Confidence: 0.75983435

3e2f8569-255e-4f67-8724-b27be275cff3
00:03:36.080 --> 00:03:38.754
These units are a little bit different

NOTE Confidence: 0.75983435

e9a74a3c-8d78-4262-8e48-e628d78cf6e2
00:03:38.754 --> 00:03:41.818
from the binary code decoder or encoder's,

NOTE Confidence: 0.75983435

51d032ed-e289-4bdb-9d16-1cfcde711df7
00:03:41.820 --> 00:03:43.360
usually in the question.

NOTE Confidence: 0.75983435

93de1387-8cc0-4ad8-9cc4-5f8422daa718
00:03:43.360 --> 00:03:46.330
It's clear that when we said decoder,

NOTE Confidence: 0.75983435

c77c87dc-0678-4467-8f62-78cb6fde8480
00:03:46.330 --> 00:03:48.790
what type of decoder we mean,

NOTE Confidence: 0.75983435

8dd2ca1b-8097-492e-9882-11dbecb79f0c
00:03:48.790 --> 00:03:51.592
so you'll see what's the difference

NOTE Confidence: 0.75983435

a50df524-c657-4b91-a14a-dee0ad3a2fe9
00:03:51.592 --> 00:03:53.460
of these two units

NOTE Confidence: 0.8330083

0a54fc40-a41a-45e8-a4b5-30a7702c47e8
00:03:53.553 --> 00:03:56.313
with the previous binary code

NOTE Confidence: 0.8330083

d200d525-f247-4217-9b61-57c8d50ed284
00:03:56.313 --> 00:03:59.970
decoders or encoders. So.

NOTE Confidence: 0.8330083

f3f908f4-c88e-4cb9-95b0-c37ee78cb8cc
00:03:59.970 --> 00:04:04.688
Oh sorry, this is not the correct.

NOTE Confidence: 0.8330083

a7970036-6a4a-4955-8cf3-5307b61479cd
00:04:04.690 --> 00:04:09.556
Side haha. Sorry about this.

NOTE Confidence: 0.8330083

bfc8b675-97e6-4912-9054-942311216190
00:04:09.556 --> 00:04:12.416
I have to open the.

NOTE Confidence: 0.8800122

99947f5e-e855-4447-aa7e-74c7ddfe97ac
00:04:19.910 --> 00:04:23.996
Oh actually, I started with the

NOTE Confidence: 0.8800122

6ce9b058-4f5d-4507-806f-0306b31526f4
00:04:23.996 --> 00:04:28.980
first part. I guess I have to

NOTE Confidence: 0.8800122

54c00b6b-4438-48fc-94dc-5a31b6aad152
00:04:28.980 --> 00:04:33.560
start this in show. And then here.

NOTE Confidence: 0.9262543

debe4567-471e-4019-a1a9-b1c10baade90
00:04:37.430 --> 00:04:43.090
Yeah. OK, so. Let's move on

NOTE Confidence: 0.9262543

dd80b8ff-e97e-4e3f-9e4c-16c299c692dd
00:04:43.090 --> 00:04:45.842
to the binary multiplier.

NOTE Confidence: 0.9262543

5cd0d55e-2eb7-4aaf-b74b-32b87224b8e8
00:04:45.850 --> 00:04:50.127
Now we want to build a circuit

NOTE Confidence: 0.9262543

99097399-0d73-45a0-807f-d0f3f2195bbb
00:04:50.127 --> 00:04:52.410
that does multiplication so.

NOTE Confidence: 0.8469959

05d7bcfd-a48d-48cb-a000-a0ac69353419
00:04:54.420 --> 00:04:57.072
Multiplication as we know in the

NOTE Confidence: 0.8469959

bc09a6e1-6fd6-4d35-981d-4b1df35b7dd1
00:04:57.072 --> 00:04:59.560
high school algorithm is basically

NOTE Confidence: 0.8469959

883fbd16-0f2a-47fe-b7d6-6d232cb7fbd1
00:04:59.560 --> 00:05:02.488
repeating the addition. For instance,

NOTE Confidence: 0.8469959

2ee22cff-babd-4284-a42b-02d6951a14df
00:05:02.488 --> 00:05:06.520
if I'm going to multiply an N bit,

NOTE Confidence: 0.8469959

f6181905-7ba4-4f82-b6ea-7d05eb281dae
00:05:06.520 --> 00:05:09.551
 is a binary number we which 

NOTE Confidence: 0.8469959

c93ef567-7ba0-4a78-83bb-8841e16e1375
00:05:09.551 --> 00:05:13.069
has N bits with another number.

NOTE Confidence: 0.8469959

3ddf3e2f-c723-45bd-aeaf-ff3bd5ae413d
00:05:13.070 --> 00:05:17.102
For instance, Y&Y is AN bit binary number

NOTE Confidence: 0.8469959

f93fabc4-2dc8-4d0c-82c3-b65091fc7735
00:05:17.102 --> 00:05:20.627
in decimal system is an ambit digit.

NOTE Confidence: 0.8469959

1fdf11d6-ed22-420f-aad1-7ef80563ee4e
00:05:20.630 --> 00:05:26.780
So basically we can add the. XMTY times.

NOTE Confidence: 0.9184484

88be69b4-de72-47e4-8f0e-4952fdc97207
00:05:28.960 --> 00:05:33.570
So. We already have the digital

NOTE Confidence: 0.9184484

9c5c7fdd-3873-4ce3-a59e-e2d6848ea50d
00:05:33.570 --> 00:05:36.434
units for adding, so for instance,

NOTE Confidence: 0.9184484

3fec1a89-c866-4972-b574-c3fa2fef6e09
00:05:36.434 --> 00:05:41.589
if you have a number X which has four bits.

NOTE Confidence: 0.9184484

5fadc382-5948-458f-aa33-da865ab64f1c
00:05:41.590 --> 00:05:44.180
And we want to multiply X by

NOTE Confidence: 0.9184484

e30e4948-8bf9-48a1-9de2-dc49d3f318db
00:05:44.180 --> 00:05:46.619
another #3 in binary system.

NOTE Confidence: 0.9184484

c5840e85-a1c8-4b0a-9a80-11d5f9b76ab4
00:05:46.620 --> 00:05:49.296
So basically we could say that

NOTE Confidence: 0.9184484

4b07274f-3bbe-4374-a969-3f1ba33132f6
00:05:49.296 --> 00:05:52.439
we can add X three times.

NOTE Confidence: 0.9184484

0112d254-5cb9-4abe-9798-1797971d1a3c
00:05:52.440 --> 00:05:56.427
So with four bit adder in putting X in

NOTE Confidence: 0.9184484

0db4cdd3-3808-45da-85eb-8b091e43d07e
00:05:56.427 --> 00:06:00.873
two in both inputs of the four bit adder,

NOTE Confidence: 0.9184484

9f95fcb6-549c-4386-8c4f-3f2420063953
00:06:00.880 --> 00:06:05.092
so basically X1 plus X1X2 plus X2 an etc.

NOTE Confidence: 0.9184484

eac3e148-dcf2-483f-95bd-e5fe462a8c66
00:06:05.100 --> 00:06:07.680
So let me show.

NOTE Confidence: 0.9184484

c1a9d304-4c11-4d18-9a9d-82e803a0eb58
00:06:07.680 --> 00:06:10.260
You the actual addition.

NOTE Confidence: 0.9184484

41c4935f-e9af-406b-ad9b-bdb7fa90c1b7
00:06:10.260 --> 00:06:15.223
So basically you are adding X one

NOTE Confidence: 0.9184484

e5e12d73-b441-4228-98cf-2c967262f338
00:06:15.223 --> 00:06:20.820
X2X3 and X4 with itself X one X2.

NOTE Confidence: 0.9184484

6e31d111-507a-4423-9b22-0df88f2e0396
00:06:20.820 --> 00:06:22.329
X3 and X4.

NOTE Confidence: 0.9184484

8633a27a-0e4a-4a18-b6a5-bff9dee9f277
00:06:22.329 --> 00:06:25.850
So using the four bit adder so

NOTE Confidence: 0.9184484

7339cd30-099c-4576-903d-e07e5594062c
00:06:25.981 --> 00:06:30.142
which becomes 2 * X and then this

NOTE Confidence: 0.9184484

c6de403b-bc36-44ea-8c3a-66296a74374b
00:06:30.142 --> 00:06:34.289
is the result of the two time X.

NOTE Confidence: 0.9184484

5affb143-9dfc-4044-8c5a-8949c9b42dfe
00:06:34.290 --> 00:06:37.839
So I again I repeat the addition

NOTE Confidence: 0.9184484

11ec05d6-3dd0-412a-b729-c8a0d8524afc
00:06:37.839 --> 00:06:41.020
with X itself so it becomes.

NOTE Confidence: 0.9184484

a3ac1f78-6b82-4658-8af6-74bd2d9e189a
00:06:41.020 --> 00:06:45.538
So this number plus additional X.

NOTE Confidence: 0.9184484

010602bf-8cf0-4406-94ad-870ae2b1f6e4
00:06:45.540 --> 00:06:48.040
It becomes 3 * X.

NOTE Confidence: 0.9184484

7f50e1da-ed43-4bad-a125-87fd10ca6ca8
00:06:48.040 --> 00:06:50.030
So this is one way,

NOTE Confidence: 0.9184484

68dec8fc-8be8-40da-ad11-6807ac9b853c
00:06:50.030 --> 00:06:52.816
but there's a problem with this design.

NOTE Confidence: 0.9184484

5d588a70-d771-470b-8ea3-8af7b26e4146
00:06:52.820 --> 00:06:54.408
What is the problem?

NOTE Confidence: 0.9184484

e276ef17-9f37-4324-92c6-4461847ea1f6
00:06:54.408 --> 00:06:55.599
Anybody can answer?

NOTE Confidence: 0.8605363

bcd34910-21d1-4e65-b9d1-7f5763c53a73
00:06:59.630 --> 00:07:01.658
What's the problem with this design?

NOTE Confidence: 0.8605363

0e929799-0de8-465d-9781-6aed0a2ace59
00:07:01.660 --> 00:07:04.019
So basically we don't need any multiplier,

NOTE Confidence: 0.8605363

3d456a86-8a9a-4243-9011-421a12f513bf
00:07:04.020 --> 00:07:05.756
we can reuse the N bit other

NOTE Confidence: 0.8605363

0f5f1f35-cbe7-4c52-87f1-11af060a454a
00:07:05.756 --> 00:07:07.482
to do the multiplication of

NOTE Confidence: 0.8605363

7b05a82e-c1c2-4786-8ae1-e59860121f49
00:07:07.482 --> 00:07:09.767
any number with another number.

NOTE Confidence: 0.8653126

4b9886a1-b25e-4908-871b-7c917533c188
00:07:13.620 --> 00:07:15.420
Yes, Philip is correct.

NOTE Confidence: 0.8653126

d4159999-0a20-4abf-a4f3-e780d7865f76
00:07:15.420 --> 00:07:18.682
So if I changed the second number

NOTE Confidence: 0.8653126

95705671-d841-4c9f-bea6-c89a36e9d04f
00:07:18.682 --> 00:07:21.534
three to four, for instance 100,

NOTE Confidence: 0.8653126

c566c8d2-e16c-4581-bcd9-2e5581695dce
00:07:21.534 --> 00:07:25.200
Now I want to multiply X by 4,

NOTE Confidence: 0.8653126

ff07e717-bedb-4261-83e6-5b6863ae85b3
00:07:25.200 --> 00:07:27.510
so I need another adder.

NOTE Confidence: 0.8653126

9ce637b5-789b-41b6-b752-bd7b47dea7b6
00:07:27.510 --> 00:07:30.814
So by increasing the second number I

NOTE Confidence: 0.8653126

4b481375-5bfa-4f4f-aaf1-86ede5dadd44
00:07:30.814 --> 00:07:33.842
have to change the whole hardware or

NOTE Confidence: 0.8653126

3423c862-30d6-49b6-a040-5946d6b6d9e9
00:07:33.842 --> 00:07:37.788
I have to go to the market and buy

NOTE Confidence: 0.8653126

fc1505f6-d4aa-4bb9-88ca-151c6b350d23
00:07:37.788 --> 00:07:40.932
additional adder to do the addition.

NOTE Confidence: 0.8653126

7daed054-2438-4e5c-a70e-43a98d939ef8
00:07:40.940 --> 00:07:44.372
So by just one unit of the increase

NOTE Confidence: 0.8653126

d3d0cb60-ac17-4a92-aede-f0c01de7f760
00:07:44.372 --> 00:07:47.478
in the second number I have.

NOTE Confidence: 0.8653126

aadacb1b-20db-4542-8fda-1a3b85e284a2
00:07:47.480 --> 00:07:49.675
To change the whole design

NOTE Confidence: 0.8653126

cc31c198-b672-47bd-b672-d30f9f5acf9e
00:07:49.675 --> 00:07:51.870
so this is not efficient,

NOTE Confidence: 0.8653126

b8c51f10-3017-424d-aeb4-efd102c09b4a
00:07:51.870 --> 00:07:55.092
so we need more adders an as the way

NOTE Confidence: 0.8653126

cde58322-e5c5-4a3f-ae6e-671796d8b5fa
00:07:55.092 --> 00:07:58.896
we increase the second number, the Y.

NOTE Confidence: 0.8653126

fc5c6368-57fc-4081-9289-a50698ac3f15
00:07:58.896 --> 00:08:01.086
So this is not good,

NOTE Confidence: 0.8653126

9d3af1f9-068b-45aa-a235-f62087061f37
00:08:01.090 --> 00:08:03.718
so we don't use this design,

NOTE Confidence: 0.8653126

a5211ff4-2d1d-4106-a489-605d9c99ea0b
00:08:03.720 --> 00:08:08.344
although it works, but it is not efficient.

NOTE Confidence: 0.8653126

c9f78297-ead7-4287-bcee-6bbe466508fc
00:08:08.350 --> 00:08:10.190
So here is the US.

NOTE Confidence: 0.8653126

1ed273a4-44d5-426e-b24c-6c7a1067b553
00:08:10.190 --> 00:08:13.298
I mean the problem if you change

NOTE Confidence: 0.8653126

57ae8dcc-c398-4537-a501-57da119cda9d
00:08:13.298 --> 00:08:16.897
why you have to change the circuit.

NOTE Confidence: 0.8653126

b4dfa048-7c9b-411a-9433-83d013e04ab8
00:08:16.900 --> 00:08:18.832
Another way is this.

NOTE Confidence: 0.8653126

383d9557-cb80-47cf-aead-331e2c8d7e82
00:08:18.832 --> 00:08:21.730
I use a four bit adder.

NOTE Confidence: 0.8653126

f8996196-0743-4c7f-b9b1-e710502f875c
00:08:21.730 --> 00:08:26.077
I input X in both inputs of the other.

NOTE Confidence: 0.8653126

3f9a56df-e280-4a16-9c4e-b49a0f2f2e58
00:08:26.080 --> 00:08:29.936
So basically X + X becomes 2 *

NOTE Confidence: 0.8653126

1bab45a2-2ab9-4a7d-839c-0cf50f8c86c3
00:08:29.940 --> 00:08:34.292
X and then the result is 2 * X.

NOTE Confidence: 0.8653126

e0d8e6d1-46bf-4126-b8b3-f1443d62e6d0
00:08:34.292 --> 00:08:37.666
So I attached the outputs to inputs,

NOTE Confidence: 0.8653126

86a9b83b-feda-486f-912e-b86d7c7e740b
00:08:37.670 --> 00:08:41.526
so this is the two times X one.

NOTE Confidence: 0.8653126

4d5f9d06-268b-43a9-b172-5dba0eaa8935
00:08:41.530 --> 00:08:45.058
So I attach it as you can see

NOTE Confidence: 0.8653126

3e7dfd76-535f-422d-b182-232d1fdda2d5
00:08:45.058 --> 00:08:47.410
here I bring this.

NOTE Confidence: 0.8653126

b6fb58cf-3c4a-4bd1-b6c4-cbc927666ecc
00:08:47.410 --> 00:08:49.522
Here up until here.

NOTE Confidence: 0.8653126

b52562c4-79ba-40d1-b087-b8bfb37420a8
00:08:49.522 --> 00:08:53.982
So it becomes 2 * X One plus X1,

NOTE Confidence: 0.8653126

f815c1be-c14a-44df-b9b4-58a3f01149c0
00:08:53.982 --> 00:08:56.700
which comes three times X one.

NOTE Confidence: 0.8653126

bd128a47-1cc0-4f41-8e08-08ce731cb1ed
00:08:56.700 --> 00:09:00.534
So if I attach the output of the other

NOTE Confidence: 0.8653126

4c96b779-3bb2-4519-89a1-0be0d67da6cb
00:09:00.534 --> 00:09:04.395
to the input an wait for some time,

NOTE Confidence: 0.8653126

6ba9e4dc-fd3e-45ab-ac07-55ce832ac699
00:09:04.400 --> 00:09:08.729
I see 3 * X and then after sometimes

NOTE Confidence: 0.8653126

5d7e8dea-b9b5-44f8-b62c-cb0c783b88e7
00:09:08.729 --> 00:09:13.820
I can see 4 * X An etc so bye.

NOTE Confidence: 0.8653126

34119858-a01b-4038-9a0b-c077c8c8237f
00:09:13.820 --> 00:09:14.240
Uh,

NOTE Confidence: 0.8653126

ea44f2b8-1fbb-4473-91de-bd6c5dd58e07
00:09:14.240 --> 00:09:16.760
this loop or by this feedback

NOTE Confidence: 0.8653126

74b22162-33b6-4ab6-8d4e-a59157b5133a
00:09:16.760 --> 00:09:19.230
from the output to the input,

NOTE Confidence: 0.8653126

26a03a69-cab6-4cf0-976b-7ce9f37c6bbf
00:09:19.230 --> 00:09:21.310
I can do the multiplication,

NOTE Confidence: 0.8653126

c56dfda5-9477-414b-82de-df506abae0cf
00:09:21.310 --> 00:09:24.586
But the problem is that first of all we

NOTE Confidence: 0.8653126

527e5a75-7fbd-4140-a6e8-7955e814ee66
00:09:24.586 --> 00:09:28.187
do not know how a sequential logic or

NOTE Confidence: 0.8653126

f7d876d9-1fd9-4165-ac73-ded878ac1031
00:09:28.187 --> 00:09:31.294
is circuit within feedback or with the

NOTE Confidence: 0.8653126

a2f87b31-f54c-4b48-9c94-c77fe970e8f3
00:09:31.294 --> 00:09:34.634
loop from the output to the input works.

NOTE Confidence: 0.8653126

9dd2c88f-f9fe-483f-86cc-b3513d84331f
00:09:34.634 --> 00:09:36.322
We haven't covered this

NOTE Confidence: 0.8653126

3fc098cc-f098-443d-8d77-ca71ec70e0fd
00:09:36.322 --> 00:09:38.779
topic so we cannot know how.

NOTE Confidence: 0.8653126

d41705d6-3b45-498e-9c34-98ffcb0a5cc4
00:09:38.780 --> 00:09:43.990
We do not know how this type of secret works.

NOTE Confidence: 0.8653126

06c285fe-f6a3-4d8c-a226-ee7669b2e6e6
00:09:43.990 --> 00:09:45.670
And second of all,

NOTE Confidence: 0.8653126

20cd6343-662e-4c40-874a-fff8049c2ebd
00:09:45.670 --> 00:09:48.720
you have to determine when to stop.

NOTE Confidence: 0.8653126

50362d72-83e1-41b9-a003-63bdc8057455
00:09:48.720 --> 00:09:51.730
So if you let this circuit works,

NOTE Confidence: 0.8653126

0110e9a5-459d-42af-b4e5-61ad1e50bc9f
00:09:51.730 --> 00:09:55.600
so you have to know where or when you.

NOTE Confidence: 0.8653126

6a007446-7095-49d9-8b35-854b7abfebdc
00:09:55.600 --> 00:09:58.666
I mean turn off the circuit

NOTE Confidence: 0.8653126

97a1f43e-108b-4e90-bb02-8dbe281fb896
00:09:58.666 --> 00:10:00.710
and see the result.

NOTE Confidence: 0.8653126

dcceef57-93b7-400c-87d6-e5023248b54b
00:10:00.710 --> 00:10:03.638
If you don't know when to stop it,

NOTE Confidence: 0.8653126

f4935b0d-be42-4bd1-975e-d13f44e892f2
00:10:03.640 --> 00:10:05.500
this edition actually continues forever

NOTE Confidence: 0.8653126

302d1d8a-cba1-4125-b6f4-2132a5f30807
00:10:05.500 --> 00:10:08.029
and you don't know the result is,

NOTE Confidence: 0.8653126

b0d9e753-6782-45aa-9bed-c83cd88ecf0c
00:10:08.030 --> 00:10:12.315
for instance, four times X 5 * X or etc.

NOTE Confidence: 0.8653126

168320e4-0fd3-429d-bf70-185e5c2a6c15
00:10:12.315 --> 00:10:12.890
So.

NOTE Confidence: 0.8653126

271e9d5a-dd0f-4ca0-b776-c20bae9cb29f
00:10:12.890 --> 00:10:16.340
We later if we have time,

NOTE Confidence: 0.8653126

a970cd20-9546-452d-ae1e-a17c194758dc
00:10:16.340 --> 00:10:18.590
we see we can design the

NOTE Confidence: 0.8653126

2fd97ccd-df0d-4836-a563-a9c9addda33e
00:10:18.590 --> 00:10:20.600
multiplication by this type about.

NOTE Confidence: 0.8653126

01542e52-f13d-4dad-b439-0f01952e2ab9
00:10:20.600 --> 00:10:23.640
For now this we put a question mark

NOTE Confidence: 0.8653126

9109023b-a1b0-4e9d-ac33-c698a4fc2bf4
00:10:23.640 --> 00:10:27.177
here and then we leave it to the future.

NOTE Confidence: 0.8653126

81813147-3106-4b15-9d77-3de743e93474
00:10:27.180 --> 00:10:30.006
How to design a second that

NOTE Confidence: 0.8653126

d406bff9-1d44-4249-9398-9c6b732efaf3
00:10:30.006 --> 00:10:33.458
has a feedback or from there is

NOTE Confidence: 0.8653126

1d5b25c0-3b4e-471f-864d-3a100d15cf76
00:10:33.458 --> 00:10:36.386
a link from output to input.

NOTE Confidence: 0.8653126

729a1824-15e2-493e-abb8-c37a8d347730
00:10:36.390 --> 00:10:39.974
But let's use our own knowledge so

NOTE Confidence: 0.8653126

799ae16f-d0a3-4d3f-ac5d-d5a8bd95ace1
00:10:39.974 --> 00:10:43.959
far to build a multiplier so we can

NOTE Confidence: 0.8653126

f28d30f6-80a4-4c4b-8b3b-398d6550d944
00:10:43.959 --> 00:10:48.586
see this as a design task that we do not.

NOTE Confidence: 0.8653126

3b0ad0fa-f7c6-4603-bc41-a6de7214b4d2
00:10:48.590 --> 00:10:52.006
We cannot reuse the previous digital units,

NOTE Confidence: 0.8653126

4a360c8c-0f0c-4d48-84a7-f233bde2a562
00:10:52.010 --> 00:10:55.280
so we have to design the

NOTE Confidence: 0.8653126

a92ec7c1-c825-4880-aefc-6b894e324834
00:10:55.280 --> 00:10:57.460
multiply from the scratch.

NOTE Confidence: 0.8653126

12555a86-21f6-45bd-9961-a54d84239129
00:10:57.460 --> 00:11:00.284
So, and we assume that for the simplicity,

NOTE Confidence: 0.8653126

c644d5b3-da9a-4adc-92e1-10904d6f378e
00:11:00.290 --> 00:11:02.414
we assume that we are multiplying

NOTE Confidence: 0.8653126

918f36d5-8c19-41d6-b6d0-f2dbaed9c840
00:11:02.414 --> 00:11:03.476
two unsigned numbers.

NOTE Confidence: 0.8753091

13fc111a-bdf5-4b4a-8285-16c80b0ad3b3
00:11:03.480 --> 00:11:05.958
The way we started with the other.

NOTE Confidence: 0.8753091

4a43c177-3d6b-4c12-a50e-1193209fa9c1
00:11:05.960 --> 00:11:08.424
For instance, when we add 2 numbers,

NOTE Confidence: 0.8753091

aeb8da7b-953e-409f-bb80-ef465e700518
00:11:08.430 --> 00:11:11.046
we assume that we don't have

NOTE Confidence: 0.8753091

3046023e-3e73-4212-8a47-9ca69cfea0a4
00:11:11.046 --> 00:11:14.572
any sign for the addition. So.

NOTE Confidence: 0.8753091

3fb3ae07-9d0e-4153-ac3d-3255c699a2d4
00:11:14.572 --> 00:11:19.444
If you start with the design,

NOTE Confidence: 0.8753091

6d863e49-04f5-44f5-b870-32c1f132653d
00:11:19.450 --> 00:11:23.255
so the first simple multiplication

NOTE Confidence: 0.8753091

0eed782c-90f0-4c4b-8d13-b61014780cbb
00:11:23.255 --> 00:11:26.299
would be like this.

NOTE Confidence: 0.8753091

5fa23e41-dc17-4771-99df-faeea9b76512
00:11:26.300 --> 00:11:30.108
Imagine that the first input is a.

NOTE Confidence: 0.8753091

5355b82e-5046-43d1-97c0-c07f4c695005
00:11:30.110 --> 00:11:33.900
The Xinput has four bits.

NOTE Confidence: 0.8753091

afaf4844-1f50-45ba-ae43-e7806bbb67f9
00:11:33.900 --> 00:11:36.000
And in the second number

NOTE Confidence: 0.8753091

391dea16-692d-4c7d-94c0-a08b5c345fa1
00:11:36.000 --> 00:11:38.100
we have only one bit.

NOTE Confidence: 0.8753091

6ea4c318-197a-4da2-b57a-f3a8752099e6
00:11:38.100 --> 00:11:41.880
So basically we're going to multiply X by Y,

NOTE Confidence: 0.8753091

6d49e86f-e560-40e9-bf17-34ecb583fe10
00:11:41.880 --> 00:11:46.080
but X has four bit and Y has one bit.

NOTE Confidence: 0.83860844

99808446-34f2-487b-9f9f-634668e353b3
00:11:48.150 --> 00:11:50.550
As you can see here,

NOTE Confidence: 0.83860844

0575ed10-7902-4de0-a965-bab613768d09
00:11:50.550 --> 00:11:53.896
if we are in the decimal system,

NOTE Confidence: 0.83860844

d4f34eb0-a982-46e0-8f52-821237546deb
00:11:53.900 --> 00:11:56.606
you simply multiply this digit by

NOTE Confidence: 0.83860844

f782dd98-09e3-47f5-a66d-6e8e03d4af29
00:11:56.606 --> 00:11:59.650
each digit of the first number.

NOTE Confidence: 0.86635405

4ff1da18-8b90-4e7d-9235-2a8d7c0a72d6
00:12:01.840 --> 00:12:04.318
In any base we follow the same

NOTE Confidence: 0.86635405

689c3165-3fdf-4f35-9dbf-e04e9a930ef1
00:12:04.318 --> 00:12:07.048
algorithm we are in the binary system,

NOTE Confidence: 0.86635405

016aa0f3-44f3-4166-8a14-18444eedcd55
00:12:07.050 --> 00:12:09.312
so the same algorithm But the

NOTE Confidence: 0.86635405

a02d3b47-369b-415e-91e5-1b36b1adb690
00:12:09.312 --> 00:12:11.603
main difference is that these are

NOTE Confidence: 0.86635405

e59e4ed5-a818-442a-af53-a194e4c50e1f
00:12:11.603 --> 00:12:13.733
the binary digits zero or one.

NOTE Confidence: 0.86635405

86cf5215-3eab-4c23-8dfe-f8b542b599c3
00:12:13.740 --> 00:12:15.600
And here is the result.

NOTE Confidence: 0.86635405

6ff4f37a-71bf-41ce-a76c-386379cf129b
00:12:15.600 --> 00:12:19.344
So why 1 * X One becomes M1?

NOTE Confidence: 0.86635405

9cbcb2da-8158-4998-8134-e258a64b130f
00:12:19.350 --> 00:12:24.030
Why one was supplied by X2M2 up until Y 1

NOTE Confidence: 0.86635405

ed185e90-e86e-4014-ab02-e1993b465591
00:12:24.146 --> 00:12:27.820
* X Four which becomes M4 in any basis,

NOTE Confidence: 0.86635405

ac071be9-01df-4fac-85a3-3c31410e7ae9
00:12:27.820 --> 00:12:29.206
any radix spaces.

NOTE Confidence: 0.86635405

d137d7e6-56c0-4e10-9dbd-8800b9ce12e1
00:12:29.206 --> 00:12:32.440
But here in the binary system these

NOTE Confidence: 0.86635405

2ec850e8-aaf0-4631-814f-a6b4247e2128
00:12:32.531 --> 00:12:35.408
are only the zero and one digits,

NOTE Confidence: 0.86635405

d44cb281-a194-431b-a5a3-6c3abf56aeda
00:12:35.410 --> 00:12:40.170
so this is the design problem, we can't.

NOTE Confidence: 0.86635405

3575555a-573d-491f-80a1-1488d0ec75e4
00:12:40.170 --> 00:12:45.678
From the truth table we put Y one here.

NOTE Confidence: 0.86635405

95741c6c-8c95-490c-bd26-63ca169664f0
00:12:45.680 --> 00:12:51.053
X1X2 up until X4 here an in the output.

NOTE Confidence: 0.86635405

0b947b01-d259-43e9-af16-5dc827d488e5
00:12:51.060 --> 00:12:54.050
We have four output functions,

NOTE Confidence: 0.86635405

9211d72a-8b30-4396-91f9-ee835be9ecf2
00:12:54.050 --> 00:13:00.630
so we put M1 here and two here up until four,

NOTE Confidence: 0.86635405

ff19e105-81a7-49f4-8eb8-04f92016fcdd
00:13:00.630 --> 00:13:06.070
and then we fill out all the rows and design

NOTE Confidence: 0.86635405

353633d0-88ad-4d02-9ae7-43b296c9ea51
00:13:06.196 --> 00:13:11.388
each ASOP or PUS for each output function.

NOTE Confidence: 0.86635405

7d9a1337-8fe3-4b7e-b9ba-2322df50ebbe
00:13:11.390 --> 00:13:14.890
An simplify that, etc.

NOTE Confidence: 0.86635405

25e475d6-fae9-48d1-92af-fcb78ae491fe
00:13:14.890 --> 00:13:19.074
If you do that, you'll see that for

NOTE Confidence: 0.86635405

9d075077-f99e-4ceb-9c2b-33d1f56bc655
00:13:19.074 --> 00:13:23.020
this design problem it's very simple.

NOTE Confidence: 0.86635405

23c2a699-cc53-4eff-b80d-aa53bcfbf90b
00:13:23.020 --> 00:13:27.824
Becaused if you do this at a

NOTE Confidence: 0.86635405

459e58fd-549b-43e2-9391-3dc3874f84b8
00:13:27.824 --> 00:13:29.680
multiplication in binary system,

NOTE Confidence: 0.86635405

54483114-e722-4495-9ffd-bb89881fc329
00:13:29.680 --> 00:13:33.752
why one multiply by X one is exactly

NOTE Confidence: 0.86635405

e26b6321-4beb-4a1d-bde0-50f7a3681ec0
00:13:33.752 --> 00:13:38.167
the same as applying the and operator.

NOTE Confidence: 0.86635405

2e40818b-6d46-4ff9-83e7-e7c910ee2b80
00:13:38.170 --> 00:13:41.652
So if X is zero, Y is zero,

NOTE Confidence: 0.86635405

e1eb94ab-bd5d-4545-9bc2-2dd150cf50f2
00:13:41.652 --> 00:13:45.565
0 * 0 becomes zero if X is 1,

NOTE Confidence: 0.86635405

cef14b88-6a04-4242-9c9a-f40eea545e0a
00:13:45.570 --> 00:13:49.690
why is 1 multiplied by then becomes 0?

NOTE Confidence: 0.86635405

8f180859-d7d8-4e65-b105-cea452384614
00:13:49.690 --> 00:13:53.378
If LX is 0X10 Y one is 1,

NOTE Confidence: 0.86635405

1c168860-2d8a-4c43-a541-a1114e7a0034
00:13:53.380 --> 00:13:56.607
result is 0 if both are one,

NOTE Confidence: 0.86635405

1f83593c-b2d2-41ab-a8bb-e989272d05d6
00:13:56.610 --> 00:13:58.270
the result is 1.

NOTE Confidence: 0.86635405

ced3193b-31fb-41ac-87e3-ded0eabeae6d
00:13:58.270 --> 00:14:01.269
So you see that the multiplication acts

NOTE Confidence: 0.86635405

c651f05f-c24d-47f3-be4d-7c0017848d9d
00:14:01.269 --> 00:14:04.258
very similar to and in binary system.

NOTE Confidence: 0.86635405

7dd31abd-3c71-413d-8cd9-ed1daca1452e
00:14:04.260 --> 00:14:06.130
So basically the first output

NOTE Confidence: 0.86635405

97322d5d-8585-49c6-be17-46d7d110fd08
00:14:06.130 --> 00:14:08.660
for the M1 is X1 and Y1.

NOTE Confidence: 0.86635405

5cb1329b-a62b-443a-96a0-a859c0cacb74
00:14:08.660 --> 00:14:12.330
You can see this by the truth table as well,

NOTE Confidence: 0.86635405

222e80dd-f7d3-40dc-bb8e-42f57ac3bf1c
00:14:12.330 --> 00:14:15.754
but if I mean if you just calculate

NOTE Confidence: 0.86635405

e51575c3-73a5-4844-80c9-e2e043d517df
00:14:15.754 --> 00:14:18.756
that in your I mean your mind

NOTE Confidence: 0.86635405

811ec18c-4a04-47db-a9e7-36fb0fc00ba5
00:14:18.756 --> 00:14:21.999
you end up with the same thing.

NOTE Confidence: 0.86635405

c48ffed4-cd97-49dc-8360-c4c5a27f1d90
00:14:22.000 --> 00:14:23.892
For the second output,

NOTE Confidence: 0.86635405

bea6e097-bd8b-4f39-bf01-eae0c8446b1e
00:14:23.892 --> 00:14:28.124
is always equal to Y 1 * X Two,

NOTE Confidence: 0.86635405

dbc1b55b-a3b0-44a4-82d0-779145df8164
00:14:28.124 --> 00:14:31.084
which is Y1 and X2.

NOTE Confidence: 0.86635405

038ff50d-eb82-4144-8d90-fe129507ea55
00:14:31.090 --> 00:14:31.509
Again,

NOTE Confidence: 0.86635405

ac7244cb-39a6-48ed-8e04-83f29e3b25fe
00:14:31.509 --> 00:14:34.861
by using the truth table you end up

NOTE Confidence: 0.86635405

28dd64fa-1a78-408c-a5b5-5dbb65c7af9c
00:14:34.861 --> 00:14:38.320
with the same Boolean function for M2.

NOTE Confidence: 0.86635405

958ea114-b0a0-4ff3-8543-8c0a14259948
00:14:38.320 --> 00:14:40.948
I'm free and then am 4,

NOTE Confidence: 0.86635405

9258d2ae-5d08-404b-9123-4a072d272022
00:14:40.950 --> 00:14:44.009
so basically end of the second number,

NOTE Confidence: 0.86635405

543f653f-634e-4acb-979d-f1a784056661
00:14:44.010 --> 00:14:46.105
the digital second number with

NOTE Confidence: 0.86635405

dd44846e-3388-4926-9b07-62b3bc4a7c29
00:14:46.105 --> 00:14:48.830
each digit of the first number.

NOTE Confidence: 0.78167474

3ce7eb3c-1c82-4667-8843-e3e2608f3f2a
00:14:50.870 --> 00:14:53.817
So an. Finally, if you design this,

NOTE Confidence: 0.78167474

c6acc591-6d6b-4b5f-baf1-17c93ac47adb
00:14:53.820 --> 00:14:56.760
you see that each output function

NOTE Confidence: 0.78167474

768973c1-3a8b-4fcb-901c-5e6e2e7b1ed7
00:14:56.760 --> 00:15:00.786
is the end of the each digit with

NOTE Confidence: 0.78167474

6855ba0c-9f38-4102-84b6-e11eb466ef32
00:15:00.786 --> 00:15:04.040
the the single digit of the Y.

NOTE Confidence: 0.78167474

405560ff-7403-475c-9535-bb108d58da22
00:15:04.040 --> 00:15:07.226
And here is the design so.

NOTE Confidence: 0.78167474

a854d5ed-8fd7-4d34-869a-b55fee887584
00:15:07.230 --> 00:15:10.429
X1 and Y1. This is the output

NOTE Confidence: 0.78167474

6b9492d3-bd65-47ee-8d9a-177412cda3cc
00:15:10.429 --> 00:15:13.627
function X2 and with Y1M2 an etc.

NOTE Confidence: 0.78167474

d9e71f7c-bbec-49fb-97d9-f6258cdc56b3
00:15:13.630 --> 00:15:15.602
So basically this circuit.

NOTE Confidence: 0.78167474

923e67e8-822a-417b-8b8e-93291fcefd32
00:15:15.602 --> 00:15:19.689
You can put it in the black box.

NOTE Confidence: 0.78167474

74415a85-d312-4663-85f5-d900f8d189f2
00:15:19.690 --> 00:15:24.410
And you can call it a 1 bit.

NOTE Confidence: 0.78167474

fa71870a-cac7-465f-860b-0caa16452d60
00:15:24.410 --> 00:15:27.510
Multiply by 4 bit multiplier,

NOTE Confidence: 0.78167474

18986b41-977a-478d-b212-55da7f0011ee
00:15:27.510 --> 00:15:31.818
so these are the inputs X1.

NOTE Confidence: 0.78167474

c58f6baa-5d50-4e5a-9441-da5bc36a4a7e
00:15:31.820 --> 00:15:35.720
X2. X3 and X4.

NOTE Confidence: 0.89487803

5c031e70-1228-4509-b66c-969d41d1c029
00:15:38.570 --> 00:15:41.922
It's going to be attached to this and

NOTE Confidence: 0.89487803

6e8ae8c7-763f-4bc5-b7f7-021f8fb9ef2f
00:15:41.922 --> 00:15:45.654
you can go to the market and buy this.

NOTE Confidence: 0.89487803

f74b9590-470c-4b82-a410-15428e5797d1
00:15:45.660 --> 00:15:49.089
But it's very simple, it only it is only

NOTE Confidence: 0.89487803

96e73a7b-1d1b-44c4-93a9-f165176ad229
00:15:49.089 --> 00:15:52.412
able to multiply a given number with

NOTE Confidence: 0.89487803

05fc9f7a-2d23-4125-8b8b-7ab3d3a14c22
00:15:52.412 --> 00:15:55.498
another number which has only one bit.

NOTE Confidence: 0.89487803

c6080b58-c95f-4b2b-8015-c720cb10a5a8
00:15:55.500 --> 00:15:57.640
This is only one bit.

NOTE Confidence: 0.89487803

2c43dfa9-4844-448e-86f6-d9638e1a0a17
00:15:57.640 --> 00:16:02.820
So what if I expand this to have two bits?

NOTE Confidence: 0.89487803

bcfe82db-d45f-4bd3-8f08-520055e513c5
00:16:02.820 --> 00:16:06.690
So now I want to multiply X which has four

NOTE Confidence: 0.89487803

71987e6d-be3b-487c-a864-6c35eb7a7c3c
00:16:06.786 --> 00:16:10.658
bits with another number which has 2 bits.

NOTE Confidence: 0.89487803

1e5dc24d-5c2c-48ec-b049-a26676ad44a9
00:16:10.660 --> 00:16:12.910
So very similar to the decimal

NOTE Confidence: 0.89487803

0cff34fb-21a5-4a46-93fc-d5c13833ff9c
00:16:12.910 --> 00:16:15.868
algorithm we do in the higher school.

NOTE Confidence: 0.89487803

73e57887-a726-49f0-bf32-a2c68e7fbb4a
00:16:15.870 --> 00:16:19.227
So we start with the 1st digit of the

NOTE Confidence: 0.89487803

0504b9a0-0365-4a42-b94f-331d63b6e24f
00:16:19.227 --> 00:16:22.060
second number, multiply this digit with

NOTE Confidence: 0.89487803

49c75e1c-03cc-436c-9f51-5598684fd630
00:16:22.060 --> 00:16:25.420
all the digits of the first number.

NOTE Confidence: 0.89487803

a06ef0c1-870b-4d52-bfb4-0db147344add
00:16:25.420 --> 00:16:28.210
So this is exactly the previous

NOTE Confidence: 0.89487803

e51ee6b7-e69b-4009-b9ff-d0964bc27839
00:16:28.210 --> 00:16:30.705
multiplication, but when we move to

NOTE Confidence: 0.89487803

8c04d20a-2ad8-4915-8345-1c18258cc763
00:16:30.705 --> 00:16:34.260
the 2nd digit of the second number,

NOTE Confidence: 0.89487803

838d2fb3-9010-4203-8051-6e6e17a6d53e
00:16:34.260 --> 00:16:38.509
we do a shift to the left.

NOTE Confidence: 0.89487803

e6cd4704-6239-41fa-855a-e5a563d79534
00:16:38.510 --> 00:16:41.016
This is exactly the algorithm we'd know

NOTE Confidence: 0.89487803

5ea3339e-9d0d-4c9a-bb1c-30d0abd6b764
00:16:41.016 --> 00:16:44.138
in the high school we shift to the left,

NOTE Confidence: 0.89487803

975fa4b4-915a-45a0-8bb8-a0d81e3e30c0
00:16:44.140 --> 00:16:45.900
and we put here zero,

NOTE Confidence: 0.89487803

596f8b11-a385-4f59-b966-e45d98bb033c
00:16:45.900 --> 00:16:47.886
and then we multiply the 2nd

NOTE Confidence: 0.89487803

5511bbda-fad5-4507-afd9-0e0df6ba1180
00:16:47.886 --> 00:16:49.770
digit of the second number,

NOTE Confidence: 0.89487803

e70bf026-bfd6-4185-a7cc-34c2f50ba9be
00:16:49.770 --> 00:16:53.718
which each digit of the first number.

NOTE Confidence: 0.89487803

ce47dbc2-6582-4696-bf69-cb60722d9aa1
00:16:53.720 --> 00:16:56.984
Very similar to the.

NOTE Confidence: 0.89487803

eabf2e02-3feb-49f9-9722-7e69986b1b49
00:16:56.984 --> 00:16:58.616
Decimal system.

NOTE Confidence: 0.89487803

5475564e-1be5-4960-b19a-f05a7445273d
00:16:58.620 --> 00:17:01.771
So this these N 1 N 2 N 3 and four

NOTE Confidence: 0.89487803

f6870553-2cc6-497e-b3e4-2c2bcb6a8e52
00:17:01.771 --> 00:17:04.855
are the multiplication of the digit,

NOTE Confidence: 0.89487803

2b50d3a1-6cee-4dfd-b087-bb326ac3a617
00:17:04.860 --> 00:17:07.954
the 2nd digit of the second number

NOTE Confidence: 0.89487803

49fab0c3-ccc2-4415-93f9-266c0d4987a3
00:17:07.954 --> 00:17:11.217
to all digits of the first number.

NOTE Confidence: 0.89487803

1060a26a-0db9-4db7-8e44-5251d5230827
00:17:11.220 --> 00:17:14.430
And then what you do next?

NOTE Confidence: 0.89487803

c07966e7-b525-40ba-a37f-d60586431ec6
00:17:14.430 --> 00:17:15.840
You some?

NOTE Confidence: 0.89487803

74d5c7a3-68a8-4ba9-a811-81cac9e41ea0
00:17:15.840 --> 00:17:17.250
These two.

NOTE Confidence: 0.919613313333333

a5f737a2-5402-4314-86fe-550d8c7a4667
00:17:21.060 --> 00:17:23.520
So. The first

NOTE Confidence: 0.7921636

481cd67b-5ec6-42bc-9fbb-a1a0edc58e16
00:17:26.250 --> 00:17:28.420
result from the first column,

NOTE Confidence: 0.7921636

b9eb8d56-d8a5-4de7-9390-2d0d7d2286df
00:17:28.420 --> 00:17:31.220
as you can see here.

NOTE Confidence: 0.7921636

b0f5da6b-aafb-46ba-903a-2ec6600b6081
00:17:31.220 --> 00:17:34.334
M 1 + 0 so because we do it

NOTE Confidence: 0.7921636

f8ac5ce9-33be-4dd1-baf7-d8332b7ff956
00:17:34.334 --> 00:17:36.678
shift for the 2nd digit.

NOTE Confidence: 0.7921636

274c6179-e930-4943-9449-965b03f1a686
00:17:36.680 --> 00:17:39.480
So always this is 0 so anything added

NOTE Confidence: 0.7921636

18dbb571-e3e2-4ab7-b61c-82cda497cfa4
00:17:39.480 --> 00:17:42.631
with zero is itself because the zero is

NOTE Confidence: 0.7921636

bd88ca81-fe1d-47d4-b05d-1e375ae4b17c
00:17:42.631 --> 00:17:45.260
the identity element of the addition.

NOTE Confidence: 0.7921636

625c85a9-f2c8-482a-af2d-280aaf1a4088
00:17:45.260 --> 00:17:48.914
So this is exactly equal to M1.

NOTE Confidence: 0.7921636

e94760a3-f009-45e1-8f08-cbc2cd443f58
00:17:48.920 --> 00:17:51.601
So there is no need for do

NOTE Confidence: 0.7921636

be3e7aa8-8c78-45fd-82ef-c072ff602795
00:17:51.601 --> 00:17:53.610
addition for doing addition.

NOTE Confidence: 0.7921636

a2cceabe-25ff-425a-a7fd-d3ab27bd5676
00:17:53.610 --> 00:17:55.735
However, we have to do

NOTE Confidence: 0.7921636

2ddc3186-4869-4b7b-a28c-f796594c99b2
00:17:55.735 --> 00:17:57.435
addition for this part.

NOTE Confidence: 0.8678923

2b0276ec-efbf-4a68-a000-59136d3c6c60
00:17:59.940 --> 00:18:03.770
M2 plus N1M3 plus N2 an 4 + N three

NOTE Confidence: 0.8678923

64aba961-73f1-44fc-b778-2d559fe72327
00:18:03.879 --> 00:18:07.484
which may end with a number here.

NOTE Confidence: 0.8678923

278bc6ae-523f-4c62-9569-a88317f0e650
00:18:07.490 --> 00:18:10.930
 And Carry goes here. 

NOTE Confidence: 0.8678923

b2db6dae-2235-481d-bacd-d6dea8c09cfc
00:18:10.930 --> 00:18:13.070
 And this carry 

NOTE Confidence: 0.8678923

e8b8c551-a468-4bc2-b62a-945c285e9a32
00:18:13.070 --> 00:18:14.774
Call it for instance,

NOTE Confidence: 0.8678923

0a0cd286-019e-49f8-90bb-cf67fead77e7
00:18:14.774 --> 00:18:16.478
carry from this number.

NOTE Confidence: 0.8678923

82f57c49-8803-4998-8521-dde3a8a75f96
00:18:16.480 --> 00:18:20.036
This addition to here plus zero here.

NOTE Confidence: 0.8678923

25cb1b45-cfc5-439d-aaad-96152ceed795
00:18:20.040 --> 00:18:23.556
Plus N 4 becomes the second,

NOTE Confidence: 0.8678923

2e0d1299-3e6a-4528-b645-e1a1a09c531e
00:18:23.560 --> 00:18:28.660
the last digit of the multiplication.

NOTE Confidence: 0.8678923

261bb811-e7b1-4103-9f5e-955d37bf29a6
00:18:28.660 --> 00:18:33.497
So. The first column is very simple,

NOTE Confidence: 0.8678923

2189dbbe-1ef1-4063-9d2b-4af59b7229bd
00:18:33.500 --> 00:18:38.116
but how we can do the this edition?

NOTE Confidence: 0.8678923

610523a2-3958-4ce5-a831-fdcb0f72b0a7
00:18:38.120 --> 00:18:40.610
We already know how to do

NOTE Confidence: 0.8678923

ffe57ae9-72a8-4295-b3e2-e6c91562c172
00:18:40.610 --> 00:18:43.050
addition for four bits numbers,

NOTE Confidence: 0.8678923

b95e7119-b433-4d30-9406-56d6c2b68770
00:18:43.050 --> 00:18:47.980
so here we have M2M3M4N A 04 bits N 1 N,

NOTE Confidence: 0.8678923

681f0b60-a8fd-4726-a29f-e1b9e118bc5a
00:18:47.980 --> 00:18:51.109
2 N 3 and F4 four bit.

NOTE Confidence: 0.8678923

0f7e3580-fe39-4c17-9c18-47d86b315bf0
00:18:51.110 --> 00:18:54.582
So we can you reuse the four bit

NOTE Confidence: 0.8678923

214a7c76-2193-457f-aaa0-433fc5f8d7b4
00:18:54.582 --> 00:18:58.527
adder to do this addition instead of.

NOTE Confidence: 0.8678923

9210dbb8-0c3a-4108-ad32-269fc8401eff
00:18:58.530 --> 00:19:01.428
At designing this by Truth Table,

NOTE Confidence: 0.8678923

7fee5eef-8007-4a22-9c18-1f1f8cdd3871
00:19:01.430 --> 00:19:03.908
which may have.

NOTE Confidence: 0.8678923

1629b028-a518-4c35-b336-f961abb51d9b
00:19:03.910 --> 00:19:07.861
X1 X 2X4 and then Y1Y2 and then put

NOTE Confidence: 0.8678923

96ee04de-f185-454c-a8ee-0d67bf6633a2
00:19:07.861 --> 00:19:11.405
all the output functions here and

NOTE Confidence: 0.8678923

f5c4380c-3359-43e8-b8e4-a550ee6024c8
00:19:11.405 --> 00:19:15.410
then design it from the scratch.

NOTE Confidence: 0.8678923

3c02f01d-8a94-4f8c-a952-b46aa38cde32
00:19:15.410 --> 00:19:16.110
So.

NOTE Confidence: 0.8513435

9d2355fc-498d-4aa2-a270-b83b51672dd2
00:19:18.350 --> 00:19:20.542
Here is the algorithm.

NOTE Confidence: 0.8513435

7ce5e830-5da0-4f2d-8b8a-222dd025403f
00:19:20.542 --> 00:19:23.282
So basically the first digits

NOTE Confidence: 0.8513435

f2ea57de-b1b4-4f12-8507-100d253e768d
00:19:23.282 --> 00:19:25.628
gonna be the same as Y1.

NOTE Confidence: 0.8513435

fcb93c28-e590-4506-a0f6-9fd87636feaf
00:19:25.630 --> 00:19:27.506
Multiply by X one,

NOTE Confidence: 0.8513435

e1a21a43-efcb-44c5-9cdf-270064a9a66e
00:19:27.506 --> 00:19:29.851
but for the other outputs

NOTE Confidence: 0.8513435

278da7f8-a660-4300-86a8-a07c9c1d9510
00:19:29.851 --> 00:19:32.419
we need to do addition.

NOTE Confidence: 0.8513435

5c000182-3a8c-4655-8a14-bc596b057eae
00:19:32.420 --> 00:19:35.270
This is exactly the same as

NOTE Confidence: 0.8513435

68e041fb-e4a0-4bf9-9256-78e24c317cec
00:19:35.270 --> 00:19:37.750
the addition with four bits.

NOTE Confidence: 0.9156324

45eff948-a3e2-4e59-9162-caeac9bb8c10
00:19:40.830 --> 00:19:44.460
And here is the design.

NOTE Confidence: 0.9156324

d53452ad-470a-48ea-aa15-fb58f04df38e
00:19:44.460 --> 00:19:47.889
So basically we have why want in the I

NOTE Confidence: 0.9156324

4b7aa90b-827b-47e4-b54e-e6f8818e5152
00:19:47.889 --> 00:19:51.133
mean top right side Y one the 1st digit

NOTE Confidence: 0.9156324

ee5e4fa3-5c27-44cf-9014-19322d8d4e07
00:19:51.133 --> 00:19:55.015
Y to the 2nd digit of the second number.

NOTE Confidence: 0.9156324

d7d96497-af7f-453b-ba3e-f3c656430c98
00:19:55.020 --> 00:19:57.360
So this is the 2nd digit,

NOTE Confidence: 0.9156324

e5d97af7-406e-4294-8764-3da7357ae5c6
00:19:57.360 --> 00:20:00.174
the second number and we have X.

NOTE Confidence: 0.9156324

af3f68d3-3988-4d7b-a10e-54937d7a9091
00:20:00.180 --> 00:20:04.990
Swan in the first number.

NOTE Confidence: 0.9156324

d86b2b9a-3cf7-4f5c-8add-2d1debf52c45
00:20:04.990 --> 00:20:07.876
So why one multiply by each

NOTE Confidence: 0.9156324

26420fef-6c49-493f-969e-58abbcf3be9f
00:20:07.876 --> 00:20:10.640
digit of the first number?

NOTE Confidence: 0.9156324

293b5c78-63d8-4693-a8bf-3209a0a2f7c6
00:20:10.640 --> 00:20:13.314
And one and two and three and

NOTE Confidence: 0.9156324

b9f3290f-263d-4460-9494-743dee306341
00:20:13.314 --> 00:20:16.239
four M1 gonna be added with zero,

NOTE Confidence: 0.9156324

7f332f26-2f16-4d65-8ee0-02e34197ae8e
00:20:16.240 --> 00:20:18.240
which doesn't have any impacts.

NOTE Confidence: 0.9156324

00fc0863-e748-41c6-a406-0bf4ea739c57
00:20:18.240 --> 00:20:21.040
Or we can simply output N1 directly,

NOTE Confidence: 0.9156324

84366a0a-8834-4446-82f8-bcc3b5b0196d
00:20:21.040 --> 00:20:23.994
so the 1st digit of the result

NOTE Confidence: 0.9156324

188f3614-2a79-479e-afcd-289a1de323ce
00:20:23.994 --> 00:20:26.270
gonna be M1 directly.

NOTE Confidence: 0.9156324

3684054f-6afc-4b0b-ad92-b25da36135e4
00:20:26.270 --> 00:20:28.760
However, for other outputs we have

NOTE Confidence: 0.9156324

5eaae276-f5ff-481d-9636-cfd9c7a696d4
00:20:28.760 --> 00:20:32.506
to do why 1 multiplied by each digit

NOTE Confidence: 0.9156324

f03cabea-fd1a-4392-a4de-30afd02cd72b
00:20:32.506 --> 00:20:35.850
of the first number X1X2X3 and X4,

NOTE Confidence: 0.9156324

6a9bed4f-d2cb-400e-8c67-58d0201abe3b
00:20:35.850 --> 00:20:39.217
and then the result which are N1

NOTE Confidence: 0.9156324

9bbcddc4-6407-4cba-aabb-b0992cf286fc
00:20:39.217 --> 00:20:43.466
and two up until M4 added with the.

NOTE Confidence: 0.9156324

da18835e-7f39-4bc8-9cc0-7d028cd9c2fe
00:20:43.470 --> 00:20:45.798
And two and three and four.

NOTE Confidence: 0.9156324

7e3c90dd-c096-4ca6-8b04-6b09fc2a53db
00:20:45.800 --> 00:20:49.690
And we can assume that there is a zero here.

NOTE Confidence: 0.9156324

b4b74a5b-aa26-4bc7-93bf-cccc36757853
00:20:49.690 --> 00:20:52.030
So as I can see here.

NOTE Confidence: 0.9156324

9fe0ec36-687c-443f-a5c6-9d80907a2f80
00:20:52.030 --> 00:20:54.136
So the result of the first

NOTE Confidence: 0.9156324

1d12593d-1436-4bdd-8ef6-d233c9525a07
00:20:54.136 --> 00:20:55.540
multiplication added with the

NOTE Confidence: 0.9156324

50360590-13a0-4bf1-9c7f-9d04cd990952
00:20:55.603 --> 00:20:57.858
result of the second multiplication.

NOTE Confidence: 0.9156324

f0bf185e-8a8b-48ae-bc21-09ea56484f7a
00:20:57.860 --> 00:21:01.750
And here is the result by using 4 bit adder.

NOTE Confidence: 0.89855194

be78d28e-d8c0-4337-819f-bdb2b2722797
00:21:04.490 --> 00:21:08.009
Now we are able to multiply a four bit

NOTE Confidence: 0.89855194

7a5d449b-e495-4772-9279-771b6cdb4da4
00:21:08.009 --> 00:21:11.020
number with another two bit numbers.

NOTE Confidence: 0.89855194

121b32fc-8345-442d-8801-e5ae7299e716
00:21:11.020 --> 00:21:14.724
So my question is that if we extend

NOTE Confidence: 0.89855194

1b026fc9-23f6-4218-a52a-36e0ec88d3ce
00:21:14.724 --> 00:21:18.516
this to have a multiplier that has

NOTE Confidence: 0.89855194

f409fd66-44d9-4962-aefc-42a76c719ed0
00:21:18.516 --> 00:21:22.130
three bits in the second number.

NOTE Confidence: 0.89855194

ed76c02e-399e-4df8-b27c-d3990358bb29
00:21:22.130 --> 00:21:27.366
So if I add a Y-3. What happens?

NOTE Confidence: 0.89855194

d5e22279-c6f8-49ab-9a2f-ea31cab9f207
00:21:27.366 --> 00:21:30.782
Anybody has any idea what changes I

NOTE Confidence: 0.89855194

77b7a56a-357b-44ef-b5ff-2c50761a4a7f
00:21:30.782 --> 00:21:35.193
have to do in the in this design to

NOTE Confidence: 0.89855194

6df1b1f2-238a-4ad7-b82e-b2116f4aee9b
00:21:35.193 --> 00:21:37.514
support multiplication of X which

NOTE Confidence: 0.89855194

55b2119b-5454-479b-890f-b1dd63aa5c0a
00:21:37.514 --> 00:21:40.482
has four bits with the second number

NOTE Confidence: 0.89855194

581b8393-2f7a-468a-a9e6-5cf4b3f5a51e
00:21:40.490 --> 00:21:44.610
with which has three bits? Any idea?

NOTE Confidence: 0.7598475

b0828252-2165-4350-bb74-26343a3e7e26
00:21:52.030 --> 00:21:54.940
Exactly, Nick correctly says that.

NOTE Confidence: 0.7598475

0de6ad5e-d37e-4c91-aaef-0cbc767453f1
00:21:54.940 --> 00:21:58.760
So basically for free bit.

NOTE Confidence: 0.7598475

8c93b6c3-d48d-413c-9f80-0880f4dc1901
00:21:58.760 --> 00:22:00.032
The first 2 multiplications

NOTE Confidence: 0.7598475

2ecd2075-91a2-47e9-9e54-069f99c72898
00:22:00.032 --> 00:22:01.304
are exactly the same.

NOTE Confidence: 0.7598475

f226c34a-4f77-42d1-bbed-ff2ddaec1586
00:22:01.310 --> 00:22:04.019
The only thing is that we have to support

NOTE Confidence: 0.7598475

642c3f06-ee8b-4fdb-93bb-da1f35bc33ae
00:22:04.019 --> 00:22:06.810
the multiplication of this third number.

NOTE Confidence: 0.7598475

0dbb9bab-14f8-40ac-9b35-8debce43d43b
00:22:06.810 --> 00:22:09.426
The 3rd third number multiply by each digit,

NOTE Confidence: 0.7598475

eae9032f-746c-4171-9ad5-136ef28130d8
00:22:09.430 --> 00:22:12.760
but we have to do.

NOTE Confidence: 0.7598475

b3b49143-33ff-4a79-8e3c-b107fe035cfd
00:22:12.760 --> 00:22:16.099
Two shifts because this is for the first one,

NOTE Confidence: 0.7598475

607baf20-77db-4836-8902-c0df82787b44
00:22:16.100 --> 00:22:17.078
second one an.

NOTE Confidence: 0.7598475

22caf5b6-471c-4f7a-85f6-a4b55a5a9a09
00:22:17.078 --> 00:22:19.034
Now we have to start from

NOTE Confidence: 0.7598475

464d8113-013c-4789-9d75-ceb548844391
00:22:19.034 --> 00:22:20.919
the third position here,

NOTE Confidence: 0.7598475

2ff1a361-2842-4c75-8f45-ae604c03ee09
00:22:20.920 --> 00:22:23.521
so we have to shift to two times to

NOTE Confidence: 0.7598475

b49e6d38-4acf-488e-ab58-bee1a04fdc54
00:22:23.521 --> 00:22:26.486
the left and then start multiplication.

NOTE Confidence: 0.9187055

b673beca-ae05-40fa-89cf-e04986e25ad7
00:22:28.530 --> 00:22:32.032
So as you can see here, we already

NOTE Confidence: 0.9187055

f1125e10-48e0-404b-8bd2-47446c3c4942
00:22:32.032 --> 00:22:36.134
have the result of the these two.

NOTE Confidence: 0.9187055

1edaf662-205c-4eab-b8a2-d0545a36d1cf
00:22:36.140 --> 00:22:39.030
Uh, addition.

NOTE Confidence: 0.9187055

5db22c21-df34-488e-b589-f27919cded98
00:22:39.030 --> 00:22:41.560
By applying the previous circuit.

NOTE Confidence: 0.9187055

679ef321-e7a5-46b0-bd18-4621219d5b48
00:22:41.560 --> 00:22:45.228
So now the only thing remains is

NOTE Confidence: 0.9187055

8f589b63-0bdd-43ca-b004-914a1aedfe4d
00:22:45.228 --> 00:22:49.419
that I have to add another adder.

NOTE Confidence: 0.9187055

d012fe58-5173-47e3-a6db-852d04dba602
00:22:49.420 --> 00:22:51.910
And then apply the multiplication

NOTE Confidence: 0.9187055

11985db8-9031-4f0a-959f-be94ea9e7dd7
00:22:51.910 --> 00:22:55.238
 of with each digit of the 

NOTE Confidence: 0.9187055

86b473c7-ad66-4e7c-95fd-a8f11fe9d00b
00:22:55.238 --> 00:22:57.842
first number and then add them to

NOTE Confidence: 0.9187055

7e6be812-cb73-4c21-b391-9e8a83514332
00:22:57.842 --> 00:23:00.919
the result of the previous circuit.

NOTE Confidence: 0.9187055

870eaf28-4f63-4629-b503-9b76f083156f
00:23:00.920 --> 00:23:04.096
So as a result we have N1 again,

NOTE Confidence: 0.9187055

9583bbe0-4a0c-4635-beb5-f5ecba72b392
00:23:04.100 --> 00:23:07.390
N1 is exactly the same.

NOTE Confidence: 0.9187055

cfbba1f7-db59-40ca-a5d4-92e713b6fa5e
00:23:07.390 --> 00:23:11.000
S1 which is the result of the M2 and N1,

NOTE Confidence: 0.9187055

a192aa23-7610-4956-b75a-283777d2934e
00:23:11.000 --> 00:23:13.527
goes directly to the output this time,

NOTE Confidence: 0.9187055

2693206b-fce9-4ba6-ae1b-d484e1bbefd0
00:23:13.530 --> 00:23:15.950
and then the other parts.

NOTE Confidence: 0.9187055

f5afeea9-e876-4e50-8a45-e97ef478b427
00:23:15.950 --> 00:23:19.160
Is another 4 bit adder.

NOTE Confidence: 0.89631844

4490b8bc-405f-40d3-9298-35476faa51a4
00:23:21.290 --> 00:23:23.250
And here is the design.

NOTE Confidence: 0.89631844

62939787-70a3-401a-8f2c-2f5251ad7bc6
00:23:23.250 --> 00:23:26.022
So in the right side we

NOTE Confidence: 0.89631844

78036faa-adb3-4e4d-999b-a8a4adadfc1f
00:23:26.022 --> 00:23:27.870
have the second number.

NOTE Confidence: 0.89631844

36de08b3-0bc0-478f-9da4-4390d1f063c3
00:23:27.870 --> 00:23:31.350
 In the role wise, we have the x

NOTE Confidence: 0.89631844

d5e74a36-da26-4417-973c-eb9857ced4a7
00:23:31.350 --> 00:23:34.560
So X1 multiply by X.

NOTE Confidence: 0.89631844

0e54d135-3f3d-42d5-8351-3c52840e49a3
00:23:34.560 --> 00:23:37.530
And then the result Y 2

NOTE Confidence: 0.89631844

584919bd-c11d-48b4-9bb8-4533b68f2c1f
00:23:37.530 --> 00:23:40.510
* X added with them here.

NOTE Confidence: 0.93138814

81fab0cd-7f1b-4678-be0d-029e6fffba6b
00:23:43.770 --> 00:23:46.498
And then the result.

NOTE Confidence: 0.93138814

3b096e22-e89c-4f3c-a68b-f6c8851036a1
00:23:46.500 --> 00:23:48.332
Added with the multiplication.

NOTE Confidence: 0.93138814

eaa4cede-d69c-4b3c-bbde-265f8a5dc6db
00:23:48.332 --> 00:23:52.477
Why free with the X which is P1P2 and etc.

NOTE Confidence: 0.86645025

a68e126e-9b15-48f6-a781-cb95892c8ed1
00:23:54.720 --> 00:23:57.520
So basically you can extend this design,

NOTE Confidence: 0.86645025

0acb8725-57b0-472a-a466-35719c54c7a4
00:23:57.520 --> 00:24:00.208
uh, to multiply a four bit number

NOTE Confidence: 0.86645025

c64b5251-a276-43ac-97d4-57790b9ea4af
00:24:00.208 --> 00:24:02.320
with another 4 bit number.

NOTE Confidence: 0.86645025

c2f869b7-d636-47f0-80a4-41aabc5bb39d
00:24:02.320 --> 00:24:05.120
So you need another adder and etc.

NOTE Confidence: 0.86645025

c7d641fe-3bdd-4992-b145-3336bbc47a13
00:24:05.120 --> 00:24:08.810
So this is going to be a good investigation

NOTE Confidence: 0.86645025

55b3cbf8-6c37-4ff9-b085-5abec6e44592
00:24:08.810 --> 00:24:12.715
for you if you want to say that in general,

NOTE Confidence: 0.86645025

63769440-7744-409f-9d3c-b9f706261440
00:24:12.720 --> 00:24:16.570
if I want to build a circuit with N bits

NOTE Confidence: 0.86645025

65918b4c-26b7-4426-918d-08ab8be2084f
00:24:16.675 --> 00:24:20.914
number in the 1st digit in the first number.

NOTE Confidence: 0.86645025

400ef029-bc66-4738-b334-74911e7bcf6a
00:24:20.920 --> 00:24:23.867
And the second number is M bit.

NOTE Confidence: 0.86645025

a7548f91-68a7-4047-af4e-a479fcc5a864
00:24:23.870 --> 00:24:30.190
How many? Uh, output you gonna have?

NOTE Confidence: 0.86645025

537cb1a4-dae6-4f08-af9d-72492db3d7cd
00:24:30.190 --> 00:24:32.050
As you can see here.

NOTE Confidence: 0.86645025

46c55708-73c8-43ff-91ca-0c6f4fedfd02
00:24:32.050 --> 00:24:34.312
How many, uh, digital units do

NOTE Confidence: 0.86645025

64b59614-aaec-4e32-a7c2-444599bfd70c
00:24:34.312 --> 00:24:37.218
you need to buy from the market?

NOTE Confidence: 0.86645025

6b656847-0c0e-44cb-8c4a-13bc09c5df3a
00:24:37.220 --> 00:24:42.188
For instance, how many ads do you need?

NOTE Confidence: 0.86645025

ec75f912-6e66-4f44-8e14-4ea398dac690
00:24:42.190 --> 00:24:44.998
How many other do you need?

NOTE Confidence: 0.86645025

c05051c3-a4b9-469d-9a48-6c5a3691ab3e
00:24:45.000 --> 00:24:47.528
And if you want to go to the

NOTE Confidence: 0.86645025

ce8713e9-0dd2-4cdb-a5e4-bdfe1574b1e1
00:24:47.528 --> 00:24:49.459
market and buy the others,

NOTE Confidence: 0.86645025

735db2e9-da48-4ee5-9608-b7f744cfd396
00:24:49.460 --> 00:24:51.854
what are the type of the others?

NOTE Confidence: 0.86645025

ea95b991-a180-40ac-ab99-91dd80dd6141
00:24:51.860 --> 00:24:55.115
What's the K in K bit adders?

NOTE Confidence: 0.86645025

7facf664-d82f-4f68-8b70-ef40a43a3d08
00:24:55.120 --> 00:24:59.888
In our example, we multiply a 4 bit.

NOTE Confidence: 0.86645025

d50bcb45-acea-498a-a22c-b95bd938968b
00:24:59.890 --> 00:25:07.190
X. With three bits. Why?

NOTE Confidence: 0.86645025

624deded-579b-40cf-b188-8ca7be84147c
00:25:07.190 --> 00:25:12.790
So we need two others.

NOTE Confidence: 0.86645025

9f4a5c95-f7a0-4667-9621-ac942f5fea47
00:25:12.790 --> 00:25:18.509
But each other was four bit adder.

NOTE Confidence: 0.86645025

0fbbdd7a-8904-4349-8c87-c9526a1be25f
00:25:18.510 --> 00:25:21.900
And you can count the number of ads as well,

NOTE Confidence: 0.86645025

55b3b70c-27ca-4da1-b61d-3620233bf8d1
00:25:21.900 --> 00:25:24.604
so at home, try to generalize the circuit.

NOTE Confidence: 0.86645025

309b82b6-0bf8-454d-949a-b1bd6224a3a4
00:25:24.610 --> 00:25:28.000
If you have N bit X with N bit Y,

NOTE Confidence: 0.86645025

3983f741-c426-4a43-a9eb-05e53ef3cc22
00:25:28.000 --> 00:25:30.380
how many others you have to buy?

NOTE Confidence: 0.86645025

161941bf-da3c-453a-b476-89539abc71de
00:25:30.380 --> 00:25:32.414
What are the types of the

NOTE Confidence: 0.86645025

ffc240ac-abd3-4564-bd37-558f99cd84bd
00:25:32.414 --> 00:25:33.770
others and how many?

NOTE Confidence: 0.86645025

bd879e7b-ca28-43e5-ad2d-65a65646c33c
00:25:33.770 --> 00:25:35.460
And you have to buy.

NOTE Confidence: 0.8931194

d6d47d03-fddd-4024-b5ee-16dfdf393c77
00:25:38.980 --> 00:25:42.356
So if you want to extend this circuit

NOTE Confidence: 0.8931194

ebf7ae4c-aee3-4d9b-a823-75c21a8824ce
00:25:42.356 --> 00:25:45.098
alittle bit more to support this,

NOTE Confidence: 0.8931194

30809cda-c47c-40a4-9883-39ba1e7eb4b8
00:25:45.100 --> 00:25:46.306
sign the numbers.

NOTE Confidence: 0.8931194

b70e049c-8be0-4ebb-a608-0ae3c364d9bc
00:25:46.306 --> 00:25:48.718
So far we just simply multiply

NOTE Confidence: 0.8931194

b43146aa-f750-4c07-870e-4050e049c607
00:25:48.718 --> 00:25:50.990
2 numbers without considering

NOTE Confidence: 0.8931194

3f87795a-e13e-4fa6-aab2-6adfd3bb497a
00:25:50.990 --> 00:25:53.960
the sign of the multiplication.

NOTE Confidence: 0.8931194

bbe552e7-9d79-4fba-aa29-b79cc76e6375
00:25:53.960 --> 00:25:56.725
So again, you can think about extending

NOTE Confidence: 0.8931194

bfde8889-b951-4aeb-8216-5e1056cd9c44
00:25:56.725 --> 00:25:59.887
the circuit in order to support the sign.

NOTE Confidence: 0.8931194

778a4084-e332-44e1-91c1-3b3a203ae6ee
00:25:59.890 --> 00:26:02.898
The only thing you have to be careful

NOTE Confidence: 0.8931194

5f9be02a-768c-400e-a4df-cc30b5557e96
00:26:02.898 --> 00:26:06.042
is that you know that in math a

NOTE Confidence: 0.8931194

cf0eae43-8d45-4d5d-85e1-3ea9ce563585
00:26:06.042 --> 00:26:08.691
negative number if you are multiplying

NOTE Confidence: 0.8931194

563724d9-d499-4cc1-bd5c-dc578b580655
00:26:08.691 --> 00:26:12.268
2 numbers that this sign are different.

NOTE Confidence: 0.8931194

3ba29e14-1853-46af-859f-b1ddda2e94b0
00:26:12.270 --> 00:26:14.620
The result gonna be positive

NOTE Confidence: 0.8931194

5ce2386c-c60c-4aac-a833-ab8e7a5777df
00:26:14.620 --> 00:26:16.030
or negative anybody?

NOTE Confidence: 0.8742813

a6daf1bb-c152-4cff-925d-ccfcef858c9b
00:26:20.580 --> 00:26:23.394
Negative, so basically kind of similar

NOTE Confidence: 0.8742813

efb6a194-5bda-46e7-ba31-d0fb7c8ca841
00:26:23.394 --> 00:26:27.044
approach that we deal with the I mean

NOTE Confidence: 0.8742813

813a8921-c5c2-41e3-a0f1-9f8cb24ddb25
00:26:27.044 --> 00:26:29.576
overflow in addition or subtraction in

NOTE Confidence: 0.8742813

37d7f507-1e71-43fd-98d7-fe904c92134d
00:26:29.663 --> 00:26:33.029
numbering system with the Two's complement.

NOTE Confidence: 0.8742813

8b548d2a-d5f8-43a9-85a4-c3efaad49a76
00:26:33.030 --> 00:26:36.936
So here you can simply you have to be

NOTE Confidence: 0.8742813

66b47ec5-4855-4ac7-9fe3-1de89b1f69c1
00:26:36.936 --> 00:26:41.258
careful about the result if the sign of the

NOTE Confidence: 0.8742813

772acc94-6387-4080-b462-130583c0c7e7
00:26:41.258 --> 00:26:45.010
given numbers in the inputs are different,

NOTE Confidence: 0.8742813

5632ce5e-2c05-49f5-ac55-e8e4e822a6be
00:26:45.010 --> 00:26:48.370
the result is always negative.

NOTE Confidence: 0.8742813

46393e58-f25a-4992-9dc9-8247e60058e2
00:26:48.370 --> 00:26:50.728
If the sign of the given

NOTE Confidence: 0.8742813

f88bbfbb-46ad-4575-8545-666334e72b04
00:26:50.728 --> 00:26:53.250
numbers in the inputs are equal,

NOTE Confidence: 0.8742813

35eb8f87-e4d9-4a93-a790-285ed8d765c5
00:26:53.250 --> 00:26:55.290
either both negative or positive,

NOTE Confidence: 0.8742813

5b84dc58-546d-47f8-acee-634c3d9177c2
00:26:55.290 --> 00:26:58.139
the result going to be always positive.

NOTE Confidence: 0.8742813

fe3c110c-b090-4371-9c64-ec733da3f687
00:26:58.140 --> 00:27:00.884
So you have to add some more circuit

NOTE Confidence: 0.8742813

30226c44-6e81-456d-9713-3bef5bfbc2d6
00:27:00.884 --> 00:27:03.891
to the previous circuit in order to

NOTE Confidence: 0.8742813

920a8434-027e-46d7-8962-a04478b7d3ad
00:27:03.891 --> 00:27:07.089
provide the correct sign in the result.

NOTE Confidence: 0.8742813

e163e8cd-2978-411a-ab4e-dc8b2651568b
00:27:07.090 --> 00:27:10.098
So again, I leave it as an exercise

NOTE Confidence: 0.8742813

a61ec84a-4381-4b2c-9ce4-78108e4cbbad
00:27:10.098 --> 00:27:13.081
for you and also it's a nice

NOTE Confidence: 0.8742813

90404ba8-29e8-4f19-97fd-a408a0de43d4
00:27:13.081 --> 00:27:15.221
question for the final exam.

NOTE Confidence: 0.8742813

bf4a8575-4c43-4839-a89d-b1d9ee39c371
00:27:15.230 --> 00:27:19.486
So think about them. I mean at home.

NOTE Confidence: 0.8742813

d3fe8965-898c-4a59-88d4-513d878a6d87
00:27:19.490 --> 00:27:22.534
These are not just for, I mean, future works.

NOTE Confidence: 0.8742813

3ee575fd-0549-41b3-8082-6751f1d02f8f
00:27:22.534 --> 00:27:26.027
I may use some of them for the final exam,

NOTE Confidence: 0.8742813

c606393b-5307-4ca8-b1ac-5eb98cb8e29e
00:27:26.030 --> 00:27:27.750
so be careful about that.

NOTE Confidence: 0.8742813

09419ca2-07c7-4aea-99b6-7e6921b81e2a
00:27:27.750 --> 00:27:29.808
And I think these are interesting.

NOTE Confidence: 0.8742813

ddb77f16-e1a9-4409-8eb3-7f79e0d16f2e
00:27:29.810 --> 00:27:34.454
I mean questions or I mean food for thought.

NOTE Confidence: 0.8742813

b23f1848-f896-4f18-8e46-91e2ea559c15
00:27:34.460 --> 00:27:40.148
Uh, so basically if we could build an extent,

NOTE Confidence: 0.8742813

586b7d0e-fcf1-4bf7-ac17-a158a69f5c4c
00:27:40.150 --> 00:27:44.668
uh, these circuits to have other.

NOTE Confidence: 0.8742813

d1f851f8-666c-476c-b920-5fdb212f3f50
00:27:44.670 --> 00:27:46.101
Subtractor an multiplier.

NOTE Confidence: 0.8742813

f230fc2e-568a-40ba-8d59-c937093a39ec
00:27:46.101 --> 00:27:49.980
So you can have a divisor as well.

NOTE Confidence: 0.8742813

03cd8f9e-c0db-4c3a-9cc8-4c80ae9b1e6b
00:27:49.980 --> 00:27:53.844
So a circuit that can divide 2 numbers.

NOTE Confidence: 0.8742813

54bed69e-c7cc-4a21-9e9d-fd86a7330a69
00:27:53.850 --> 00:27:56.748
So you can think of the

NOTE Confidence: 0.8742813

e887e51d-7822-4f69-8b74-a17c9f7ab901
00:27:56.748 --> 00:27:58.680
division as a subtraction,

NOTE Confidence: 0.8742813

72463018-ba33-4800-8169-8b9c6f96b365
00:27:58.680 --> 00:28:01.165
multiple subtraction or design A

NOTE Confidence: 0.8742813

0d6c6066-9b62-4a58-bf32-c48f38f953ee
00:28:01.165 --> 00:28:03.990
divisor by from the scratch by.

NOTE Confidence: 0.8742813

161d5025-04fe-47a9-9a55-3a8fde9f4d49
00:28:03.990 --> 00:28:08.729
By the way, we introduced the multiplier.

NOTE Confidence: 0.8742813

b54fa430-0624-49dd-b6cc-30ec89066f82
00:28:08.730 --> 00:28:11.260
So as you can see,

NOTE Confidence: 0.8742813

8dbbbd1a-0e2d-4145-9006-ae3884203b4c
00:28:11.260 --> 00:28:15.243
we are completing all the necessary units

NOTE Confidence: 0.8742813

3a7e9ee0-3e34-4dc7-aa8c-919cdd4b291e
00:28:15.243 --> 00:28:18.608
for doing arithmetic in binary system.

NOTE Confidence: 0.8742813

a12beee5-b36d-41f2-afc4-d7a58a5f9078
00:28:18.610 --> 00:28:20.765
So another important thing in

NOTE Confidence: 0.8742813

a30aa508-c384-475d-8ff0-2297242271fd
00:28:20.765 --> 00:28:22.920
which happens in your program.

NOTE Confidence: 0.8742813

1b22f2c7-d598-46ea-aa11-df8daafd446b
00:28:22.920 --> 00:28:23.722
For instance,

NOTE Confidence: 0.8742813

48f7a290-545f-4cc7-8a04-dc15cec280f7
00:28:23.722 --> 00:28:27.470
in most of your program you want to check

NOTE Confidence: 0.8742813

18936099-5799-4df0-9ef6-ee3d53baca47
00:28:27.470 --> 00:28:31.110
the equality or not equality of two numbers.

NOTE Confidence: 0.8742813

c9d82e76-97a8-49ac-9837-87bc8a24d332
00:28:31.110 --> 00:28:33.265
So what is the circuit

NOTE Confidence: 0.8742813

d566db07-605b-4922-92c8-6a24f8a521c7
00:28:33.265 --> 00:28:35.420
for that on the machine?

NOTE Confidence: 0.8742813

d1385a8d-1db4-47b5-be4b-7b65c1903cb4
00:28:35.420 --> 00:28:38.460
What type of digital circuit

NOTE Confidence: 0.8742813

bd6cc5a0-c538-42fd-82ad-166ef516b800
00:28:38.460 --> 00:28:40.284
does the comparison?

NOTE Confidence: 0.8742813

874cccb8-6ae6-4dca-8e6c-068ca6046045
00:28:40.290 --> 00:28:42.900
So now I want to introduce

NOTE Confidence: 0.8742813

cbf98aa8-b8f8-413f-a582-30290a6c8b27
00:28:42.900 --> 00:28:46.060
how can we build a comparison,

NOTE Confidence: 0.8742813

e5cf28a2-68cc-44fd-91ee-36914681406f
00:28:46.060 --> 00:28:48.562
a comparator or a device or

NOTE Confidence: 0.8742813

0b41e00a-3315-4f24-8679-a96d3dcb56a8
00:28:48.562 --> 00:28:50.880
circuit that does the comparison

NOTE Confidence: 0.8742813

d0f2f1f2-9786-4567-a9c5-46cf0e92a0e3
00:28:50.880 --> 00:28:54.240
between 2 numbers in binary system.

NOTE Confidence: 0.8742813

9e751cee-fb13-4b75-a797-8e05dc3c133a
00:28:54.240 --> 00:28:56.640
But before I introduce that,

NOTE Confidence: 0.8742813

67e2a3ad-04c8-4dcb-9dfe-7e2a7b1c14be
00:28:56.640 --> 00:29:00.007
do you have any idea about designing

NOTE Confidence: 0.8742813

c3de12a7-0f86-4bad-a40c-9bdfbf9c8e1a
00:29:00.007 --> 00:29:01.450
a binary comparator?

NOTE Confidence: 0.7769683

8d4f29e8-bb47-4e04-9aa6-1e0b7aeab3fb
00:29:07.170 --> 00:29:10.025
The first immediate thought would

NOTE Confidence: 0.7769683

92f0aea7-d723-4c29-9ad3-1b14d82d098b
00:29:10.025 --> 00:29:12.880
be designed from the scratch,

NOTE Confidence: 0.7769683

aa19b4a1-3301-4693-82a6-4962067cc2a6
00:29:12.880 --> 00:29:15.740
two stable input binary variables,

NOTE Confidence: 0.7769683

a60f6a5c-5c79-44ae-8132-7e01fe0cbbf6
00:29:15.740 --> 00:29:17.798
output binary variables,

NOTE Confidence: 0.7769683

d63a9cbe-189c-4d96-a0c7-ac85a4318cb4
00:29:17.798 --> 00:29:19.856
simplification and etc.

NOTE Confidence: 0.7769683

fffdbf56-3024-4ad2-ab20-fce22103b286
00:29:19.860 --> 00:29:24.536
But if you know that you already

NOTE Confidence: 0.7769683

4a604cff-0a2e-4327-a4bc-b1b28eaaa14c
00:29:24.536 --> 00:29:26.870
built circuit for adding addition,

NOTE Confidence: 0.7769683

7ebd2ccf-8f78-4550-8f56-98ff49d6977f
00:29:26.870 --> 00:29:29.405
you already built the circuit

NOTE Confidence: 0.7769683

fecaef80-6d10-49ad-be86-c2930a1fa024
00:29:29.405 --> 00:29:30.926
for subtraction multiplication.

NOTE Confidence: 0.7769683

9dec5112-c94e-45e5-804c-6ea11c8a950f
00:29:30.930 --> 00:29:33.420
Is it possible to reuse these

NOTE Confidence: 0.7769683

80bc12e6-4eff-41df-a9bd-679868a6d3c9
00:29:33.420 --> 00:29:36.729
circuits to do the comparison or not?

NOTE Confidence: 0.8638917

0b751c10-ce5c-4c1f-ac44-b8ee62a2694e
00:29:42.140 --> 00:29:43.612
Actually, Philip is correct.

NOTE Confidence: 0.8638917

785181dd-8ff8-4c19-afe9-fb85a506ee26
00:29:43.612 --> 00:29:46.158
Yes, what we do usually in comparison

NOTE Confidence: 0.8638917

ddcace32-ddc7-489c-81e6-861b4ded7723
00:29:46.158 --> 00:29:48.415
is that we subtract the given

NOTE Confidence: 0.8638917

a7d0c043-638f-4eef-878f-36007934853c
00:29:48.415 --> 00:29:50.970
numbers an if the result is positive.

NOTE Confidence: 0.8638917

d4e7bcab-da61-44df-b979-d1dacd44bfc4
00:29:50.970 --> 00:29:53.906
We could say that the first number is

NOTE Confidence: 0.8638917

5b78b3cd-b4f3-4cc2-8792-a67b3da42b12
00:29:53.906 --> 00:29:56.860
greater or equal if the result is zero,

NOTE Confidence: 0.8638917

1f29dbc4-0360-4c06-92be-f9e3664a81ed
00:29:56.860 --> 00:29:59.992
we could say that the given

NOTE Confidence: 0.8638917

12a7bcb5-2e3f-4797-b672-00add8557f68
00:29:59.992 --> 00:30:01.558
numbers are equal.

NOTE Confidence: 0.8638917

3780e257-9e4f-4bce-86b2-621b226c10b4
00:30:01.560 --> 00:30:03.498
Or if the result is negative,

NOTE Confidence: 0.8638917

267e385c-8b12-43b9-b999-acec61b620df
00:30:03.500 --> 00:30:05.614
we could say that the first number

NOTE Confidence: 0.8638917

5a83d503-5c47-458b-8781-fb37af6284fa
00:30:05.614 --> 00:30:07.720
is lower than the second number.

NOTE Confidence: 0.8638917

5e8f3c17-a9de-425b-96e9-faf970a3fb1a
00:30:07.720 --> 00:30:10.230
So based on this subtraction

NOTE Confidence: 0.8638917

4442a368-09a4-4fc7-aec0-8dae3dced223
00:30:10.230 --> 00:30:12.238
we can determine the.

NOTE Confidence: 0.8638917

bba933c2-3867-4ba3-b433-43b51d30d606
00:30:12.240 --> 00:30:18.666
I mean, you can compare two given numbers so.

NOTE Confidence: 0.8638917

06d5d5fd-8cd5-44df-bc09-fd7ed66e709a
00:30:18.670 --> 00:30:20.536
I just wanted to quickly review

NOTE Confidence: 0.8638917

f2a6f49c-9cbb-4ef9-9058-ed682ef9c8d8
00:30:20.536 --> 00:30:22.799
how can we design the comparator.

NOTE Confidence: 0.8638917

34f3f979-b42e-4218-9250-571a3e9424bd
00:30:22.800 --> 00:30:25.208
So if you are given an unsigned,

NOTE Confidence: 0.8638917

4301832a-43fd-4fee-91de-a5309caefac3
00:30:25.210 --> 00:30:28.090
you want to design a second that if X

NOTE Confidence: 0.8638917

4dcc88e8-200f-49bc-9e45-fb2e57aa36c2
00:30:28.090 --> 00:30:31.178
is greater than Y it outputs or turn

NOTE Confidence: 0.8638917

b07278f8-1a37-445d-9259-233b41d25929
00:30:31.178 --> 00:30:34.282
on some lights or in some way it shows

NOTE Confidence: 0.8638917

d0486608-0bca-4e26-b902-b097eae8f4da
00:30:34.282 --> 00:30:36.830
you if they are equal or the first

NOTE Confidence: 0.8638917

0003407a-d506-4ee3-b17d-688dae93e99c
00:30:36.830 --> 00:30:39.310
number is lower than the second number.

NOTE Confidence: 0.85744834

b9bf60a6-bf0c-4c67-9b33-e7f7c6712c26
00:30:41.850 --> 00:30:46.134
We already designed that actually from the

NOTE Confidence: 0.85744834

2dd79300-c8eb-423f-8eff-57d7974ee34f
00:30:46.134 --> 00:30:50.666
from the scratch by using the truth table.

NOTE Confidence: 0.85744834

62dcaed3-c5e6-4b12-a42f-97cf82e433ca
00:30:50.670 --> 00:30:54.600
This design basically says that

NOTE Confidence: 0.85744834

0fddbbd0-7a4a-4c9e-8872-b16f42e3e557
00:30:54.600 --> 00:30:59.218
it outputs one whenever the X

NOTE Confidence: 0.85744834

4831765b-7ba8-4fa9-959f-08ead20938ad
00:30:59.218 --> 00:31:02.530
is greater or equal than Y.

NOTE Confidence: 0.85744834

acc7b859-2b2a-4d6d-8255-38793360e466
00:31:02.530 --> 00:31:04.582
So you can say that in

NOTE Confidence: 0.85744834

a6c49a14-f186-4e40-a3e0-c4e0574d7e5d
00:31:04.582 --> 00:31:07.030
order to have a comparator,

NOTE Confidence: 0.85744834

5fcc0e88-195f-41fc-b9d1-fb58e0bc3eec
00:31:07.030 --> 00:31:11.305
I want to split this to two outputs greater.

NOTE Confidence: 0.85744834

6f7efe88-c550-4587-acf2-feb51fb5664c
00:31:11.310 --> 00:31:13.522
I mean absolutely greater

NOTE Confidence: 0.85744834

3dd62e0b-3bc7-4297-b550-5b9a6fcaecfb
00:31:13.522 --> 00:31:16.840
or equal or then the lower.

NOTE Confidence: 0.85744834

c5f47ff7-d949-46c0-bf73-a8c00aa26fec
00:31:16.840 --> 00:31:21.698
So we want to design such circuit.

NOTE Confidence: 0.85744834

257a2591-39b5-4901-ba63-d1752d06a1d1
00:31:21.700 --> 00:31:23.686
We need one output for this,

NOTE Confidence: 0.85744834

8a1b6a94-679f-4128-b8bb-a18d9cb647c1
00:31:23.690 --> 00:31:24.930
one output for this,

NOTE Confidence: 0.85744834

d5dab38e-61bb-48b1-acd1-d64563880605
00:31:24.930 --> 00:31:27.514
an one at fault for this and the

NOTE Confidence: 0.85744834

91320793-a9b6-47c7-9b5c-8f883b56edb7
00:31:27.514 --> 00:31:29.458
nice property of this design is

NOTE Confidence: 0.85744834

8b7f6ee8-3d90-4bf9-91e6-cf4fca3cacda
00:31:29.458 --> 00:31:31.628
that if this one becomes one,

NOTE Confidence: 0.85744834

82a4f68e-e204-4547-b4ab-deb786942321
00:31:31.630 --> 00:31:35.284
meaning that X is lower than Y.

NOTE Confidence: 0.85744834

4d992b08-12e2-47f1-a8f8-09a089776c84
00:31:35.290 --> 00:31:37.682
We have to output zero for the other

NOTE Confidence: 0.85744834

3ddc14e1-036f-468a-a527-4116eab51fac
00:31:37.682 --> 00:31:40.410
two or if X is greater than Y we have

NOTE Confidence: 0.85744834

abd0adef-800b-4b05-8664-33880fe4f738
00:31:40.410 --> 00:31:42.878
to add put zero for the other two.

NOTE Confidence: 0.85744834

bc4589b0-860f-4928-8435-3c1571d76918
00:31:42.880 --> 00:31:45.036
So at any cases one of the

NOTE Confidence: 0.85744834

abe42260-125f-4638-8aac-1ea594bdf463
00:31:45.036 --> 00:31:46.390
outputs going to be 1,

NOTE Confidence: 0.85744834

3280173f-0a42-4f83-9e73-56d641d7b59c
00:31:46.390 --> 00:31:49.774
the other output is going to be 0.

NOTE Confidence: 0.85744834

80d8fbad-4dfd-499d-946f-17199188ea4c
00:31:49.780 --> 00:31:52.219
An If you design it from the truth table,

NOTE Confidence: 0.85744834

0a4fd12d-6784-442e-826f-08d02009fe4c
00:31:52.220 --> 00:31:54.188
it becomes like this.

NOTE Confidence: 0.85744834

81e5915f-c87d-4251-9b9f-fcf23be344a9
00:31:54.188 --> 00:31:57.800
So basically this is the design for a.

NOTE Confidence: 0.84398556

f8925e34-7811-49b3-94e0-68fc5f2ababb
00:32:00.910 --> 00:32:03.220
Compare comparison between 2 numbers.

NOTE Confidence: 0.84398556

7e3be28f-35fe-4da5-aeb8-58145fd6e101
00:32:03.220 --> 00:32:07.090
Each number has 2 bits.

NOTE Confidence: 0.84398556

cd68380e-dabd-46b6-b525-1e4ded551087
00:32:07.090 --> 00:32:10.958
So as you can see here, both are zero.

NOTE Confidence: 0.84398556

7f7b2a63-7cf8-47e6-acfc-5c27a7bf1f85
00:32:10.958 --> 00:32:14.670
Equality is 1 greater or lower is 0.

NOTE Confidence: 0.84398556

76d4bf6a-ed3a-4b12-92f9-2e8c3e319704
00:32:14.670 --> 00:32:16.920
In this case, for instance,

NOTE Confidence: 0.84398556

f051d372-433d-446b-8aa5-52de7432b513
00:32:16.920 --> 00:32:20.826
the first number is 11 and the second number

NOTE Confidence: 0.84398556

0aa86d08-4867-4f65-8fed-4d5086911518
00:32:20.826 --> 00:32:24.978
is 01011 is greater than 01. As a result,

NOTE Confidence: 0.84398556

9ef85dfc-e5db-45df-9d17-f50082600846
00:32:24.978 --> 00:32:29.069
this is 1 and the other cases are zero,

NOTE Confidence: 0.84398556

e7b2d296-459b-4369-8eb7-05b101e115f0
00:32:29.070 --> 00:32:32.220
and then you design it by the

NOTE Confidence: 0.84398556

20ebdc87-3178-4ffd-b974-06ddb3b05965
00:32:32.220 --> 00:32:35.496
aesopi for this one SOP. For this.

NOTE Confidence: 0.84398556

777a37e7-687b-47f8-b870-c79c182cd377
00:32:35.496 --> 00:32:38.574
So before this annual simplify that

NOTE Confidence: 0.84398556

b3e593ed-2ec8-4c4f-8c40-fe6a1d7e3e71
00:32:38.574 --> 00:32:41.548
for instance using the corner map.

NOTE Confidence: 0.84398556

b27b13b6-f836-4a36-b74b-e7aa4af2ccd3
00:32:41.550 --> 00:32:44.322
Color map of four variables and

NOTE Confidence: 0.84398556

2dc2e16b-cd40-4702-a3f9-745c132cc19b
00:32:44.322 --> 00:32:47.589
you need 3 corner Maps for that.

NOTE Confidence: 0.84398556

e3326350-a601-4257-9b6c-8dbaaa060743
00:32:47.590 --> 00:32:50.418
Well, as I said, if you increase

NOTE Confidence: 0.84398556

655f91b0-92a3-4ae0-a7cb-10f3bc6bc2f0
00:32:50.418 --> 00:32:53.379
the bits of the input numbers,

NOTE Confidence: 0.84398556

577e96b6-87fb-4fdb-91c7-1c39756fa30b
00:32:53.380 --> 00:32:55.160
for instance comparison between

NOTE Confidence: 0.84398556

6565ae7d-9c05-4609-8ff7-9e2243b2f7f5
00:32:55.160 --> 00:32:57.830
3 number numbers of free bits,

NOTE Confidence: 0.84398556

a6a24fd3-b27a-4df7-8383-53385af35518
00:32:57.830 --> 00:33:00.500
numbers of four bits and etc,

NOTE Confidence: 0.84398556

fb240f25-8fb3-43fd-97d1-abc389a4166c
00:33:00.500 --> 00:33:03.170
the December 2 table is huge

NOTE Confidence: 0.84398556

55f583d6-0421-4994-992d-d4ecdf99b06e
00:33:03.170 --> 00:33:04.950
and very calm complicated.

NOTE Confidence: 0.84398556

55e84540-ed75-4701-abc2-e3f5bcc996cd
00:33:04.950 --> 00:33:07.860
We can use the subtracter.

NOTE Confidence: 0.84398556

f808c6e7-37d2-4fad-a7d8-2f55fc6e2743
00:33:07.860 --> 00:33:11.250
We can simply say that, uh?

NOTE Confidence: 0.84398556

0cb3d3f9-271a-46cf-a047-4dcba388d672
00:33:11.250 --> 00:33:13.950
I put this as a synonym.

NOTE Confidence: 0.84398556

4cdceed7-7fb0-46e0-bfe4-6bc564c9a6ff
00:33:13.950 --> 00:33:17.550
We could say that this is Phillips way.

NOTE Confidence: 0.84398556

46fec954-1b5c-4dad-b02f-947d95e8b2ad
00:33:17.550 --> 00:33:20.790
We already know how to subtract

NOTE Confidence: 0.84398556

01056774-4560-48de-910a-25b9178eeb84
00:33:20.790 --> 00:33:22.410
in Two's complement.

NOTE Confidence: 0.84398556

5f909fc9-51ec-4b17-8838-6a634279f579
00:33:22.410 --> 00:33:25.566
So in the unsigned subtraction or,

NOTE Confidence: 0.84398556

d0127d26-9773-4129-9683-21cd7dd8ac4d
00:33:25.570 --> 00:33:28.535
we can say that you're

NOTE Confidence: 0.84398556

f2d25e32-bc04-491f-a1e3-fe3a9c5884ed
00:33:28.535 --> 00:33:30.907
subtracting 2 positive numbers.

NOTE Confidence: 0.84398556

5e12927a-6b3c-448f-a424-0e68ef2ee34e
00:33:30.910 --> 00:33:32.825
If it is a comparison

NOTE Confidence: 0.84398556

641d67c7-ca47-4224-a698-720de8fe8f84
00:33:32.825 --> 00:33:34.357
of two unsigned numbers.

NOTE Confidence: 0.84398556

59693c69-c512-4abe-bbc1-4932a8e87aa9
00:33:34.360 --> 00:33:36.270
If this is a comparison

NOTE Confidence: 0.84398556

00f192cc-296f-49a2-9e59-28e6bba7fa9c
00:33:36.270 --> 00:33:37.798
between 2 sign numbers,

NOTE Confidence: 0.84398556

7e48f122-3188-4c3b-a696-f1a31761e033
00:33:37.800 --> 00:33:40.999
we can use the same binary subtractor

NOTE Confidence: 0.84398556

6fa4fa74-64c6-44aa-b293-34a82a7088f1
00:33:40.999 --> 00:33:44.017
and based on this sign of the.

NOTE Confidence: 0.84398556

dbdcff40-6a36-48c3-885b-d3395a59b781
00:33:44.020 --> 00:33:45.975
Result you can decide whether

NOTE Confidence: 0.84398556

9ec16d29-7d95-415e-b876-9db35abe0278
00:33:45.975 --> 00:33:47.930
the first number is greater,

NOTE Confidence: 0.84398556

5c8b5b32-0b36-44e0-bc40-f23bb6df8adb
00:33:47.930 --> 00:33:50.667
equal or lower than the second number.

NOTE Confidence: 0.90352005

cd70ed8e-0e10-44e0-9126-89307fbbcb36
00:33:53.310 --> 00:33:56.236
But one thing you have to be

NOTE Confidence: 0.90352005

d3ec8944-ca0f-47e9-a296-b61df3f05a22
00:33:56.236 --> 00:33:58.400
careful about the equality.

NOTE Confidence: 0.90352005

ab1ce08d-802e-414d-be3f-a840e7ae3ec1
00:33:58.400 --> 00:34:00.310
The result gonna be positive,

NOTE Confidence: 0.90352005

5f7327ca-440c-407b-9657-c3a3791436b9
00:34:00.310 --> 00:34:04.078
but you have to check that all the

NOTE Confidence: 0.90352005

1a844463-62fc-48f2-b2a8-4bd3b3ea69fb
00:34:04.078 --> 00:34:06.789
other outputs are zero because.

NOTE Confidence: 0.90352005

e991a1bb-1e11-4ce6-8bcb-688afc8bf080
00:34:06.790 --> 00:34:11.134
If you don't check these X greater door.

NOTE Confidence: 0.90352005

7b4f32e5-a735-4460-97e7-8cfa879456e2
00:34:11.140 --> 00:34:13.877
Why if you only check the sign,

NOTE Confidence: 0.90352005

358b82e5-c70b-4c8f-ad5c-91a759d33e62
00:34:13.880 --> 00:34:15.448
you cannot differentiate between

NOTE Confidence: 0.90352005

d70c313c-ed95-42d1-a02d-74b856a4dca2
00:34:15.448 --> 00:34:17.800
the greater or equal an equal,

NOTE Confidence: 0.90352005

85a728f2-61f5-4e17-bff3-d8129736941e
00:34:17.800 --> 00:34:20.663
so you have to be careful about

NOTE Confidence: 0.90352005

9c1112a3-b7eb-483e-a79f-bf49c3058ba5
00:34:20.663 --> 00:34:23.287
checking the other outputs to be 0.

NOTE Confidence: 0.90352005

af8f33d2-8f07-419a-915c-335881accded
00:34:23.290 --> 00:34:25.250
If they are all zero,

NOTE Confidence: 0.90352005

a9887f2f-0615-4835-9084-9b559bc4e4e4
00:34:25.250 --> 00:34:27.596
it means that they are equal.

NOTE Confidence: 0.90352005

a1063662-dfd3-46cd-8d98-fadee2db51ef
00:34:27.600 --> 00:34:30.344
If one of them is not zero,

NOTE Confidence: 0.90352005

4dce41b9-955c-4c32-acbf-80ae02f18c8a
00:34:30.350 --> 00:34:34.334
it means that X is greater around Y.

NOTE Confidence: 0.90352005

a618ed1b-f7c9-4971-977a-a5f7cbeb28b2
00:34:34.340 --> 00:34:35.880
So it's very simple.

NOTE Confidence: 0.90352005

0b12e3da-b3f6-418b-ac4c-1793fdfbefd5
00:34:35.880 --> 00:34:38.772
You have to add a kind of

NOTE Confidence: 0.90352005

6639e187-1c3a-4757-ae5c-972e722dfd52
00:34:38.772 --> 00:34:41.192
additional andon or something to

NOTE Confidence: 0.90352005

30e8189f-b500-4758-aaf0-8e5d165fe463
00:34:41.192 --> 00:34:44.210
this to the binary subtractor.

NOTE Confidence: 0.90352005

61ce61b5-3980-493d-865f-63827a0cf4b8
00:34:44.210 --> 00:34:47.378
To compare 2 numbers.

NOTE Confidence: 0.90352005

7f56a322-7882-4723-948a-313d02249297
00:34:47.380 --> 00:34:49.850
I just leave it, uh,

NOTE Confidence: 0.90352005

163e3e9b-2d61-4b67-a7bf-00c982484ba7
00:34:49.850 --> 00:34:53.175
as a for for you to review

NOTE Confidence: 0.90352005

475ada8e-0d86-4a80-9973-b0abddc0af38
00:34:53.175 --> 00:34:55.280
these slides at home.

NOTE Confidence: 0.90352005

d883a58d-ce86-4aca-a309-aa1323c8ec41
00:34:55.280 --> 00:34:56.270
Very simple.

NOTE Confidence: 0.8867437

e5b6531e-d3e8-443f-a533-f83722667908
00:34:58.340 --> 00:35:01.388
Just wanted to quickly and here is the

NOTE Confidence: 0.8867437

5b4860e8-c3b0-4bdb-8128-030d0614680c
00:35:01.388 --> 00:35:04.777
design so at home you can think about why.

NOTE Confidence: 0.8867437

180ee7c1-8d24-425a-912f-20de2f8ec8e4
00:35:04.780 --> 00:35:08.180
By using the binary subtracter

NOTE Confidence: 0.8867437

9255f16c-147d-4b0b-97fd-09140ffd99fb
00:35:08.180 --> 00:35:11.580
we can design A comparator.

NOTE Confidence: 0.8867437

c1bebd6d-8d7e-49f4-9357-fb92a85dd3d3
00:35:11.580 --> 00:35:16.296
Is on these this visa steps?

NOTE Confidence: 0.8867437

e469a3a6-16f8-4186-89dc-15d6fa14169a
00:35:16.300 --> 00:35:19.570
But what I want to do

NOTE Confidence: 0.8867437

d295f1ce-ae1e-4dd8-bfa0-27b72351cd33
00:35:19.570 --> 00:35:22.550
this covered now is this.

NOTE Confidence: 0.8867437

9d05d4a2-2224-4266-8635-40ca3f451ad7
00:35:22.550 --> 00:35:25.810
Imagine we need a.

NOTE Confidence: 0.8867437

238e3716-376e-4a5f-b995-1fde3087f111
00:35:25.810 --> 00:35:32.620
We don't have any subtractor and we want to.

NOTE Confidence: 0.8867437

1453054a-b427-48f6-bad2-df3f397bca38
00:35:32.620 --> 00:35:37.009
Designer comparator comparator.

NOTE Confidence: 0.8867437

84b01951-823c-4d5f-98d4-e36ce5842cdd
00:35:37.010 --> 00:35:39.720
Not using the truth table,

NOTE Confidence: 0.8867437

3ce59d23-f4a6-4aec-95a8-7f536b64e2e2
00:35:39.720 --> 00:35:42.420
not using the previous circuits,

NOTE Confidence: 0.8867437

d107f19e-d3bd-482c-bebc-6895f8e97261
00:35:42.420 --> 00:35:46.207
but by the idea of a ignore.

NOTE Confidence: 0.86645323

57c3195c-33ee-41de-8412-0febf698e02f
00:35:48.970 --> 00:35:51.544
Why? Because if you design and

NOTE Confidence: 0.86645323

1fb65772-0ed3-492a-be8c-326326b8a659
00:35:51.544 --> 00:35:55.153
the by the idea of the action or

NOTE Confidence: 0.86645323

0091635f-0654-4015-b286-4c2a9ba2fc3f
00:35:55.153 --> 00:35:58.350
it becomes very fast to compare 2

NOTE Confidence: 0.86645323

29bf9db8-b7b0-49a5-b782-fdf3a1cc58d8
00:35:58.350 --> 00:36:01.227
numbers and in the next few slides

NOTE Confidence: 0.86645323

13543b3e-5a85-4e63-81b7-69f4db6830ad
00:36:01.227 --> 00:36:04.306
you see a why this design is in

NOTE Confidence: 0.86645323

2716296f-8b0c-4978-adac-f373b4ac1708
00:36:04.306 --> 00:36:07.280
terms of speed is very efficient.

NOTE Confidence: 0.8560579

ad3b2c2e-e6fa-4811-b99e-be0430ed7229
00:36:11.580 --> 00:36:15.878
I just wanted to mention that we

NOTE Confidence: 0.8560579

b30c3b5e-8bb4-4a0b-b6b0-f8980bc85932
00:36:15.878 --> 00:36:19.220
already said that, for instance,

NOTE Confidence: 0.8560579

e1b9f161-7d66-48a5-885b-f957a1785261
00:36:19.220 --> 00:36:23.720
for four bit subtractor or which

NOTE Confidence: 0.8560579

a0f1b67b-cca4-4b98-ae21-6bb249da1646
00:36:23.720 --> 00:36:26.849
is internally 4 bit other.

NOTE Confidence: 0.8560579

56cc9f90-db8f-4205-8b74-5eff16d46ea7
00:36:26.850 --> 00:36:28.606
You have to wait.

NOTE Confidence: 0.8560579

df567e5b-0058-491c-a0df-b35f79f9a428
00:36:28.606 --> 00:36:30.801
If the gates inside the

NOTE Confidence: 0.8560579

5d7f4e86-eb9a-48b0-b32c-6d72bbecd81d
00:36:30.801 --> 00:36:32.839
other has some delaye.

NOTE Confidence: 0.8560579

9b8b2961-e1b4-40aa-85b0-2121bd568c14
00:36:32.840 --> 00:36:35.088
You have to wait up until you see

NOTE Confidence: 0.8560579

edd368b2-45ec-49be-a704-70ddf6826fd3
00:36:35.088 --> 00:36:37.264
the last carry and then you are

NOTE Confidence: 0.8560579

26447cc1-602e-45f7-943e-aa13be427923
00:36:37.264 --> 00:36:39.220
sure that the result is reliable

NOTE Confidence: 0.8560579

e4b2eb57-0872-4d9a-8afd-beb4e0c31358
00:36:39.220 --> 00:36:41.284
and you can see the result.

NOTE Confidence: 0.8560579

b9d3596f-7a16-43b1-bcad-eca963e54d2a
00:36:41.290 --> 00:36:43.348
But in this course we said that

NOTE Confidence: 0.8560579

c3be95a3-bd9b-40c8-ba27-92157e0d3b7a
00:36:43.348 --> 00:36:45.669
there is no delay for the gates,

NOTE Confidence: 0.8560579

8065d238-eeb0-4cd1-a690-cb5907cebd00
00:36:45.670 --> 00:36:47.795
but in practice usually there's

NOTE Confidence: 0.8560579

23685fae-6af4-4a69-a465-4be7369412b7
00:36:47.795 --> 00:36:49.920
a delay for the gates.

NOTE Confidence: 0.8560579

1f7362d0-9ed9-4e11-be72-f9590caaeea3
00:36:49.920 --> 00:36:53.190
So if you designed yourself a

NOTE Confidence: 0.8560579

3f709caa-de30-4c7a-b2bc-27b7c5329d4d
00:36:53.190 --> 00:36:58.010
comparator by the subtraction, you may.

NOTE Confidence: 0.8560579

e49d6417-f939-48ff-a1dd-71ca34c787a3
00:36:58.010 --> 00:36:59.570
Experience some deley when

NOTE Confidence: 0.8560579

e9b5ed46-f169-45b8-9eed-a296b1de9da1
00:36:59.570 --> 00:37:01.910
you want to check whether the

NOTE Confidence: 0.8560579

bc753b9e-36fc-4209-a82d-adb89d444d43
00:37:01.987 --> 00:37:04.147
given numbers are greater than.

NOTE Confidence: 0.8560579

80d2c2a5-0af6-4a3b-b5f1-fa9fcb59afc1
00:37:04.150 --> 00:37:05.774
I mean, for instance,

NOTE Confidence: 0.8560579

81881481-de86-414c-9827-89635706c530
00:37:05.774 --> 00:37:07.398
the first number is

NOTE Confidence: 0.8560579

a07fd30e-5832-4107-ace2-c43659d5abac
00:37:07.398 --> 00:37:09.459
greater or equal or lower.

NOTE Confidence: 0.8827086

440cd39e-6dca-4047-9245-75dd48df839d
00:37:11.540 --> 00:37:14.046
That's why we want to design the

NOTE Confidence: 0.8827086

c051dc6c-5eea-4343-b55b-6ae9568dc991
00:37:14.046 --> 00:37:16.319
competitor of from various scratch,

NOTE Confidence: 0.8827086

b9fc03e8-1839-43d7-b7db-d3c141a7874a
00:37:16.320 --> 00:37:19.099
but not by using the truth table,

NOTE Confidence: 0.8827086

ecf4c531-5a28-4316-8295-150c7fdb9e6f
00:37:19.100 --> 00:37:22.184
because it needs a lot of

NOTE Confidence: 0.8827086

a9e0abe8-b65b-4130-ab93-bc7d420bce92
00:37:22.184 --> 00:37:23.726
input binary variables.

NOTE Confidence: 0.8827086

5fa945e5-2d75-4096-baf0-dd2dc594acc2
00:37:23.730 --> 00:37:26.220
The Helping Gate is the exclusive

NOTE Confidence: 0.8827086

25df46c3-a40a-4308-a614-ca7bf03bf7af
00:37:26.220 --> 00:37:29.388
nor one in one of the lecture

NOTE Confidence: 0.8827086

0ae82459-7ada-4408-a31b-0d8ecd2c4f25
00:37:29.388 --> 00:37:32.214
assignments you had the chance to.

NOTE Confidence: 0.8827086

8f1e5652-01c1-443a-aadf-640d452c60f0
00:37:32.220 --> 00:37:35.016
I mean, become familiar with the

NOTE Confidence: 0.8827086

1f26bf72-fa80-4f34-b6c8-ea05cb328c39
00:37:35.016 --> 00:37:37.794
exclusive or an exclusive nor and

NOTE Confidence: 0.8827086

7eccb6ce-cf4f-4f0d-925d-7ab57572abd5
00:37:37.794 --> 00:37:40.266
the nice property of these gates.

NOTE Confidence: 0.8827086

894fb1e3-4335-4e08-ba5e-ec712a56392c
00:37:40.270 --> 00:37:42.675
Exclusive nor also called Equality

NOTE Confidence: 0.8827086

c21a5d82-5cd2-4ba6-816d-ea90c761fbeb
00:37:42.675 --> 00:37:45.080
Gate because you already know

NOTE Confidence: 0.8827086

64132afb-e301-4fff-8a5b-b1a7353a8431
00:37:45.162 --> 00:37:47.418
that based on the truth table,

NOTE Confidence: 0.8827086

b0348945-5e8c-4989-b0c2-e622df9012af
00:37:47.420 --> 00:37:50.996
if the bits in the inputs are equal,

NOTE Confidence: 0.8827086

9e8b6c77-32fd-4a2a-8674-8159552c5d01
00:37:51.000 --> 00:37:56.300
the output of the exclusive nor. Is 1.

NOTE Confidence: 0.8827086

23a1a9bb-926c-4af1-90d2-ddd975a66f5a
00:37:56.300 --> 00:37:58.828
If both are zero, the output is 1.

NOTE Confidence: 0.8827086

bb681b36-c43c-4d31-853b-f7f335cfd7f0
00:37:58.830 --> 00:38:01.966
If both are one, the output is 1.

NOTE Confidence: 0.8827086

b9c0931c-43a2-48cd-8e56-db8e5ce2d782
00:38:01.970 --> 00:38:02.330
However,

NOTE Confidence: 0.8827086

c7530341-f4f9-4a50-aab2-3baf12f163dd
00:38:02.330 --> 00:38:05.570
if the bits in the inputs are not equal,

NOTE Confidence: 0.8827086

52db60fd-25e7-4e7e-9a15-90de0f87afc4
00:38:05.570 --> 00:38:08.270
the output is 0.

NOTE Confidence: 0.8827086

9d3200ae-0422-4584-8aaf-7bc8695d4e27
00:38:08.270 --> 00:38:11.022
So now we want to use this nice

NOTE Confidence: 0.8827086

e7c29da4-e253-41f2-b693-fcdaaa017e81
00:38:11.022 --> 00:38:13.586
property of exclusive North to compare

NOTE Confidence: 0.8827086

04e3aa37-ae88-4bb3-a5d8-0df6eb25bfc3
00:38:13.586 --> 00:38:16.999
2 numbers that have more than one bit,

NOTE Confidence: 0.8827086

892e11a5-1140-43cf-be78-28fbf819ebea
00:38:17.000 --> 00:38:18.990
for instance 4 bit numbers.

NOTE Confidence: 0.9187298

31d59d78-1420-4f50-b53e-63213aeec1e7
00:38:21.440 --> 00:38:24.548
So here is an example for equality.

NOTE Confidence: 0.9187298

0d88cb58-a5da-4bf6-b2b1-47a77dd95f36
00:38:24.550 --> 00:38:28.617
If you have two 4 bit numbers.

NOTE Confidence: 0.9187298

2e8b100e-029c-48ee-a91c-30781bfb1e74
00:38:28.620 --> 00:38:32.701
The only case that these two numbers

NOTE Confidence: 0.9187298

bddaf3e2-d4a6-419b-b838-57e39e17a86b
00:38:32.701 --> 00:38:36.232
becomes equal is that the bits in

NOTE Confidence: 0.9187298

233e26ec-f729-47b6-ab41-2f5b481bbf10
00:38:36.232 --> 00:38:40.335
the X one X2X3 and X4 is exactly the

NOTE Confidence: 0.9187298

91f0a9c6-583c-4dfb-b297-af75c3177862
00:38:40.335 --> 00:38:45.780
same as the bits in Y1Y2Y3 and Y4.

NOTE Confidence: 0.9187298

35c9b606-d0df-4b4a-9d7e-b1089eff0ce4
00:38:45.780 --> 00:38:50.988
For instance, if this is 0010.

NOTE Confidence: 0.9187298

4f66d543-a225-4f81-8946-5c9c1196d3b4
00:38:50.990 --> 00:38:52.440
If the first number is

NOTE Confidence: 0.9187298

008bfca5-61ac-4832-a1fe-2ef8b67d354c
00:38:52.440 --> 00:38:53.890
equal to the second number,

NOTE Confidence: 0.9187298

016e2dca-6719-480b-9021-b850dc8fdbcb
00:38:53.890 --> 00:38:57.886
the same bits must be in the second number.

NOTE Confidence: 0.9187298

cc3aacc0-3d25-491f-8d4c-9539a29d8d7d
00:38:57.890 --> 00:39:01.957
This means that if I apply exclusive

NOTE Confidence: 0.9187298

8ea9fc77-6806-4e46-888b-bca3fc6f7963
00:39:01.957 --> 00:39:05.570
nor bitwise meaning that on each bit.

NOTE Confidence: 0.9187298

afabb217-76d1-434e-a8cd-b0a91ff1bce2
00:39:05.570 --> 00:39:09.000
The result is always one.

NOTE Confidence: 0.9187298

8cdd665f-a150-4132-8bdc-e0c30ade4e97
00:39:09.000 --> 00:39:12.448
You can see here the result is 1,

NOTE Confidence: 0.9187298

5c36633b-defc-404e-a52a-da8df17bf925
00:39:12.450 --> 00:39:14.174
the result is 1.

NOTE Confidence: 0.9187298

25bd925d-fb80-4611-a5a3-09ca01692fdb
00:39:14.174 --> 00:39:15.467
Here an etc.

NOTE Confidence: 0.9187298

3ed83944-3137-475d-a443-d7b7cbdc4df7
00:39:15.470 --> 00:39:18.571
So if you blindly apply exclusive nor

NOTE Confidence: 0.9187298

8eef709f-e3b0-4c69-9a4d-c2b3b08e84b3
00:39:18.571 --> 00:39:22.599
on each bit of the given numbers and and

NOTE Confidence: 0.9187298

bfc50643-a2c6-45a4-a574-bfdefe137f89
00:39:22.599 --> 00:39:26.240
all the output bits and the result is 1,

NOTE Confidence: 0.9187298

060e1ade-d815-4a40-9aeb-5c320d1081b5
00:39:26.240 --> 00:39:30.119
it means that the given 2 numbers are equal.

NOTE Confidence: 0.90855217

9d1f1e51-1072-4265-a153-617e6e4c6117
00:39:34.350 --> 00:39:40.920
So this is a nice or fast way to check the.

NOTE Confidence: 0.90855217

e318d365-11f7-4704-98af-1c103012bdd8
00:39:40.920 --> 00:39:43.612
Equality of two numbers.

NOTE Confidence: 0.90855217

5775d997-d258-4d82-881d-af92d6017258
00:39:43.612 --> 00:39:45.631
Bitwise exclusive nor

NOTE Confidence: 0.90855217

f176ea32-ec21-45b2-ac60-36c33004773a
00:39:45.631 --> 00:39:49.030
and then and the result.

NOTE Confidence: 0.90855217

85211f9a-a653-4db1-9d18-3de5dae7b8ec
00:39:49.030 --> 00:39:52.744
So in C language programming you

NOTE Confidence: 0.90855217

3fcb28ef-bc08-4fb0-8922-38e18b63e8ef
00:39:52.744 --> 00:39:56.266
know that this operator is exclusive

NOTE Confidence: 0.90855217

97a01a22-11e5-476d-a528-5a4b9e54887d
00:39:56.266 --> 00:40:00.650
or if you apply not on top of this.

NOTE Confidence: 0.90855217

6960ce82-4ab3-49e3-9f4e-88f7fae67715
00:40:00.650 --> 00:40:04.962
It becomes exclusive nor so try in C

NOTE Confidence: 0.90855217

1fb4233a-7c7c-4f6b-9848-f4b084ac6e08
00:40:04.962 --> 00:40:08.527
language that whenever you say that,

NOTE Confidence: 0.90855217

cc996412-d507-4c18-aa81-1e10e5f1129b
00:40:08.530 --> 00:40:10.159
for instance, if.

NOTE Confidence: 0.90855217

87239ad3-dbf0-4bb5-8fa7-42e82a00fc9c
00:40:10.159 --> 00:40:13.960
In your program we write that FX

NOTE Confidence: 0.90855217

b9c00f70-2c74-411e-9a0e-0c518044ed1d
00:40:14.069 --> 00:40:16.790
is equal to Y, do something.

NOTE Confidence: 0.90855217

1cf7a168-7ff3-40bc-b8b2-c79b83787c58
00:40:16.790 --> 00:40:21.590
Instead of doing this way of equality check,

NOTE Confidence: 0.90855217

bcdc71d4-02ee-45e2-aabe-1e7981434d95
00:40:21.590 --> 00:40:24.705
try to use the logical

NOTE Confidence: 0.90855217

088d71d6-1deb-411c-8f5d-181a480bf804
00:40:24.705 --> 00:40:27.197
operators in C language.

NOTE Confidence: 0.90855217

e8b77b13-7226-4a40-b432-252b3da7e2a9
00:40:27.200 --> 00:40:29.558
The reason is that if you

NOTE Confidence: 0.90855217

f07d5725-d134-45a9-a32a-450a8da02236
00:40:29.558 --> 00:40:31.130
use the logical operation,

NOTE Confidence: 0.90855217

043fd344-75c5-47d5-9f6e-e476f2fbb913
00:40:31.130 --> 00:40:33.794
it uses the logical gates in the machine

NOTE Confidence: 0.90855217

5af18440-56ca-4024-84ab-fbb7920982f1
00:40:33.794 --> 00:40:36.627
instead of the calculating the subtraction,

NOTE Confidence: 0.90855217

6f31a921-2d09-4f7e-84a7-f798dd3e8134
00:40:36.630 --> 00:40:39.480
and is much more faster.

NOTE Confidence: 0.90855217

1157dbb3-098d-4488-91f8-a59d7bfaf9f3
00:40:39.480 --> 00:40:39.881
Actually,

NOTE Confidence: 0.90855217

51926293-0e6d-4305-b85c-d3d0d349a8ca
00:40:39.881 --> 00:40:42.688
this refers to the question from Opsahl,

NOTE Confidence: 0.90855217

4ca146aa-66e7-4024-98df-18b347682b18
00:40:42.690 --> 00:40:45.497
which says that what is I mean?

NOTE Confidence: 0.90855217

1ba21349-e1df-4d79-801a-4fb62dc66e30
00:40:45.500 --> 00:40:47.900
What is the benefit of knowing

NOTE Confidence: 0.90855217

38a08b0d-3c34-4ea0-85c9-2b588594f348
00:40:47.900 --> 00:40:49.100
the underlying hardware?

NOTE Confidence: 0.90855217

5470a3cd-88b3-489f-b552-a836afac0711
00:40:49.100 --> 00:40:52.075
If you know that the underlying hardware

NOTE Confidence: 0.90855217

94e66c52-f131-4da8-b99e-66c55fdd9c33
00:40:52.075 --> 00:40:54.885
do the checking of two numbers based

NOTE Confidence: 0.90855217

dd3c3cb2-6123-4705-8408-28d2d1974ebd
00:40:54.885 --> 00:40:57.530
on the exclusive nor an and gate,

NOTE Confidence: 0.90855217

a267b491-4300-4894-88f5-043bfdde67e2
00:40:57.530 --> 00:40:59.530
instead of using this operator

NOTE Confidence: 0.90855217

91f573bd-5642-4f55-82bc-c6040b0c3c0a
00:40:59.530 --> 00:41:01.130
which uses the subtraction,

NOTE Confidence: 0.90855217

e83ab768-f960-4b3a-a8d8-0cde09ef806a
00:41:01.130 --> 00:41:04.338
you use this way to compare 2 numbers,

NOTE Confidence: 0.90855217

d7417432-6d44-4c11-b84b-7eac32b46361
00:41:04.340 --> 00:41:08.070
which is much more faster.

NOTE Confidence: 0.90855217

e3b5410a-ba4b-4bc2-97c6-302d95f927e6
00:41:08.070 --> 00:41:09.642
Although some compilers do

NOTE Confidence: 0.90855217

a7ebccb7-decf-47ee-9660-365da6cfb4ac
00:41:09.642 --> 00:41:12.000
optimization even if you use this,

NOTE Confidence: 0.90855217

02149a39-97e1-4fd7-9cb1-f630987288bf
00:41:12.000 --> 00:41:14.828
they optimize your code and they they

NOTE Confidence: 0.90855217

69ae568a-6f1b-4224-a57a-ba320859813a
00:41:14.828 --> 00:41:17.880
may change your code to use this in

NOTE Confidence: 0.90855217

bfac8212-d212-403e-b8ed-f79d4a71e862
00:41:17.880 --> 00:41:20.250
order to make your program faster.

NOTE Confidence: 0.90855217

822632e4-0cc9-4584-89b6-69731db208e7
00:41:20.250 --> 00:41:22.770
But if you do not use the

NOTE Confidence: 0.90855217

3f3ce44e-aef2-4ce3-80b2-53b56cc6d13b
00:41:22.770 --> 00:41:24.970
optimizer option of the compiler,

NOTE Confidence: 0.90855217

fbb52ff6-ecd3-4922-b0ce-0bec860309ef
00:41:24.970 --> 00:41:27.714
it does the subtraction which is slower.

NOTE Confidence: 0.88594365

0da36c3d-265f-4a0a-af12-046037b69887
00:41:30.490 --> 00:41:34.864
How about the? Check with the I

NOTE Confidence: 0.88594365

a78ed4b9-efac-4ae9-b223-eb52142c2a29
00:41:34.864 --> 00:41:37.240
mean whether the first number is

NOTE Confidence: 0.88594365

f7647688-9efc-4339-89e8-7b09deb5d52a
00:41:37.322 --> 00:41:40.070
greater or than the second number.

NOTE Confidence: 0.88594365

dcd26789-8963-4adb-8fe5-ee75c219b963
00:41:40.070 --> 00:41:43.619
So if. The first number is a

NOTE Confidence: 0.88594365

308db3e1-29b2-4c8b-b775-1342827ad4a5
00:41:43.619 --> 00:41:46.829
greater than the second number.

NOTE Confidence: 0.88594365

d99717b2-8acb-403f-8156-18a6eb4ccf05
00:41:46.830 --> 00:41:51.318
This is the case that happens.

NOTE Confidence: 0.88594365

65a6b502-7d2c-4a61-bd52-97a16b6776c3
00:41:51.320 --> 00:41:53.582
If the first number has digital

NOTE Confidence: 0.88594365

0a34d202-b125-4258-b7cf-d2a8f165ccc3
00:41:53.582 --> 00:41:56.380
one in the highest significant bit.

NOTE Confidence: 0.88594365

37b7804d-865c-4c5d-9e2c-51f897ded099
00:41:56.380 --> 00:42:00.290
And the second number has zero in that a bit.

NOTE Confidence: 0.88594365

0473c2df-bf5f-4749-af9f-538dde5cb376
00:42:00.290 --> 00:42:03.140
It means that if you are

NOTE Confidence: 0.88594365

400ed369-9a26-418d-9d19-3edee199619f
00:42:03.140 --> 00:42:05.040
in the unsigned system.

NOTE Confidence: 0.88594365

0d4bd451-d220-4ff1-b9cb-96c6ec6cd4e9
00:42:05.040 --> 00:42:08.024
It is very evident that the first number

NOTE Confidence: 0.88594365

aa874c40-b86e-469b-ae65-03eddf44abde
00:42:08.024 --> 00:42:10.530
is greater than the second number,

NOTE Confidence: 0.88594365

50e2e4f5-6d84-4194-9cc2-2151fcb3fe56
00:42:10.530 --> 00:42:12.798
so we don't have to check

NOTE Confidence: 0.88594365

5c03962f-2c9a-4403-b9b7-d3708bbf814a
00:42:12.798 --> 00:42:14.840
the all the other bits.

NOTE Confidence: 0.88594365

74880448-90c5-405e-b2b0-4a9b52451521
00:42:14.840 --> 00:42:17.976
It is very similar to the decimal system.

NOTE Confidence: 0.88594365

41337f92-b155-4249-a335-98fc6e7b84a4
00:42:17.980 --> 00:42:19.940
For instance is decimal system.

NOTE Confidence: 0.88594365

216af7b1-189e-4106-a40f-22b879a4921c
00:42:19.940 --> 00:42:23.459
If I have 742 and I have another number,

NOTE Confidence: 0.88594365

7029fa77-b73a-4080-92b0-3ced9240de6b
00:42:23.460 --> 00:42:24.894
for instance 351.

NOTE Confidence: 0.88594365

b9cdfb9f-f562-4fe4-af65-9318789a4951
00:42:24.894 --> 00:42:27.284
Instead of checking each digit,

NOTE Confidence: 0.88594365

913c5a73-ee7a-41bd-a900-1ece008085a3
00:42:27.290 --> 00:42:30.114
I can first start from the left and

NOTE Confidence: 0.88594365

18f1bb0f-e7f8-4b5d-b60c-0e2e3d98311e
00:42:30.114 --> 00:42:33.098
check the higher significant position.

NOTE Confidence: 0.88594365

3946d142-d2eb-457d-b583-7ec0e62ae9b1
00:42:33.100 --> 00:42:34.940
If the first position 7

NOTE Confidence: 0.88594365

c438a79d-ea8b-4f34-9593-f74980fc8e9e
00:42:34.940 --> 00:42:36.412
is greater than three,

NOTE Confidence: 0.88594365

75972800-4492-47ac-b0bf-3a14cc8c1749
00:42:36.420 --> 00:42:39.732
so I don't have to check the other digits,

NOTE Confidence: 0.88594365

5d558c36-ab13-4e4e-aca7-bcf4d4d30ca9
00:42:39.740 --> 00:42:42.516
I can simply say that the first number

NOTE Confidence: 0.88594365

9e1bc9a6-c2ed-4a57-aee9-d5173ebc969b
00:42:42.516 --> 00:42:44.909
is greater than the second number.

NOTE Confidence: 0.88594365

9aa893eb-d6d7-49e6-9aee-1ef0575eac0c
00:42:44.910 --> 00:42:47.118
Very similar in the binary system.

NOTE Confidence: 0.88594365

35fe072c-053f-4945-997e-a287175b0ba6
00:42:47.120 --> 00:42:49.661
So for checking about whether the first

NOTE Confidence: 0.88594365

369364e6-8d2b-4cfb-a8bb-573570108e43
00:42:49.661 --> 00:42:52.290
number is greater than the second number,

NOTE Confidence: 0.88594365

83f07e65-ee8f-448a-9f34-c0ec851e32e1
00:42:52.290 --> 00:42:55.175
we can install from the

NOTE Confidence: 0.88594365

aa10e043-e668-4562-9143-4028ca746783
00:42:55.175 --> 00:42:56.906
highest significant bit.

NOTE Confidence: 0.88594365

d768a0ae-f1bc-4ae7-95d0-3ccbc23ad197
00:42:56.910 --> 00:42:59.198
If in the first bit of the first

NOTE Confidence: 0.88594365

0d4aba3e-0dfe-4648-b3ff-89a594f4da27
00:42:59.198 --> 00:43:01.759
number we have one and the first bit

NOTE Confidence: 0.88594365

1e99ab85-4d58-42b2-9619-9ddae9126728
00:43:01.759 --> 00:43:06.159
of the second number is 0. We are done.

NOTE Confidence: 0.88594365

da1636f4-4676-4682-b07e-f344ab4dab29
00:43:06.160 --> 00:43:08.700
The first number is greater,

NOTE Confidence: 0.88594365

d554a1e8-c58e-4ab0-9736-45722dc29be2
00:43:08.700 --> 00:43:14.082
so we have X4 and we don't have Y4.

NOTE Confidence: 0.88594365

29171487-1271-4cc9-9e31-fdcd00485236
00:43:14.090 --> 00:43:17.080
So this is the result.

NOTE Confidence: 0.88594365

fdf13a44-697f-4b27-bdfe-5aca6c9db0fc
00:43:17.080 --> 00:43:20.910
What if both are zero?

NOTE Confidence: 0.88594365

fc3a9f4e-fbbb-4655-86e5-faafe3c13c41
00:43:20.910 --> 00:43:21.262
Oh,

NOTE Confidence: 0.88594365

67ff307f-7533-45af-8869-500534c2cdbb
00:43:21.262 --> 00:43:23.726
one thing is that if the second

NOTE Confidence: 0.88594365

359b9a1c-4583-4b1b-8a1e-930a0c201094
00:43:23.726 --> 00:43:25.761
number in the highest significant

NOTE Confidence: 0.88594365

c931a1f2-9f39-46e7-9968-8c71daf3c12e
00:43:25.761 --> 00:43:29.140
bit is 1 and the first number is 0,

NOTE Confidence: 0.88594365

3a1a0145-f9b3-4656-aa80-977b12f3310b
00:43:29.140 --> 00:43:31.786
so we can say that why this

NOTE Confidence: 0.88594365

4208fadd-ef21-43e0-b051-5200dafe70af
00:43:31.786 --> 00:43:33.630
time is greater than X?

NOTE Confidence: 0.88594365

c71fdceb-c0ba-4f60-aff0-55216fcbbe7c
00:43:33.630 --> 00:43:35.868
Very similar to the previous condition.

NOTE Confidence: 0.9208188

40dc47ea-2678-4ef1-a639-31a7f7d5534e
00:43:38.830 --> 00:43:42.090
If both are the same.

NOTE Confidence: 0.9208188

e0655c13-96dd-4724-8a30-1f8a2b7cde6b
00:43:42.090 --> 00:43:45.392
If both are the same, meaning that

NOTE Confidence: 0.9208188

46aa13a8-50ad-4309-9f36-9ef7c33b2e90
00:43:45.392 --> 00:43:49.160
either both are zero or both or one,

NOTE Confidence: 0.9208188

58320806-7fa3-4325-8416-765158ba3c28
00:43:49.160 --> 00:43:51.806
so it means that this check

NOTE Confidence: 0.9208188

ea38922d-8aa2-44e6-84cc-18d458e37647
00:43:51.806 --> 00:43:54.652
doesn't lead to decide whether the

NOTE Confidence: 0.9208188

1554e281-e124-4b91-af2a-db3571c94bb1
00:43:54.652 --> 00:43:57.628
first number is greater or lower.

NOTE Confidence: 0.9208188

7426acea-91ba-4157-9389-022cc36ee372
00:43:57.630 --> 00:44:01.374
This means that the exclusive or of the

NOTE Confidence: 0.9208188

39d558a7-50c4-4ad5-86c7-fa84238c39fa
00:44:01.374 --> 00:44:04.697
first highest high significant bit is 1.

NOTE Confidence: 0.9208188

ec543f61-7203-4c6c-907f-ce7fccbc83c1
00:44:04.700 --> 00:44:08.222
So if this happens, I continue

NOTE Confidence: 0.9208188

7552bf29-05e8-41dc-a603-513853767409
00:44:08.222 --> 00:44:11.050
checking the second significant bit.

NOTE Confidence: 0.9208188

8c6ab390-db95-41d9-8b9d-edc12a470497
00:44:11.050 --> 00:44:13.210
Very similar to the

NOTE Confidence: 0.9208188

c2339ea8-6f24-49a3-a37c-9bdf99b97268
00:44:13.210 --> 00:44:15.370
previous I mean condition.

NOTE Confidence: 0.9208188

c3ebd9f6-b1b4-48d0-9660-3902081b3802
00:44:15.370 --> 00:44:19.150
Now that the exclusive or is one.

NOTE Confidence: 0.9208188

a0eaca46-d0b9-42e8-a644-11c1f3179d71
00:44:19.150 --> 00:44:25.629
I say that if X3 is 1 and Y three is 0,

NOTE Confidence: 0.9208188

8c25e81a-c624-4fc3-a9db-f06b5fd15591
00:44:25.630 --> 00:44:29.950
the first number is greater.

NOTE Confidence: 0.9208188

9fd84cc7-11ee-4257-9ae0-287be81b0194
00:44:29.950 --> 00:44:36.462
Or if X3 is zero and Y three is one, I could

NOTE Confidence: 0.9208188

fa27e209-c26f-4de6-8272-ba8f06dfcfee
00:44:36.462 --> 00:44:41.194
say that the second number is greater.

NOTE Confidence: 0.9208188

ac00c951-626b-4bde-8760-9461b6d78fb6
00:44:41.200 --> 00:44:43.620
What if both are equal?

NOTE Confidence: 0.9208188

a5e105d6-e90c-41c3-8db4-c5b3a0280227
00:44:43.620 --> 00:44:48.498
Then I could say that if X3 exclusive nor

NOTE Confidence: 0.9208188

cb240008-f3a5-4ebb-8727-a3b3e0389f03
00:44:48.498 --> 00:44:53.752
with Y-3 is one I have to continue with the.

NOTE Confidence: 0.9208188

b53597bd-8e4e-4230-b057-dcdc7719b3e7
00:44:53.760 --> 00:44:56.945
Next position in the lower

NOTE Confidence: 0.9208188

345278e4-e592-45a8-a63e-a078f9baac2f
00:44:56.945 --> 00:44:59.493
in the lower significance.

NOTE Confidence: 0.9208188

94eaf104-badf-40ca-be55-c2d11cc2350d
00:44:59.500 --> 00:45:01.192
And etc.

NOTE Confidence: 0.9208188

ff5f4a7e-247c-4d65-bc6d-eedb3ee4927f
00:45:01.192 --> 00:45:02.038
So.

NOTE Confidence: 0.77886736

ad1b114f-73ed-44a3-9a29-f1c5b874d53a
00:45:04.110 --> 00:45:05.782
The first, the highest

NOTE Confidence: 0.77886736

29158836-44be-4ab8-a4fe-486de22dc35f
00:45:05.782 --> 00:45:07.454
significant bit is equal.

NOTE Confidence: 0.77886736

c5e48c87-5353-4675-aa1e-b2309f710efa
00:45:07.460 --> 00:45:11.968
We go to the lower significant bit.

NOTE Confidence: 0.77886736

49d234a1-a06c-47e9-b9f3-91fdf6d68f57
00:45:11.970 --> 00:45:13.638
If both are equal,

NOTE Confidence: 0.77886736

06bd4ff3-c1bb-41c7-ba94-3c0612bef883
00:45:13.638 --> 00:45:16.570
we go to the lower significant bit.

NOTE Confidence: 0.77886736

c0ae3812-b7d4-4901-b8c2-c12fe07e0e4a
00:45:16.570 --> 00:45:18.618
Ann continues this way,

NOTE Confidence: 0.77886736

f96d03a7-7877-4b80-92f0-16f649597d11
00:45:18.618 --> 00:45:22.678
so either the first bit of the first

NOTE Confidence: 0.77886736

64a5b93f-1d4f-4257-8cbd-0d7b05109afa
00:45:22.678 --> 00:45:26.764
number is 1 and the second bit of the

NOTE Confidence: 0.77886736

ccdacb32-36e1-4d46-bab3-a5fb468ae98a
00:45:26.764 --> 00:45:30.404
first bit of the second number is 0.

NOTE Confidence: 0.77886736

e4aa3947-6d10-4e55-9592-326936ccbf0d
00:45:30.410 --> 00:45:33.290
So if this is 1.

NOTE Confidence: 0.77886736

0eabbce3-0757-4ca8-b78c-a0983fd024c9
00:45:33.290 --> 00:45:35.908
One or with anything else is 1,

NOTE Confidence: 0.77886736

22049da5-90f0-4451-8c2d-53a3178d38f4
00:45:35.910 --> 00:45:39.786
so I can simply output one.

NOTE Confidence: 0.77886736

02f458b7-e1df-4f92-9056-eb63f3f90507
00:45:39.790 --> 00:45:41.874
If both are equal,

NOTE Confidence: 0.77886736

73ff3c9d-96cb-4c1a-98ba-d5aca5ca1224
00:45:41.874 --> 00:45:45.000
it means that this becomes 0,

NOTE Confidence: 0.77886736

b2250870-f858-478c-88f7-6b481c4fc5fc
00:45:45.000 --> 00:45:48.126
because if these two becomes equal,

NOTE Confidence: 0.77886736

aeb7b045-331c-4a6f-bb24-b4b72f2192da
00:45:48.130 --> 00:45:52.414
for instance 0 here one here so.

NOTE Confidence: 0.77886736

aceef7ef-847b-4a10-8545-35283eeb2046
00:45:52.420 --> 00:45:54.204
So both are equal,

NOTE Confidence: 0.77886736

b75f3e64-64a9-41f9-9305-f88985c17c76
00:45:54.204 --> 00:45:56.880
so zero this zero becomes not

NOTE Confidence: 0.77886736

04e23e9e-ed10-4317-8de6-6376f5391dae
00:45:56.980 --> 00:46:00.326
becomes 1 one and zero becomes zero.

NOTE Confidence: 0.77886736

26caa2ea-6e14-4cd0-bbd3-5a875a9984d6
00:46:00.330 --> 00:46:03.120
If these two bits are equal,

NOTE Confidence: 0.77886736

e0789829-85f3-4940-8c2d-bb3994667c38
00:46:03.120 --> 00:46:06.308
these terms becomes 0.

NOTE Confidence: 0.77886736

5b4f7685-603d-455b-b336-a854b62f2922
00:46:06.310 --> 00:46:08.669
You have to go to the second.

NOTE Confidence: 0.77886736

d07678b1-5047-4916-9912-24c6ae3da7d3
00:46:08.670 --> 00:46:10.344
This becomes one.

NOTE Confidence: 0.77886736

11058506-0e5b-4c64-ad26-42d4c4e1d8a6
00:46:10.344 --> 00:46:12.018
And the only.

NOTE Confidence: 0.77886736

8a223030-983d-4c1b-8944-0425fc89a6d1
00:46:12.020 --> 00:46:13.635
Terms that determines whether the

NOTE Confidence: 0.77886736

45e0e4d3-207b-44de-abe9-6b24bcc8d922
00:46:13.635 --> 00:46:15.998
X is greater than than one is this.

NOTE Confidence: 0.85690147

74668d56-55b0-4a5a-8e8a-99130c1c9006
00:46:18.870 --> 00:46:21.360
If these two are equal,

NOTE Confidence: 0.85690147

1347ad21-7ae7-415d-891b-38f88b1a94be
00:46:21.360 --> 00:46:25.328
this becomes 00 and with anything becomes 0.

NOTE Confidence: 0.85690147

79145935-a4ac-43ad-a93d-20ef25f1a2bb
00:46:25.330 --> 00:46:29.236
Now we go to this second.

NOTE Confidence: 0.85690147

3b4ba4f8-ef25-4e4e-bd39-1599585d65e1
00:46:29.240 --> 00:46:33.398
Uh, to this bit, so the highest

NOTE Confidence: 0.85690147

c4b1f7fd-981e-4a77-9927-9d5c292e3950
00:46:33.398 --> 00:46:36.000
significant bit are equal.

NOTE Confidence: 0.85690147

d0aeaf1f-8544-4785-9ff6-7c82a7a022b2
00:46:36.000 --> 00:46:39.087
The next lower significant bit is equal.

NOTE Confidence: 0.85690147

d4c8dc06-6fad-4074-af90-92c4afcb82d6
00:46:39.090 --> 00:46:43.347
Now we go to the lower significant bit Y2

NOTE Confidence: 0.85690147

e9eaab0a-5e31-4dfe-9dd3-8580448d1e7f
00:46:43.347 --> 00:46:47.917
and X2 and check the quality of these two.

NOTE Confidence: 0.85690147

b1377e5a-eaa8-4c3a-a9ff-127ee88f1cbd
00:46:47.920 --> 00:46:50.503
If you have X and we don't have Y,

NOTE Confidence: 0.85690147

ad40bf80-b027-4dba-840a-c70b7e074585
00:46:50.510 --> 00:46:53.333
meaning that X is 1, why is 0?

NOTE Confidence: 0.85690147

a8ef39f9-4b5b-471d-b253-f0ff26737f3d
00:46:53.333 --> 00:46:57.040
This becomes one and the output becomes one.

NOTE Confidence: 0.85690147

ff8a5a53-e737-442b-85b4-771973663b55
00:46:57.040 --> 00:47:00.424
If this is these two bits are equal,

NOTE Confidence: 0.85690147

5f795eda-d982-4ea0-b3ef-94303c2d06d5
00:47:00.430 --> 00:47:03.391
this becomes zero and we go to

NOTE Confidence: 0.85690147

12c528de-82c4-4238-bc3f-98476c5f7977
00:47:03.391 --> 00:47:05.929
the Latin last, I mean bit.

NOTE Confidence: 0.8732651

1885559f-832f-43e0-8947-0c60d01ada23
00:47:08.080 --> 00:47:10.740
So this is another way to check

NOTE Confidence: 0.8732651

a3df7a57-af4c-4a8f-8e9e-d37f80af98aa
00:47:10.740 --> 00:47:13.268
whether X is greater than Y,

NOTE Confidence: 0.8732651

adbd1296-f178-4d89-a2f6-93d4b26e4440
00:47:13.270 --> 00:47:14.882
so we're for equality.

NOTE Confidence: 0.8732651

f700b447-0f5d-4969-ac63-0ec2c08e80d9
00:47:14.882 --> 00:47:17.660
We apply exclusive number on each bit,

NOTE Confidence: 0.8732651

61b157d1-4201-4f12-a56e-8c80d278d1d3
00:47:17.660 --> 00:47:22.014
followed by the end. For greater check.

NOTE Confidence: 0.8732651

3ac2f8cb-384f-4511-b34f-b7094035dffe
00:47:22.014 --> 00:47:25.362
If X is greater than Y,

NOTE Confidence: 0.8732651

08a92aeb-554b-4232-b7ed-e2730f594c2c
00:47:25.370 --> 00:47:27.370
we have all these terms.

NOTE Confidence: 0.8732651

0ff50539-0bd1-4e7d-8a0c-37cb6d9cd00b
00:47:27.370 --> 00:47:30.064
We start from the high significant

NOTE Confidence: 0.8732651

6040648c-3f26-4f00-ae10-77f6d45d1afe
00:47:30.064 --> 00:47:32.476
bit and gradually move toward

NOTE Confidence: 0.8732651

d3b88b67-9bc5-45dc-9738-942db9711a50
00:47:32.476 --> 00:47:34.616
the lowest significant bit.

NOTE Confidence: 0.8732651

a4f7ca73-e28d-4bd3-b4d2-1a3d19a27469
00:47:34.620 --> 00:47:38.600
For the. Check for the.

NOTE Confidence: 0.8732651

4fa04551-36dc-404a-84da-9fba5916ce86
00:47:38.600 --> 00:47:41.785
Whether the X is lower than Y.

NOTE Confidence: 0.8732651

26fd609d-f1c2-445f-9a4e-08e966cd41fa
00:47:41.790 --> 00:47:43.398
Exactly the same procedure

NOTE Confidence: 0.8732651

31553657-5004-41b6-b4ca-cd8d88334c0d
00:47:43.398 --> 00:47:45.819
as previous one, so if I.

NOTE Confidence: 0.8398312

c0ae8e95-c58b-49da-affa-e9ee803b49d6
00:47:50.450 --> 00:47:52.940
Remove all of this so

NOTE Confidence: 0.8398312

f035a4bb-3b42-4c84-ac77-f55094662909
00:47:52.940 --> 00:47:55.430
this is the great check.

NOTE Confidence: 0.8398312

db519b5c-9eb0-4c3f-8eee-3a0ea9c2960e
00:47:55.430 --> 00:47:56.994
For the lower check,

NOTE Confidence: 0.8398312

0cc26585-bf57-4512-8b46-31b1beed37a9
00:47:56.994 --> 00:47:58.558
exactly the same procedure,

NOTE Confidence: 0.8398312

6923e3d6-802d-418f-8f46-f87563cdf42e
00:47:58.560 --> 00:48:01.688
but this time X is lower than Y.

NOTE Confidence: 0.8398312

7fa0d8c9-ce2f-47ef-918a-f9a6ba2794f2
00:48:01.690 --> 00:48:04.420
If we have we don't have any.

NOTE Confidence: 0.8398312

e7a77682-0cb2-40a4-a9a3-1df0cabf50e5
00:48:04.420 --> 00:48:07.052
The bits in the X and we

NOTE Confidence: 0.8398312

d66f9b47-209b-4386-8e0a-a01dbbd45949
00:48:07.052 --> 00:48:09.509
have the bit in the wine.

NOTE Confidence: 0.84056145

b13a3442-bef1-4f4f-8a81-f69ddf0ba175
00:48:11.600 --> 00:48:13.570
Again, if these two equal,

NOTE Confidence: 0.84056145

21ca0469-49b7-43d7-8e28-5eab2a371927
00:48:13.570 --> 00:48:14.710
this becomes zero.

NOTE Confidence: 0.84056145

4c2016df-79bd-4fe4-9705-5bb8766ee0f9
00:48:14.710 --> 00:48:17.370
This becomes one an it depends on

NOTE Confidence: 0.84056145

7ecb8bee-ef44-418a-b603-684e3cb1531b
00:48:17.453 --> 00:48:19.865
checking for the Y-3 Annex three.

NOTE Confidence: 0.84056145

fc6ce2ca-292c-4c32-9fa9-cfe1b6b56a40
00:48:19.870 --> 00:48:21.762
If these are equal,

NOTE Confidence: 0.84056145

6e470ee8-c46f-4a6f-9f88-9871b8642540
00:48:21.762 --> 00:48:24.600
it becomes zero and we go

NOTE Confidence: 0.84056145

38d6e0e6-c58a-4380-ac47-4421dd3c4456
00:48:24.707 --> 00:48:26.912
end up with the checking

NOTE Confidence: 0.84056145

62aaca6a-7636-4009-b55d-65f1355beb28
00:48:26.912 --> 00:48:30.069
for the Y2 and X2 and etc.

NOTE Confidence: 0.84056145

becbbd2a-0304-408b-9bb4-b57917ab5c63
00:48:30.070 --> 00:48:32.100
And here is the design.

NOTE Confidence: 0.93392986

1235b3c1-4394-4506-96b5-23d880c0c496
00:48:34.780 --> 00:48:40.180
So as you can see here. The equality

NOTE Confidence: 0.93392986

c9d079da-9038-4ae8-9bf8-13235947cc82
00:48:40.180 --> 00:48:45.800
is basically is the end of. Let's see.

NOTE Confidence: 0.8192812

97ce8c34-a2b3-48f4-a972-2d826fe486af
00:48:48.490 --> 00:48:52.886
This is or followed by the not

NOTE Confidence: 0.8192812

1c0dddde-0a11-414f-9e50-7a06f731d95c
00:48:52.886 --> 00:48:55.258
becomes nor. So this is normal.

NOTE Confidence: 0.7315643

a1852364-72cf-4ff0-a33e-b056501562d5
00:48:57.330 --> 00:49:01.775
Here we descend is a free bar.

NOTE Confidence: 0.7315643

54fe180a-1c52-4e74-abb2-77500f7ff488
00:49:01.780 --> 00:49:05.567
Be free so this is a 3/4.

NOTE Confidence: 0.74970174

c3ce9b8b-156d-4c59-8a89-7620a2e89e0d
00:49:07.710 --> 00:49:12.620
Be free. And with.

NOTE Confidence: 0.833481405555556

7fc1abd0-8e21-421c-a0ef-08315bc02b2a
00:49:17.120 --> 00:49:21.446
This ad. This is and for the

NOTE Confidence: 0.833481405555556

f13ec031-d0b6-4545-bea0-edca9be0cd5e
00:49:21.446 --> 00:49:24.850
second term, which is a 3.

NOTE Confidence: 0.7745872

2a35dcb2-15df-46e2-8eb6-18d9e784ab32
00:49:27.160 --> 00:49:32.157
And with the free bar. And then or.

NOTE Confidence: 0.7745872

a196a0c4-af4b-49dd-8fae-18bba89f9789
00:49:32.157 --> 00:49:35.720
So this is the exclusive or followed

NOTE Confidence: 0.7745872

71a60ff3-97d2-4fee-808b-62b4affca54e
00:49:35.830 --> 00:49:39.466
by the North becomes exclusive nor.

NOTE Confidence: 0.7745872

1362e169-0052-4a1a-a2eb-35d2c219076d
00:49:39.470 --> 00:49:42.045
So each output of these

NOTE Confidence: 0.7745872

88c214a7-5779-47e2-9057-a952235d666e
00:49:42.045 --> 00:49:44.105
terms are exclusive nor.

NOTE Confidence: 0.8023154

fec0734a-f297-450e-9dd2-25b8bbdc0424
00:49:47.100 --> 00:49:49.820
An all the apples of the exclusive North

NOTE Confidence: 0.8023154

f2505fcf-c02b-4c3c-ae86-f7e3758845a1
00:49:49.820 --> 00:49:52.775
goes to this and to check the equality.

NOTE Confidence: 0.63134676

1f31c6e8-cc1b-4121-b32d-171f176d1d64
00:49:54.950 --> 00:49:58.526
For greater check, you see that,

NOTE Confidence: 0.63134676

a9514005-fde4-410c-9532-ab7809da77a5
00:49:58.530 --> 00:50:01.050
uh, the high. Significant bit

NOTE Confidence: 0.63134676

6f0eaeeb-5aed-40ff-aba7-63cb6712c6eb
00:50:01.050 --> 00:50:04.340
this is the exclusive or. And.

NOTE Confidence: 0.730461826666667

a5ecdd1a-f80c-4a1f-81b7-24d537e9559c
00:50:06.440 --> 00:50:12.520
So this. I. This inputs.

NOTE Confidence: 0.730461826666667

a2f8650b-5ff4-4ad0-9a2c-763453eec889
00:50:12.520 --> 00:50:18.019
Comes from this and. And this ad.

NOTE Confidence: 0.85657597

bedf5d5a-0493-401c-a93f-34142067a0d6
00:50:20.240 --> 00:50:24.326
As you can see, here goes to this second

NOTE Confidence: 0.85657597

c57c18e7-5a71-4a9e-8765-d20fbaf16abf
00:50:24.326 --> 00:50:31.128
input, here an etc so. I just let me.

NOTE Confidence: 0.85657597

f2d6541e-4b95-4ce7-b49a-7b5e212cfbac
00:50:31.130 --> 00:50:34.328
Clear this one for greater check.

NOTE Confidence: 0.8993509

f6ad4b38-5fbd-4f79-9027-3538516e298a
00:50:37.270 --> 00:50:41.284
This is the first input that goes from here,

NOTE Confidence: 0.8993509

bb1ee214-20e1-4792-bcc6-0be976f85990
00:50:41.290 --> 00:50:45.418
which is. A3. Be free bar,

NOTE Confidence: 0.8993509

7dfab34d-154a-4ac3-8a6b-1d15f99cbe5e
00:50:45.418 --> 00:50:48.918
which means that we have one in the

NOTE Confidence: 0.8993509

b99864ea-a78a-4394-a8c1-50197a1cd50f
00:50:48.918 --> 00:50:52.262
high significant bit of A and we have

NOTE Confidence: 0.8993509

2c55df1b-3a69-403d-846a-85a7b6545c8e
00:50:52.359 --> 00:50:55.586
zero in the high significant of P.

NOTE Confidence: 0.8993509

f63676b7-fb6e-46f9-8811-8bb73afaeb57
00:50:55.590 --> 00:50:57.936
So basically it if this happens,

NOTE Confidence: 0.8993509

40519871-d95c-4e67-a787-7530f3f5f733
00:50:57.940 --> 00:51:00.804
this becomes one and we don't have to

NOTE Confidence: 0.8993509

cd78de10-e9f1-4ff5-966d-d9aa87544b26
00:51:00.804 --> 00:51:03.820
check the other inputs and outputs one.

NOTE Confidence: 0.88159215

f7cf8c7c-9db0-45b2-90fe-cfdad71cffbc
00:51:05.850 --> 00:51:09.315
So we can check for the other

NOTE Confidence: 0.88159215

376f2f18-4d92-4da4-b68d-9b6b174fadd0
00:51:09.315 --> 00:51:12.570
admin combinations. And.

NOTE Confidence: 0.88159215

2be016fe-e9fd-4a70-9324-0975760e7978
00:51:12.570 --> 00:51:14.475
I just wanted to mention

NOTE Confidence: 0.88159215

cde96eef-38f8-456d-84e1-5540e4a14f4e
00:51:14.475 --> 00:51:16.380
that these are the exclusive

NOTE Confidence: 0.88159215

f8ea369d-855b-4f72-b7d5-f7f1b85b304b
00:51:16.459 --> 00:51:18.259
nor designed by this way.

NOTE Confidence: 0.88159215

a0d87d4d-d9eb-4c7d-a26a-b6933a9a1bc0
00:51:18.260 --> 00:51:19.772
So basically the exclusive

NOTE Confidence: 0.88159215

c6c6246f-63dd-472d-b874-fbc193321070
00:51:19.772 --> 00:51:21.662
or followed by the nuts.

NOTE Confidence: 0.89042

9ed800a8-95d9-4c7e-86f9-6fc9de68f1f1
00:51:24.680 --> 00:51:26.768
OK, any questions?

NOTE Confidence: 0.8734577

6ecf17ee-92c8-41d8-ac84-0e9d8f7e7eb0
00:51:34.390 --> 00:51:38.215
So you see that we gradually move toward a,

NOTE Confidence: 0.8734577

5cfc5103-f2c0-4adb-ae97-bc34e7ac04ab
00:51:38.220 --> 00:51:41.811
I mean, putting all these together to

NOTE Confidence: 0.8734577

88221e91-aff1-4c7b-8fd4-827aa444b715
00:51:41.811 --> 00:51:45.967
build a machine that does the calculation.

NOTE Confidence: 0.8734577

6ae2362e-6583-4832-be17-089c4154457d
00:51:45.970 --> 00:51:49.390
I am ready to take your questions, if any.

NOTE Confidence: 0.9336186

f99dba79-28e6-4183-b51c-1328d130a8c2
00:51:57.140 --> 00:52:00.590
No questions. So at least

NOTE Confidence: 0.9336186

5bb0c43c-789b-4997-82f7-6dc99c9f00f6
00:52:00.590 --> 00:52:02.110
give me some feedback.

NOTE Confidence: 0.9336186

70398699-0332-469c-930e-23b601f184ce
00:52:02.110 --> 00:52:04.095
Sanmi traditional way to check

NOTE Confidence: 0.9336186

3005961b-9fce-4f97-aff1-8271cb3f3e5a
00:52:04.095 --> 00:52:06.669
that you have the focus to the.

NOTE Confidence: 0.58654773

4b802e9a-d271-464a-acdd-54bcf087cb32
00:52:09.310 --> 00:52:13.564
Lecture thank you, very thank you

NOTE Confidence: 0.58654773

cf80edff-cf01-4ff5-9a36-9ded88d54734
00:52:13.564 --> 00:52:17.819
Nick Geo Matthew have so Nathan.

NOTE Confidence: 0.6428112

9f3d91e4-31d1-4a24-9651-57642d45ab9d
00:52:19.890 --> 00:52:22.458
Thank you Philip.

NOTE Confidence: 0.8874549

f90fbedf-a317-4a2d-8821-2bd94f6b2658
00:52:25.510 --> 00:52:28.606
So we have 23 three students,

NOTE Confidence: 0.8874549

d36ff9bd-45a5-4982-b151-bf49b0d8e55e
00:52:28.610 --> 00:52:32.229
so camera thank you. Thank you Michael.

NOTE Confidence: 0.7201543

fd8d4a2e-80b3-4f9f-bbef-f265c52c6e04
00:52:37.180 --> 00:52:43.705
OK, so seems uh, everybody has the focus so.

NOTE Confidence: 0.7201543

99386718-e54e-4a1c-8f42-38e00315e9ac
00:52:43.710 --> 00:52:47.166
We don't cover any other arithmetic or any

NOTE Confidence: 0.7201543

addd5678-eb3d-477e-be8d-08c023f86060
00:52:47.166 --> 00:52:50.008
other circuits that does the arithmetic,

NOTE Confidence: 0.7201543

fe9cd0d5-b39b-4699-b061-847d64910202
00:52:50.010 --> 00:52:53.122
so the only logical operator we check is

NOTE Confidence: 0.7201543

057c7716-e7ca-4610-ae20-50d6e060a8bf
00:52:53.122 --> 00:52:57.207
the I mean binary competitor that we showed.

NOTE Confidence: 0.7201543

c4db2977-c331-4645-847f-844a9bbb80e6
00:52:57.210 --> 00:53:00.892
So there are three different ways using

NOTE Confidence: 0.7201543

30b0cd3e-371b-4503-b9f1-2db636a91561
00:53:00.892 --> 00:53:04.426
subtraction using the design by the exclusive

NOTE Confidence: 0.7201543

92019f2a-a392-4696-9ad8-30b8ab4b54ce
00:53:04.426 --> 00:53:08.000
nor or designing book from the scratch.

NOTE Confidence: 0.7201543

ad999419-97f3-46f1-9fd8-95047d132a83
00:53:08.000 --> 00:53:11.012
Uh. Also, we introduce these arithmetic

NOTE Confidence: 0.7201543

04b75693-f38b-47f5-bae5-9e23f468494b
00:53:11.012 --> 00:53:14.560
units for any other arithmetic units.

NOTE Confidence: 0.7201543

3adb685c-0cd3-4e3c-8b81-d1b88020eb1f
00:53:14.560 --> 00:53:17.458
You know how to design that.

NOTE Confidence: 0.7201543

db85cb34-04d1-4f45-9727-9afb0684d71d
00:53:17.460 --> 00:53:20.466
So basically you know the procedure

NOTE Confidence: 0.7201543

97f84705-f706-4748-ace9-62a8e73bbf4d
00:53:20.466 --> 00:53:23.743
other you design it from the scratch

NOTE Confidence: 0.7201543

d73b7820-19e0-4acc-99c8-f4d5bc69a678
00:53:23.743 --> 00:53:27.699
or you try to come up with some idea

NOTE Confidence: 0.7201543

0c2223c8-b54b-4609-a0ab-fb1639e32cdc
00:53:27.699 --> 00:53:30.499
that reuse the previous circuits.

NOTE Confidence: 0.7201543

bbbc2a0a-e585-4b18-a4a2-240d32b6b7ab
00:53:30.500 --> 00:53:33.874
For instance, using the, reusing the others,

NOTE Confidence: 0.7201543

ea3fac5e-55da-4bf8-98f7-ea362051ccb9
00:53:33.880 --> 00:53:37.660
reusing the multipliers, etc so.

NOTE Confidence: 0.7201543

451f34e8-82be-4bb5-bd76-ebc2d947d244
00:53:37.660 --> 00:53:40.428
We keep it this simple for you just

NOTE Confidence: 0.7201543

7558f1e4-c15d-495e-80b0-cafd74c51ba4
00:53:40.428 --> 00:53:44.103
to have the idea how to design the

NOTE Confidence: 0.7201543

ec3265b2-aecc-4bc8-96fd-7c5aa09ad3d3
00:53:44.103 --> 00:53:46.035
arithmetic or logical operations.

NOTE Confidence: 0.7201543

9bf42873-ff7b-41b0-a24a-1d4b42ff96c2
00:53:46.040 --> 00:53:48.966
I mean circuits for the computer machine.

NOTE Confidence: 0.7201543

d72d79a2-e3e8-4e40-8be3-4ccea7bb3ebd
00:53:48.970 --> 00:53:51.796
We already covered the binary code

NOTE Confidence: 0.7201543

e42f5607-e9a0-4a06-a723-09b37dc4b1cd
00:53:51.796 --> 00:53:54.633
converters which are used for the

NOTE Confidence: 0.7201543

1547e7cd-34c6-4b3f-bbf2-5f8cb091754e
00:53:54.633 --> 00:53:56.818
I mean very simple calculators.

NOTE Confidence: 0.7201543

e69e03c5-3f92-45d2-8098-abbe90ecef19
00:53:56.820 --> 00:54:00.327
And now we want to move toward

NOTE Confidence: 0.7201543

7dda8ed1-f189-4d20-b14c-e8375315e4f3
00:54:00.327 --> 00:54:03.881
another important part of a computer

NOTE Confidence: 0.7201543

e1b6e755-77d7-45dc-93eb-c88620bf3131
00:54:03.881 --> 00:54:06.477
system data transmission circuits.

NOTE Confidence: 0.70235115

81f668d3-7d6a-4e1a-b44a-37fb8ae65385
00:54:08.670 --> 00:54:12.060
The thing is that, uh.

NOTE Confidence: 0.70235115

6e2a7489-43ec-45be-a8cd-20bb96282e45
00:54:12.060 --> 00:54:13.880
In the computer system,

NOTE Confidence: 0.70235115

cdf853dc-d5d9-4d87-a68f-745a5d1aa31c
00:54:13.880 --> 00:54:16.155
you don't only do arithmetic,

NOTE Confidence: 0.70235115

c03a47df-0454-42cc-b9d2-97ab2006c716
00:54:16.160 --> 00:54:18.986
you have to provide the input

NOTE Confidence: 0.70235115

ea78980a-1a79-44b3-9499-631cf028921a
00:54:18.986 --> 00:54:22.302
values and then when you do the

NOTE Confidence: 0.70235115

30145fec-08e8-422f-bf49-69f568d17a40
00:54:22.302 --> 00:54:24.960
arithmetic you have to provide a

NOTE Confidence: 0.70235115

282da445-bdfa-4180-ac7f-0eead967ae69
00:54:24.960 --> 00:54:28.238
way to restore the output result.

NOTE Confidence: 0.70235115

71316fe5-9d96-45a0-8d99-4998b07826e3
00:54:28.240 --> 00:54:30.912
So they you need you have to predict

NOTE Confidence: 0.70235115

0236e962-8be9-47f7-aaa2-f217116438b1
00:54:30.912 --> 00:54:33.722
or you have to assume that there

NOTE Confidence: 0.70235115

0491253a-6209-4922-a141-bca894b6cffa
00:54:33.722 --> 00:54:36.341
are some circuits that they don't

NOTE Confidence: 0.70235115

6556a54a-2b11-4eb9-967a-f86a369ae770
00:54:36.341 --> 00:54:38.736
do arithmetic or any operation.

NOTE Confidence: 0.70235115

96daab1f-44c0-4a38-b1c4-dc7c211f1834
00:54:38.740 --> 00:54:41.980
The only task for them is that to

NOTE Confidence: 0.70235115

0b548230-62bf-42ee-813a-54e92baf528a
00:54:41.980 --> 00:54:44.826
transfer the information from one part

NOTE Confidence: 0.70235115

180d3780-48f5-41c1-9008-c1636449d415
00:54:44.826 --> 00:54:49.058
of the system to another part of the system.

NOTE Confidence: 0.70235115

a193a001-1875-447c-9c9c-668809b7ec20
00:54:49.060 --> 00:54:49.808
For instance,

NOTE Confidence: 0.70235115

e7522e8e-8c89-4ad5-bdc1-2f6405a18d24
00:54:49.808 --> 00:54:52.800
if you want to add 2 numbers X&Y,

NOTE Confidence: 0.70235115

f5de0cea-ec05-47c1-8cb6-8c9387aa1201
00:54:52.800 --> 00:54:54.918
you have to assume that you

NOTE Confidence: 0.70235115

d975ca9f-9e8d-45bc-8fce-5bf6b57cfe19
00:54:54.918 --> 00:54:57.289
store X somewhere in your system.

NOTE Confidence: 0.70235115

9271780a-baea-481e-abf6-1dfb990a5144
00:54:57.290 --> 00:55:00.062
Why somewhere in your system and you

NOTE Confidence: 0.70235115

de639039-029a-438c-b67a-10181dd9a709
00:55:00.062 --> 00:55:02.611
need some device to bring the X&Y

NOTE Confidence: 0.70235115

3c967985-921d-4451-b5db-a0a6028d7e74
00:55:02.611 --> 00:55:05.140
up until the inputs of the others,

NOTE Confidence: 0.70235115

be937656-fb4d-49fb-b88e-2969a9ec69e0
00:55:05.140 --> 00:55:07.457
and then when you ask the other

NOTE Confidence: 0.70235115

46901e32-62f3-4e64-9083-680e0b02db42
00:55:07.457 --> 00:55:09.260
to do the addition,

NOTE Confidence: 0.70235115

95602196-a126-44a3-b033-7fb2378a6c3e
00:55:09.260 --> 00:55:12.487
the result for instance gonna be S.

NOTE Confidence: 0.70235115

440daf44-ec77-416c-836b-384a415b5da2
00:55:12.490 --> 00:55:14.670
The sum of the X&Y,

NOTE Confidence: 0.70235115

e9910ac3-f338-43e7-930c-603f7a5f86d2
00:55:14.670 --> 00:55:18.117
so you have to provide a way to bring

NOTE Confidence: 0.70235115

ea71a2a9-0cb7-4797-b6e0-df43612ec71a
00:55:18.117 --> 00:55:21.614
or take the result S from the other

NOTE Confidence: 0.70235115

4847c920-8af2-4ce0-94d3-b064742ce6b9
00:55:21.614 --> 00:55:25.107
and bring it to somewhere to store,

NOTE Confidence: 0.70235115

b37704cd-8d34-47bb-bee4-cac5e579f621
00:55:25.110 --> 00:55:29.758
for instance from other parts of the system.

NOTE Confidence: 0.70235115

7e8d1d1c-b8f3-4673-8692-1c2adb817849
00:55:29.760 --> 00:55:32.483
So that's why on top of the

NOTE Confidence: 0.70235115

4e625378-37f5-4114-bce0-34d0a4a2cbde
00:55:32.483 --> 00:55:34.683
arithmetic or logical circuits we

NOTE Confidence: 0.70235115

3adabf8e-3b2b-4d5a-8c49-66c536113c15
00:55:34.683 --> 00:55:37.539
need some circuits that does the

NOTE Confidence: 0.70235115

fe362d0d-48b5-481a-a69a-665f34062ef5
00:55:37.539 --> 00:55:39.830
transmission of the data, but.

NOTE Confidence: 0.70235115

17076d54-a818-4c9c-a9e5-36c3d5c882bd
00:55:39.830 --> 00:55:41.450
Within the system,

NOTE Confidence: 0.70235115

5bc25d95-1759-439f-9d5d-71d5bdc50c63
00:55:41.450 --> 00:55:43.610
not outside the system.

NOTE Confidence: 0.70235115

52a6222e-6e7e-4c68-86c8-2ad3c8d88369
00:55:43.610 --> 00:55:46.076
We are not sending information from

NOTE Confidence: 0.70235115

59d39eba-ec3c-4af7-b702-050776220b20
00:55:46.076 --> 00:55:48.420
one computer to another computer.

NOTE Confidence: 0.70235115

233dd4c5-1493-455b-b9d8-2e488d633ec1
00:55:48.420 --> 00:55:50.694
We are inside one computer system

NOTE Confidence: 0.70235115

82c31d6c-6ddd-47f9-bcca-d9d8313bc50d
00:55:50.694 --> 00:55:53.766
and we want to provide or transmitted

NOTE Confidence: 0.70235115

bac766f8-d92a-4847-a7dc-1b6b8ed3d870
00:55:53.766 --> 00:55:56.712
data within or inside the system.

NOTE Confidence: 0.92409456

3bd67d0e-4cdc-4a1b-9163-551e605c698c
00:55:59.360 --> 00:56:04.725
OK, so. In this in this part

NOTE Confidence: 0.92409456

5f0d8d85-601b-4c09-9d62-847f0bfd158d
00:56:04.725 --> 00:56:06.529
we introduced decoders and

NOTE Confidence: 0.92409456

96084eeb-890e-48db-8642-1a36c14fbc59
00:56:06.529 --> 00:56:09.368
now you see that what we call,

NOTE Confidence: 0.92409456

9338812d-0ec7-4042-a420-5e31498a693a
00:56:09.370 --> 00:56:12.380
I mean, uh, what's the I mean?

NOTE Confidence: 0.92409456

026c402d-81dc-4f82-9025-40b54216bde3
00:56:12.380 --> 00:56:15.612
Same term or same word used for another

NOTE Confidence: 0.92409456

e6697ea3-048c-43f2-a0a1-34e398f03b5a
00:56:15.612 --> 00:56:18.850
circuit an also encoder and other types.

NOTE Confidence: 0.92409456

068d8c8d-fd37-4848-8080-7b97c7228625
00:56:18.850 --> 00:56:21.867
I think we may have enough time

NOTE Confidence: 0.92409456

d6164d34-3015-4481-b6fb-5aa2e7a3eb96
00:56:21.867 --> 00:56:24.884
for the decoder, but we can leave

NOTE Confidence: 0.92409456

28d0789e-ef5f-4cf4-ba57-dcecfd886a82
00:56:24.884 --> 00:56:27.470
the others for the next week.

NOTE Confidence: 0.85431886

d8bd5f20-97ca-419a-8dd6-cddd2e5131fa
00:56:29.510 --> 00:56:32.420
So let's start with the decoder.

NOTE Confidence: 0.85431886

6568d5f5-d5a2-4f65-849b-0f05734e1ef4
00:56:32.420 --> 00:56:37.910
So for the data transmission, the decoders.

NOTE Confidence: 0.85431886

ae298ff6-828d-4df6-b901-2dbb4c2a4fb4
00:56:37.910 --> 00:56:42.798
So. In order to I mean remove the

NOTE Confidence: 0.85431886

0b490e52-962e-4f93-8312-a1b90bbba94c
00:56:42.798 --> 00:56:45.540
confusion between the terminology.

NOTE Confidence: 0.85431886

7148f673-c124-4302-8b28-36784f29911d
00:56:45.540 --> 00:56:48.360
Usually for those decoder or

NOTE Confidence: 0.85431886

86391a12-29ec-43bf-8334-26f70e5ce4b0
00:56:48.360 --> 00:56:51.180
encoder's for the binary codes,

NOTE Confidence: 0.85431886

52bb6add-6e0a-4f08-bd61-02f2e33a921e
00:56:51.180 --> 00:56:55.728
we call them binary code decoders.

NOTE Confidence: 0.85431886

edcdf1b2-059a-4783-9e42-d23a9aa723bc
00:56:55.730 --> 00:57:01.918
For instance, the BCD to excess free.

NOTE Confidence: 0.85431886

1d637ea8-40c3-4195-b980-a58c976323a8
00:57:01.920 --> 00:57:03.318
Or the other?

NOTE Confidence: 0.85431886

24b6311d-ea20-4aa7-a130-c7e753acea3c
00:57:03.318 --> 00:57:06.114
I mean they can to access

NOTE Confidence: 0.85431886

e8723d56-d72e-484c-85ac-f08892d6e023
00:57:06.114 --> 00:57:08.906
free or busy to Aiken etc.

NOTE Confidence: 0.85431886

55cd2219-70f8-4fa0-b9fc-dc85da88555a
00:57:08.910 --> 00:57:11.376
We call them binary code decoders

NOTE Confidence: 0.85431886

4793fa27-00d8-48c5-b4c5-78f54b36766e
00:57:11.376 --> 00:57:14.581
also for the one that displays the

NOTE Confidence: 0.85431886

33a5345d-711c-4a26-9954-5236b9f5191a
00:57:14.581 --> 00:57:17.046
digital digital digit in decimal

NOTE Confidence: 0.85431886

73a1a79b-cc57-46f0-b742-31126c14e16d
00:57:17.046 --> 00:57:20.089
system we call it display decoder.

NOTE Confidence: 0.85431886

6492e8a0-75fc-496e-9a2f-0d252948a3d3
00:57:20.090 --> 00:57:24.400
Basically you input a number, for instance 9.

NOTE Confidence: 0.85431886

cb78c003-db07-4953-bcc8-40d5f9394acb
00:57:24.400 --> 00:57:29.020
And the decoder displays that for you,

NOTE Confidence: 0.85431886

4a2b829c-3bb1-402d-a7ec-bed3514d5988
00:57:29.020 --> 00:57:33.418
so the nines becomes this number.

NOTE Confidence: 0.85431886

744e1ee2-f3b4-456c-8150-de60f932c7b4
00:57:33.420 --> 00:57:35.850
This display.

NOTE Confidence: 0.85431886

bee78467-af9e-4532-b9ca-ba54adb53388
00:57:35.850 --> 00:57:39.266
So these are the we call this.

NOTE Confidence: 0.85431886

5e2f611e-7f07-4d2b-8f82-617eef21f0b7
00:57:39.270 --> 00:57:42.862
Sometimes we call it 7 segment because it

NOTE Confidence: 0.85431886

5d7ea322-32a7-467e-8793-d87e110d60bb
00:57:42.862 --> 00:57:46.586
has seven Part 7 segment display decoder.

NOTE Confidence: 0.85431886

004bbdc2-5fa1-43ae-8756-3cbf4b32f248
00:57:46.590 --> 00:57:50.542
But now I want to introduce binary decoder

NOTE Confidence: 0.85431886

745f8162-5ed1-4a56-8801-58c0266ae089
00:57:50.542 --> 00:57:53.908
and let's see what is binary code.

NOTE Confidence: 0.8453294

eeb425d5-a10b-4558-bce9-9895ce3900d1
00:57:56.050 --> 00:58:00.425
Binary decoder is in terms of coding.

NOTE Confidence: 0.8453294

d191d327-bc43-439e-b7f1-2eb342906d5b
00:58:00.430 --> 00:58:04.186
Algorithm is following the same concept.

NOTE Confidence: 0.8453294

012fa390-df57-4a7a-a08a-805257078329
00:58:04.190 --> 00:58:07.940
It codes an input to output,

NOTE Confidence: 0.8453294

b466b77b-7b2e-48dc-9b6f-ea7707003356
00:58:07.940 --> 00:58:12.698
but the way it encodes is

NOTE Confidence: 0.8453294

a568dc95-f92d-4f10-8d5a-3078b0279066
00:58:12.698 --> 00:58:15.870
a little bit different.

NOTE Confidence: 0.8453294

14e15136-27f2-4f82-a06f-a47a7cceaf7b
00:58:15.870 --> 00:58:19.412
This is the algorithm for the encoding

NOTE Confidence: 0.8453294

df6edad7-a0ad-4046-a70a-7c67451c4bf4
00:58:19.412 --> 00:58:23.987
in the OR the decoding in this second.

NOTE Confidence: 0.8453294

c6116a5b-9dd8-4987-ae04-093892c3f6c1
00:58:23.990 --> 00:58:27.670
Basically. In the input side,

NOTE Confidence: 0.8453294

90d9c7f2-ab8c-4b80-8448-06d6bc0dce3f
00:58:27.670 --> 00:58:31.570
you input a binary number.

NOTE Confidence: 0.8453294

7b0fd3b3-b740-468f-8e95-5fffadb0b721
00:58:31.570 --> 00:58:35.140
An in the output side you

NOTE Confidence: 0.8453294

28afa764-e940-478e-b7e7-74705ac9e91e
00:58:35.140 --> 00:58:38.880
have a vector that only one.

NOTE Confidence: 0.8453294

e7be3915-1800-48a8-9630-73e4b74227a2
00:58:38.880 --> 00:58:41.136
Element of the vector or one

NOTE Confidence: 0.8453294

87a9907a-dc82-4ec4-9320-028b747fcc41
00:58:41.136 --> 00:58:43.620
element of the output is 1 on

NOTE Confidence: 0.8453294

d83f44d1-1027-4956-a811-f818bd7498bb
00:58:43.620 --> 00:58:45.727
all the other outputs or all the

NOTE Confidence: 0.8453294

0a7410b3-6fef-42cd-9fa4-fc0a481e048c
00:58:45.802 --> 00:58:48.357
other elements of the output is 0.

NOTE Confidence: 0.88679624

01f3e437-fa93-496f-8726-ee71e0f47244
00:58:50.500 --> 00:58:51.817
So for instance,

NOTE Confidence: 0.88679624

077c8392-4f97-4c3e-be4a-ce8af684961f
00:58:51.817 --> 00:58:54.890
we call this vectors one hot vector

NOTE Confidence: 0.88679624

f19043ec-d597-4439-b990-fef7acd5d2d3
00:58:54.977 --> 00:58:57.868
because only one element is hot and

NOTE Confidence: 0.88679624

3972e04d-2165-4e06-991f-2d5e592d8817
00:58:57.868 --> 00:59:00.890
all the other elements are called.

NOTE Confidence: 0.88679624

70c3156a-479c-45c5-8c7a-8327b4d16772
00:59:00.890 --> 00:59:03.170
Here we have one hot vector,

NOTE Confidence: 0.88679624

28fb49c9-ea78-473c-b261-201dc8d87d30
00:59:03.170 --> 00:59:04.976
for instance here.

NOTE Confidence: 0.88679624

6e6c82bc-aaa4-4525-aa32-c0a2e5f40bde
00:59:04.976 --> 00:59:09.890
And the way this decoder works is that.

NOTE Confidence: 0.88679624

1ab0046d-a77e-4d86-a32b-b410dae15288
00:59:09.890 --> 00:59:11.418
It says that, OK,

NOTE Confidence: 0.88679624

a6450e0c-d986-4b77-81f9-4d82374eafbd
00:59:11.418 --> 00:59:13.710
this happens in the third position.

NOTE Confidence: 0.88679624

d18f89fc-f25c-446b-b04e-3f671c9af042
00:59:13.710 --> 00:59:17.567
So if I input a binary number.

NOTE Confidence: 0.88679624

2e6190c3-24ed-402b-80a8-194d5a35582b
00:59:17.570 --> 00:59:19.650
000 up until 1 one.

NOTE Confidence: 0.88679624

5fd3ec4c-5a31-4873-b291-963a7e9fed9d
00:59:19.650 --> 00:59:22.146
This is the binary number 43,

NOTE Confidence: 0.88679624

6d919cb7-55ca-4c62-bb48-7319c2b82ff2
00:59:22.150 --> 00:59:25.993
so I make the output for the third position

NOTE Confidence: 0.88679624

8ba577ce-d633-4409-9ac1-a8f273842a29
00:59:25.993 --> 00:59:29.416
one on all the other positions here.

NOTE Confidence: 0.88679624

a84a51e9-5974-41db-99d4-66633bac3746
00:59:29.420 --> 00:59:33.524
That's the way this circuit wants to work.

NOTE Confidence: 0.88679624

a102f04f-b2f3-4f69-97ce-cbee9cff647c
00:59:33.530 --> 00:59:34.202
For now,

NOTE Confidence: 0.88679624

2e435f6c-5ad0-465b-b532-ace5ee8a75d8
00:59:34.202 --> 00:59:37.630
we don't know why we need such a circuit,

NOTE Confidence: 0.88679624

b8e2091f-c49b-463c-90a8-8305835e79ba
00:59:37.630 --> 00:59:40.590
but imagine we need such as a circuit

NOTE Confidence: 0.88679624

8f47b79b-9496-4ab6-8462-9f532fc9ba58
00:59:40.590 --> 00:59:43.227
that whenever we input a binary number,

NOTE Confidence: 0.88679624

7108b923-5522-41e2-8a08-766f1b232136
00:59:43.230 --> 00:59:45.722
it creates a vector that only one

NOTE Confidence: 0.88679624

1143aaa0-3e9e-4d6e-b090-e8b59fc5fc63
00:59:45.722 --> 00:59:48.298
element is 1 and all the other

NOTE Confidence: 0.88679624

ab503469-267d-4049-a1f7-50373a2da42c
00:59:48.298 --> 00:59:51.060
elements are zero or one hot vector.

NOTE Confidence: 0.88679624

38681280-ed85-423b-a8b5-7a2f74038538
00:59:51.060 --> 00:59:54.490
So as a result this is not a one hot

NOTE Confidence: 0.88679624

181ff50d-1b22-4748-9863-ee142eb0e2b5
00:59:54.593 --> 00:59:58.025
vector because two elements are hot.

NOTE Confidence: 0.88679624

d9697386-0e78-4c81-ba5f-89224c74bb5e
00:59:58.030 --> 00:59:58.518
Another element,

NOTE Confidence: 0.88679624

476fd7d6-a7e5-4b1a-b0de-5a4fa333b762
00:59:58.518 --> 01:00:00.470
so we don't consider this as a one.

NOTE Confidence: 0.88679624

374a79d5-e71c-4d6f-843c-21ec1d0a7f28
01:00:00.470 --> 01:00:01.180
Hot vector.

NOTE Confidence: 0.925384

57b6fdc3-1720-41ba-af6b-2170a4723605
01:00:03.470 --> 01:00:04.120
So.

NOTE Confidence: 0.84035933

2fcf3e2d-6cbf-4559-b956-3b440f70e0d9
01:00:06.160 --> 01:00:08.008
What's the benefit of if we

NOTE Confidence: 0.84035933

2076c349-3ae7-4598-ac03-7f6232bd3287
01:00:08.008 --> 01:00:09.810
design circuit such a circuit?

NOTE Confidence: 0.84035933

a4e3bc9b-96c6-478a-b6e2-6f889feccccf
01:00:09.810 --> 01:00:11.310
What's the benefit?

NOTE Confidence: 0.84035933

3dc4227f-ca08-4378-b7dc-9ed6ca10e9e9
01:00:11.310 --> 01:00:15.610
What's the use of that? So.

NOTE Confidence: 0.84035933

d00db257-67be-4b6e-b12d-d6c45655e7ae
01:00:15.610 --> 01:00:18.094
Assuming that all of you know

NOTE Confidence: 0.84035933

563228c8-5282-408d-abcb-47aefea72b30
01:00:18.094 --> 01:00:21.409
what is CPU and what is a memory,

NOTE Confidence: 0.84035933

968fe4fe-3fb6-43f7-900c-6b1e3201b15e
01:00:21.410 --> 01:00:24.488
we later we discuss what's inside.

NOTE Confidence: 0.84035933

104f23d7-0ad9-44da-82a9-37ea9474482a
01:00:24.490 --> 01:00:28.333
All of these chips an what's inside the CPU,

NOTE Confidence: 0.84035933

36ff8d4e-45fe-489c-9dec-9f49758e3d93
01:00:28.340 --> 01:00:32.332
but assuming that you already know that any

NOTE Confidence: 0.84035933

8a2fb29d-6e1b-41bd-a73b-c23008fef5bd
01:00:32.332 --> 01:00:35.617
computer system has a CPU an has a memory,

NOTE Confidence: 0.84035933

3e302924-f5c3-49db-acf9-390dd7c1a2dc
01:00:35.620 --> 01:00:39.121
the task of the CPU is doing arithmetic or

NOTE Confidence: 0.84035933

4aedf1e3-badf-4658-b03e-80ae34264e25
01:00:39.121 --> 01:00:42.470
logical operation or any type of computation,

NOTE Confidence: 0.84035933

54ccbdbc-55c4-4332-9ffd-41e8aa4e1a17
01:00:42.470 --> 01:00:45.392
and the task of memory is

NOTE Confidence: 0.84035933

c5b0156d-fa7c-4e69-a6f3-eada3aca7790
01:00:45.392 --> 01:00:47.340
to restore the information.

NOTE Confidence: 0.84035933

3b061420-6382-43d5-8482-892a1a3fcb90
01:00:47.340 --> 01:00:49.480
So as I said,

NOTE Confidence: 0.84035933

761b4007-284c-42d6-ab1b-243a9aea8758
01:00:49.480 --> 01:00:54.670
we have to provide a way to bring the.

NOTE Confidence: 0.84035933

d0e7f29e-e25f-406c-a165-408546b34c7e
01:00:54.670 --> 01:00:56.430
Information to the CPU.

NOTE Confidence: 0.84035933

4a30e69f-5f6a-4a65-b773-08f375e34bc2
01:00:56.430 --> 01:00:59.479
And the CPU does the calculation and

NOTE Confidence: 0.84035933

039dfbc3-f9d3-47ab-a118-7cb4c374c8f4
01:00:59.479 --> 01:01:02.055
we have to come up with the idea

NOTE Confidence: 0.84035933

ab6044c4-faa4-4019-b2e3-86f9e619ec90
01:01:02.055 --> 01:01:04.773
that bring the result back to the

NOTE Confidence: 0.84035933

e0e79ac6-0914-46fc-b171-23f18d7167cc
01:01:04.773 --> 01:01:06.940
memory and stored in the memory.

NOTE Confidence: 0.9202005

cfdc5206-6bc0-468e-ba76-a3b6f2bd40b9
01:01:09.210 --> 01:01:09.860
So.

NOTE Confidence: 0.8862749

500d927c-85ff-4ec7-81df-9716e968b3f6
01:01:12.310 --> 01:01:15.215
Here are in this part we need

NOTE Confidence: 0.8862749

96930e7e-7b43-4cca-a8c6-c5dbd99d94ab
01:01:15.215 --> 01:01:17.420
some circuits that does this.

NOTE Confidence: 0.8862749

41eb15bc-0236-494e-aab8-8a59da7ac6ad
01:01:17.420 --> 01:01:20.353
Based on the idea that explained decode

NOTE Confidence: 0.8862749

96340c6e-3cfd-4fa8-9227-7d67c512959d
01:01:20.353 --> 01:01:23.551
such a decoder that you input a binary

NOTE Confidence: 0.8862749

cf779c60-c4d2-4a01-a694-3b81a0e58bb4
01:01:23.551 --> 01:01:26.350
number and it outputs A1 hot vector.

NOTE Confidence: 0.8406941

238073e7-1a4d-4d44-b721-52e265031ff7
01:01:28.900 --> 01:01:32.197
Uh, what's your opinion about the use

NOTE Confidence: 0.8406941

683971d0-7716-49e4-9c97-f1a8f0fadf66
01:01:32.197 --> 01:01:36.629
of such a decoder in a computer system?

NOTE Confidence: 0.8406941

af4ddd2f-1ce7-4055-9b48-2fa3ab8bb7d9
01:01:36.630 --> 01:01:39.108
Anybody can have a guess about this.

NOTE Confidence: 0.8302115

fc13ae42-a607-42dd-9f83-46586f551b76
01:01:43.570 --> 01:01:46.738
If somebody says that I want to design

NOTE Confidence: 0.8302115

c5b7b431-08fa-42b6-bd6b-2b9f77e1deb9
01:01:46.738 --> 01:01:50.006
A circuit that does does this decoding,

NOTE Confidence: 0.8302115

ed876471-cdcf-4246-9537-278b6f43b340
01:01:50.010 --> 01:01:52.455
you input a binary number

NOTE Confidence: 0.8302115

aa35e6f2-9b51-47c5-b6cf-967543261642
01:01:52.455 --> 01:01:55.800
an I output A1 hot vector.

NOTE Confidence: 0.8302115

14f084b6-53fd-4703-8129-9966a8d95363
01:01:55.800 --> 01:01:57.888
And in another another person wants

NOTE Confidence: 0.8302115

72a12157-737a-4b79-b4eb-a5fffdba0598
01:01:57.888 --> 01:02:00.337
to build a system that has a CPU.

NOTE Confidence: 0.8302115

997b6db8-7622-4d78-bf68-3b21383af181
01:02:00.340 --> 01:02:02.782
Anna memory Ann wants to transfer

NOTE Confidence: 0.8302115

bb5c8c98-6568-4bce-846f-cc1d5ebfb0a1
01:02:02.782 --> 01:02:04.410
information from memory to

NOTE Confidence: 0.8302115

30e06acf-a84b-4f3c-9e8f-7712be619d24
01:02:04.487 --> 01:02:06.047
the CPU and vice versa.

NOTE Confidence: 0.8302115

ff845280-86fa-448f-8e83-65b362a66d61
01:02:06.050 --> 01:02:07.830
So do you have any?

NOTE Confidence: 0.8302115

cd3742fc-4864-4aba-86cc-9d58607116d9
01:02:07.830 --> 01:02:10.422
Yes, that was the use of this type

NOTE Confidence: 0.8302115

2a799202-a9d2-492f-9b5f-722ef9888089
01:02:10.422 --> 01:02:12.810
of decoder in this complex system.

NOTE Confidence: 0.5620988

cf862fa0-7212-407c-9bf4-45e59f143703
01:02:18.890 --> 01:02:23.110
The efficiency here, uh.

NOTE Confidence: 0.5620988

0d119b81-98d2-4bac-8829-5e9d0a2ce129
01:02:23.110 --> 01:02:28.500
Efficiency misses speed, so how a decoder?

NOTE Confidence: 0.5620988

c1bbf353-d2f1-49bd-9935-2c0c0676ca4e
01:02:28.500 --> 01:02:32.196
This type of decoder helps with a lot

NOTE Confidence: 0.5620988

a46822ea-d80c-4620-9d3d-50be9b2ef6c3
01:02:32.196 --> 01:02:35.636
of speed or help with more speed.

NOTE Confidence: 0.85060567

cc0030d8-1cff-4303-adfb-99c6317b1468
01:02:41.500 --> 01:02:45.483
You can think you can think of

NOTE Confidence: 0.85060567

3fbdbc33-22ee-421c-84bd-b3d7fb0ba62b
01:02:45.483 --> 01:02:51.254
memory as a as a houses or locations

NOTE Confidence: 0.85060567

7e9e33c8-4431-497d-a087-c872cd5f1b44
01:02:51.254 --> 01:02:54.390
that is stored information.

NOTE Confidence: 0.85060567

f784b3d6-64d4-4774-82fc-0a2682962e7c
01:02:54.390 --> 01:02:57.890
Also, you can think of the CPU as a factory.

NOTE Confidence: 0.85060567

9003856b-1b7e-46ca-a9cc-ba9eb2e3589a
01:02:57.890 --> 01:03:00.466
So in order to process the information

NOTE Confidence: 0.85060567

a9cfb915-c5f0-4afd-9fa8-d31145844244
01:03:00.466 --> 01:03:03.418
or in order to process the products,

NOTE Confidence: 0.85060567

d22d3b57-8174-41d9-b41f-baf69a49442c
01:03:03.420 --> 01:03:06.150
you have to bring the products from

NOTE Confidence: 0.85060567

bffda79d-e547-4e7e-b66a-3409bf310293
01:03:06.150 --> 01:03:08.565
the warehouses or from the locations

NOTE Confidence: 0.85060567

9bce17ce-8d7d-405e-8dac-ae6c45bd33a9
01:03:08.565 --> 01:03:11.295
to the factory and you process the

NOTE Confidence: 0.85060567

ee8d2af6-e05f-4635-b478-bc4dfb29ce06
01:03:11.369 --> 01:03:14.099
product in the factory and then bring

NOTE Confidence: 0.85060567

eecafc67-56a0-47e7-9cf0-35b9d746de51
01:03:14.099 --> 01:03:16.704
back the result to some warehouses.

NOTE Confidence: 0.85060567

15561817-65ec-4f00-aeea-c769c1eee9ea
01:03:16.704 --> 01:03:19.094
But The thing is that.

NOTE Confidence: 0.85060567

0ee9a4a6-68f6-4fd3-a8e7-869b9043fba3
01:03:19.100 --> 01:03:21.940
When you're at the factory and you want

NOTE Confidence: 0.85060567

8cd5ef9a-b564-4254-a112-08622d98133c
01:03:21.940 --> 01:03:24.882
to bring some information or bring some

NOTE Confidence: 0.85060567

6ede1324-90bb-4bab-ac59-cceaafa14666
01:03:24.882 --> 01:03:28.070
product in your factory and process that.

NOTE Confidence: 0.85060567

722a885c-9074-48c2-be01-e26b60128de3
01:03:28.070 --> 01:03:31.486
Assuming that you have one location here,

NOTE Confidence: 0.85060567

87a2c4da-958c-4632-a241-0d56fc695d74
01:03:31.490 --> 01:03:33.386
one location here,

NOTE Confidence: 0.85060567

d480a991-d157-4dbd-9ac6-b394f7256808
01:03:33.386 --> 01:03:37.810
here you have for instance an locations.

NOTE Confidence: 0.85060567

0be1f129-c35b-4005-8b6b-4d0fdf4e871c
01:03:37.810 --> 01:03:40.970
And you want to.

NOTE Confidence: 0.85060567

db5b5115-1ca4-472b-9ac7-fe18ab8f91ab
01:03:40.970 --> 01:03:46.794
Uh, bring inside one product to your factory.

NOTE Confidence: 0.85060567

3ccd08da-735f-4d7c-8aee-511dccc1c0f0
01:03:46.800 --> 01:03:48.408
So what's the?

NOTE Confidence: 0.85060567

00a16d61-ece8-47a1-b109-b32bcc7fe862
01:03:48.408 --> 01:03:51.088
What's the necessary operation here?

NOTE Confidence: 0.75212

d5998205-3cdf-462b-886d-a28704cbd91c
01:03:55.040 --> 01:03:58.896
I should Tatiana is a little bit close.

NOTE Confidence: 0.75212

0a2acb4c-b105-4a8f-a11f-c2b4f213c9ed
01:03:58.900 --> 01:04:01.777
So basically the first step is that

NOTE Confidence: 0.75212

ae6c00a8-ef3d-493f-8e94-a4ce6ef43958
01:04:01.777 --> 01:04:04.175
before transferring the product or

NOTE Confidence: 0.75212

772cc450-0b42-4a96-a4fa-f76d76e8af31
01:04:04.175 --> 01:04:06.359
before transferring the information,

NOTE Confidence: 0.75212

1152206b-4b4d-4605-b37c-59fd6f198c9f
01:04:06.360 --> 01:04:09.246
the CPU first or the factory

NOTE Confidence: 0.75212

623341df-8849-4947-aedb-020597a4edaa
01:04:09.246 --> 01:04:12.630
should first says that where is the

NOTE Confidence: 0.75212

ef93f77b-075e-4f41-a933-01b241e69a46
01:04:12.630 --> 01:04:15.348
location of the product or where

NOTE Confidence: 0.75212

fe36e743-ed47-47ee-8429-9c8864b554b0
01:04:15.348 --> 01:04:18.918
is the location of the information.

NOTE Confidence: 0.75212

5c906ace-84c8-4de7-a76e-b3f2261eb637
01:04:18.920 --> 01:04:21.657
So imagine here we have N different

NOTE Confidence: 0.75212

7d23e759-d583-47b0-b05e-06b73b99d23c
01:04:21.657 --> 01:04:23.890
location for the informations.

NOTE Confidence: 0.75212

f1c2daf8-9e89-44ea-9a29-db1b3635d798
01:04:23.890 --> 01:04:27.341
One of the these locations have our

NOTE Confidence: 0.75212

eddaec16-fe4e-4476-96b0-c24af80ebca0
01:04:27.341 --> 01:04:30.091
desired information and we have to

NOTE Confidence: 0.75212

65f92833-4878-402a-910d-0ecec023e19a
01:04:30.091 --> 01:04:32.842
select that location 1st and then we

NOTE Confidence: 0.75212

e07698eb-c641-45fd-beb1-29f1d2ca662a
01:04:32.930 --> 01:04:36.094
ask to transfer the information or that

NOTE Confidence: 0.75212

ebf3e9fa-4cbf-4805-ba84-d896e2793b8d
01:04:36.094 --> 01:04:40.740
product to the factory or to the CPU.

NOTE Confidence: 0.75212

2c8e03fe-0ef3-4e55-b424-b4f1e729476e
01:04:40.740 --> 01:04:44.028
So that's the main use of this type

NOTE Confidence: 0.75212

6bea7d9e-a50d-4086-a7ec-1bfe9cd52022
01:04:44.028 --> 01:04:47.962
of decoder. So basically we assign.

NOTE Confidence: 0.75212

004e6245-240b-4367-808b-e7424b57a47f
01:04:47.962 --> 01:04:51.852
One bit to each location.

NOTE Confidence: 0.75212

2023e20f-2a85-4790-a550-d40d8769a094
01:04:51.860 --> 01:04:54.961
Which is very similar to the address

NOTE Confidence: 0.75212

a2157b68-b01f-4493-9f23-78ebdd077090
01:04:54.961 --> 01:04:58.082
of that location and then we say

NOTE Confidence: 0.75212

6fedb721-6d43-489f-a2b1-e47ca365c848
01:04:58.082 --> 01:05:00.212
that if your desired information

NOTE Confidence: 0.75212

6d322649-43db-4407-a4d1-6192ab4ec813
01:05:00.212 --> 01:05:02.569
is in the first location.

NOTE Confidence: 0.75212

52a42de7-2dd1-4f1f-add6-eae748949b53
01:05:02.570 --> 01:05:03.842
Select the first one.

NOTE Confidence: 0.75212

5ac220c6-9698-4304-8c22-4b8b49a308d3
01:05:03.842 --> 01:05:06.665
And now we know that we have to

NOTE Confidence: 0.75212

9616a897-e87a-4565-806a-82980d1ecebf
01:05:06.665 --> 01:05:09.173
transfer the information from the first

NOTE Confidence: 0.75212

d93f3111-dfb8-4f16-85e8-866984e7bfc7
01:05:09.173 --> 01:05:11.708
location to the for the processing.

NOTE Confidence: 0.75212

ab439db9-20c2-4dd8-aac2-313da62be997
01:05:11.710 --> 01:05:14.728
If the your information is in

NOTE Confidence: 0.75212

4b3bacbd-5e07-4196-9113-3c898b3561fd
01:05:14.728 --> 01:05:16.237
the second location.

NOTE Confidence: 0.75212

a089b2be-0ce7-40b1-be26-43eddc795339
01:05:16.240 --> 01:05:18.320
Make the second location one

NOTE Confidence: 0.75212

e99375df-7feb-48b6-ad48-d029cc36d4fd
01:05:18.320 --> 01:05:19.984
and the others 0.

NOTE Confidence: 0.75212

9c01d436-959b-4e91-a825-d64835584bf8
01:05:19.990 --> 01:05:20.836
Third location,

NOTE Confidence: 0.75212

96a5a3c8-af73-4d20-a8f6-03150e4f94ab
01:05:20.836 --> 01:05:22.951
so at anytime your information

NOTE Confidence: 0.75212

7bfba5d8-4c28-4646-a828-1d79fc37bcc0
01:05:22.951 --> 01:05:25.860
is only in one of the locations,

NOTE Confidence: 0.75212

99a10bfc-fc96-4104-b4db-b2d37d4ee249
01:05:25.860 --> 01:05:28.650
so you make it 1 just to let the

NOTE Confidence: 0.75212

8f29a3a7-c4bf-4ed2-9f4a-05f66a782e25
01:05:28.650 --> 01:05:30.726
system knows that the information

NOTE Confidence: 0.75212

92dd70bc-c998-4d41-8f45-136bddfb6781
01:05:30.726 --> 01:05:33.847
is in that location and in the

NOTE Confidence: 0.75212

4732a5fe-b55c-4627-bdae-f9740479aee5
01:05:33.847 --> 01:05:36.392
second phase we start transferring

NOTE Confidence: 0.75212

705865de-3755-4e98-9282-71a1d89a90da
01:05:36.392 --> 01:05:38.845
the information from that location.

NOTE Confidence: 0.75212

a6b3806a-86ab-453d-bef5-b3f11406f550
01:05:38.845 --> 01:05:42.165
So far we deal with the first step

NOTE Confidence: 0.75212

1121c3f6-9a4f-4d57-8401-f67c5b758fc8
01:05:42.165 --> 01:05:45.339
which is selecting the location of

NOTE Confidence: 0.75212

9a196273-9bc3-4d9b-b2a6-50fbc31ae287
01:05:45.339 --> 01:05:47.727
the information. Exactly like address.

NOTE Confidence: 0.75212

bf4674c4-04ce-479f-a12c-f2472295c468
01:05:47.727 --> 01:05:50.361
So first we have to determine

NOTE Confidence: 0.75212

a4a2395b-b718-4f05-a197-5474db33fa4d
01:05:50.361 --> 01:05:53.516
what is the location or where the

NOTE Confidence: 0.75212

2bc9f5a9-1aba-432d-9c33-aaf04222b8d3
01:05:53.516 --> 01:05:55.590
location of the information is.

NOTE Confidence: 0.86264807

1345b680-eaac-4c1f-8248-3a5f31c90cea
01:05:58.090 --> 01:06:01.478
So here is the main role of

NOTE Confidence: 0.86264807

56565ab3-c587-46f5-9ca6-75d5d951373f
01:06:01.478 --> 01:06:04.349
the this type of decoder.

NOTE Confidence: 0.86264807

8ca3afcf-062e-4633-b959-4c9d44015357
01:06:04.350 --> 01:06:07.512
So basically assuming we have only

NOTE Confidence: 0.86264807

7aee3e34-b5e9-4a88-8e74-9e9c59c6ad87
01:06:07.512 --> 01:06:11.230
two location to store the information.

NOTE Confidence: 0.86264807

3f773c85-b3e1-40c9-bff3-e854ea7acc7c
01:06:11.230 --> 01:06:13.578
The location, for instance

NOTE Confidence: 0.86264807

2f278f45-30e4-4125-9969-c98169947ee7
01:06:13.578 --> 01:06:16.513
A and the location B.

NOTE Confidence: 0.86264807

ebf77e48-0703-4958-bb71-e255bc2d5709
01:06:16.520 --> 01:06:19.048
In order to select each of these locations,

NOTE Confidence: 0.86264807

11b42e68-de64-4c97-a59d-656d47eff858
01:06:19.050 --> 01:06:20.940
you have to say that OK.

NOTE Confidence: 0.86264807

c9764e65-b63f-4ddd-bdfa-3cf04c00e288
01:06:20.940 --> 01:06:22.836
If I want to transfer the

NOTE Confidence: 0.86264807

b40cf04d-9a2a-4ba8-b792-25d9a4a62850
01:06:22.836 --> 01:06:25.390
information from a, I make it 1.

NOTE Confidence: 0.86264807

af035563-9eab-409f-b628-a9f395ed87e9
01:06:25.390 --> 01:06:27.390
And the other location 0.

NOTE Confidence: 0.86264807

86eb829f-ceca-4e68-ab8f-9b5696622857
01:06:27.390 --> 01:06:29.710
This way I am saying that I am

NOTE Confidence: 0.86264807

42829aee-880d-4485-b20a-7fac845fef02
01:06:29.710 --> 01:06:31.350
selecting the first location.

NOTE Confidence: 0.8949682

fc13feac-80fe-417d-bde3-fe5196c70964
01:06:33.660 --> 01:06:34.617
Otherwise, for instance,

NOTE Confidence: 0.8949682

0015606c-2a6e-409f-955d-3c70b138e35d
01:06:34.617 --> 01:06:37.605
if you make it 0 A and then for

NOTE Confidence: 0.8949682

ad0de031-703d-4315-8111-4e68463fc1ec
01:06:37.605 --> 01:06:39.645
the B your information is in

NOTE Confidence: 0.8949682

095857e8-6934-4eb0-a508-f485273a0c55
01:06:39.645 --> 01:06:42.948
the location B, you make B1.

NOTE Confidence: 0.8949682

9f7c8d2d-a859-4d37-9ed7-817050d8de30
01:06:42.950 --> 01:06:46.613
So at anytime one of the locations is active,

NOTE Confidence: 0.8949682

e92d1f72-af1a-4fc4-b1e1-e18d67f9eeda
01:06:46.620 --> 01:06:50.310
the other locations is not active.

NOTE Confidence: 0.8949682

06d0be72-01b3-484e-a955-4a4ec1cde533
01:06:50.310 --> 01:06:52.554
There is no case that you

NOTE Confidence: 0.8949682

ccbd9b15-e211-4e81-9c38-58a9f65c7fea
01:06:52.554 --> 01:06:54.920
make both of them one. Why?

NOTE Confidence: 0.8949682

e0c85f1a-2b2c-47f7-a61a-de2b39d06754
01:06:54.920 --> 01:06:57.070
Because the location at your

NOTE Confidence: 0.8949682

f5108d56-0093-4145-8eff-80e3475fb241
01:06:57.070 --> 01:06:59.780
information is only at one location

NOTE Confidence: 0.8949682

32e357d0-a9b2-4f0a-8213-5b5edb2cba87
01:06:59.780 --> 01:07:02.498
and you need to transfer that

NOTE Confidence: 0.8949682

b8a633db-84a6-4753-815e-a004ee401825
01:07:02.498 --> 01:07:04.719
information from one location so.

NOTE Confidence: 0.8949682

4e315c1e-3976-4b1c-b198-bb1277f8fd25
01:07:04.720 --> 01:07:08.370
Also. If both are zero,

NOTE Confidence: 0.8949682

1f85d434-1a63-476c-878c-3bbed01adc2d
01:07:08.370 --> 01:07:10.545
meaning that you don't select

NOTE Confidence: 0.8949682

6c37d106-4d12-4da2-85ed-909618f84041
01:07:10.545 --> 01:07:12.688
any of these locations.

NOTE Confidence: 0.8949682

bc66cfbb-695e-4510-a86d-0eb2872497e8
01:07:12.690 --> 01:07:14.688
It means that your information is

NOTE Confidence: 0.8949682

f1976d47-ca39-44fc-b68e-805760cb90d1
01:07:14.688 --> 01:07:17.488
not in these two locations or other

NOTE Confidence: 0.8949682

6b492fe0-6cb8-4f79-ba88-a46cb72e2e88
01:07:17.488 --> 01:07:20.284
locations that do information actually size.

NOTE Confidence: 0.8949682

23031dc3-6ad2-4471-94f2-f9cd732b33c9
01:07:20.290 --> 01:07:23.153
So now let's do the first part

NOTE Confidence: 0.8949682

da4fadbb-5e17-4a14-ace0-545a9925119c
01:07:23.153 --> 01:07:25.270
with selecting their locations.

NOTE Confidence: 0.8949682

0217fabe-6dd3-47a1-a063-ca486afb97b8
01:07:25.270 --> 01:07:27.898
Assuming you have two locations in

NOTE Confidence: 0.8949682

e56c8d4b-0def-4881-a1ee-13feafa4fbf8
01:07:27.898 --> 01:07:30.789
order to select between two locations,

NOTE Confidence: 0.8949682

81203bb2-3125-402b-8032-935d92454476
01:07:30.790 --> 01:07:34.440
you only need 1 bit.

NOTE Confidence: 0.8949682

4246cd83-7366-42a5-9691-85dd8d77ecb0
01:07:34.440 --> 01:07:37.470
If your input is 0.

NOTE Confidence: 0.8949682

f058f892-97c8-4516-a1a0-cad520dd3199
01:07:37.470 --> 01:07:39.857
You say that I make the output

NOTE Confidence: 0.8949682

5a8bab3c-3372-4ab9-9a42-67245b59acba
01:07:39.857 --> 01:07:42.159
one here and then zero here.

NOTE Confidence: 0.90133625

c60e8e63-805d-46b9-b9eb-40554919ef83
01:07:46.850 --> 01:07:49.790
If the information in the second

NOTE Confidence: 0.90133625

c1773465-2df3-43aa-a23e-b4dc181bb91d
01:07:49.790 --> 01:07:53.019
location I change the input to one.

NOTE Confidence: 0.90133625

d1c98400-8ea5-40e6-afde-d992fd25da92
01:07:53.020 --> 01:07:56.989
And in a way that it outputs the second

NOTE Confidence: 0.90133625

5416b89b-3a1f-488b-bc0c-fee5fb7870a8
01:07:56.989 --> 01:08:00.188
location one and the first location 0.

NOTE Confidence: 0.90133625

ab1df8ac-35e0-4d9b-85c3-58a0b527ec4a
01:08:00.190 --> 01:08:02.829
So we haven't designed this circuit yet,

NOTE Confidence: 0.90133625

d1ba8809-24f7-4ee3-84ec-a46ebd052e70
01:08:02.830 --> 01:08:04.975
but this is the desired

NOTE Confidence: 0.90133625

1a292082-e425-40c7-8f69-ad625403b836
01:08:04.975 --> 01:08:07.850
circuit that we want to design.

NOTE Confidence: 0.90133625

c202f16b-04bd-4f0d-9d42-93db86a074aa
01:08:07.850 --> 01:08:10.762
So based on one variable we can select

NOTE Confidence: 0.90133625

96f16400-a540-45e0-a5a9-a5f44597404a
01:08:10.762 --> 01:08:13.308
between two locations if it is zero,

NOTE Confidence: 0.90133625

b13106db-5dc7-4fd7-b1e1-73fcb5ebbceb
01:08:13.310 --> 01:08:15.858
the first location, if it is 1,

NOTE Confidence: 0.90133625

c9cac33b-7220-4010-a8e4-e4b2e219cfca
01:08:15.860 --> 01:08:18.809
the second location.

NOTE Confidence: 0.90133625

039fcf42-7972-476f-b715-49333706f395
01:08:18.810 --> 01:08:22.530
So if we design this by two stable,

NOTE Confidence: 0.90133625

dadb3480-6f31-4fdf-b6a3-00ac07966cf5
01:08:22.530 --> 01:08:25.026
we can then call it decoder

NOTE Confidence: 0.90133625

f1c6091a-1726-499c-ba5b-f94b3f2f3ed1
01:08:25.026 --> 01:08:28.109
one by two by one variable.

NOTE Confidence: 0.90133625

b5f6d173-01bb-4b6f-bd60-79fcc74f7ef2
01:08:28.110 --> 01:08:33.206
We can select two locations and two can

NOTE Confidence: 0.90133625

5adb16b4-137f-4b5a-b51c-3303dd565c36
01:08:33.206 --> 01:08:37.417
be described as 2 to the power of 1.

NOTE Confidence: 0.90133625

7541ed61-6889-462f-934d-5e146168db3f
01:08:37.420 --> 01:08:41.308
So let's design the inside of this circuit.

NOTE Confidence: 0.91556255

67d77a68-0257-4e11-820c-13969e8b4e34
01:08:43.540 --> 01:08:45.556
From the truth table.

NOTE Confidence: 0.91556255

f9646083-f980-40d7-98a8-b2ae78c1d677
01:08:45.556 --> 01:08:49.700
We have only one variable in the input.

NOTE Confidence: 0.91556255

051a39f8-84e3-4411-91b3-bf6a120ddd8c
01:08:49.700 --> 01:08:53.364
But we have two variables in the outputs.

NOTE Confidence: 0.91556255

55e8970e-fe0c-4286-a39b-396633feb365
01:08:53.370 --> 01:08:56.628
If X is 0, the first output is 1,

NOTE Confidence: 0.91556255

cae97ee0-a531-4904-a50c-268de2b1616c
01:08:56.630 --> 01:08:59.340
the second output is 0.

NOTE Confidence: 0.91556255

dd200ee9-8c26-4287-bfc0-4008c3fb8edf
01:08:59.340 --> 01:09:02.724
If X is 1, the first output is 0,

NOTE Confidence: 0.91556255

7b89d0de-5515-42f2-a56e-05b53086846e
01:09:02.730 --> 01:09:05.640
the second output is 1.

NOTE Confidence: 0.91556255

fcd68978-a1fa-4db9-a5af-0c24f0cd2143
01:09:05.640 --> 01:09:08.657
So it's kind of very weird design,

NOTE Confidence: 0.91556255

c1a6b512-6af3-45fd-8775-acc7b153ce51
01:09:08.660 --> 01:09:09.956
but very simple.

NOTE Confidence: 0.91556255

b887f948-35b8-4ad4-8ab6-5c7829735b82
01:09:09.956 --> 01:09:12.980
One binary variable input in the input,

NOTE Confidence: 0.91556255

936e069e-22f9-414b-9837-96519e80f10d
01:09:12.980 --> 01:09:17.138
two binary variable in the app.

NOTE Confidence: 0.91556255

5e6a0857-57cd-474b-bf8b-0375de66b787
01:09:17.140 --> 01:09:21.220
An if you write it as a sum of midterms,

NOTE Confidence: 0.91556255

7d7dbdc5-95bb-4a95-bde9-69998761dfa4
01:09:21.220 --> 01:09:24.015
so the zero becomes one

NOTE Confidence: 0.91556255

cc1c61d6-c596-4d82-b02f-4b75d5f4fd8b
01:09:24.015 --> 01:09:26.810
when we have midterm 0.

NOTE Confidence: 0.91556255

7f7906b5-1499-4d28-bb5f-cb090c54173f
01:09:26.810 --> 01:09:31.118
D1, the second output becomes one

NOTE Confidence: 0.91556255

e11ae7dc-c5e7-4157-9bac-eb2ce501cfdc
01:09:31.118 --> 01:09:36.346
whenever we have M1 or the. Mr One,

NOTE Confidence: 0.91556255

5ce099a4-24d7-4cfd-92e0-57f6961b20e9
01:09:36.346 --> 01:09:41.410
so you see that it's very nice equation.

NOTE Confidence: 0.91556255

3bd08228-95f7-43ef-9538-e0400244281b
01:09:41.410 --> 01:09:46.378
If you label the output from the zero D1D2D3,

NOTE Confidence: 0.91556255

1158b79a-0aa8-4918-9eb0-8681b289a828
01:09:46.380 --> 01:09:51.434
they become equal to the exact minter.

NOTE Confidence: 0.91556255

704566ed-72c8-4610-8336-d4c586ca1346
01:09:51.440 --> 01:09:53.368
And here's the design.

NOTE Confidence: 0.91556255

7e3c8d7a-8fc7-4e8a-ad3d-2aaf51f87850
01:09:53.368 --> 01:09:55.778
So if it is 0.

NOTE Confidence: 0.91556255

506915d9-deb0-4821-af9a-b527dff7a53a
01:09:55.780 --> 01:09:57.163
Zero goals here.

NOTE Confidence: 0.91556255

b9605133-ffac-463a-956e-1bdb2817e48f
01:09:57.163 --> 01:10:00.092
Here becomes zero, it becomes not.

NOTE Confidence: 0.91556255

374e4e53-7241-46b0-84e4-50674b3cdef2
01:10:00.092 --> 01:10:01.120
Comes one,

NOTE Confidence: 0.91556255

0712ed60-40bb-4b89-837a-72b40c296682
01:10:01.120 --> 01:10:02.878
so the first output is 1,

NOTE Confidence: 0.91556255

1e53d53c-7546-465a-b6ec-47c706f5fd67
01:10:02.880 --> 01:10:04.060
the second at 0.

NOTE Confidence: 0.8808488

bc53610f-fab4-48c1-9d6d-e3ad18d80901
01:10:06.080 --> 01:10:08.928
Let let's extend it to this second to

NOTE Confidence: 0.8808488

64157f9b-4446-410f-951c-df78d2f5d6c9
01:10:08.928 --> 01:10:11.765
expand it to have more locations in

NOTE Confidence: 0.8808488

51e762c7-89af-48ad-ae27-cd360686639c
01:10:11.765 --> 01:10:14.650
order to select between more locations,

NOTE Confidence: 0.8808488

9cf3b349-d99b-499d-98c6-cf5e634c4f10
01:10:14.650 --> 01:10:18.276
you need more bits in the input.

NOTE Confidence: 0.8808488

258e7fa7-f251-435d-8aa9-61083bfc5b4a
01:10:18.280 --> 01:10:22.456
So if you have two bits in the input,

NOTE Confidence: 0.8808488

b0afea31-5341-4923-a86c-d09e9de0c550
01:10:22.460 --> 01:10:24.308
what are the possibilities?

NOTE Confidence: 0.8808488

4099225f-1141-4695-9521-7fc64081d62b
01:10:24.308 --> 01:10:28.948
You have 00, you have 01, you have 1 zero.

NOTE Confidence: 0.8808488

225aeb6a-f4f1-4d39-aec1-56fa490b63b9
01:10:28.950 --> 01:10:33.438
You have one one, so you have four

NOTE Confidence: 0.8808488

26a2d9bc-3575-4ebf-b394-ac40bdaba3f1
01:10:33.438 --> 01:10:36.318
possibilities or two to the two.

NOTE Confidence: 0.8808488

7a69b7fa-9810-45b5-ac2d-359e6a18fe78
01:10:36.320 --> 01:10:40.736
Outputs with two binary inputs you can select

NOTE Confidence: 0.8808488

7243c46d-9f09-47c2-9d99-4c80da65724b
01:10:40.736 --> 01:10:44.748
among two to the power of two outputs.

NOTE Confidence: 0.8808488

adc60ef8-bf62-4465-b9b0-0a3de5850420
01:10:44.750 --> 01:10:48.187
As a result, you have four outputs.

NOTE Confidence: 0.8808488

bcf32edc-3915-4db7-b07d-461cee915af0
01:10:48.190 --> 01:10:51.112
You can label them between the

NOTE Confidence: 0.8808488

ccfb1a71-5dbc-491c-b20b-1ec117192fe3
01:10:51.112 --> 01:10:54.099
zero D1 up until the free,

NOTE Confidence: 0.8808488

df68f3e1-0418-4db5-ad08-4401c1ec5198
01:10:54.100 --> 01:10:58.540
and if you design the circuit here is

NOTE Confidence: 0.8808488

7cb537fc-a90e-4a15-81ed-093bf61a1e9d
01:10:58.540 --> 01:11:02.756
this desired an I mean behavior both 00.

NOTE Confidence: 0.8808488

986f739c-90e0-43ab-ae48-b6055fbd2b0f
01:11:02.760 --> 01:11:06.450
Select the first location 10

NOTE Confidence: 0.8808488

1c99d8bd-0ca9-4eb6-8b39-0471059c6dc5
01:11:06.450 --> 01:11:09.402
select this second location.

NOTE Confidence: 0.8808488

37b32bb3-7571-45e4-8e3e-f8aead49d7ff
01:11:09.410 --> 01:11:13.026
Zero, 1:30 and 1:00. One the last location.

NOTE Confidence: 0.8808488

4e5a233f-7238-4a2c-8a3b-2f765d36b834
01:11:13.030 --> 01:11:16.187
So you see that, as Tatiana said,

NOTE Confidence: 0.8808488

c40a6008-b972-4493-9b4a-d2e444c2eb97
01:11:16.190 --> 01:11:20.258
the input acts like a Postal code or address.

NOTE Confidence: 0.8808488

9a57e758-1026-4ba8-9529-c9e5a16f4135
01:11:20.260 --> 01:11:23.480
You provide the address for that location

NOTE Confidence: 0.8808488

fea5f5a9-81f8-4d5a-8372-15ed5022abbe
01:11:23.480 --> 01:11:26.254
and the decoder actually enables or

NOTE Confidence: 0.8808488

3931a671-f0d2-42a1-a60e-0b67238b04a3
01:11:26.254 --> 01:11:29.306
open the door of that location and

NOTE Confidence: 0.8808488

b01956e8-05a0-49f5-a581-c5883c3619a4
01:11:29.390 --> 01:11:32.456
close the door of the other locations.

NOTE Confidence: 0.89783394

48558b25-10c3-4482-8640-cc81168c3d5c
01:11:34.620 --> 01:11:37.126
So here for instance, if you put

NOTE Confidence: 0.89783394

6853e51e-52b8-4af8-896e-c78da3c25a20
01:11:37.126 --> 01:11:39.659
the address of the last location,

NOTE Confidence: 0.89783394

8d46af35-9873-40bd-b6db-7d3b0f785d89
01:11:39.660 --> 01:11:42.236
it opens the door of the last

NOTE Confidence: 0.89783394

e94f9fb0-55ec-4e3e-9a1a-b45063dcdab0
01:11:42.236 --> 01:11:44.630
location but closes the door of

NOTE Confidence: 0.89783394

e1e7f994-e5b7-43b5-833e-5f2a5917dce4
01:11:44.630 --> 01:11:46.650
the other locations at anytime.

NOTE Confidence: 0.89783394

58f4d0f9-6087-4a1f-81cb-39c0c3e3a171
01:11:46.650 --> 01:11:49.359
Only one of the locations are open.

NOTE Confidence: 0.9015479

65ab4beb-e3f8-4ee4-be7f-8671d4de472f
01:11:51.510 --> 01:11:54.595
And here is the truth table. So.

NOTE Confidence: 0.9015479

bb19feda-156a-4206-ad08-3e1b67e0d0a1
01:11:54.595 --> 01:12:00.235
You have two binary variables in the input.

NOTE Confidence: 0.9015479

0f0bf47c-f489-42ba-9829-d0f19c42d443
01:12:00.240 --> 01:12:02.920
You have two to the power of two

NOTE Confidence: 0.9015479

a70a8a3f-dbe6-4f42-b2a8-3002da6c1040
01:12:02.920 --> 01:12:05.034
locations in the output that you

NOTE Confidence: 0.9015479

e6595830-4806-4266-8c98-bf2b61bbf0f8
01:12:05.034 --> 01:12:07.528
want to select or you want to

NOTE Confidence: 0.9015479

30b776fd-3ab3-4874-af48-8e72a8ceb912
01:12:07.528 --> 01:12:09.694
open the door of that location.

NOTE Confidence: 0.9015479

677c54a9-0ea5-4bf1-ac51-a135d82f3e7b
01:12:09.700 --> 01:12:11.828
If both are zero, this is the

NOTE Confidence: 0.9015479

48afcf29-bcfe-4a74-bbbc-df8e7082c639
01:12:11.828 --> 01:12:13.830
address for the first location.

NOTE Confidence: 0.9015479

31c7cee9-3a1f-409d-bfae-c5da1bf4ea9c
01:12:13.830 --> 01:12:16.910
Make it 1 and all the other outputs are zero.

NOTE Confidence: 0.9227332

0c7d0f10-ffa8-4b0a-a5de-b6a4f693ab34
01:12:19.170 --> 01:12:22.620
If the second address 01.

NOTE Confidence: 0.9227332

f540db21-a43f-49de-abb5-58cef07d5d97
01:12:22.620 --> 01:12:25.626
The second output is open and

NOTE Confidence: 0.9227332

5f00cbb7-128e-476d-8ef9-c6ca9051d23d
01:12:25.626 --> 01:12:28.619
all the other outputs are zero.

NOTE Confidence: 0.9227332

117760f0-6368-4f83-8eb5-b58781532546
01:12:28.620 --> 01:12:31.398
And as you can see here,

NOTE Confidence: 0.9227332

046c7064-8863-4d1d-9b85-8f91bc6cd53a
01:12:31.400 --> 01:12:35.282
the first output midterm 0. D1.

NOTE Confidence: 0.9227332

448d8814-a646-416e-a064-dc1bee8c0dff
01:12:35.282 --> 01:12:42.140
Middle one D2 midterm 2 and D3 mitten free.

NOTE Confidence: 0.7699169

65255fed-3391-48d0-b47f-b4a5a59ba6d4
01:12:44.870 --> 01:12:48.166
This is a I mean nice circuit that

NOTE Confidence: 0.7699169

3e013252-0911-4570-b830-6d71ae58ef1c
01:12:48.166 --> 01:12:51.720
the main diagonal becomes one an all

NOTE Confidence: 0.7699169

b7ce3f73-70fb-48ab-80f7-cf8b7c82fdfb
01:12:51.720 --> 01:12:55.364
the other power elements in the right

NOTE Confidence: 0.7699169

db3ceff5-44e0-4cdb-aa8c-67fee5e5c1d3
01:12:55.364 --> 01:12:58.563
side of the two stable becomes 0.

NOTE Confidence: 0.7699169

6197d3fc-38cd-4b45-a5eb-243e0b043b9f
01:12:58.570 --> 01:13:00.720
And if we design this.

NOTE Confidence: 0.7699169

e8f1e4fb-3a99-41c5-ba54-6b1d7bf9cfeb
01:13:00.720 --> 01:13:03.438
Here is the design, very simple,

NOTE Confidence: 0.7699169

77211fca-5970-451a-b66b-1ea1e4d2f9cc
01:13:03.440 --> 01:13:06.611
so each output is the end of

NOTE Confidence: 0.7699169

2efc6f34-91a5-48ac-b49b-8c4f29bb7358
01:13:06.611 --> 01:13:08.819
the admittance, so export ybor.

NOTE Confidence: 0.7699169

81223c82-7f41-4447-8b2d-7e87a64cd884
01:13:08.819 --> 01:13:13.112
So if you can see here, this is the Explorer.

NOTE Confidence: 0.7699169

dc6b17c9-d3fa-4652-98b9-5b4bbf5dcad5
01:13:13.112 --> 01:13:15.650
And this is the Y bar.

NOTE Confidence: 0.7699169

bb06ee93-500f-4e4c-9d06-b3a5114b420f
01:13:15.650 --> 01:13:17.558
'cause here and with each other.

NOTE Confidence: 0.7699169

0266bcce-d419-4f47-b596-2b2d879d3444
01:13:17.560 --> 01:13:19.779
So basically this is the midterm 0.

NOTE Confidence: 0.7894481

14d880dd-fc0e-495f-869e-3301b95d876f
01:13:21.910 --> 01:13:25.046
And this is my turn won an etc.

NOTE Confidence: 0.7894481

92344d85-a8f3-43c1-b8b1-e3a70b121c65
01:13:25.050 --> 01:13:27.304
The only difference of this design is

NOTE Confidence: 0.7894481

d1e81780-a724-4ad9-af4d-b7d6f5750fe3
01:13:27.304 --> 01:13:30.109
that when one of the midterms becomes one,

NOTE Confidence: 0.7894481

9f7a4150-2e91-4852-9657-531a8cd729af
01:13:30.110 --> 01:13:32.126
the other midterms are always 0.

NOTE Confidence: 0.741025

42583fd6-a422-4e2f-b482-6cb716bd0670
01:13:39.930 --> 01:13:41.740
Or in the right side?

NOTE Confidence: 0.741025

791315ee-1975-499c-ad73-5b00b550b3d7
01:13:41.740 --> 01:13:43.588
Uh, what is 1 hot vector

NOTE Confidence: 0.741025

34e89355-5693-4011-8e8c-1de5ebd3ec05
01:13:43.588 --> 01:13:46.070
for it or it is applicable?

NOTE Confidence: 0.741025

be089b06-cf7d-47f7-820f-e98406699514
01:13:46.070 --> 01:13:47.150
01 thing actually,

NOTE Confidence: 0.741025

215d8b54-c8a4-4cd3-ac21-06d25a4627d5
01:13:47.150 --> 01:13:48.590
Tatiana says yes correct.

NOTE Confidence: 0.741025

89964847-2092-4bab-89d3-89bec0f48502
01:13:48.590 --> 01:13:51.930
As you can see here.

NOTE Confidence: 0.741025

cb06b79e-c58c-45ea-93f4-4249842f0823
01:13:51.930 --> 01:13:54.499
If the input at at any time,

NOTE Confidence: 0.741025

5e1a47a4-7b00-4cdb-b7e9-209ad8b9ce4e
01:13:54.500 --> 01:13:57.069
the output is only one hot vector.

NOTE Confidence: 0.741025

df828b44-4e29-46ec-9766-d016084c608a
01:13:57.070 --> 01:13:58.900
I forgot to tell that.

NOTE Confidence: 0.741025

1319039f-a4ea-4b83-b437-fac6e9865108
01:13:58.900 --> 01:14:01.516
So you see that at anytime the output

NOTE Confidence: 0.741025

c27afd99-b51c-4fb5-adfc-af23a522d114
01:14:01.516 --> 01:14:04.040
of the decoder in this decoder,

NOTE Confidence: 0.741025

aad1502c-2482-4fd5-855b-3172a699f5ed
01:14:04.040 --> 01:14:06.550
this design is 1 hot.

NOTE Confidence: 0.741025

917179a5-ad28-4fa4-b8f1-275c27581896
01:14:06.550 --> 01:14:09.448
You never see the output have

NOTE Confidence: 0.741025

af7204e3-5596-4f91-a08e-207956a50a6f
01:14:09.448 --> 01:14:12.888
for instance 2 one in the output.

NOTE Confidence: 0.741025

0ea51fbf-39d3-42ab-8079-bf78dbaf68df
01:14:12.890 --> 01:14:15.445
That's why we called this

NOTE Confidence: 0.741025

c598df68-7fa8-49f7-b6dc-4edd9b2a06eb
01:14:15.445 --> 01:14:18.000
coding binary number to one

NOTE Confidence: 0.741025

bd689ae1-af8e-437e-b2ff-6c5409cd1c4b
01:14:18.106 --> 01:14:21.100
hot vector or a binary decoder.

NOTE Confidence: 0.82682157

c62332c9-8aef-4f62-854c-726ede90f007
01:14:25.420 --> 01:14:28.060
And here is the design

NOTE Confidence: 0.82682157

9f61546d-08e8-4cad-a8e2-eed9ef7b91f0
01:14:28.060 --> 01:14:31.580
for free bit in the input.

NOTE Confidence: 0.82682157

67357e7d-01bf-46f8-ad7b-2b0dd5f8e988
01:14:31.580 --> 01:14:34.487
As a result, we gonna select 2 to the

NOTE Confidence: 0.82682157

bfaecc14-7324-4883-a87a-793ee38e1591
01:14:34.487 --> 01:14:37.065
power of 3 or 8 bits in the output,

NOTE Confidence: 0.82682157

bcb1895d-c689-4a86-98eb-e5c77815a945
01:14:37.070 --> 01:14:40.200
so the decoder acts as 3 bits in the input

NOTE Confidence: 0.82682157

68acadeb-f50b-4a8c-925e-e3a16c067b94
01:14:40.275 --> 01:14:43.479
and one hot vector in the output which has.

NOTE Confidence: 0.82682157

5dce07d3-6688-4efb-b6de-10cfe9d6c412
01:14:43.480 --> 01:14:45.954
8 bits in the output, an again.

NOTE Confidence: 0.82682157

7451ad1c-37da-41d3-b8cb-9fb1c0ff2553
01:14:45.954 --> 01:14:47.714
As you can see here,

NOTE Confidence: 0.82682157

5576be66-3760-4110-b1d8-a3001f52380e
01:14:47.720 --> 01:14:49.826
this is the one hot vector.

NOTE Confidence: 0.82682157

8f4746ae-9318-43ff-9513-ea39014303b8
01:14:49.830 --> 01:14:52.654
This is for the selecting the first position,

NOTE Confidence: 0.82682157

ed983235-6039-4220-bb0a-aaf1a7ef2026
01:14:52.660 --> 01:14:56.728
selecting the second position an attach.

NOTE Confidence: 0.82682157

3f361fa3-ce52-4190-ab40-7b33f2270551
01:14:56.730 --> 01:15:00.210
And here is the design.

NOTE Confidence: 0.82682157

13cbc4cc-2720-4f1e-81f4-6d94a3b1428c
01:15:00.210 --> 01:15:03.850
So you can think of this decoder

NOTE Confidence: 0.82682157

49cb171d-4001-4904-94c4-dc63b8933d6b
01:15:03.850 --> 01:15:07.515
or binary decoder as a device that

NOTE Confidence: 0.82682157

a77dde24-0f1c-4b70-b8b9-e29c32dc7774
01:15:07.515 --> 01:15:10.509
selects one location out of the

NOTE Confidence: 0.82682157

55f5c052-0fec-48b0-acdb-4d1e8af16b8e
01:15:10.620 --> 01:15:14.118
many locations or a device that

NOTE Confidence: 0.82682157

aaa6a9b3-e8da-4eb6-ae20-a6bacc9e225a
01:15:14.118 --> 01:15:18.390
generates them in terms. So.

NOTE Confidence: 0.82682157

10fd25d4-d218-42de-b802-bf21e39bc5aa
01:15:18.390 --> 01:15:20.748
This is Milton 0 for instance.

NOTE Confidence: 0.82682157

5962b867-24c1-4b7a-9b68-1993ce1b0e3c
01:15:20.750 --> 01:15:24.296
This is the meter 101 which is material 5,

NOTE Confidence: 0.82682157

0a59b363-02d4-499d-aa8d-d2af74c44049
01:15:24.300 --> 01:15:27.360
which is equal to the D5.

NOTE Confidence: 0.82682157

95dba80c-11b0-4dcf-a213-3d3001226844
01:15:27.360 --> 01:15:29.108
When this becomes one,

NOTE Confidence: 0.82682157

67bdf197-e0e8-4e7d-916d-fa049691a9fb
01:15:29.108 --> 01:15:31.730
all the other outputs are zero.

NOTE Confidence: 0.82174546

4276b5fa-1f54-4b9d-8389-bd99711c12e0
01:15:34.620 --> 01:15:37.770
You can check that so 101 so if you

NOTE Confidence: 0.82174546

9e5c1a6b-35a7-4739-8a5d-edddaae9a98f
01:15:37.770 --> 01:15:41.227
put one here 0 here one here and you

NOTE Confidence: 0.82174546

620002c8-5d34-47cb-8b34-2a12aab37677
01:15:41.227 --> 01:15:43.972
trace the circuit etapas one here

NOTE Confidence: 0.82174546

529afe1e-5d65-4b31-adc7-741100bd0f2b
01:15:43.972 --> 01:15:47.240
and all the other aspects are there.

NOTE Confidence: 0.863438

cbb05416-82df-4bfb-a265-c5a8463074cc
01:15:52.330 --> 01:15:54.568
Exactly exactly, so that's the formula.

NOTE Confidence: 0.863438

c22e23ce-a2ba-4103-bca1-d8b63be9a561
01:15:54.570 --> 01:15:57.174
So basically, let's back to the here.

NOTE Confidence: 0.863438

ed8ef836-dc89-43a5-8b8c-6496f1beeb48
01:15:57.180 --> 01:15:59.784
If you have N in the input,

NOTE Confidence: 0.863438

66581055-db9c-497a-9ab6-626b410d5012
01:15:59.790 --> 01:16:02.776
so the input is N bit, the output

NOTE Confidence: 0.863438

755d8258-0c7a-4182-9068-31c94411fd41
01:16:02.776 --> 01:16:05.760
gonna be 2 to the power of N.

NOTE Confidence: 0.8476805

42a7eed5-0a37-406f-bcf9-c6f94b2d93ef
01:16:08.460 --> 01:16:10.686
So if you output is 5,

NOTE Confidence: 0.8476805

4ab6e8ab-f556-4e42-a586-1aa02fc0caec
01:16:10.690 --> 01:16:14.258
so you have 5 bits in the input.

NOTE Confidence: 0.8476805

30a37651-e78d-47f2-831f-4c61a053e906
01:16:14.260 --> 01:16:16.010
In the output, you want to select

NOTE Confidence: 0.8476805

70163610-7312-4408-b308-0ad038b9a0aa
01:16:16.010 --> 01:16:18.249
2 to the power of five locations,

NOTE Confidence: 0.8476805

58226d7d-78d4-4485-96a2-1a5a8a8ebb00
01:16:18.250 --> 01:16:20.147
so this is the size of the

NOTE Confidence: 0.8476805

bdc3693d-efdc-46fc-906c-d382b26fee6e
01:16:20.147 --> 01:16:21.959
one hot vector in the output.

NOTE Confidence: 0.8777597

72850d3a-7034-4434-a65c-b8e661984fe7
01:16:24.110 --> 01:16:27.845
Which is equal to. What's the number of 32?

NOTE Confidence: 0.8584582

ad9d7ee3-9530-43d9-a2ea-f74a7d87d471
01:16:30.440 --> 01:16:33.716
Yeah, so you select between 32 locations.

NOTE Confidence: 0.8584582

f65782f8-7906-400d-b111-8e30a17b7d10
01:16:33.720 --> 01:16:36.606
So depending on how many locations

NOTE Confidence: 0.8584582

c12c37ca-83ef-4687-99ac-bda098176109
01:16:36.606 --> 01:16:39.962
you want to select you design or

NOTE Confidence: 0.8584582

750f9cc4-b18e-4b1b-825b-8bf56566a8c6
01:16:39.962 --> 01:16:42.626
select or buy from the market,

NOTE Confidence: 0.8584582

af9b000c-88a4-48af-aabf-d7c6d65312bb
01:16:42.630 --> 01:16:44.650
the decoders that can that

NOTE Confidence: 0.8584582

bfbbc6db-d9bd-4b6d-b331-26eb53b96a1e
01:16:44.650 --> 01:16:47.339
is able to select those like

NOTE Confidence: 0.8584582

772587b7-fc67-47f0-a94a-13e4bf420473
01:16:47.339 --> 01:16:49.667
collections of those locations.

NOTE Confidence: 0.8584582

1ffb0d2a-efac-48aa-adc0-1711cc75475d
01:16:49.670 --> 01:16:53.684
For instance if you want to select out of

NOTE Confidence: 0.8584582

faeaf25f-29cc-4fde-be92-f356e12aa95a
01:16:53.684 --> 01:16:58.087
10 locations how many what's the decoder?

NOTE Confidence: 0.8584582

84ea0998-c548-487a-8e47-0676a1648359
01:16:58.090 --> 01:17:00.722
Decoder one how many bits in the

NOTE Confidence: 0.8584582

1b6986c2-7c5d-4204-8256-3a8824a9f1c7
01:17:00.722 --> 01:17:03.713
input and two to the power of

NOTE Confidence: 0.8584582

4c128551-a211-447c-aeaf-686104a189ea
01:17:03.713 --> 01:17:05.938
what number selects 10 locations?

NOTE Confidence: 0.8909473

c36f37e1-570b-4e9d-9583-eeaa2cc4b764
01:17:08.540 --> 01:17:13.634
Oh no, we have 10 locations in the output.

NOTE Confidence: 0.8909473

b1fd71f2-5988-4152-9f10-a09082ca753f
01:17:13.640 --> 01:17:16.944
So we have 10 locations in the output.

NOTE Confidence: 0.8909473

066f2064-bd26-4e4c-bbd5-a3d52581b780
01:17:16.950 --> 01:17:19.110
How many bits in the input

NOTE Confidence: 0.8909473

8644e481-5067-4162-8f08-cf7c1d899b74
01:17:19.110 --> 01:17:21.390
we need if I put one,

NOTE Confidence: 0.8909473

63c7bf7d-b557-4967-afc3-7a9c9b07b670
01:17:21.390 --> 01:17:24.350
it becomes 2 to the power of 1,

NOTE Confidence: 0.8909473

903f0912-bfa6-4910-a131-aab121e1a0d8
01:17:24.350 --> 01:17:28.050
two locations, 2 becomes 2 to the power of 2,

NOTE Confidence: 0.8909473

fc50cadb-84b9-470b-aac9-ec4f936f9f33
01:17:28.050 --> 01:17:30.270
four locations 2 to the power,

NOTE Confidence: 0.8909473

9aff5f6b-67cb-4cf0-aa79-be4c6b126fd7
01:17:30.270 --> 01:17:33.490
three becomes two. If I put 3.

NOTE Confidence: 0.8909473

2d36f37f-bea5-455a-bcd8-cb6bea482b61
01:17:33.490 --> 01:17:36.500
Becomes 2 to the power of three,

NOTE Confidence: 0.8909473

2af9e4c1-37cf-4c09-954b-cb6e77f61901
01:17:36.500 --> 01:17:38.372
which becomes 8 locations,

NOTE Confidence: 0.8909473

bf295ef0-4b1c-4a25-996d-9ed793e3289c
01:17:38.372 --> 01:17:41.616
but I have had locations so I

NOTE Confidence: 0.8909473

94b283ae-c898-4346-befe-06071a05d0de
01:17:41.616 --> 01:17:44.038
need 4 bits to select among two

NOTE Confidence: 0.8909473

0e6788fb-cf4e-4f32-96a0-ab5a37408b85
01:17:44.038 --> 01:17:46.817
to the power of 416 locations.

NOTE Confidence: 0.8909473

0d66e93c-20e7-4585-954e-aaf7ccb23155
01:17:46.820 --> 01:17:49.724
I have 10 locations only so I I

NOTE Confidence: 0.8909473

476779fd-06ac-48b5-98fc-eca8774451a7
01:17:49.724 --> 01:17:52.410
waste the other five locations,

NOTE Confidence: 0.8909473

7a7458b3-5c52-4f77-815a-e103d70cc9b1
01:17:52.410 --> 01:17:55.168
but I have to buy a decoder

NOTE Confidence: 0.8909473

b26ec360-93df-420a-af21-f3be7e1cafad
01:17:55.168 --> 01:17:58.430
for by two to the Barber four,

NOTE Confidence: 0.8909473

931babff-892a-4943-9637-caf7fa0101e7
01:17:58.430 --> 01:18:01.790
or in another way you could say

NOTE Confidence: 0.8909473

c98b15ee-6a26-49b1-8c7c-701a2bec6d0f
01:18:01.790 --> 01:18:04.730
that the ceiling of log of the.

NOTE Confidence: 0.8909473

216d9ff6-7926-4617-81f3-617790b7737a
01:18:04.730 --> 01:18:05.735
Outputs.

NOTE Confidence: 0.8909473

158ef2fd-3c4b-4909-9302-822e8dd4184d
01:18:05.735 --> 01:18:06.740
10

NOTE Confidence: 0.8552589

779d9add-720c-493f-a8bb-1459fc6bafff
01:18:09.120 --> 01:18:13.075
yeah, OK. We're done with today's lecture.

NOTE Confidence: 0.8552589

9072481a-3823-4aec-86fd-f2fb23c3088e
01:18:13.080 --> 01:18:17.600
We're going to continue with the code here.

NOTE Confidence: 0.8552589

40d228f2-1d02-4e08-8c80-62154b0b9a56
01:18:17.600 --> 01:18:19.856
How about selecting from

NOTE Confidence: 0.8552589

6ee83e1d-0db2-4b19-b5d4-5148d19af464
01:18:19.856 --> 01:18:21.548
millions of locations?

NOTE Confidence: 0.8552589

48458cf2-4f70-4fec-a6b3-7ae433589aa3
01:18:21.550 --> 01:18:25.274
So we need to design bigger decoders

NOTE Confidence: 0.8552589

2e57e3dd-d802-4e3d-8c95-2433da63f3a7
01:18:25.274 --> 01:18:29.925
because you know that the memory in the

NOTE Confidence: 0.8552589

5c3c28c1-8de4-48db-8d80-739d341e2cde
01:18:29.925 --> 01:18:33.420
current computer systems have, for instance,

NOTE Confidence: 0.8552589

1a822e29-703d-4473-8346-90e1393d6016
01:18:33.420 --> 01:18:36.810
four Gigabit Big GB memory location.

NOTE Confidence: 0.8552589

b82661b8-0870-497c-8683-fa01312b961d
01:18:36.810 --> 01:18:39.720
So 4 gigabyte means that.

NOTE Confidence: 0.8552589

420014ce-fa1f-464e-a4d3-461c2dff1439
01:18:39.720 --> 01:18:41.172
4 billion locations.

NOTE Confidence: 0.8552589

9cc1ae11-c8f1-49a9-a225-f54f42ee163c
01:18:41.172 --> 01:18:44.560
How can we design A decoder that

NOTE Confidence: 0.8552589

5352092a-f646-41c9-8741-c0ccebf84592
01:18:44.654 --> 01:18:47.174
had that can select one location

NOTE Confidence: 0.8552589

349eb309-e74e-446b-abdc-0fd45f700ad8
01:18:47.174 --> 01:18:50.410
out of all of these locations?

NOTE Confidence: 0.8552589

470d37e2-43a3-42ef-aa84-fb68ca0cfb70
01:18:50.410 --> 01:18:53.920
So we continue this next week?

NOTE Confidence: 0.8552589

db09ba04-a7dc-46b2-8fbf-32c0b6f7ca89
01:18:53.920 --> 01:18:56.384
Thank you so much for your attendance

NOTE Confidence: 0.8552589

1412df64-e679-4459-bc9f-6d4b1ab9655a
01:18:56.384 --> 01:18:59.739
and I am happy to take your questions.

NOTE Confidence: 0.8552589

6a8c9f8e-9aa4-4edb-96a7-3b53e92aa2cc
01:18:59.740 --> 01:19:03.710
Also I'm going to be in the office hour so

NOTE Confidence: 0.8552589

b29a0fa2-d7eb-463a-ac21-e5701eccd2d3
01:19:03.805 --> 01:19:07.675
individual office to take your questions.

NOTE Confidence: 0.8552589

cc7187c4-f233-4896-bcca-6fde52ce1dd2
01:19:07.680 --> 01:19:10.536
 Thank you

NOTE Confidence: 0.91396314

2e9997fe-c8d4-4fee-bb29-ef39a395de79
01:19:13.060 --> 01:19:14.920
I'm going to stop there.

