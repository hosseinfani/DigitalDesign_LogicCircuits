WEBVTT

NOTE duration:"01:20:50.3280000"

NOTE language:en-us

NOTE Confidence: 0.6138446

d9a71ff0-0aec-408b-9606-ff55c0515b76
00:00:00.170 --> 00:00:04.427
For the labs and midterms, the
thing is,

NOTE Confidence: 0.84103537

294e8609-d8e0-4ae7-9f4c-203789d016c5
00:00:05.310 --> 00:00:09.762
it seems the workload for
the both the labs and lectures are a

NOTE Confidence: 0.84103537

ba63335f-40f5-41e4-846a-a36988ab6e0d
00:00:09.762 --> 00:00:14.585
little bit high, so I decided to
extend the deadlines for the lab

NOTE Confidence: 0.84103537

9c4f150b-b6bc-4e44-bd93-3467c6cf37ba
00:00:14.585 --> 00:00:20.150
and lectures, both of them. As you
can see for the lab, I mean this

NOTE Confidence: 0.84103537

6452cf8b-735c-4e78-a780-107414e8b488
00:00:20.150 --> 00:00:24.602
week, we have two weeks. Also for
this week's lecture, which

NOTE Confidence: 0.84103537

ab720956-0217-41eb-87eb-3ab077311144
00:00:24.602 --> 00:00:29.054
I'm going to release it on
Wednesday. Again, we have a

NOTE Confidence: 0.84103537

7dd28d11-c41b-4ad6-9720-2f89719037d2
00:00:29.054 --> 00:00:33.877
deadline of two weeks, but it
starts from the next

NOTE Confidence: 0.84103537

8494375a-53de-488c-8eeb-a56047369e62
00:00:33.877 --> 00:00:35.732
lecture and the next lab.

NOTE Confidence: 0.8858254

e2ac3bc2-ef47-4078-93af-525311f458c1
00:00:36.390 --> 00:00:40.870
So for the lab two and the
lecture 2. the previous ones

NOTE Confidence: 0.8858254

64e0fb31-d3a9-4c3d-8846-37aa91a563e0
00:00:40.870 --> 00:00:44.390
the deadlines are the same, it doesn't
change, but the new ones

NOTE Confidence: 0.8858254

57c0f1f4-4ecf-4ac3-97b7-419e34eba014
00:00:44.390 --> 00:00:47.590
starting this week, actually you're
gonna have two weeks for you

NOTE Confidence: 0.8858254

4e5877a6-de4a-44ba-b687-4907434ae8b4
00:00:47.590 --> 00:00:51.110
to do the assignments
for the lectures and labs.

NOTE Confidence: 0.8831183

b3964afa-b267-42c3-9551-edab167ec573
00:00:51.980 --> 00:00:56.156
Uh, regarding the mid term, I
mean, it's actually, it was kind

NOTE Confidence: 0.8831183

0ecccaf3-d614-4635-ad63-ae129448f464
00:00:56.156 --> 00:01:00.680
of clear for me, but it seems
that it's not clear for the

NOTE Confidence: 0.8831183

269f084e-5760-4034-97e8-9eb45c93d9e2
00:01:00.680 --> 00:01:04.856
students. The thing is, it is
clear that the questions in the

NOTE Confidence: 0.8831183

4db4c859-2a3a-4b13-b7d6-a882ef95e6d5
00:01:04.856 --> 00:01:09.032
assignments are much more harder
because you have one or

NOTE Confidence: 0.8831183

aebc56df-473f-49c8-bea1-0e1cedc5861f
00:01:09.032 --> 00:01:13.208
from this week, two weeks, to
solve the questions. But in the

NOTE Confidence: 0.8831183

2e9ae15e-ed28-4a28-9632-75f301843e1a
00:01:13.208 --> 00:01:17.732
midterm, I mean the questions are
much more easier. The thing is,

NOTE Confidence: 0.8831183

6579ef83-897f-436e-b179-0e9841a3535d
00:01:17.732 --> 00:01:21.908
I mean you have limited hours,
for instance just two hours.

NOTE Confidence: 0.8588145

f4f94492-fcd4-4ad9-bb5d-954ce8b505fc
00:01:22.510 --> 00:01:27.326
Although I'm trying to
plan it as a take home exam so

NOTE Confidence: 0.8588145

f9c6e62b-4e09-41ee-a762-3cb7028ecbb4
00:01:27.326 --> 00:01:32.486
you have one day to open it, but
when you open it, you have

NOTE Confidence: 0.8588145

2ec9e3d5-f70a-44b9-a3b0-70b2be843010
00:01:32.486 --> 00:01:36.614
only two hours to do the mid
term exam. I'll put the

NOTE Confidence: 0.8588145

3d1fd67f-48c2-40c3-84c5-db79916c43c5
00:01:36.614 --> 00:01:40.742
instructions, I mean after, but
the thing is, because you have a

NOTE Confidence: 0.8588145

e934c2a2-8a9f-42d0-8a79-b7f79f0f733b
00:01:40.742 --> 00:01:44.182
limited time to answer the
questions, the questions are kind

NOTE Confidence: 0.8588145

b19f9a4e-20b2-42a4-a665-135fa1893429
00:01:44.182 --> 00:01:47.966
of much more easier than the
lecture assignments and I hope

NOTE Confidence: 0.8588145

36a940fb-d4bb-4deb-9faa-38dfa46bd8bd
00:01:47.966 --> 00:01:51.406
actually this helps you
during the reading week. I'm

NOTE Confidence: 0.8588145

63ee7184-512f-4556-80fe-cb0bfe75b562
00:01:51.406 --> 00:01:53.126
going to plan some practice

NOTE Confidence: 0.8642891

3c060233-170b-4a8d-87fd-1e2ad4dab805
00:01:53.190 --> 00:01:57.688
in the office hours, just to do
some to practice on the lecture

NOTE Confidence: 0.8642891

902f1c42-65d1-4b32-b9a1-613a6ff0241a
00:01:57.688 --> 00:02:00.802
assignments
questions and practice more on

NOTE Confidence: 0.8642891

6d076ff4-a78d-4fdd-9ce9-03de5125a270
00:02:00.802 --> 00:02:05.300
the sample midterm exams, so you
could be kind of ready for the

NOTE Confidence: 0.82877165

adb5ac91-79a8-45fd-8dba-639c4c2bf474
00:02:05.300 --> 00:02:10.848
midterm. Uh, this is one thing.
Oh, I forgot to.

NOTE Confidence: 0.87958664

37e3fd87-5892-423b-b179-7341fee90e52
00:02:11.760 --> 00:02:13.038
Record the session.

NOTE Confidence: 0.85318154

0c27f939-b2bc-42c9-9deb-369f10583328
00:02:15.160 --> 00:02:18.850
Oh, Sean you already
started the recording. Yes.

NOTE Confidence: 0.85318154

94947e3b-1875-4954-b0b4-ce5f40e58a46
00:02:18.850 --> 00:02:23.360
Yeah. Thank you. Thank you,
thank you. And yes, that was

NOTE Confidence: 0.85318154

a4968e1e-1ace-4e95-bc16-79b762cb007c
00:02:23.360 --> 00:02:27.870
the
thing again. In the

NOTE Confidence: 0.85318154

b3a0ad74-e47e-48e6-b68d-c39dac76e468
00:02:27.870 --> 00:02:30.740
discussion board, some
students actually put some

NOTE Confidence: 0.85318154

4e8eb31e-a4cf-4c84-9067-4fc83646a980
00:02:30.740 --> 00:02:31.970
question about the

NOTE Confidence: 0.86429745

7bd63046-a890-478c-af20-77aae3a18e9e
00:02:33.340 --> 00:02:36.580
assignments, questions in the
assignments. If you go there,

NOTE Confidence: 0.86429745

0cd07710-8535-477b-886b-c82404cc0545
00:02:36.580 --> 00:02:40.180
you can see that sometimes
the students put some hints

NOTE Confidence: 0.86429745

d2ffb8b6-5d92-4e8f-90fa-b7e30cdf1d5e
00:02:40.180 --> 00:02:44.500
or also myself, I put some hints
to help you to solve the

NOTE Confidence: 0.86429745

fb4de0bf-451f-410d-a94c-1d9b3a5ae114
00:02:44.500 --> 00:02:45.220
lecture assignments

NOTE Confidence: 0.90759134

7e5fdc79-8a5f-44f5-a1f9-c7b50f4134f0
00:02:46.360 --> 00:02:50.969
or even the lab assignments.
So this is the first one.

NOTE Confidence: 0.90759134

fdbe6804-948b-4fcf-b55a-0f063c729a19
00:02:50.969 --> 00:02:56.835
This next one is I'm going to
do a quick recap on what we

NOTE Confidence: 0.90759134

222d80df-a74f-4d03-8eb2-40bdcad35f19
00:02:56.835 --> 00:03:00.187
said last week about building
a digital system.

NOTE Confidence: 0.84668726

8bd866c8-436f-4a85-b97d-859c629a3587
00:03:01.360 --> 00:03:06.090
So we'll start with analog
systems. We said that these

NOTE Confidence: 0.84668726

ccbd3505-136d-4d81-8dde-5d90d38611a5
00:03:06.090 --> 00:03:10.347
systems are processing the
continuous

NOTE Confidence: 0.39188164

48a2ac65-ab56-4c94-b00c-d7b0866bc6c4
00:03:10.347 --> 00:03:13.590
entities. Uh, OK.

NOTE Confidence: 0.8497863

5f94eb15-e5dc-4cc4-9808-cbcc7e2add84
00:03:14.260 --> 00:03:18.166
Basically, it's an electrical
system with a voltage and within

NOTE Confidence: 0.8497863

12f260b5-349e-4c2a-9c42-d87420f7ad3c
00:03:18.166 --> 00:03:23.808
the time, it is a kind of, I mean
analog system. The changing

NOTE Confidence: 0.8497863

b2608af1-a3db-4fe2-8e8f-c8ad20b9b7c4
00:03:23.808 --> 00:03:28.148
voltage within the time
continuously. But in order to

NOTE Confidence: 0.8497863

7ed2d4b8-fbd8-47e1-ab9c-2dbd7023ac47
00:03:28.148 --> 00:03:32.488
build an information processing
system or I mean to analyze or

NOTE Confidence: 0.8497863

41d343c6-f52f-474d-8151-7ad432992ec0
00:03:32.488 --> 00:03:36.828
build the algorithm to work with
the voltage or with the

NOTE Confidence: 0.8497863

ef8f0522-ba3b-4dbd-a4f8-1ceb143524e7
00:03:36.828 --> 00:03:41.168
continuous entities we have to
break it into discrete units.

NOTE Confidence: 0.8497863

162c94ab-8f3f-44f7-8acd-caa55742eb2e
00:03:41.168 --> 00:03:45.942
Then we said that we already
proposed the numbering system as

NOTE Confidence: 0.8497863

c2e151fc-5b90-4f26-a118-31f471829ea5
00:03:45.942 --> 00:03:47.244
a kind of

NOTE Confidence: 0.8207258

a42e3a38-baeb-46d0-a412-57bff1114a09
00:03:47.420 --> 00:03:51.326
system that can break the
continuous entities into

NOTE Confidence: 0.8207258

57f24677-7773-45a6-9aa9-c4d395fb7391
00:03:51.326 --> 00:03:55.666
discrete units, and we introduce
some symbols or digits to

NOTE Confidence: 0.8207258

b55bd44e-eda1-4078-beb4-458e96e9776c
00:03:55.666 --> 00:03:59.572
represent those continuous
entities, so we already have the

NOTE Confidence: 0.8207258

82454f77-f8fc-474c-8d42-87d716e1de2b
00:03:59.572 --> 00:04:03.912
numbering system as a kind of
digital system representing the

NOTE Confidence: 0.8207258

8f5226b8-4c88-4479-ad0e-0d2912669802
00:04:03.912 --> 00:04:05.648
discrete units by digits.

NOTE Confidence: 0.8450856

6fb6546b-e607-4749-bb7e-cd50487cd186
00:04:07.370 --> 00:04:12.088
Now we
said that we want we want to

NOTE Confidence: 0.8450856

346c85fb-4e9f-4a5b-b5f5-ad3503eb5b35
00:04:12.088 --> 00:04:16.469
build a machine to do the task
for processing for us. So we

NOTE Confidence: 0.8450856

931c2a70-b0ea-4988-aacc-2df71741fd2b
00:04:16.469 --> 00:04:19.839
have the numbering system from
the theory, and we have electric

NOTE Confidence: 0.8450856

8bb91ea8-08ba-40b4-b6d1-ab756a06e33d
00:04:19.839 --> 00:04:22.872
power in the engineering
perspective. So we want to

NOTE Confidence: 0.8450856

c763f7da-a446-432e-8bdf-1cab8032dc19
00:04:22.872 --> 00:04:26.242
integrate them to build a
machine. The first question was

NOTE Confidence: 0.8450856

d6da0e54-b70a-4138-be4c-25c24376b8fb
00:04:26.242 --> 00:04:30.286
at what base or what numbering
system we have to choose. We will

NOTE Confidence: 0.8450856

0e6e5b0b-d83b-4af0-99e6-976901cdf83e
00:04:30.286 --> 00:04:33.319
start with base-10. The most
immediate one and

NOTE Confidence: 0.8419896

04a1e655-0336-4ffe-a404-37bda56b3cb6
00:04:34.770 --> 00:04:39.786
We said that in order to
represent the digit in base-10,

NOTE Confidence: 0.8419896

5be35d8a-26e6-4ba2-8eb2-d1e9313144c5
00:04:39.786 --> 00:04:44.384
we have to break the voltage
into 10 different units. For

NOTE Confidence: 0.8419896

9966f63b-345f-4122-ac38-13b7dbb416d6
00:04:44.384 --> 00:04:46.474
instance, let me enable my

NOTE Confidence: 0.8362966

145bac8e-e405-490b-b0d7-7e1b5e22a1b6
00:04:47.180 --> 00:04:48.090
laser.

NOTE Confidence: 0.83614564

25286124-f155-4294-bc06-2656c3729b7e
00:04:54.520 --> 00:05:00.092
So you can see that I mean we
break the voltage from zero to

NOTE Confidence: 0.83614564

36de30b5-7cb8-4f2c-a6e8-d79a827222e2
00:05:00.092 --> 00:05:04.868
10 into discrete units, 0 to one
is representing 0. 1 to 2

NOTE Confidence: 0.83614564

47b7b5dd-4a12-4672-8371-f46f0094b6a5
00:05:04.868 --> 00:05:08.450
representing one, etc. But there
is another continuous entity

NOTE Confidence: 0.83614564

050bd2a9-c8ea-486e-af93-1dc03624e688
00:05:08.450 --> 00:05:13.624
time, so we have to break time
into discrete units too. So we

NOTE Confidence: 0.83614564

551077d3-297d-48a8-baa1-7673de5ccc1a
00:05:13.624 --> 00:05:18.400
did that and then it could be
seconds, minutes, weeks or days,

NOTE Confidence: 0.83614564

8a1915b4-539e-459a-8db6-b1b193fb28e7
00:05:18.400 --> 00:05:22.380
any discrete units, and then
we put these two together. We

NOTE Confidence: 0.83614564

daaba069-9dd6-4040-861d-3d4c669fdf2e
00:05:22.380 --> 00:05:24.370
have discrete units in voltage

NOTE Confidence: 0.7462733

2c546786-0011-4e1e-a260-0bbe88fffed6
00:05:24.440 --> 00:05:27.779
and time, and itself could
represent a digit.

NOTE Confidence: 0.854582

cebf07b4-0161-4abf-9c26-fc79c00fb7be
00:05:28.890 --> 00:05:33.690
For instance, as long as the
voltage is changing in this time

NOTE Confidence: 0.854582

c6c904a4-d3d1-47f7-8614-4aa237564630
00:05:33.690 --> 00:05:38.090
spot within this unit, it could
say that this system is

NOTE Confidence: 0.854582

2c495579-65d0-4352-932a-4b917de947b4
00:05:38.090 --> 00:05:42.490
representing the digit 2 and
etc., but the problem was that

NOTE Confidence: 0.854582

07ee2338-b35a-45e3-ba5b-d43176265149
00:05:42.490 --> 00:05:46.490
because in some time, the voltage was
actually passing multiple units

NOTE Confidence: 0.854582

cee2e7be-cadc-4eb8-bab8-b9f0b2ea23b9
00:05:46.490 --> 00:05:50.890
in voltage, so we cannot say that
within these times, the

NOTE Confidence: 0.854582

f55d4038-5d25-4e50-b658-2285ad550a6e
00:05:50.890 --> 00:05:55.290
system is representing what. So
a lot of ambiguous cells are

NOTE Confidence: 0.854582

00303b1a-5627-49b5-b0b9-ab8ab177bceb
00:05:55.290 --> 00:05:58.090
here. We said that in order to

NOTE Confidence: 0.7282

28459d19-8ec4-4635-a011-ed396e9c831d
00:05:58.090 --> 00:06:02.339
address these ambiguous
cells. We introduced the concept

NOTE Confidence: 0.7282

c077ea3d-a921-4807-b475-429829960ece
00:06:02.339 --> 00:06:06.155
of granularity, meaning that the
size of unit.

NOTE Confidence: 0.8662185

922d5fb1-7638-4e7d-9283-058525b4beef
00:06:07.120 --> 00:06:12.521
We'll start with smaller size of
time meaning that

NOTE Confidence: 0.8662185

6de47989-1259-43fa-be4b-cf3a6b20c192
00:06:12.521 --> 00:06:14.485
these smaller fine grained

NOTE Confidence: 0.8636278

57ae304e-b048-4170-a043-e258cacad521
00:06:14.485 --> 00:06:18.900
granularity. Uh, this one helps
because it gives less chance

NOTE Confidence: 0.8636278

be9903db-d158-4bef-a974-59a114968cc3
00:06:18.900 --> 00:06:22.508
for voltage to change a lot
within different units. So for

NOTE Confidence: 0.8636278

f6bad750-74ad-466a-a25f-2f91c8a32eee
00:06:22.508 --> 00:06:26.444
instance here, because the time
is a little bit, I mean smaller,

NOTE Confidence: 0.8636278

8b9c948b-77cd-4caf-89cf-ff38499501d9
00:06:26.444 --> 00:06:31.364
so the change of voltage is just
limited to the unit 3 to 4. So

NOTE Confidence: 0.8636278

efa5986a-f927-41a7-b9ed-6836d52d01fb
00:06:31.364 --> 00:06:35.300
we can say that within this time
the system is representing three,

NOTE Confidence: 0.8636278

8afad651-5ff0-4102-b9fd-621451946292
00:06:35.300 --> 00:06:38.580
for instance. But still,
there lots of ambiguous cells

NOTE Confidence: 0.8636278

d56adb0f-ba44-4cd3-8455-4b2bf377798d
00:06:38.580 --> 00:06:42.844
like this. If I'm here, we can
see that the voltage is changing

NOTE Confidence: 0.8636278

3650673f-2e33-491e-a470-33aace637359
00:06:42.844 --> 00:06:46.452
a lot, so within different
units. So we can say that

NOTE Confidence: 0.8818912

c597e236-6d4d-4178-822c-d20f3a28a324
00:06:46.690 --> 00:06:51.440
The system is not deterministic
in representing the number or

NOTE Confidence: 0.8818912

2d728321-e25d-4417-bc41-052ff8e3a4d3
00:06:51.440 --> 00:06:53.340
digit in base-10.

NOTE Confidence: 0.8699558

0c3500f3-59d3-4c88-9f90-9be6801a9cae
00:06:54.570 --> 00:06:59.058
Another solution was that to have
a bigger or a larger units in

NOTE Confidence: 0.8699558

eba1a7df-a388-4ce5-9790-3c68442c2f54
00:06:59.058 --> 00:07:03.920
voltage, so instead of just zero
to one, we could say that 0 to 3

NOTE Confidence: 0.8699558

a487435f-a457-4fe6-9a39-f72964f10257
00:07:03.920 --> 00:07:08.408
represents one unit, 3 to six
another unit, etc. So, but the

NOTE Confidence: 0.8699558

8a15d35d-9de4-4ed5-a73b-5f855a0b3dfd
00:07:08.408 --> 00:07:12.896
thing was that, we have to reduce
the base-10 to base.

NOTE Confidence: 0.8804022

08654fbb-12c1-4284-b93c-acce73bcae3f
00:07:14.440 --> 00:07:19.627
Five because we have
base-4 because we have 4

NOTE Confidence: 0.7662211

4945a3d8-b6ec-49ae-bbda-680c9194e25f
00:07:19.627 --> 00:07:24.630
units, 0123. So we said that from the
numbering system, we said that if

NOTE Confidence: 0.7662211

97d292fc-4505-425b-a300-c28b65213adf
00:07:24.630 --> 00:07:29.488
we decrease the number of spaces,
it means that we have a less

NOTE Confidence: 0.7662211

e3d0d7ce-384f-4ca2-8a2f-127e6a7ba2ce
00:07:29.488 --> 00:07:32.611
range of numbers given the same
amount of position.

NOTE Confidence: 0.8347234

8343887f-ea20-4a30-b39c-a9d72130a828
00:07:33.440 --> 00:07:38.504
But we can
have less, I mean,

NOTE Confidence: 0.8347234

72155140-b8ff-446a-83f6-254177ee17b8
00:07:38.504 --> 00:07:40.614
ambiguous cells

NOTE Confidence: 0.80841774

8fff5335-d20a-4210-b266-e170d6359d5d
00:07:41.660 --> 00:07:46.664
because the chance for voltage
to change is very

NOTE Confidence: 0.6612716

87e20196-6186-4050-abd0-528d3221d91b
00:07:46.664 --> 00:07:52.090
low so. Here you can see that
for instance, in these cells.

NOTE Confidence: 0.8847049

a53c24f6-d16c-4c5c-891e-7c455a9c7f79
00:07:52.700 --> 00:07:56.410
Although the voltage is changing
from different units from the

NOTE Confidence: 0.8847049

32f501fa-8e7f-491a-8190-2ad9cc242c8f
00:07:56.410 --> 00:08:00.862
different values, but because it
is in a bigger unit we can

NOTE Confidence: 0.8847049

44586f81-9872-402d-9a31-ff2967baf6b2
00:08:00.862 --> 00:08:02.346
represent it as zero.

NOTE Confidence: 0.8436902

ef7a6c1d-3734-4f2a-a767-402c56177761
00:08:03.080 --> 00:08:05.896
But there still are some
ambiguous else like

NOTE Confidence: 0.8436902

174460ce-d92f-4fc9-bdc4-a33af4fb3154
00:08:05.896 --> 00:08:09.416
zero, like the first time
step here, and also here.

NOTE Confidence: 0.8836453

c6d2146c-d9ba-42b0-9d07-91595dbc7e97
00:08:10.820 --> 00:08:15.332
At the extreme, we said that
we can just split the voltage

NOTE Confidence: 0.8836453

a3b32f25-9ba9-4639-ab81-ea22c191d904
00:08:15.332 --> 00:08:19.844
range into 2 units, zero to
five, 5 to infinity, and then

NOTE Confidence: 0.8836453

237c8094-e3ff-489b-9691-0c46efa8404c
00:08:19.844 --> 00:08:23.980
this one gives a lot more
deterministic value in

NOTE Confidence: 0.8836453

98dfaa70-bf7d-45c6-9b66-bb9ef141ec4f
00:08:23.980 --> 00:08:28.868
the cells, but the thing is we
have binary system, so we can

NOTE Confidence: 0.8836453

56e627fb-c363-41ee-a727-b1e428593962
00:08:28.868 --> 00:08:33.004
represent given the same amount
of position, we can represent a

NOTE Confidence: 0.8836453

bc18a4ce-830b-45cf-bfa0-4a7207e667e2
00:08:33.004 --> 00:08:34.508
less range of numbers.

NOTE Confidence: 0.873771

e898528c-c92d-4c2d-8268-7a692fd088ef
00:08:36.350 --> 00:08:40.420
And we said that we need a
system to be reliable,

NOTE Confidence: 0.873771

043ab966-b970-40e8-8a0f-db9ee69616b1
00:08:40.420 --> 00:08:43.380
robust to noise, and
because of the engineering

NOTE Confidence: 0.873771

3c344948-3566-4d81-8eba-6777f22d22dc
00:08:43.380 --> 00:08:46.710
limitation, it's better to
stick with base-2,

NOTE Confidence: 0.873771

5162ff4c-2213-445e-ae87-27df5412e760
00:08:46.710 --> 00:08:50.040
because although we are
limited to less range of

NOTE Confidence: 0.873771

3ff5c5fd-58d4-427b-ab62-42d9d3d3b5bf
00:08:50.040 --> 00:08:53.370
numbers, it is much
more reliable. Instead of

NOTE Confidence: 0.873771

33629470-d74b-4894-8e7c-133d79c97719
00:08:53.370 --> 00:08:56.700
having a base-10, but much
more noisy numbers.

NOTE Confidence: 0.77910626

caf9ce05-e466-4fff-905c-9db550c0ff01
00:08:58.720 --> 00:09:02.872
An I said, I mean indeed, the
first computer was ternary based

NOTE Confidence: 0.77910626

954a21e9-f9f7-4883-95f2-f1d9b6fa977d
00:09:02.872 --> 00:09:04.256
on three values and

NOTE Confidence: 0.873048

a38175a3-d525-44c0-9147-da22764dbfe5
00:09:05.740 --> 00:09:09.252
we will talk about decimal
computers, which we will cover

NOTE Confidence: 0.873048

a567e96d-478e-43da-99e3-713f1c7f7794
00:09:09.252 --> 00:09:14.520
later, and another reason it's based
on the binary system was that it

NOTE Confidence: 0.873048

b205217b-f65e-41b3-8f94-c1fee11a301d
00:09:14.520 --> 00:09:18.471
has a deep mathematical theory
behind it because the

NOTE Confidence: 0.873048

489342cc-b166-4f7d-b319-cfbe24189398
00:09:18.471 --> 00:09:21.544
mathematicians and
logicians from philosophy, they

NOTE Confidence: 0.873048

2ae06e9c-6316-452b-a3ac-c38033931a66
00:09:21.544 --> 00:09:27.251
already had this system of two
values: true and false. So we can

NOTE Confidence: 0.873048

bd8efa14-1619-4ae2-9e45-e198e02c6850
00:09:27.251 --> 00:09:32.080
benefit all those theories for
our binary system. So

NOTE Confidence: 0.873048

d9a81041-9863-41f5-a08d-ca41b508bb6e
00:09:32.080 --> 00:09:36.909
the first one who produced the two
value logic was George Boole.

NOTE Confidence: 0.9020088

e40ae28d-9449-46ef-8014-762a7e010cc2
00:09:37.550 --> 00:09:40.110
I mean in this book.

NOTE Confidence: 0.86308163

9da859ac-852f-426e-be7a-e5e22576da76
00:09:40.880 --> 00:09:45.407
In the 19th century he
introduced Boolean algebra,

NOTE Confidence: 0.86308163

ea00806a-679e-4c41-8774-ded0783bff66
00:09:45.407 --> 00:09:51.443
kind of algebra for two value
systems. For I mean, as a

NOTE Confidence: 0.86308163

4155db80-801d-40f1-8eb3-bbefb5aa5262
00:09:51.443 --> 00:09:56.473
philosopher for laws of thought.
But we could benefit those

NOTE Confidence: 0.86308163

d814568d-3c6d-4b3e-a75c-ad5f21e85448
00:09:56.473 --> 00:09:58.988
theory for building a computer

NOTE Confidence: 0.85862315

5f7ec035-da6a-4836-bbb1-f443f156b6fb
00:09:58.988 --> 00:10:03.308
system. A reliable computer system,
and the first one who did that was

NOTE Confidence: 0.85862315

80bf18fb-e5ad-49bb-a6cb-8f425366734b
00:10:03.308 --> 00:10:07.532
Shannon in his master thesis. So
he used the Boolean algebra with

NOTE Confidence: 0.85862315

ad15a105-4244-4931-8ff2-a343b7dcbcb6
00:10:07.532 --> 00:10:12.108
the electric power in order to
build a computer system to do the

NOTE Confidence: 0.85862315

73ad9f80-cfe7-4699-807c-f8ad5ac011af
00:10:12.108 --> 00:10:14.572
information processing, which is
called switching algebra.

NOTE Confidence: 0.88490146

0f4e9bcd-f951-4b69-be93-1b10959c9299
00:10:16.430 --> 00:10:20.546
Then we said that, let's
build a binary computer. I mean,

NOTE Confidence: 0.88490146

5eb582b7-f01a-45b7-b993-7fb261e8ba3f
00:10:20.546 --> 00:10:23.976
having a binary system as the
numbering system and electricity

NOTE Confidence: 0.88490146

870ba31c-b531-459c-8231-be2dbca8ee07
00:10:23.976 --> 00:10:25.005
as the power.

NOTE Confidence: 0.84426916

b1faf724-b06f-4c49-b33d-4aeeb51bee2c
00:10:25.880 --> 00:10:30.830
So we said that we could imagine
low voltage representing zero,

NOTE Confidence: 0.84426916

78e411ea-ba5e-4a3f-b7a9-f27110016267
00:10:30.830 --> 00:10:34.880
and high voltage representing one
and anything between these

NOTE Confidence: 0.84426916

f23aab2f-64f3-48f6-b8e3-adc64cbfe3d4
00:10:34.880 --> 00:10:39.380
ranges is deterministic because in
real world when you change the

NOTE Confidence: 0.84426916

5ffe35b1-59b7-494e-a8bf-227e02aa2258
00:10:39.380 --> 00:10:44.330
voltage, you cannot suddenly
change it from zero to five. It

NOTE Confidence: 0.84426916

1925088d-3dec-4f22-b573-d934843c3ab9
00:10:44.330 --> 00:10:49.730
passes, I mean it takes a
little bit time to increase the

NOTE Confidence: 0.84426916

853b3eaf-c7bf-4b7e-a234-94885a20f609
00:10:49.730 --> 00:10:54.680
voltage, so there is some area
of I mean ambiguous ambiguity,

NOTE Confidence: 0.86553365

74fa9a9e-f01b-4549-b030-c56f53cf0634
00:10:54.680 --> 00:10:58.514
but this is because of
engineering limitation

NOTE Confidence: 0.86553365

483ea223-c9e5-4d5d-b472-8cf89539d230
00:10:58.514 --> 00:11:02.122
and we call this positive logic
because high voltage is 1.

NOTE Confidence: 0.8902701

799495b4-9f12-4d6c-bac2-b5c1a0941b83
00:11:03.030 --> 00:11:07.541
And then we put this example and
this is the logical design of

NOTE Confidence: 0.8902701

a17bb155-524c-4d3d-9bd7-29c5f8a5f9f8
00:11:07.541 --> 00:11:11.358
the circuits. If this switch is
closed, it's connected to the

NOTE Confidence: 0.8902701

591d851f-ddb5-48b9-8652-1de80cd9efee
00:11:11.358 --> 00:11:15.175
ground, which is the default in
positive logic, which means it's

NOTE Confidence: 0.8902701

e151f97b-adb8-49d5-9e28-1ee3f9d67292
00:11:15.175 --> 00:11:19.339
zero. If the switch is open, it's
connected to the power source of

NOTE Confidence: 0.8902701

b2c33cf0-915e-47b7-bda3-05cdc3403695
00:11:19.339 --> 00:11:21.074
electricity, so it is 1.

NOTE Confidence: 0.8622586

37d40462-dc93-43ac-957d-1d3b0afb763f
00:11:22.390 --> 00:11:25.170
You could have negative
logic, meaning that the high

NOTE Confidence: 0.8622586

59f63cba-07ba-44f1-a653-0f09403b571b
00:11:25.170 --> 00:11:26.838
voltage is zero and low voltage

NOTE Confidence: 0.86507237

347a428e-8e2f-4c5c-9405-1287ab027596
00:11:26.838 --> 00:11:33.724
is 1. And it's kind of invert
of the previous system, and this

NOTE Confidence: 0.86507237

ad555aa7-b1f8-40b8-8657-dcf3d27b0d2f
00:11:33.724 --> 00:11:36.808
is the logical design of the

NOTE Confidence: 0.92025226

bc1e471e-b92c-4160-ace2-f1f62385ae23
00:11:36.808 --> 00:11:39.700
actual circuits for this logic.

NOTE Confidence: 0.84962994

4a0d4dac-e06c-4ac6-a11b-a5ac9cdc3c1b
00:11:41.020 --> 00:11:45.752
Uh, we said that in this course
and in the next

NOTE Confidence: 0.84962994

ec718b13-affc-409f-9a2d-4718fc314e25
00:11:45.752 --> 00:11:50.120
course, basically I mean by
default, when we are going to

NOTE Confidence: 0.84962994

67e8112c-36c1-44ec-ac4f-4d306e3de3be
00:11:50.120 --> 00:11:53.760
build a computer system, the
numbering system is base-2,

NOTE Confidence: 0.84962994

49f6dec1-bf51-4133-ab26-b8bf0b8d5a6d
00:11:53.760 --> 00:11:57.400
binary, and the logic is
positive, meaning that the high

NOTE Confidence: 0.84962994

9fb3e261-0afc-4e7f-95be-9eecf72982d5
00:11:57.400 --> 00:11:58.492
voltage is 1.

NOTE Confidence: 0.82690924

d4bb1514-586a-4dc2-8cd9-05854ef3a00c
00:11:59.740 --> 00:12:03.480
The approach we use here in
this course is bottom up

NOTE Confidence: 0.82690924

ec5ad95f-1539-453a-a75f-ba3086988583
00:12:03.480 --> 00:12:06.880
approach, meaning that we are
going to build the smallest

NOTE Confidence: 0.82690924

a835fdc3-d8f9-411d-9c09-9709ac7017c6
00:12:06.880 --> 00:12:10.620
unit and then put this
smallest unit in order to

NOTE Confidence: 0.82690924

52740293-3fbc-4c74-ac6a-ecad41144ea7
00:12:10.620 --> 00:12:15.040
build a larger units, and at
the end, we promised to build a

NOTE Confidence: 0.82690924

776a0bf1-5f7c-4103-ae36-5df52b4576e8
00:12:15.040 --> 00:12:19.460
CPU. I mean the most complex.
digital unit that I mean

NOTE Confidence: 0.82690924

ebf783e9-c65d-4362-bb92-40256fbcf335
00:12:19.460 --> 00:12:22.520
does all the processing
or analyzing on the

NOTE Confidence: 0.82690924

816b80cf-f5eb-4f2d-82d7-ab864efcd42e
00:12:22.520 --> 00:12:22.860
information.

NOTE Confidence: 0.8600686

2643c58f-b750-4b21-a1b3-010e906b5e65
00:12:26.060 --> 00:12:30.848
The thing is, when we are going
to build the computer, there's

NOTE Confidence: 0.8600686

6d18d07a-78bb-4551-9f83-e3e22367df90
00:12:30.848 --> 00:12:34.838
different steps. The first step
is designing the computer in

NOTE Confidence: 0.8600686

02bbfc84-3b13-45b5-aac7-f84c058bdacf
00:12:34.838 --> 00:12:39.227
just paper and pen because the
thing is, before going to

NOTE Confidence: 0.8600686

b4da4ef3-0c8e-4a1e-8f19-62c39662da50
00:12:39.227 --> 00:12:43.616
manufacturing, and I mean
producing a lot of useless or I

NOTE Confidence: 0.8600686

801088a4-f41e-450a-97dc-1cc0e1af63ea
00:12:43.616 --> 00:12:48.005
mean costly physical
computers, we can at the

NOTE Confidence: 0.8600686

bcbc7d2c-3aa8-413e-8acb-b08c66d53edf
00:12:48.005 --> 00:12:51.596
design level, employ
some mathematical formulation

NOTE Confidence: 0.8600686

dfc99ac9-fdbc-4f12-9bc5-452154eb79dd
00:12:51.596 --> 00:12:55.187
from Boolean algebra in order to
come up with a

NOTE Confidence: 0.84367126

d4fff669-ade2-48be-a1aa-e8844bf8adb9
00:12:55.240 --> 00:12:59.104
much more smaller or simpler
computer, but accomplishing

NOTE Confidence: 0.84367126

744c22b7-0790-43bd-b191-1fc63c078a75
00:12:59.104 --> 00:13:04.900
the same task or equivalent to
the other computers

NOTE Confidence: 0.84367126

963ebc43-587a-4ee1-867f-bf211ef55016
00:13:04.900 --> 00:13:11.179
that have more, I mean units.
This way when we

NOTE Confidence: 0.84367126

80b889a3-d0e0-4e60-aa95-7b816aee6def
00:13:11.179 --> 00:13:15.043
build a computer, in
manufacturing step, it is

NOTE Confidence: 0.84367126

0b3700f8-3f4d-4458-ad20-1611f18f0acc
00:13:15.043 --> 00:13:16.975
much more cheaper.

NOTE Confidence: 0.8632921

30862233-11f3-43a4-b4f0-d0e92bcf5418
00:13:18.280 --> 00:13:21.228
So that's the design task.
I mean in the design task

NOTE Confidence: 0.8632921

088a97bb-a90b-4480-bfde-c8c97ea6c7ef
00:13:21.228 --> 00:13:22.300
we are going to

NOTE Confidence: 0.861428

a63d9b45-475d-4197-b3fc-c4e0c5128a83
00:13:23.790 --> 00:13:26.780
design a computer which is
much more simpler, but the

NOTE Confidence: 0.861428

e2285c95-2e81-4c6e-84c3-83309eb92375
00:13:26.780 --> 00:13:27.378
same power.

NOTE Confidence: 0.8711896

a2c46969-6620-48d8-a271-7133f88ce436
00:13:29.790 --> 00:13:33.050
And the task of building
computer is for engineers. It's

NOTE Confidence: 0.8638882

09e4b2db-607b-489f-ba31-d188ce8a9e8b
00:13:33.050 --> 00:13:37.562
not our task. And we'll start
with logic gates. We call this

NOTE Confidence: 0.8638882

a0d855e6-529d-44d5-b083-6ff994524d21
00:13:37.562 --> 00:13:41.378
logic gates because it is based on
the Boolean algebra, so the

NOTE Confidence: 0.8638882

c95adfd1-a715-4198-a54b-6f0440123cc9
00:13:41.378 --> 00:13:42.968
logic comes from the logicians.

NOTE Confidence: 0.8369163

c387cc5e-4595-493f-b7a2-898e49d8cd5a
00:13:43.870 --> 00:13:48.677
And the gates comes from the
electricians who use the Boolean

NOTE Confidence: 0.8369163

6ecd0a8c-3374-41d3-bcaa-d56ba590314f
00:13:48.677 --> 00:13:54.358
algebra to work with the
high voltage and low voltage to

NOTE Confidence: 0.8369163

40da8553-a42c-4c62-a55b-5755b9b64cdf
00:13:54.358 --> 00:13:59.165
represent zero and one. So we
call these units logic

NOTE Confidence: 0.8369163

6968bbbd-f7a3-4b99-966f-c5081d829ba0
00:13:59.165 --> 00:14:03.098
gates. The first logic gate we
introduced was not.

NOTE Confidence: 0.7915898

e59ff00e-9084-4f97-95b9-ce0fc489c8ab
00:14:04.320 --> 00:14:07.533
We said that we call them
inverter or X bar.

NOTE Confidence: 0.85131055

89647740-d8da-4937-bbf3-00f6e1492df6
00:14:08.430 --> 00:14:13.650
This is X bar or X prime,
meaning that did not of X and

NOTE Confidence: 0.85131055

f9186bd4-52a2-4243-ad49-6499e34cb9c9
00:14:13.650 --> 00:14:18.174
so it accepts one input and the
output is represented as a

NOTE Confidence: 0.85131055

20923c0e-e95e-4231-884e-b9f3d0e9c31e
00:14:18.174 --> 00:14:20.958
boolean expression or Boolean
function. And this boolean

NOTE Confidence: 0.85131055

6ed989a4-2892-4492-ae7d-46889101d34c
00:14:20.958 --> 00:14:24.786
function is equal to X prime or
X bar, which means that

NOTE Confidence: 0.85131055

a25bf762-3c2b-4aac-9d59-ee38ef69a2d5
00:14:24.786 --> 00:14:29.658
whatever the input is, we have
to invert it and this is called

NOTE Confidence: 0.85131055

50d6df32-431f-416e-b75b-79af11b0c6d7
00:14:29.658 --> 00:14:33.834
inversion bubble. If there's a
low voltage or zero we have to

NOTE Confidence: 0.85131055

aedd27cb-f9da-45d5-952b-f9ed5de9a42b
00:14:33.834 --> 00:14:38.010
increase the voltage to high in
order to represent it as one.

NOTE Confidence: 0.86209583

f5dfd28d-7c15-4e6c-add4-592ab62e5d0c
00:14:38.440 --> 00:14:40.900
If it is high voltage,
we have to decrease it

NOTE Confidence: 0.86209583

6f8d928f-ee89-4ed6-b18a-0cf49baab759
00:14:40.900 --> 00:14:42.376
to low voltage as a 0.

NOTE Confidence: 0.81662494

942844de-a35f-42b3-abba-8c95fbe1ad76
00:14:43.770 --> 00:14:48.030
The immedite application of the not
was I mean, applying

NOTE Confidence: 0.81662494

7bfd301d-4b5e-44a4-8a5f-5e32192065f2
00:14:48.030 --> 00:14:51.935
the ones compliment so we can
build the circuits that

NOTE Confidence: 0.81662494

a6cfc994-306b-4679-9950-d88771289bca
00:14:51.935 --> 00:14:55.485
does the one's complement,
just accepting the input,

NOTE Confidence: 0.81662494

681288dd-9b57-4d5a-a1b0-febde4419b54
00:14:55.485 --> 00:14:59.745
applying the not gates on the
input and then the output is

NOTE Confidence: 0.81662494

cf623bb0-49d0-4bcc-b545-3c95cd3a5f57
00:14:59.745 --> 00:15:01.875
going to be the one's
complement.

NOTE Confidence: 0.8557748

c33d2963-2519-4757-b87f-b8dc2b0b32b0
00:15:03.300 --> 00:15:07.863
The second logic gate was the
AND and the AND was a Binary

NOTE Confidence: 0.8557748

83c11555-7b40-406f-9f8a-402235ccf8d5
00:15:07.863 --> 00:15:12.075
Gate, which means that it
accepts two inputs or it has two

NOTE Confidence: 0.8557748

1a6fa263-370c-435d-b1b6-af90291c6232
00:15:12.075 --> 00:15:16.989
operands. From the math, we know
that AND works like this. So if

NOTE Confidence: 0.8557748

0f277aa9-4e5c-4bff-88d2-295bd3295954
00:15:16.989 --> 00:15:21.201
both the inputs or all the
inputs are one, the output is going

NOTE Confidence: 0.8557748

bf4a7804-9f7b-47d5-a18c-9ea6ddd5dc76
00:15:21.201 --> 00:15:26.115
to be 1. Otherwise if you have
at least one 0 in the inputs,

NOTE Confidence: 0.8557748

0ef039cd-e52b-45b8-b2cb-3f6ff6ecde66
00:15:26.115 --> 00:15:28.221
the output going to be 0.

NOTE Confidence: 0.86056066

12d64182-3f4a-4329-9d7f-5252c7fb15eb
00:15:28.960 --> 00:15:33.371
And you can show AND with
dots or multiplication or

NOTE Confidence: 0.86056066

487cd314-5098-43ac-a3f7-dfe39314733e
00:15:33.371 --> 00:15:35.777
nothing, just X&Y. That's an AND.

NOTE Confidence: 0.83350277

f76a7b5f-4321-42a7-b9d3-690f3b3382d5
00:15:38.920 --> 00:15:43.012
From the math, we know that
AND operator has the

NOTE Confidence: 0.83350277

1c4f7c6e-d093-4a4f-a1b3-7a03a211b654
00:15:43.012 --> 00:15:46.360
commutative property, meaning
that the order of the AND

NOTE Confidence: 0.83350277

185f280e-ba82-4639-afec-c1b07df57d3a
00:15:46.360 --> 00:15:50.824
operator doesn't matter. So if
you add X&Y and Y&X, the result

NOTE Confidence: 0.83350277

fc55ffb4-72d6-4c38-885b-414e771fd0f1
00:15:50.824 --> 00:15:56.404
going to be the same. So here I
just reverse the order at Y&X, so

NOTE Confidence: 0.83350277

97e2e7ff-32cc-4373-ae00-153d22052666
00:15:56.404 --> 00:16:00.868
you can see the same output.
Whenever based on the same input,

NOTE Confidence: 0.83350277

3e86e161-1849-4d43-bced-88cc91dcebb4
00:16:00.868 --> 00:16:05.332
you output the same result for
all the variation of the inputs,

NOTE Confidence: 0.83350277

a4b3781c-fa51-4bb3-b91a-74c1f23190c3
00:16:05.332 --> 00:16:07.936
we mean that

NOTE Confidence: 0.9158152

1cb0c31a-c592-488a-9aee-b50689a57d6a
00:16:08.050 --> 00:16:10.580
both functions are the same.

NOTE Confidence: 0.88359976

128dc3a7-f092-4be6-95af-0b35aff8d215
00:16:11.360 --> 00:16:15.637
So you can see that from the
same input, a variation of the

NOTE Confidence: 0.88359976

90087df2-2358-45f0-bbdd-0a5f780656e2
00:16:15.637 --> 00:16:18.927
input. The same result has to
you happen, so these two

NOTE Confidence: 0.88359976

28eb06ce-86c2-4c56-a732-ba4f96e2af6b
00:16:18.927 --> 00:16:22.546
tables are the same. That's
why we said that the AND

NOTE Confidence: 0.88359976

365df5f8-cd0c-4748-bcb5-6e46c7dce8b4
00:16:22.546 --> 00:16:23.862
operator is a commutative
operator.

NOTE Confidence: 0.84604365

564866b4-016b-4526-b05d-5704e0fbe9b8
00:16:25.780 --> 00:16:29.888
Another thing is that if you AND
any input with zero, the output

NOTE Confidence: 0.84604365

1d0a4916-ddb8-4635-8f70-95fe192900de
00:16:29.888 --> 00:16:33.996
is gonna be 0. This is I mean
clear. But the thing is, in

NOTE Confidence: 0.84604365

25f13fb5-fa33-45fb-8cfa-c5572442607a
00:16:33.996 --> 00:16:37.156
practice, this is a good
approach. Whenever you want to

NOTE Confidence: 0.84604365

df91e5b7-3303-4797-ad01-034373ad5445
00:16:37.156 --> 00:16:40.632
ignore the input, whenever you
don't want to pay attention to

NOTE Confidence: 0.84604365

c4b08834-2d83-4bbd-bd8c-cbbe3ad277a2
00:16:40.632 --> 00:16:44.424
the input, you could simply
input zero in one of the input

NOTE Confidence: 0.84604365

0237e258-28fd-46de-82ae-9dd98da7b4ec
00:16:44.424 --> 00:16:48.216
and then the output kind of 0,
meaning that ignore the input.

NOTE Confidence: 0.8241667

6947ad87-bce1-4b94-bf7b-a1a7214668ff
00:16:48.860 --> 00:16:52.292
Whatever X is, I
mean we don't care. The

NOTE Confidence: 0.8241667

207d60ca-5fb9-40f7-87de-cc3a4d11167a
00:16:52.292 --> 00:16:53.540
output is gonna be 0.

NOTE Confidence: 0.8480908

e899fe12-7e6c-4228-8be9-bf7668a699a0
00:16:55.500 --> 00:16:59.260
The same with the other input
and another interesting

NOTE Confidence: 0.8480908

0fcad0d0-3d45-4851-afcf-9f1873044644
00:16:59.260 --> 00:17:01.140
thing with the AND is.

NOTE Confidence: 0.80694973

457ec33b-11fd-4ee4-a0aa-4f8e5cc9f770
00:17:02.120 --> 00:17:07.658
If you AND any input with one, it
doesn't have any impact, so X&1

NOTE Confidence: 0.80694973

5420fd87-0f5e-4a35-a0c2-063a01f6a46c
00:17:07.658 --> 00:17:14.048
or 1 by X, any number of 1.
The same input, so X.

NOTE Confidence: 0.80694973

5b8a1dad-83f4-4d5c-a553-bbfe5fa4f7e6
00:17:14.048 --> 00:17:18.308
So this is again interesting
because whenever you are given,

NOTE Confidence: 0.80694973

43ca843b-b07d-4d4b-865b-6ea0bdb3883e
00:17:18.308 --> 00:17:22.568
for instance a gate, that has
multiple inputs, but you only

NOTE Confidence: 0.80694973

6ae1191a-f125-429b-a1e8-7ab45efa32b1
00:17:22.568 --> 00:17:27.254
need a specific number of
inputs. For instance, if you are

NOTE Confidence: 0.80694973

5c82c8f5-cb75-41de-8450-ba0516554407
00:17:27.254 --> 00:17:33.218
given an AND with two inputs, but
you only need one of the inputs,

NOTE Confidence: 0.80694973

f916628d-e34d-49d0-abe6-8d35432b8a9b
00:17:33.218 --> 00:17:35.774
what should you do with the

NOTE Confidence: 0.8283446

72a26fd4-ee55-4f05-935c-8c1e016d8ea5
00:17:35.774 --> 00:17:40.030
other input? You could, if you
are given with the AND operator,

NOTE Confidence: 0.8283446

b852b6d8-29af-41bc-acb6-2da167a5fb99
00:17:40.030 --> 00:17:43.370
you could simply input one,
meaning that just connect the

NOTE Confidence: 0.8283446

0c5a87f3-b2c5-4f63-8537-83f3384ce872
00:17:43.370 --> 00:17:47.378
input to the high voltage. So it
means that it doesn't have any

NOTE Confidence: 0.8283446

53f5a2fc-7581-45d7-abeb-8940c1473baa
00:17:47.378 --> 00:17:52.054
impact in your design, so
this is one way. This is an

NOTE Confidence: 0.8283446

d988551c-a259-4375-8c58-a7b46345ca14
00:17:52.054 --> 00:17:55.728
interesting way to fill extra
inputs when you don't need them

NOTE Confidence: 0.8283446

9cddc3cd-e6c4-4a61-812d-d70ec80ab1b5
00:17:55.728 --> 00:17:57.064
for the AND gates.

NOTE Confidence: 0.8670707

1b130bf8-ad65-44e8-aafd-e8f1e57ad215
00:17:59.450 --> 00:18:03.160
And again, if you AND an
input with itself, it doesn't

NOTE Confidence: 0.8670707

c4c42dbe-72bf-45ad-a97c-629a93e22dfb
00:18:03.160 --> 00:18:07.612
have an impact, so this is
another way to feel

NOTE Confidence: 0.8670707

bf464c46-97d7-43d9-87f9-11c682559407
00:18:07.612 --> 00:18:09.096
the other extra inputs.

NOTE Confidence: 0.84942263

9ed8b6d1-c57f-4b0c-a784-2f2434e8a1d4
00:18:11.010 --> 00:18:16.442
This is another way to show the
fact that you are inputting

NOTE Confidence: 0.84942263

222e652b-08a3-468f-b94c-d1d2620dc716
00:18:16.442 --> 00:18:21.098
both input with one input. So
just I mean connect the other

NOTE Confidence: 0.84942263

730b12b8-0ed0-4c6b-b1e5-45cda5f05249
00:18:21.098 --> 00:18:26.142
input with the first input so
X&X is again same as X. But how

NOTE Confidence: 0.84942263

5463775e-f32d-4450-bd68-06537d0088e1
00:18:26.142 --> 00:18:30.798
about this one? If you add X
with the not of itself?

NOTE Confidence: 0.84834653

d76f0a5b-da50-411c-9b44-5a9671750df7
00:18:31.740 --> 00:18:37.212
So if X is 0 then not of itself
become one and if it is 1,

NOTE Confidence: 0.84834653

be9355d9-2f4d-4862-8159-d8fc3acb89b7
00:18:37.212 --> 00:18:41.658
the not is going to be 0, so
you always produce at least 1

NOTE Confidence: 0.84834653

5d7c63d6-4949-4101-a16f-f6737cd09539
00:18:41.658 --> 00:18:46.788
zero in the input. So the output
gonna be always 0. So if you AND

NOTE Confidence: 0.84834653

8de6336b-8b87-4c5a-b6df-d6df8558b7f0
00:18:46.788 --> 00:18:50.550
X with the not of itself,
the output is 0.

NOTE Confidence: 0.88801754

7398df88-46e0-439d-bb76-864bc3f5f253
00:18:51.890 --> 00:18:55.621
So this is another way to ignore
the input. So whenever you want

NOTE Confidence: 0.88801754

e31d59d5-1faf-40b7-a748-eb6dc4a6d6ac
00:18:55.621 --> 00:18:59.065
to ignore the input, you could
simply AND it with itself, with

NOTE Confidence: 0.88801754

09d22d20-3134-427f-81b9-b54f679390e7
00:18:59.065 --> 00:19:00.213
not of the itself.

NOTE Confidence: 0.8765892

93909445-67dd-44dd-bc9d-07c47048571e
00:19:00.780 --> 00:19:04.284
So and then the output is gonna
be 0, regardless of what

NOTE Confidence: 0.8765892

9654b34d-fe4b-4558-95db-6a0a8d8a12e6
00:19:04.284 --> 00:19:05.160
are the inputs.

NOTE Confidence: 0.85713434

96701b0c-588c-4d2f-8333-211f26ba81ad
00:19:07.500 --> 00:19:11.658
You can show that. I mean this
is the same. You can show this

NOTE Confidence: 0.85713434

8220595f-38a0-4c44-9609-302676f69a56
00:19:11.658 --> 00:19:15.222
instead of just using this huge
figure, you could simply

NOTE Confidence: 0.85713434

bbb638c6-77cc-43ec-80ce-a6f94899b97d
00:19:15.222 --> 00:19:19.083
use the inversion bubble, so it
means that input X goes to one

NOTE Confidence: 0.85713434

0fb23212-ea7d-452a-8196-758ca66910c5
00:19:19.083 --> 00:19:22.350
input of the AND, the other one
going to be not.

NOTE Confidence: 0.85504234

5b84f29a-bfbe-45df-bfa2-cb1e371bc30f
00:19:24.230 --> 00:19:27.722
And sometimes you could
simply, I mean for shorter

NOTE Confidence: 0.85504234

4fc04f67-ba78-4ee2-b744-ae46a8ff0f1a
00:19:27.722 --> 00:19:31.602
representation X and
then the other input X bar,

NOTE Confidence: 0.85504234

47d49572-3168-4d25-8df8-a9f43691285b
00:19:31.602 --> 00:19:33.542
and then the same result.

NOTE Confidence: 0.91973996

2b55c9a9-bc02-4c45-be80-1b42ab1c192f
00:19:34.640 --> 00:19:37.106
These three are the same
representation.

NOTE Confidence: 0.7997742

4ab1a2c2-75ae-4459-bffa-c6e1d37b7321
00:19:40.570 --> 00:19:47.278
And we covered all these
things last session. So next is

NOTE Confidence: 0.7997742

0a186caf-7bda-4038-90fe-1df4c8c7b635
00:19:47.278 --> 00:19:53.427
new topics, so I'm going to open
the slides for today.

NOTE Confidence: 0.94218355

b25bfce6-73b4-4740-af84-e6dcb9c355c6
00:19:58.160 --> 00:19:59.210
OK.

NOTE Confidence: 0.92390317

01d654b7-30f8-4cf6-a754-0d437b7c0065
00:20:03.850 --> 00:20:06.888
So is there any
questions so far?

NOTE Confidence: 0.93816894

a47ac235-64ad-42b0-8dad-ef3f5c9cdb13
00:20:16.100 --> 00:20:17.010
No questions.

NOTE Confidence: 0.91139984

effbb947-b668-4d96-ae84-d29d503452fe
00:20:20.520 --> 00:20:23.928
Let me go back to this.

NOTE Confidence: 0.10519311

a99489f2-b525-46cc-a14e-183bc034791a
00:20:33.110 --> 00:20:33.820
Ah.

NOTE Confidence: 0.7455602

5a57b94b-840b-4fb1-a539-e002e6ca4b26
00:20:36.380 --> 00:20:42.508
Abdulwahhab, yes yes yeah. As I
said, I mean you can show

NOTE Confidence: 0.7455602

75d127bc-8b2b-4f04-a671-f8fe2176183b
00:20:42.508 --> 00:20:45.955
the not of X as X prime

NOTE Confidence: 0.83532846

c62d7b9e-319c-40c5-81f5-72c752979ca8
00:20:45.955 --> 00:20:50.402
or X bar. Or simply just
put not X, so whenever

NOTE Confidence: 0.83532846

62949184-1819-4b65-bce5-e71ca69693d5
00:20:50.402 --> 00:20:54.626
you see a prime, it means that
it is the not operator, yes.

NOTE Confidence: 0.86118394

a887eaa9-eb19-47b8-8679-15ad5d079761
00:21:02.220 --> 00:21:06.406
Oh, Mia asked why not divide the
time into smaller units, we

NOTE Confidence: 0.86118394

9a751ecc-bc9f-403c-92c7-aba824ba34a0
00:21:06.406 --> 00:21:07.901
do that. The thing is.

NOTE Confidence: 0.8115424

aa285860-7f60-47b8-9d85-38cd64d3dbb9
00:21:09.690 --> 00:21:16.110
We are going to do both. I
mean, smaller units of time and

NOTE Confidence: 0.8115424

e702128d-61af-4979-bb01-e9df36f1bfd6
00:21:16.110 --> 00:21:21.246
larger unit of voltage, so kind
of gaining both advantages. So if

NOTE Confidence: 0.8115424

e30a310a-0719-4b46-8c91-cc911e74c5a0
00:21:21.246 --> 00:21:26.382
you decrease the time units, I
mean fine granularity of time, and

NOTE Confidence: 0.8115424

f47f8a42-4db2-467e-8753-c32fb2680976
00:21:26.382 --> 00:21:31.946
increase the units of voltage,
so you can resolve all the I

NOTE Confidence: 0.8115424

e4c90ab6-8862-48b0-aee2-8f53f7c51177
00:21:31.946 --> 00:21:37.082
mean ambiguous cells, so both.
Smaller units of time and

NOTE Confidence: 0.8115424

41d10360-6232-40fc-929e-e45f9f93d22f
00:21:37.082 --> 00:21:38.794
larger units of voltage.

NOTE Confidence: 0.7808468

3e9dc1d6-9938-4cfa-b8c9-4250c88f10ba
00:21:50.140 --> 00:21:56.818
Oh, Abdulwahhab says when we do coding. We
use the exclamation mark for not.

NOTE Confidence: 0.7808468

e50d60d3-2d5d-4825-a14a-cc07563c75da
00:21:56.818 --> 00:22:02.065
That's another story. I will
tell you the difference. In the

NOTE Confidence: 0.7808468

49719f42-9ae3-4a67-a0ca-1d5cc2379350
00:22:02.065 --> 00:22:07.789
discussion board, I put a reply
to another student. I explained that

NOTE Confidence: 0.7808468

9846dd0c-bc7c-4757-b38c-f472659f411b
00:22:07.789 --> 00:22:12.559
to one of these students,
what's the difference between

NOTE Confidence: 0.7808468

3ddd1655-1c8b-445a-b824-ee2fa3d104ea
00:22:12.559 --> 00:22:13.990
the exclamation mark.

NOTE Confidence: 0.88227636

e3363571-904a-462f-9187-befb4f2584f5
00:22:14.080 --> 00:22:18.940
And there's another, let me show
you my blackboard.

NOTE Confidence: 0.057605322

e7f5cdee-8772-42b9-b10d-0748ec9a6147
00:22:20.930 --> 00:22:21.720
Uh.

NOTE Confidence: 0.76321167

1a113838-b9cd-4adf-ba2d-e51a8deb4a5f
00:22:29.890 --> 00:22:35.098
So I think we can see yes. In
C or C++,

NOTE Confidence: 0.7920498

fd540d59-ab29-4963-b86b-f5cc0c370976
00:22:36.390 --> 00:22:42.447
Dirt types of operators. One
is the boolean operators.

NOTE Confidence: 0.8985692

92835469-91c8-45a8-a930-0917308ef93b
00:22:45.720 --> 00:22:48.768
Another thing is the
conditional operators.

NOTE Confidence: 0.79114145

892add43-12dc-4fb7-a4ee-73fb4fad5f2e
00:22:51.370 --> 00:22:55.720
In Boolean operators, in
order to apply not, the

NOTE Confidence: 0.79114145

b63ac03a-46af-467d-9f01-179d21a722c1
00:22:55.720 --> 00:22:58.765
operator is this: tilda. It's
called Tilda.

NOTE Confidence: 0.91489357

fbfd6fde-ab9c-479d-ab61-415648692ffb
00:23:01.990 --> 00:23:06.517
But for the condition, the
operator is exclamation mark.

NOTE Confidence: 0.84785724

96b3da09-0f8d-45e3-a116-50d8440e891e
00:23:07.760 --> 00:23:11.360
So in the discussion board, I
explained in depth in

NOTE Confidence: 0.84785724

9ca4a2c0-8ede-4b8d-b9b3-bd7915d46aee
00:23:11.360 --> 00:23:14.960
C or C++ when you apply not, you
have to use this.

NOTE Confidence: 0.85320455

724980be-2f74-41e3-b37c-09694a7425eb
00:23:16.140 --> 00:23:20.466
But the thing is, the way we
use that, you have to use the

NOTE Confidence: 0.85320455

9f4d62e9-c905-4a40-bdbe-85411e57571f
00:23:20.466 --> 00:23:23.247
exclamation mark. I explain
what are the

NOTE Confidence: 0.85320455

604b5f8f-a2f3-45a8-966d-86f9cd66e645
00:23:23.247 --> 00:23:26.028
differences and why we have to
use exclamation mark

NOTE Confidence: 0.93107754

e6fa0db2-a54b-4ae5-8548-63ee44cf62b3
00:23:27.080 --> 00:23:28.308
in the discussion board.

NOTE Confidence: 0.90532535

99162156-3123-43ec-9298-6531138b8426
00:23:30.120 --> 00:23:32.970
So let's go back to the screen.

NOTE Confidence: 0.9282557

658f16fb-b53b-4f8d-8def-cfee810b5e3b
00:23:34.890 --> 00:23:36.300
So let's continue.

NOTE Confidence: 0.72821414

0867fcd5-db01-46c8-828a-04f630a4d819
00:23:37.470 --> 00:23:38.979
Share my screen.

NOTE Confidence: 0.9334364

c890d1be-412a-448f-ae31-38cf6d648b52
00:23:43.260 --> 00:23:46.230
So let's continue with the

NOTE Confidence: 0.82925135

16e7078d-52ce-4fa5-aff3-3c31423ef813
00:23:47.820 --> 00:23:49.530
AND operator.

NOTE Confidence: 0.8347961

83e7f69c-8b29-44bc-9733-5f2cb2e7a32c
00:23:50.500 --> 00:23:52.008
The AND logic gate.

NOTE Confidence: 0.82911503

567356fa-034e-4185-9a7c-db0878db80e8
00:23:53.360 --> 00:23:57.608
So we said Not and
the next step is we

NOTE Confidence: 0.82911503

d8ae3929-babc-40ca-95e3-f218077243da
00:23:57.608 --> 00:23:59.378
are going to build an

NOTE Confidence: 0.8488702

1fa95392-fa5f-4cc2-b145-d40093d57d07
00:24:00.790 --> 00:24:05.878
AND with three input. But
before that I have to explain the

NOTE Confidence: 0.8488702

ea3ddd6b-312e-459f-be2c-fc00aef85e14
00:24:05.878 --> 00:24:07.150
design, you know.

NOTE Confidence: 0.8688423

0929b903-92bb-472a-83ea-575e69da40ec
00:24:09.010 --> 00:24:14.652
So we said that we have the
logic gates, the not and AND. The

NOTE Confidence: 0.8688423

51a1974a-afd4-4afd-81d8-511bd7a6e759
00:24:14.652 --> 00:24:20.294
not has one input and the AND gate
has two inputs, so these are the

NOTE Confidence: 0.8688423

93377cb5-7d01-4f29-b19f-52ae8484a781
00:24:20.294 --> 00:24:24.727
most smallest logic gates or
units we are already given, and the

NOTE Confidence: 0.8688423

5fa0f537-b9dc-409e-9451-f09b1bd44ed6
00:24:24.727 --> 00:24:27.951
electrical engineers actually
they manufacture them for us.

NOTE Confidence: 0.89436394

97e3deb8-fc5d-4b18-9060-fa8d6ba58811
00:24:28.600 --> 00:24:33.570
So what if we are going to do if
we need to add 3 Inputs.

NOTE Confidence: 0.8686642

da048f46-be6f-4a96-b495-fcfbef8f2f78
00:24:34.260 --> 00:24:39.135
You go to the market and you can
buy only not gates and you can

NOTE Confidence: 0.8686642

8cb24d72-c8f3-4783-9cb8-89c415f7bfb7
00:24:39.135 --> 00:24:43.360
only buy AND gates with two
inputs. So how can you build an

NOTE Confidence: 0.8686642

ad1bf920-9be7-4efd-ab20-845f56cd4b95
00:24:43.360 --> 00:24:47.585
AND with three input? So this is
called design. So first you have

NOTE Confidence: 0.8686642

0630409a-722b-4687-b27d-86481b5d3999
00:24:47.585 --> 00:24:52.460
to in paper with a pen, you
have to think how can you build

NOTE Confidence: 0.8686642

bce17fa7-131d-49d8-a3a9-0f96e3f1a7cd
00:24:52.460 --> 00:24:57.010
a new structure or new unit
by just a pen and paper

NOTE Confidence: 0.8686642

44ae498b-0981-4ae4-97df-f7fdd5d1cb97
00:24:57.010 --> 00:25:02.210
and then you see that OK, I need
these gates to buy so you go to

NOTE Confidence: 0.8686642

38d54cd7-2cd0-439e-aeb6-17c61b8a7762
00:25:02.210 --> 00:25:06.110
the market and buy gates and
then attach the gates in order

NOTE Confidence: 0.86097836

4a884613-ea2f-4978-94c8-be46265fecf9
00:25:06.110 --> 00:25:11.850
to, I mean to build your
larger unit so, but you do this

NOTE Confidence: 0.86097836

999a238a-2653-4a55-b688-60aa11480d89
00:25:11.850 --> 00:25:16.530
at the logical level, so here at
logical level, it means that you

NOTE Confidence: 0.86097836

219dcc4e-51a1-405b-a4ec-2a39182ba522
00:25:16.530 --> 00:25:19.770
don't use the physical
perspective, you just by pen,

NOTE Confidence: 0.86097836

cbf64186-2abd-439c-a71a-b5846051489e
00:25:19.770 --> 00:25:24.090
You think about how you attach
the gates in order to design

NOTE Confidence: 0.86097836

0aed3746-bb37-476b-a98f-881f4a7fb557
00:25:24.090 --> 00:25:27.690
your system. So this is called
design. Whenever you build

NOTE Confidence: 0.86097836

404b1ee5-44f1-4853-8972-291fd8d121f0
00:25:27.690 --> 00:25:31.650
something at logical level, it
means design. At this on you

NOTE Confidence: 0.86097836

1d9e46b2-7af4-4828-a54b-28b625f050e7
00:25:31.650 --> 00:25:35.250
have to think of three
parameters. The first one is

NOTE Confidence: 0.86097836

bce34b8e-f270-4333-9279-49e67eda9401
00:25:35.250 --> 00:25:37.050
that your design must be true

NOTE Confidence: 0.8582663

090d2dad-949d-498b-838a-4e15c56b1f90
00:25:37.100 --> 00:25:40.637
or effective, meaning that it
shows the desired functionality

NOTE Confidence: 0.8582663

2d5ba26d-8267-4862-9768-c7fee189b3d7
00:25:40.637 --> 00:25:46.532
or it acts how you want.
So if you want to AND 3

NOTE Confidence: 0.8582663

1a239d21-baac-43dc-b66a-3bbc582b3e32
00:25:46.532 --> 00:25:51.248
inputs but when you design
it, the output is not working

NOTE Confidence: 0.8582663

a13fb41a-aa99-49f0-9125-cba7d2905681
00:25:51.248 --> 00:25:56.357
like that. So it means that your
design is not effective or true.

NOTE Confidence: 0.8582663

c23a21fc-1566-48a2-afec-5390bd178469
00:25:56.357 --> 00:26:01.073
When you prove that your design
is true and doing exactly what

NOTE Confidence: 0.8582663

1b9323ee-f9e3-44de-ae6e-ad4579243189
00:26:01.073 --> 00:26:05.789
you want, the next step is is
your design efficient or fast?

NOTE Confidence: 0.8582663

f94ad7c9-a302-4ab5-96d8-6a35e0d759a7
00:26:05.789 --> 00:26:06.968
Efficiency means that

NOTE Confidence: 0.84385365

a63e01ff-2a21-40be-bd53-9e8213a3af83
00:26:07.110 --> 00:26:11.323
Running some design or some
structure and analyzing the time

NOTE Confidence: 0.84385365

47bc825b-4363-4456-9118-6de046fd66f3
00:26:11.323 --> 00:26:15.536
it consumes, so is your design
fast when you manufacture? So

NOTE Confidence: 0.84385365

ca77e2dc-4ac6-421e-b260-21b8f4f67704
00:26:15.536 --> 00:26:20.132
when you give it to the
manufacturer to build for us and

NOTE Confidence: 0.84385365

3df0abaa-cd27-4041-b5ce-b7ae4e8f64b0
00:26:20.132 --> 00:26:25.111
you when you use it, is it fast?
Another thing is that optimum

NOTE Confidence: 0.84385365

7b0a9f44-86d4-4cc6-aa7c-14c2d2298dcb
00:26:25.111 --> 00:26:30.090
cost. How many logic gates do you
go and buy in order to build

NOTE Confidence: 0.84385365

4ba2972e-136b-428e-9ba0-a48e4740728a
00:26:30.090 --> 00:26:35.069
your structure or
your unit. So if you are using

NOTE Confidence: 0.84385365

84d68448-10d8-4f10-8198-f1d06da4988e
00:26:35.069 --> 00:26:39.282
if you're doing the same task
but with less number of

NOTE Confidence: 0.84462583

5f86ff72-22e6-4e25-99f5-d31bb4326a92
00:26:39.400 --> 00:26:44.068
Gates, it means that the cost
is much better, so you have

NOTE Confidence: 0.84462583

2c1bb382-8dcf-4c0e-b60c-f23c24d83971
00:26:44.068 --> 00:26:48.347
to think about optimum
costs. So to build

NOTE Confidence: 0.84462583

4e2345cd-7db6-44fa-b6fb-d45d1381d882
00:26:48.347 --> 00:26:50.681
in a manufacturing
perspective or physical

NOTE Confidence: 0.84462583

216d35ac-52d5-4397-923c-8cf97867bbcc
00:26:50.681 --> 00:26:52.237
sense, it is much more cheaper.

NOTE Confidence: 0.7642521

3e43c8e5-d92e-4466-a6a6-b8f22e75b5e4
00:26:53.450 --> 00:26:57.500
So these parameters are always
our concern at the design

NOTE Confidence: 0.7642521

b6374670-5905-4d97-a77c-420e3b91d6e3
00:26:57.500 --> 00:27:01.550
level, for designing computers at
logical level. So the first

NOTE Confidence: 0.7642521

4dc6ef55-1044-4d58-a8da-45d6acab4db7
00:27:01.550 --> 00:27:06.005
design is AND with three
input as an example.

NOTE Confidence: 0.8664529

00d8ee8f-6a01-4220-b40f-63cedad48b2a
00:27:07.100 --> 00:27:11.848
So. We are given this truth
table. We already know from math, we

NOTE Confidence: 0.8664529

b588abb4-ab10-4a2d-9451-68a7da549728
00:27:11.848 --> 00:27:15.544
know that if we add three
inputs, it acts like, I mean

NOTE Confidence: 0.8664529

41e087b5-fd6b-4fc2-b50f-2c59b55214a8
00:27:15.544 --> 00:27:19.548
with two inputs. So as long as
all the inputs are one, the

NOTE Confidence: 0.8664529

0ec9e2c2-601d-449f-a603-ad1b9db02761
00:27:19.548 --> 00:27:23.860
output is going to be one. But at
least if you have at least 1

NOTE Confidence: 0.8664529

924f0c4d-3563-418e-b429-a75ec0d185bd
00:27:23.860 --> 00:27:27.864
zero in the one of the inputs,
the output going to be 0.

NOTE Confidence: 0.8737969

b8fcf0bf-fc93-4a09-b154-9fb5e2ad8c8b
00:27:28.630 --> 00:27:34.454
So this is the way an AND
with three inputs should work. So

NOTE Confidence: 0.8737969

eff9c091-9e7c-4c20-a570-2cd8a0cdcd4b
00:27:34.454 --> 00:27:37.366
now we have to design this unit.

NOTE Confidence: 0.8818849

506e7aa6-b0b9-4227-abcf-fa9de26709d5
00:27:38.170 --> 00:27:42.874
So this is the immediate
design you can do so. You could

NOTE Confidence: 0.8818849

0d353c59-70cd-44e8-b09d-1259b71216e5
00:27:42.874 --> 00:27:47.914
say that I can AND the 1st two
with each other and then AND the

NOTE Confidence: 0.8818849

a647a5bc-20e1-46cc-96b4-a402b811b42b
00:27:47.914 --> 00:27:49.594
result with the third input.

NOTE Confidence: 0.8601685

bab82834-eb79-4fe1-b100-a1a2fd82d39a
00:27:50.290 --> 00:27:55.246
And this is kind of a new
Boolean expression, so X&Y and

NOTE Confidence: 0.8601685

fa3ab719-19a8-44b9-aa81-ca7bc1c95c55
00:27:55.246 --> 00:27:56.898
then AND with Z.

NOTE Confidence: 0.940248

657aa6ba-4b60-44cf-9da1-cbf449e3e9fa
00:27:57.950 --> 00:27:58.850
This is one way.

NOTE Confidence: 0.6648063

1029527a-c575-48f6-8a69-541e1c479d3e
00:28:00.950 --> 00:28:05.790
Because of the front Boolean
Algebra, which we will cover next

NOTE Confidence: 0.6648063

18036b69-0ac7-4a9c-af4c-59bf58452a59
00:28:05.790 --> 00:28:07.990
session and in later weeks.

NOTE Confidence: 0.84507006

e21b8ce8-ade7-46eb-b7d2-80d78825d008
00:28:08.930 --> 00:28:12.647
Uh, the end operator has
associative property

NOTE Confidence: 0.84507006

18884fc7-f66f-4068-9753-5e8c4fddf517
00:28:12.647 --> 00:28:16.777
because of the commutative
property, so because X&Y has the

NOTE Confidence: 0.84507006

dcd0a31b-052d-4773-8c49-e1ab420ab9dc
00:28:16.777 --> 00:28:20.907
commutative property, you can
simply switch the order. So we

NOTE Confidence: 0.84507006

7370a398-9371-4a99-ba59-5837c223f944
00:28:20.907 --> 00:28:26.689
could say that Y&X and then you
can bring out the X from inside

NOTE Confidence: 0.84507006

2ee5c604-9dbf-44c8-9c70-125a2baad1e7
00:28:26.689 --> 00:28:32.058
the parenthesis and then AND it
with zero. So these are all the

NOTE Confidence: 0.84507006

0ee55781-92c2-46d2-80c7-96ebf5ca20ff
00:28:32.058 --> 00:28:36.188
same. So because the order
doesn't matter because of the

NOTE Confidence: 0.84507006

a8c09506-e826-4b52-91fb-bb99904eb5ec
00:28:36.188 --> 00:28:39.905
associativity property, you can
simply drop the parentheses so

NOTE Confidence: 0.899554

b8c26083-de7c-4bb3-bf77-d258292602d5
00:28:39.905 --> 00:28:42.810
again. Based on the same input.

NOTE Confidence: 0.8808702

08388504-dc01-4442-91a3-6bdc53e215fa
00:28:44.140 --> 00:28:47.870
All these variations output
the same results for all the

NOTE Confidence: 0.8808702

9815ef8c-4b09-4083-a1c3-9756a2765f6c
00:28:47.870 --> 00:28:51.600
variations of the input, so
whenever you have zero, all

NOTE Confidence: 0.8808702

5e51de1f-bec3-43b9-885e-54cbc2bebf6d
00:28:51.600 --> 00:28:55.703
zeroes in the input, all these
variations output 0. So it

NOTE Confidence: 0.8808702

25b8611e-0ed9-44b3-8497-11c4b4732e94
00:28:55.703 --> 00:28:58.687
means that all these columns
are the same.

NOTE Confidence: 0.8626058

f92d0b60-fe69-4606-a657-66a5e3b4be7d
00:28:59.750 --> 00:29:04.000
In other words, AND has the
associativity property. So if

NOTE Confidence: 0.8626058

712d860a-fea9-48e3-9d07-ca57af7e8a9c
00:29:04.000 --> 00:29:09.950
you add X&Z 1st and then AND the
result with Y, it doesn't matter. So

NOTE Confidence: 0.8626058

6bd6e8dd-6977-4b80-8f30-6fa4f39806de
00:29:09.950 --> 00:29:13.350
this is a beauty of
associativity property from

NOTE Confidence: 0.8626058

aaf4a31e-0bc5-4421-ab17-496d11d7ca99
00:29:13.350 --> 00:29:18.025
Boolean Algebra, which gives us
this property. We could have an

NOTE Confidence: 0.8626058

57369b53-0783-42f5-9446-56566cf3334a
00:29:18.025 --> 00:29:23.125
AND with three inputs, because it
doesn't matter how the ordering of

NOTE Confidence: 0.8626058

6ffa161c-5629-4313-963c-3ee10c30ab63
00:29:23.125 --> 00:29:29.075
the input is, so we can have an AND
with three input and without any

NOTE Confidence: 0.8683787

ceb13918-7ad7-46a0-b846-b5644d721c5d
00:29:29.075 --> 00:29:34.288
parenthesis. So by
attaching two ANDs

NOTE Confidence: 0.8683787

cc2ce0ac-12c4-43f4-bca5-5a0e3320f526
00:29:34.288 --> 00:29:39.904
with two inputs we can have an
AND with three input and the order doesn't

NOTE Confidence: 0.8683787

0fd413d0-6a5f-4f64-9a4a-196c263a6b04
00:29:39.904 --> 00:29:41.200
matter.

NOTE Confidence: 0.85388124

7421a029-978a-4bd8-8799-98f7a38780ba
00:29:42.870 --> 00:29:46.887
I mean in fact I mean in
market, the electrical

NOTE Confidence: 0.85388124

4d3e24e7-6f08-40c1-8eeb-f59943e17335
00:29:46.887 --> 00:29:49.359
engineers and computer
engineers, they build an AND

NOTE Confidence: 0.85388124

c5956d79-a5d1-4f85-a4cb-bc1d7de4c625
00:29:49.359 --> 00:29:53.685
with three inputs so you can go
and buy an AND with three input,

NOTE Confidence: 0.85388124

11d7d561-69ce-4a85-bbd3-badcdb533c58
00:29:53.685 --> 00:29:57.084
but else otherwise if you don't
find another three inputs, you

NOTE Confidence: 0.85388124

77890cb1-d577-49a2-a8e0-7f2706756f07
00:29:57.084 --> 00:29:59.247
have to buy two ANDs with two

NOTE Confidence: 0.8023172

49101574-4a83-450f-9d94-006d49dd2d90
00:29:59.247 --> 00:30:02.000
inputs and then attach it
together to have an AND with

NOTE Confidence: 0.8023172

fcece724-f9ed-4ec5-a8e4-cfe4bf101350
00:30:02.000 --> 00:30:02.500
three inputs.

NOTE Confidence: 0.8617044

6f7bab51-9b14-4c7a-a528-d4245f2c034d
00:30:04.300 --> 00:30:09.368
The next step is an AND with four
inputs, so you could follow the

NOTE Confidence: 0.8617044

e7b4d636-a444-47f2-b584-d50450f11e89
00:30:09.368 --> 00:30:13.712
same design pattern. You know
the way we are. I mean, putting

NOTE Confidence: 0.8617044

c43d7a5c-6f14-4c43-bc91-ca3e0327b777
00:30:13.712 --> 00:30:18.418
the gates in different levels.
It's a kind of pattern, so we can

NOTE Confidence: 0.8617044

c6c26719-2a5d-45f2-8a0d-a6c82f14675e
00:30:18.418 --> 00:30:22.762
follow the same design pattern
as we did for the AND with three

NOTE Confidence: 0.8617044

74a2bc28-8047-4e10-8baf-4e8ca49fb614
00:30:22.762 --> 00:30:27.106
input for four inputs. So you
can simply X&Y the result AND

NOTE Confidence: 0.8617044

65a4453d-7b38-429a-acbd-73d24647c908
00:30:27.106 --> 00:30:31.450
with the third input, and then
the result, AND with the 4th

NOTE Confidence: 0.8617044

24b7fc3d-aade-41eb-8d5d-5fe3e3924885
00:30:31.450 --> 00:30:33.622
input. So kind of, I mean

NOTE Confidence: 0.8479038

0ea67a16-df66-4827-bfc3-ab3666a5b886
00:30:33.622 --> 00:30:38.990
applying the different levels
of AND, so this is one way to add

NOTE Confidence: 0.8479038

0e8f1ee4-085a-4baf-8532-cc6f6dcab92a
00:30:38.990 --> 00:30:43.170
4 Inputs. Another way is this.
This is the new design.

NOTE Confidence: 0.868583

1c7a0547-3ee5-463f-b9b5-cc7821f87e8b
00:30:43.790 --> 00:30:48.717
Uh, we can add the first X&Y
and then AND third and 4th

NOTE Confidence: 0.868583

300268c1-cccd-4e25-a55d-7f44bd8eb678
00:30:48.717 --> 00:30:52.886
and then AND the result of
them. So this is another

NOTE Confidence: 0.85876846

4fbf2189-205d-4fcc-b838-83cd52e1e0f6
00:30:54.420 --> 00:30:58.116
Design, but we know from math,
because of the

NOTE Confidence: 0.85876846

07f9c1a3-54cd-482d-bcd8-50d2014c757e
00:30:58.116 --> 00:31:01.140
associativity property of the
AND, we can drop the

NOTE Confidence: 0.85876846

81d995ab-daf8-48d8-87f4-368da2fae1b7
00:31:01.140 --> 00:31:04.164
parenthesis. So F1 and F2 is
exactly the same.

NOTE Confidence: 0.8739167

84ab1959-f257-4b50-884c-4a126a7033cb
00:31:05.640 --> 00:31:09.792
You can at home, you can
practice it on the truth

NOTE Confidence: 0.8739167

2429f0ae-3c69-4bd0-9605-06d39d5ff8e2
00:31:09.792 --> 00:31:13.944
table and you can see that for
all variation of four inputs,

NOTE Confidence: 0.8739167

831b5fef-e4ec-4cdb-a305-c9df51812bc8
00:31:13.944 --> 00:31:18.096
given the same input in the
XYZW, the output for these

NOTE Confidence: 0.8739167

434bf218-883c-460b-a6f0-a0b48647c088
00:31:18.096 --> 00:31:19.826
two functions are the same.

NOTE Confidence: 0.8841668

2b284aab-db78-4db5-b3bb-8388bf0dde93
00:31:21.550 --> 00:31:25.378
But the question here is this.
The design question is this. So

NOTE Confidence: 0.8841668

2aac9e49-c068-4e33-a3ad-01dfc856612d
00:31:25.378 --> 00:31:30.163
now you are going to. I mean go
to the market and buy the gates

NOTE Confidence: 0.8841668

67bc0de4-ce62-4392-81ca-760803163d80
00:31:30.163 --> 00:31:33.672
to build your AND with four
inputs, so which design are you

NOTE Confidence: 0.90115416

4522932e-51d9-4069-bc31-0cc7cce3fa4c
00:31:33.672 --> 00:31:40.177
going to build? So the first one
is that you have to check if these

NOTE Confidence: 0.90115416

65f686d3-8ad7-40d8-8781-3436ab9eca1d
00:31:40.177 --> 00:31:44.020
two variations are the same of
working properly or

NOTE Confidence: 0.90115416

9cacfc10-4710-4181-b7ce-5f70fd832db7
00:31:44.020 --> 00:31:46.155
accomplishing the same task you

NOTE Confidence: 0.82779247

2d5b6ec9-d889-42ea-b71f-386f61cec798
00:31:46.155 --> 00:31:50.730
want. As I said, F1 and F2 are
actually working the same

NOTE Confidence: 0.82779247

0d6fe8e9-38be-4434-83d3-2f6fd082ef44
00:31:50.730 --> 00:31:54.624
because of the associativity
property of the AND. So you can

NOTE Confidence: 0.82779247

2cbe9b78-b167-4acb-bb8e-4696cf4a85d7
00:31:54.624 --> 00:31:58.164
simply drop the parenthesis, so
both are effective and true

NOTE Confidence: 0.902426

6becf6e1-0783-424d-8e03-f192d92b962b
00:31:58.850 --> 00:32:02.354
By this design, so the
next question is.

NOTE Confidence: 0.8687445

75eb1371-e45a-4cb0-b99e-2b87433733d3
00:32:03.880 --> 00:32:07.230
Between these two, which one is
much more faster or efficient?

NOTE Confidence: 0.8895099

70f5e922-8ba8-4967-ae6f-9c1ed16c540c
00:32:07.870 --> 00:32:10.920
For the
first design, the F1.

NOTE Confidence: 0.8690868

42ea4d74-f87d-4751-9c6f-9d457dcaecd0
00:32:11.470 --> 00:32:16.076
As you can see, applying
the second AND with Z, you have

NOTE Confidence: 0.8690868

4823e8cf-f1b8-47b9-9dc1-012a8ad08d6d
00:32:16.076 --> 00:32:20.682
to wait for the 1st AND, so you
have to wait X&Y and together

NOTE Confidence: 0.8690868

e232ed0f-56ff-4cc0-a64a-74cd3290086d
00:32:20.682 --> 00:32:25.288
and then the result going to be
and four Z. With this. So again

NOTE Confidence: 0.8690868

6f2aad30-64e2-463f-b805-3fbbfd836bd0
00:32:25.288 --> 00:32:29.236
when you wanted to AND with
W you have to wait two

NOTE Confidence: 0.8818605

d3421733-8c65-4289-a019-bc87ee7cc4fa
00:32:29.236 --> 00:32:33.653
step. And then the last one. So
in order to have the result of

NOTE Confidence: 0.8818605

a2792bcb-f5d9-4b11-a11a-18f50fe347de
00:32:33.653 --> 00:32:37.046
F1 you have to wait one step
here. One step here, and then

NOTE Confidence: 0.8818605

f0d926be-ff9a-4b33-8353-f1ac2190fb21
00:32:37.046 --> 00:32:38.873
the third is there going to be

NOTE Confidence: 0.87158555

bbbda34a-9091-465d-af9a-be79294e4447
00:32:38.873 --> 00:32:44.936
the result. How about the F2?
You can do the AND X&Y in

NOTE Confidence: 0.87158555

d8d3806b-6ca6-484d-bd39-8ded69c893a0
00:32:44.936 --> 00:32:46.184
parallel with Z&W.

NOTE Confidence: 0.9058195

716e54b8-d540-4b61-b554-667f3b4d54c0
00:32:46.890 --> 00:32:51.810
So you can save one step
so these two can be done

NOTE Confidence: 0.9058195

133d4f81-daf6-4acf-8363-619906233edb
00:32:51.810 --> 00:32:55.500
in parallel and then AND
the result altogether so

NOTE Confidence: 0.89795357

bedc5296-d780-47b0-b6ee-b1c2cb43744b
00:32:57.100 --> 00:33:00.952
With respect to efficiency, you
can see that F2 is much

NOTE Confidence: 0.89795357

945b0ae8-7bde-41f9-b525-a6dfcc0f51b1
00:33:00.952 --> 00:33:04.483
more efficient because it had
two levels to reach the output.

NOTE Confidence: 0.89206314

7f931f13-cc6c-402c-86cd-8ab5d30157f5
00:33:05.260 --> 00:33:10.148
In terms of cost, you can see
that both designs have three ANDs

NOTE Confidence: 0.89206314

c6432bed-4176-4d1f-8704-4ec43711fde0
00:33:10.148 --> 00:33:15.036
so both actually has the same
cost. So the only

NOTE Confidence: 0.89206314

4b91f65f-6ece-4cc1-b87d-d4f331d94fa3
00:33:15.036 --> 00:33:19.548
thing actually here is that F2
has the advantage because of the

NOTE Confidence: 0.89206314

3ba08da6-c246-42f6-973c-7d873166cd1e
00:33:19.548 --> 00:33:21.052
efficiency of the design.

NOTE Confidence: 0.90395135

f278230a-d5fd-47a5-9774-093a15d91bf8
00:33:22.260 --> 00:33:26.650
This is the way we compare the
different designs accomplishing

NOTE Confidence: 0.90395135

ddb4879a-6fc3-4129-8661-fe503cb6ddcf
00:33:26.650 --> 00:33:27.967
the same task.

NOTE Confidence: 0.8727147

46b24cb3-3ad4-4c06-bbff-5389930d9507
00:33:30.610 --> 00:33:32.898
You can have am=n

NOTE Confidence: 0.86434084

03e9b576-7cb7-4abb-b92a-1632adf61825
00:33:34.070 --> 00:33:39.614
AND with four gates, four inputs
with one and with three inputs.

NOTE Confidence: 0.86677843

b2a6c376-fbb0-4d2b-b6fe-426c1ebd2492
00:33:40.190 --> 00:33:44.522
And then, uh, the AND in the
result will be the 4th input. So

NOTE Confidence: 0.86677843

c219d989-1972-4069-adf7-a15d5515163d
00:33:44.522 --> 00:33:48.854
this is one design, and indeed I
mean the engineering right now

NOTE Confidence: 0.86677843

3edcdd45-6fe3-40c9-a3a7-ff395befddcd
00:33:48.854 --> 00:33:53.547
in the market, they build an AND
with four inputs because of the

NOTE Confidence: 0.86677843

44e9ec63-2fbe-41b0-b648-5327376c2219
00:33:53.547 --> 00:33:57.518
fact that the order doesn't
matter, they could build it for

NOTE Confidence: 0.86677843

ba7187a5-d579-4870-85e9-2fc35273beca
00:33:57.518 --> 00:34:02.572
us. So in the market you can
have an AND with two inputs and

NOTE Confidence: 0.86677843

a2c39d3d-8053-4ccd-b6e4-503dff63ca6b
00:34:02.572 --> 00:34:06.543
three inputs and with four
inputs. But to my knowledge in

NOTE Confidence: 0.86677843

c78ea2a3-b35e-4e9c-8c99-95d86617c181
00:34:06.543 --> 00:34:10.514
the market there is no AND with
more than four inputs.

NOTE Confidence: 0.85477114

e3a9e4bd-7866-4384-a482-8143a39f484e
00:34:10.580 --> 00:34:15.710
So if you need an AND with five
six or more inputs, you have the

NOTE Confidence: 0.85477114

b480c1f2-7431-4bf2-bb45-7d0f4c7fe0a3
00:34:15.710 --> 00:34:17.420
build it with these existing

NOTE Confidence: 0.85986054

9495a604-3138-4a35-b813-2648228a39ee
00:34:17.420 --> 00:34:21.618
ANDs. So this is one way, so if
you don't have an AND with more than four

NOTE Confidence: 0.85986054

cf14e0de-849c-4e19-9d9c-8f9e0095913f
00:34:21.618 --> 00:34:24.556
inputs in the market, you have
to build it like this. An AND

NOTE Confidence: 0.8709101

46273ae1-2ff0-47ec-a082-29d8d9b26861
00:34:24.556 --> 00:34:29.483
with four inputs and AND it with
another AND with two inputs.

NOTE Confidence: 0.8842802

1e0c9dfe-c77d-4d7b-8c38-1f4ebd70a303
00:34:31.290 --> 00:34:35.625
Or if you only have an AND with
two inputs, you can build an AND

NOTE Confidence: 0.8842802

b734766e-ce8b-4d18-98f6-ed5bac2090f8
00:34:35.625 --> 00:34:37.070
with four inputs like this.

NOTE Confidence: 0.8679526

e63a0d76-aba8-4e88-808a-013fe6a06eab
00:34:37.880 --> 00:34:43.808
So these are different way to
design a new unit, a larger unit.

NOTE Confidence: 0.83388287

bf854f2a-45f9-435b-8b75-2eff032947e6
00:34:45.090 --> 00:34:46.538
Any questions so far?

NOTE Confidence: 0.79007196

c894641d-b399-4b16-8c5d-9c44a4c591d0
00:34:53.040 --> 00:34:57.770
Ah, Travis asks when we overclock
the component, are we

NOTE Confidence: 0.79007196

4deb169d-ed35-4a9e-b487-43827724bb84
00:34:57.770 --> 00:35:02.500
essentially just shortening the
unit of time? Yes, indeed.

NOTE Confidence: 0.79007196

95cfcea1-81fa-46ff-bd50-5d049e6fcd2c
00:35:02.500 --> 00:35:08.649
Yes, but it's kind of much more
complex than I mean, the short

NOTE Confidence: 0.79007196

edcc4650-1064-4d74-af5f-cf230caa0400
00:35:08.649 --> 00:35:14.325
answer is yes. We'll see. We'll
see. I mean in the ending weeks

NOTE Confidence: 0.79007196

7ac07d04-2502-4cd5-9162-aac2a791208b
00:35:14.325 --> 00:35:20.001
of this course that how can we
introduce the concept of Clock?

NOTE Confidence: 0.79007196

dbc961e6-823d-449d-ad69-abb810aae04b
00:35:20.001 --> 00:35:21.893
What is Clock and?

NOTE Confidence: 0.79414165

ca65d8ad-7149-4f4d-ab8f-44b957303def
00:35:21.970 --> 00:35:26.236
Uh, what's the relationship
between the Clock and time?

NOTE Confidence: 0.79414165

94917bc4-9617-4aa6-adb2-6028e0517db8
00:35:26.236 --> 00:35:31.924
And then we can see what we
mean by overclocking a

NOTE Confidence: 0.79414165

a2236cf0-09ad-4595-b193-d8579481da8b
00:35:31.924 --> 00:35:34.294
unit. We will cover this later.

NOTE Confidence: 0.78192353

05c3d779-76ad-480b-98b9-4b67e4b66dd6
00:35:35.570 --> 00:35:36.929
Any other questions?

NOTE Confidence: 0.89604396

7b4d55e2-8062-4902-b258-7ca08e2f4cde
00:35:41.800 --> 00:35:45.232
So again, I mean just make sure
everyone has the attention.

NOTE Confidence: 0.89604396

ef1da7c6-2681-48cd-b183-91128f66c599
00:35:45.232 --> 00:35:48.976
Please send me some feedbacks.
What you feel I mean so far.

NOTE Confidence: 0.935326

b42316bf-7e12-42ab-a2a1-14aaf5fe87a1
00:35:51.360 --> 00:35:53.040
We have 53 students.

NOTE Confidence: 0.6703478

66412843-da19-49fb-bf13-d7e4b2015b4b
00:35:55.900 --> 00:36:00.010
Great, Matthew, Moustapha
Ethan. Nice.

NOTE Confidence: 0.86385226

cece7093-9c83-43ca-954f-8e5b327a3c87
00:36:03.500 --> 00:36:06.027
So all these materials are
interesting to you?

NOTE Confidence: 0.5006087

9053c656-3480-467e-a988-0cba3c304120
00:36:07.490 --> 00:36:11.660
Ryan, Tiana
Yes, cool.

NOTE Confidence: 0.82065296

55068974-26d8-4f68-b418-c030522e444f
00:36:16.520 --> 00:36:21.646
Great, so let's continue cool.
So let's continue with the new

NOTE Confidence: 0.82065296

6c2f2b28-83b4-4844-b7be-fc367de6be89
00:36:21.646 --> 00:36:28.170
gate. So now you could ask
that is it possible to build an

NOTE Confidence: 0.82065296

ae2f88d5-4d57-419c-8ded-31b09321763b
00:36:28.170 --> 00:36:33.762
or, we already from math know how
the or operand works.

NOTE Confidence: 0.82065296

eebd865b-acbc-4146-9c3c-b58815afa436
00:36:33.762 --> 00:36:39.354
You could say that is it
possible to build an or gate

NOTE Confidence: 0.82065296

3ee8f558-a769-4aa0-888d-3cd4eb3b20c7
00:36:39.354 --> 00:36:44.946
with not and end. We will see later.
Is it possible or not.

NOTE Confidence: 0.8480217

68041567-731a-4a63-91f3-e3deedb19cd7
00:36:45.100 --> 00:36:49.552
But for now, imagine in the
market there is a new gate

NOTE Confidence: 0.8480217

7b9d2245-0a73-456f-9f52-d9e4bcd584c9
00:36:49.552 --> 00:36:54.375
called or. We show the or
like this, it is a kind of I mean

NOTE Confidence: 0.8480217

d458496c-5a6e-4362-9e05-7efa9415a2bf
00:36:54.375 --> 00:36:58.456
curved version of the AND. So
it's important when you doing

NOTE Confidence: 0.8480217

f35c9e00-672f-4c80-a86d-67be1c970bab
00:36:58.456 --> 00:37:03.650
the exam or any other paper. I
mean when you write or show it

NOTE Confidence: 0.8480217

d614b833-b2df-4314-b781-0fe6ee41a01a
00:37:03.650 --> 00:37:08.844
in the paper, be careful about
this. You have to show it as the

NOTE Confidence: 0.8480217

0b58fa58-7e5a-45e9-94e1-e56b5a569716
00:37:08.844 --> 00:37:12.925
curve to differentiate
this with AND. So this is

NOTE Confidence: 0.8480217

386c9d68-abbb-4764-8882-ebccef7347fb
00:37:12.925 --> 00:37:15.151
called or. So simply the OR

NOTE Confidence: 0.8237287

9d4cfd6d-d112-4f47-b19e-27008895fb4c
00:37:15.230 --> 00:37:20.755
Gate like this, you can show it
by plus addition operator and as

NOTE Confidence: 0.8237287

446bddad-4592-4204-b415-6574cff8a906
00:37:20.755 --> 00:37:26.280
long as you have at least one
digit of one in the input, the

NOTE Confidence: 0.8237287

9f41dc5b-0e02-42fb-8330-61359ffb9302
00:37:26.280 --> 00:37:31.805
output is gonna be one. If all the
inputs are zero, the output is gonna be

NOTE Confidence: 0.8237287

b0510204-4c3a-4947-98ac-af405e4de133
00:37:31.805 --> 00:37:36.480
of 0. So this is kind of the
dual of AND.

NOTE Confidence: 0.8752586

d8d92d81-e600-421d-b556-9d2f1a78fc42
00:37:37.430 --> 00:37:41.526
So all the inputs are zero. The
output is going to be 0. If at least

NOTE Confidence: 0.8752586

1ad450cd-0371-416b-929d-0e5e31093afc
00:37:41.526 --> 00:37:44.342
one of them is 1, the output
going to be 1.

NOTE Confidence: 0.8472088

6e3fed99-55c7-411a-a3db-af419289f593
00:37:47.220 --> 00:37:51.410
Like AND Operator, or
operator actually has the

NOTE Confidence: 0.8472088

6e8e8078-41d7-4417-9d2b-a42ef61e63b5
00:37:51.410 --> 00:37:55.181
commutative property from
Boolean algebra, so the order if

NOTE Confidence: 0.8472088

a0795660-778e-4e5c-ac50-358b617a8d5e
00:37:55.181 --> 00:38:01.885
X or Y is exactly the
same as Y or by X. So if you

NOTE Confidence: 0.8472088

70892051-d8e1-4ec4-aae4-60aea1692cd8
00:38:01.885 --> 00:38:06.913
change the order, the result is
going to be the same for the

NOTE Confidence: 0.8472088

b4640160-1329-4055-b0f0-271e0f5e6a40
00:38:06.913 --> 00:38:09.008
orderings of the input so

NOTE Confidence: 0.8340336

937e065b-6894-43db-baed-5ed5bcfc6f86
00:38:10.420 --> 00:38:13.867
The order doesn't matter for the OR
operator or gates.

NOTE Confidence: 0.9213456

2520f7ca-ab14-4452-b259-5888217b246c
00:38:15.250 --> 00:38:15.900
And.

NOTE Confidence: 0.87475806

44fd5e64-fa43-4b78-8297-d8bb5aac2a84
00:38:17.550 --> 00:38:22.878
The way we did with the AND we
I mean, we can do this with the

NOTE Confidence: 0.87475806

885acbb9-eab6-43c1-969c-96be5e0efd34
00:38:22.878 --> 00:38:27.540
or. If we put any input with one,
what happens? The thing is, as

NOTE Confidence: 0.87475806

05961575-26cb-4e65-a8b4-9e162b55277a
00:38:27.540 --> 00:38:31.869
we said, if there is at least
one digit of one in the input,

NOTE Confidence: 0.87475806

1a5a94aa-c025-4a6c-a95b-19a8aaa62639
00:38:31.869 --> 00:38:36.198
the output is gonna be one. So if
you or anything with one, the

NOTE Confidence: 0.87475806

872be6a3-9941-4e19-b569-8f8208e3410a
00:38:36.198 --> 00:38:40.527
output going to be one. So this 
is another way to ignore the

NOTE Confidence: 0.87475806

d31aa861-efc7-45e4-ae76-db4eb1a5968c
00:38:40.527 --> 00:38:44.523
input, whenever you want to
ignore the input by an or gate,

NOTE Confidence: 0.87475806

2c075b6e-2232-4a04-8dca-aedf3a7b9133
00:38:44.523 --> 00:38:48.186
you simply attach one of the
inputs with the high voltage

NOTE Confidence: 0.85072964

c69aaad4-df94-49eb-b8a0-dd488b1f1650
00:38:48.450 --> 00:38:53.104
one. So the output gonna be one
and doesn't matter what is X.

NOTE Confidence: 0.87287784

f7ebef38-48c5-4737-86df-278259ad76a0
00:38:53.990 --> 00:38:57.851
So X is zero or one doesn't
matter, the output is gonna be 1.

NOTE Confidence: 0.884834

c5aa8479-3a08-4944-b492-93b5b12ee5a9
00:38:59.050 --> 00:39:04.135
This is one thing I mean in the
exam. Whenever you see a one in

NOTE Confidence: 0.884834

221c56c6-99a2-4cc6-a1bc-b845ad0636e3
00:39:04.135 --> 00:39:08.881
one of the input of the OR gate,
do not worry about the other

NOTE Confidence: 0.884834

980e3ec3-032a-45e3-a220-5bc2500bb579
00:39:08.881 --> 00:39:13.288
inputs. You just simply output
one. So this is the fast way to

NOTE Confidence: 0.884834

1401fad5-b088-4e95-b0d4-5857657390dd
00:39:13.288 --> 00:39:15.322
analyze a unit.

NOTE Confidence: 0.84216785

f7ad59eb-f481-47f1-ab71-479e340ed562
00:39:17.640 --> 00:39:22.332
But the thing is, if you
or it with zero, you have to

NOTE Confidence: 0.84216785

55c07172-64d4-4bd8-ae42-0f0b3bd22f92
00:39:22.332 --> 00:39:25.851
wait until determining the
other inputs. So or with

NOTE Confidence: 0.84216785

6e77da37-d2e9-41de-b154-7e74c92d7c9b
00:39:25.851 --> 00:39:30.152
zero doesn't have any
impact with the or and the

NOTE Confidence: 0.84216785

1af33896-8a41-4d62-a873-8593d35b0be5
00:39:30.152 --> 00:39:35.235
input is going to go to
output. So this is kind of

NOTE Confidence: 0.84216785

da6b4633-2b2e-449d-8d8a-5640a27c4f39
00:39:35.235 --> 00:39:39.145
ignoring. It's kind of just
passing X directly to the

NOTE Confidence: 0.84216785

1f75e2af-688f-4464-98cf-e235debb7eef
00:39:39.145 --> 00:39:39.536
output.

NOTE Confidence: 0.8408528

92b25420-fcf6-460f-931f-93a8b28df06f
00:39:42.260 --> 00:39:47.594
So another thing is that whenever you
have an or for instance with a

NOTE Confidence: 0.8408528

54af916e-6165-4d50-824e-92cc356abb61
00:39:47.594 --> 00:39:52.166
one input, so because or has two
inputs, you could simply fill

NOTE Confidence: 0.8408528

7ffa9eae-f1a0-4f66-b08a-fed4b342be70
00:39:52.166 --> 00:39:56.357
the other inputs with ground.
You could simply attach it to

NOTE Confidence: 0.8816526

9f1f68c0-e88a-4d20-9e00-a4e5896b1a33
00:39:56.357 --> 00:39:59.968
the ground. And use the other
input for your input.

NOTE Confidence: 0.8496133

8c6a8a7b-99ca-43cb-a18c-a56d9f766bdd
00:40:00.320 --> 00:40:03.323
So this is one way to bypass an
input of the OR gate.

NOTE Confidence: 0.7766479

e325172b-cb51-44a2-acc9-50f77bd5e35f
00:40:05.730 --> 00:40:10.137
What happens if you input the OR
gate with one input? For

NOTE Confidence: 0.7766479

7149c346-948f-40be-bc60-7e4477ceedaa
00:40:10.137 --> 00:40:15.561
instance, X goes to both
inputs of the OR Gate. X or X is

NOTE Confidence: 0.7766479

20540763-c62c-4c17-a26e-7e2d36c953ec
00:40:15.561 --> 00:40:20.646
the same as X, it doesn't have an
impact, so the same as X or 0.

NOTE Confidence: 0.917207

1d8bf23f-9b6f-4a8e-8775-ca3cf95724a5
00:40:23.190 --> 00:40:23.840
And.

NOTE Confidence: 0.80142784

34b7de12-9398-4e6c-9574-a5316d150e8b
00:40:25.230 --> 00:40:31.054
x or by its not because if X is
0 then not going to be produced

NOTE Confidence: 0.80142784

4ab40026-8825-402c-94aa-aceb36127ef9
00:40:31.054 --> 00:40:37.606
by a not going to be one and if
X is 1 the not going to be 0

NOTE Confidence: 0.80142784

403d0517-f25d-4010-a0c3-86a521bf9d18
00:40:37.606 --> 00:40:39.062
so you always have.

NOTE Confidence: 0.87936324

5b8a0aa8-02d5-49c0-9c2a-f1a82ecdf633
00:40:39.760 --> 00:40:44.388
You always have at least one
digital one in the input, so the

NOTE Confidence: 0.87936324

d687df71-73f9-4453-a1c0-dae4ec856103
00:40:44.388 --> 00:40:45.812
output is always one.

NOTE Confidence: 0.8869318

4eb5d536-02c6-458d-8059-1890387e885f
00:40:46.430 --> 00:40:50.522
This is another way to ignore
the input whenever you wanted to

NOTE Confidence: 0.8869318

197bd5dd-99e2-46fd-982a-50b5c534ce91
00:40:50.522 --> 00:40:54.614
ignore the input, you could
simply or it with the not of

NOTE Confidence: 0.8869318

5e295e4b-d82d-4687-8e0a-ca07a7867aae
00:40:54.614 --> 00:40:58.365
itself, and then the output is
always one regardless of what

NOTE Confidence: 0.8869318

a4e6af60-a439-409f-8c29-89147a68962f
00:40:58.365 --> 00:40:59.388
are the Inputs.

NOTE Confidence: 0.9014106

285cee41-3ab4-4757-bcec-7724ff5a2fcc
00:41:02.550 --> 00:41:07.191
So here is another design task.
So now we wanted to build a

NOTE Confidence: 0.9014106

8a15727b-418d-4c9b-857a-835b564317f2
00:41:07.191 --> 00:41:09.333
larger unit of over with three

NOTE Confidence: 0.8818281

46e6b122-41e9-4560-b74b-266bb9863bee
00:41:09.333 --> 00:41:14.315
inputs. So again, like the and,
we can follow the same design

NOTE Confidence: 0.8818281

7084d06c-7b31-435c-a90e-24f227b28447
00:41:14.315 --> 00:41:18.455
pattern, so that was the pattern
to design and and with three

NOTE Confidence: 0.8818281

0e83fd42-d27a-4c93-b4c1-1640eb6d4c91
00:41:18.455 --> 00:41:21.905
inputs four inputs, we can
follow the same design pattern,

NOTE Confidence: 0.8818281

1881575f-1038-429e-9182-e7b0bb6143c5
00:41:21.905 --> 00:41:23.630
but this time for or.

NOTE Confidence: 0.8767777

2be8d79f-a148-4840-a954-3e783df9244a
00:41:24.240 --> 00:41:28.174
So if we are given if you are
given the task to design an

NOTE Confidence: 0.8767777

895e4555-80d3-4c97-baf6-c4730bccf26a
00:41:28.174 --> 00:41:31.265
or with three inputs, we
could say that we could or

NOTE Confidence: 0.8767777

404b6f97-4b39-46f4-957e-ba1c774cbc34
00:41:31.265 --> 00:41:34.356
the first 2 input and then
or result with the third

NOTE Confidence: 0.8767777

42cead6f-6dfe-4f57-9622-e9ff7cfc30bb
00:41:34.356 --> 00:41:34.637
input.

NOTE Confidence: 0.8947655

fff1be07-f3b8-4e36-a891-6e30e57a0c77
00:41:35.710 --> 00:41:40.150
So this is the way we do this,
or with three inputs.

NOTE Confidence: 0.89499027

dad694b9-8c8e-4c5a-961f-0db731181757
00:41:41.480 --> 00:41:46.114
As you can see here in the truth
table, if all the inputs are

NOTE Confidence: 0.89499027

9ce86bc1-4986-400c-9c2a-d1ad1953a0a0
00:41:46.114 --> 00:41:48.431
zero, the output be gonna be 0.

NOTE Confidence: 0.92652917

a120b28e-0da3-42d6-84d5-13d9b3e58990
00:41:49.010 --> 00:41:51.346
If at least one of them is 1.

NOTE Confidence: 0.7590257

44abcd53-9905-4335-a396-f4d501c7cba7
00:41:52.630 --> 00:41:53.920
The output gonna be 1.

NOTE Confidence: 0.8506944

0ef9c766-c39b-44bc-afc4-79361bbd8fa8
00:41:55.490 --> 00:42:00.940
So. Again from Boolean algebra,
uh, the OR gate has the

NOTE Confidence: 0.8506944

fd7701d5-23a1-465a-8f5e-633b09d0c77e
00:42:00.940 --> 00:42:04.148
associativity property, meaning
that because of the commutative

NOTE Confidence: 0.8506944

dbf0a32c-1391-491d-817d-9d30338a3c21
00:42:04.148 --> 00:42:08.960
property you can switch the X&Y
here and then because of the

NOTE Confidence: 0.8506944

7e2b774e-b5bd-4cb9-ad56-407c3b23fb00
00:42:08.960 --> 00:42:13.371
associativity property, you can
simply bring out the x out of

NOTE Confidence: 0.8506944

6e832fb5-2b7f-4377-9d93-9ad545b05a4d
00:42:13.371 --> 00:42:18.584
the parenthesis. So you could
say Z or X, and then because of

NOTE Confidence: 0.8506944

ee5de68c-9e98-43cb-bca1-285ee56cb966
00:42:18.584 --> 00:42:22.594
again, you can switch the order
because of the commutative

NOTE Confidence: 0.8506944

85e52ca2-4ffa-4bbb-945f-7a186d227cb4
00:42:22.594 --> 00:42:27.406
property, so it becomes X or Z
and all these varieties so.

NOTE Confidence: 0.8276227

9d1af84a-2e4f-43c9-8966-70f28433ee99
00:42:27.500 --> 00:42:31.790
You can simply drop the parentheses
because of the associativity

NOTE Confidence: 0.8276227

a6a8dcb0-ae9f-452a-ad85-04fe737354ab
00:42:31.790 --> 00:42:33.506
property. So all these

NOTE Confidence: 0.8805609

675a4a43-f2bd-4090-8ce1-47299fe5c48f
00:42:33.506 --> 00:42:37.143
variations. If you, I mean
calculate them in at home,

NOTE Confidence: 0.8805609

e7ae32ce-0ed6-4864-9111-16433029a356
00:42:37.143 --> 00:42:38.211
all are the same.

NOTE Confidence: 0.885

898791e4-38ee-4c24-b306-46e4c6db3825
00:42:39.990 --> 00:42:42.335
So this is an or with three

NOTE Confidence: 0.8479349

10d59d4d-3f32-492b-91f9-aa50f3c09d5d
00:42:42.335 --> 00:42:45.998
input. Just attaching two or
with two inputs.

NOTE Confidence: 0.8436747

a50297b7-0422-48b6-806d-aafc35866d7a
00:42:47.200 --> 00:42:50.056
Because of the this
associativity property in

NOTE Confidence: 0.8436747

a76151a6-8ad6-498e-adfc-79cfad3b1d4a
00:42:50.056 --> 00:42:53.728
the market, the engineers
already built us an over

NOTE Confidence: 0.8436747

b36e7f9e-d62b-478d-b465-9b8a1f53be44
00:42:53.728 --> 00:42:57.808
with three input, so again
it doesn't matter. You put

NOTE Confidence: 0.8436747

113a13ee-4d34-4097-b893-281bbeb87bae
00:42:57.808 --> 00:43:00.256
it X first or Y first.

NOTE Confidence: 0.8631601

9f0026ed-43df-4a84-bca5-93d2e362b2f8
00:43:04.060 --> 00:43:08.680
And or with four inputs are
going to be the same design

NOTE Confidence: 0.8631601

405202dc-9dbb-4f06-8f45-91a06a3da6d9
00:43:08.680 --> 00:43:12.915
pattern like the and with
four gates, so you can attack three

NOTE Confidence: 0.8631601

699a301c-6888-4213-b28e-704b1989fe1b
00:43:12.915 --> 00:43:18.305
or or you can do the parallel
first and one X&Y or with each

NOTE Confidence: 0.8631601

407ba45d-feab-4068-a5b1-2f88a6964bb2
00:43:18.305 --> 00:43:23.310
other and then in parallel Z&Y
or with each other and then the

NOTE Confidence: 0.85893035

2aec5e28-8366-4a00-a4d2-45c4a85510fa
00:43:23.310 --> 00:43:27.421
result or. So again, because of
the associativity property,

NOTE Confidence: 0.85893035

9336a351-8607-420b-9c11-9adadc0432da
00:43:27.421 --> 00:43:30.951
these F1 and F2, these Boolean
expressions or Boolean functions

NOTE Confidence: 0.85893035

b8f83f8f-4ab7-452c-b6c5-1c6113ab1910
00:43:30.951 --> 00:43:32.363
are all the same.

NOTE Confidence: 0.85489815

ced33966-c0bb-4f70-8453-b702d68b2ea8
00:43:33.150 --> 00:43:36.262
Because for all the
variations in the input,

NOTE Confidence: 0.85489815

9791de70-669b-497f-8304-5b042abf62e1
00:43:36.262 --> 00:43:40.152
they are put the same result
given the same input.

NOTE Confidence: 0.8402615

6b070574-692e-4730-a665-dbe3baa7a3dd
00:43:41.510 --> 00:43:45.338
So again, comparing these two
design for an or with four

NOTE Confidence: 0.8402615

daa6ba2a-d975-4e2f-8468-c46790dae2c3
00:43:45.338 --> 00:43:46.382
gates for Inputs.

NOTE Confidence: 0.81808364

74c32a14-19e2-489a-b9a0-d66dfd1d4699
00:43:47.100 --> 00:43:52.754
Both are effective because both
are true. Both are truly or

NOTE Confidence: 0.81808364

93e37288-05ce-4ed2-9676-dd79badd4669
00:43:52.754 --> 00:43:55.838
correctly do or onto 4 Inputs.

NOTE Confidence: 0.84442574

d94f13c4-1ebf-4414-8c7e-a4648cc9de53
00:43:57.020 --> 00:44:02.194
But in terms of cost, both are
the same. Both used three or

NOTE Confidence: 0.8880606

5d076909-73d8-4573-be81-667d228d8da9
00:44:02.194 --> 00:44:07.864
gates. 123123 but in terms of
efficiency, the F2 is much more

NOTE Confidence: 0.8880606

ab6f4934-8bda-4540-80e9-8233e8500d80
00:44:07.864 --> 00:44:13.376
efficient because you can do
this in parallel X or YZ or W

NOTE Confidence: 0.8880606

ab8e46f2-72e6-4a4a-b0d9-bf3551741233
00:44:13.376 --> 00:44:18.888
and then there result. Also you need
only two step for the result.

NOTE Confidence: 0.8336464

029b614f-3e93-4c06-8f14-d95962b4359b
00:44:22.660 --> 00:44:24.795
So any question
with the OR gate?

NOTE Confidence: 0.8788883

7b22025b-4cf9-4b54-8025-b9fd9612edec
00:44:32.370 --> 00:44:37.434
Yes, this slide gonna be on the
blackboard right away after the

NOTE Confidence: 0.8788883

682d1907-d862-443c-b7cb-c348f65a1fa8
00:44:37.434 --> 00:44:42.920
lecture and then the video going
to be uploaded with two or three

NOTE Confidence: 0.8788883

aa8be173-bda4-4225-802e-23914d4bfff6
00:44:42.920 --> 00:44:47.984
hour delay because it takes time
to process the video. But yes.

NOTE Confidence: 0.85668045

b76f83fd-8467-49ec-b8e0-20d99d138ec8
00:44:49.730 --> 00:44:54.072
Oh, the ground is 0 because in
your in the positive logic. So

NOTE Confidence: 0.85668045

9400cb21-3ed6-48aa-a83a-cd56124df32d
00:44:54.072 --> 00:44:58.414
we said that the low voltage is
always interpreted at 0, so the

NOTE Confidence: 0.85668045

7d7529c7-60aa-4353-8830-3e604c056575
00:44:58.414 --> 00:45:02.422
low voltage, the voltage zero is
ground from the physics in in

NOTE Confidence: 0.85668045

7175bd41-a99d-4053-aca3-339bcf0f18bf
00:45:02.422 --> 00:45:06.764
the school you know that. I mean
ground means that the voltage is

NOTE Confidence: 0.85668045

e31a7299-0536-44c8-ab13-ac74e3d853a2
00:45:06.764 --> 00:45:11.106
0. So when you attach in the
positive logic as we are doing

NOTE Confidence: 0.85668045

d9d79840-4671-4925-a35c-97e180556437
00:45:11.106 --> 00:45:15.114
the in this course, the low
voltage is zero. It means that

NOTE Confidence: 0.85668045

f8fa698b-983a-4ccf-b220-8811e66a9122
00:45:15.114 --> 00:45:18.788
just attaching a an input to the
ground means that zero.

NOTE Confidence: 0.95139015

7b3108b2-1c16-4c32-8397-a1aa59b4a8b9
00:45:19.180 --> 00:45:19.650
Yes.

NOTE Confidence: 0.84788626

f323c130-d6eb-40b7-b6fa-c773afabf6d0
00:45:21.570 --> 00:45:23.338
Last slide this one.

NOTE Confidence: 0.8404616

0672e0e3-2891-41c3-8840-3dd107fa2454
00:45:30.680 --> 00:45:35.737
Oh, efficiency is just in terms
of I mean speed or number of

NOTE Confidence: 0.8404616

9c5d6497-5d73-49a5-805c-e0d4e03ae648
00:45:35.737 --> 00:45:40.016
step to accomplish the task. For
instance here the number of

NOTE Confidence: 0.8404616

a0bed629-82c3-4f92-a804-5098a65f2b2f
00:45:40.016 --> 00:45:45.073
steps you have to take in order
to calculate the OR for four

NOTE Confidence: 0.8404616

c6387a34-73a5-46da-be36-8b70be0d3550
00:45:45.073 --> 00:45:50.519
inputs you have to take one Step
2 step, three step. But in the

NOTE Confidence: 0.8404616

da0520a8-f34e-4efc-8272-d888b7bba982
00:45:50.519 --> 00:45:52.853
second design you have to take

NOTE Confidence: 0.8974246

7beab7f2-24ed-40b9-8e3c-77a380d9e7e2
00:45:52.853 --> 00:45:57.820
one step. You can do this in
parallel and then two step

NOTE Confidence: 0.8974246

5c6cf5f0-37c2-47f9-9bc9-b42fb9ec77ed
00:45:57.820 --> 00:46:02.149
through the steps. So the number
of steps is much more less. So

NOTE Confidence: 0.8974246

2790cae2-cd61-417a-906e-373fbce8293f
00:46:02.149 --> 00:46:06.811
we can set up F2 is much more
efficient than F1 or F1 is

NOTE Confidence: 0.8974246

d488a29d-73c6-4b1e-a55a-4ec18d033f72
00:46:06.811 --> 00:46:08.143
inefficient compared to F2.

NOTE Confidence: 0.80053747

19b74dfe-6849-42b6-831c-292fe069a196
00:46:08.950 --> 00:46:12.038
So efficiency is kind of.
It's comparing different

NOTE Confidence: 0.80053747

4057206b-be79-4724-aa36-dd8e8f78b616
00:46:12.038 --> 00:46:13.582
design with each other.

NOTE Confidence: 0.9184137

c3b28978-dde8-4714-9f10-722aeb59a2af
00:46:22.980 --> 00:46:27.630
Ah. What do you mean by
going from bottom to top

NOTE Confidence: 0.9184137

e6669716-701d-41f9-8e88-a58f80a8af59
00:46:27.630 --> 00:46:28.596
for the results?

NOTE Confidence: 0.83712494

441468c8-e14d-4f59-8125-f78986ffcb53
00:46:29.660 --> 00:46:33.422
Oh, you have to start from
the beginning? Uh, you start

NOTE Confidence: 0.83712494

d2e40346-fc9e-4600-80aa-227a5d34cbac
00:46:33.422 --> 00:46:37.526
from this time. So you start
here and then go forward up

NOTE Confidence: 0.83712494

d3b59a4a-54e8-4e43-8c13-9631bf429839
00:46:37.526 --> 00:46:41.288
until the result. This is the
result. So you start from

NOTE Confidence: 0.83712494

35d6ea04-b872-4f34-96c6-81dfa5a6dca4
00:46:41.288 --> 00:46:42.656
this side to this.

NOTE Confidence: 0.9412081

5584440e-bba3-4d97-9cb0-0834caa71541
00:46:44.370 --> 00:46:44.860
OK.

NOTE Confidence: 0.87780046

d087cbfb-46ba-4c0d-afd2-f3ca0997cb03
00:46:47.910 --> 00:46:52.170
Oh, the order when he said the
order doesn't matter. The order

NOTE Confidence: 0.87780046

26885e2f-5a5e-4fc6-b9c9-78b881826c7c
00:46:52.170 --> 00:46:55.720
in the input, for instance. Here
we can reorder X&Y.

NOTE Confidence: 0.8558452

35825189-6dc5-482c-aa24-7216aed6fbd1
00:46:56.400 --> 00:47:00.349
And we can reorder the z and w all
second reorder this person.

NOTE Confidence: 0.8558452

00a47a1d-6177-4f31-bfca-a95504af68cb
00:47:00.349 --> 00:47:05.016
You could put the value here.
You could or X&W 1st and then

NOTE Confidence: 0.8558452

f602ca64-d485-4882-851c-70443d8a0ed8
00:47:05.016 --> 00:47:08.965
Y&Z&Y here. So the order in
the input doesn't matter. But

NOTE Confidence: 0.8558452

a5ff2010-0552-4b3c-85d7-726a5d6a755b
00:47:08.965 --> 00:47:12.914
this is these are called
steps. When you go from for

NOTE Confidence: 0.8558452

74440bfa-4f5a-40dc-b8c4-ec9c1b199253
00:47:12.914 --> 00:47:17.222
instance from the left to the
right in order to have the

NOTE Confidence: 0.8558452

58306a20-8019-4b53-ae19-3c76fc3a21dc
00:47:17.222 --> 00:47:20.812
result, you have to 1st
calculate this and then this

NOTE Confidence: 0.8558452

d4692154-f171-4590-816c-33186088f432
00:47:20.812 --> 00:47:21.889
and then this.

NOTE Confidence: 0.90864474

60e6dd48-76b5-4379-97fa-1d980bf278f9
00:47:23.910 --> 00:47:30.690
Yeah, so let's move on
to another concept analysis so

NOTE Confidence: 0.8540315

73ded502-fad0-4262-8447-315aa823c7be
00:47:30.690 --> 00:47:36.472
so far. We are given a task. For
instance, we wanted to build an

NOTE Confidence: 0.8540315

83e3ae8a-3b72-4538-9fcf-9780c92e4bc7
00:47:36.472 --> 00:47:40.450
and with three input or four
inputs. We are given a task to

NOTE Confidence: 0.8540315

36093ba1-4c23-41ba-9530-c16ced55ce79
00:47:40.450 --> 00:47:44.428
design on or with three inputs
or an hour with four inputs. So

NOTE Confidence: 0.8540315

7fdc217c-ea28-47f7-91a0-64671cd0875b
00:47:44.428 --> 00:47:49.018
we are given a task and then we
design it and then we see that

NOTE Confidence: 0.8540315

d5882828-f674-468a-bbf5-3080c4b6f920
00:47:49.018 --> 00:47:52.996
is it effective. Is it efficient
or is it? I mean costly

NOTE Confidence: 0.8802752

a4823766-b783-413b-add5-8d253241135c
00:47:52.996 --> 00:47:57.430
next is? Analysis you are
already given the unit, the

NOTE Confidence: 0.8802752

44ae89b9-2207-4d2f-955a-36f31e662b09
00:47:57.430 --> 00:48:01.830
design and you're asked to
analyze it. So for instance, I

NOTE Confidence: 0.8802752

505dee0c-3f2c-40ac-9149-720e67db3ab3
00:48:01.830 --> 00:48:07.830
designed a system and I give it
to you to analyze it in order to

NOTE Confidence: 0.8802752

bea210b9-bcd5-4b6a-8dd1-f5596aba8b2c
00:48:07.830 --> 00:48:12.230
analyze it, you first have to
see what is the functionality,

NOTE Confidence: 0.8802752

b9533a85-c608-44e3-b119-a9ef2078e04f
00:48:12.230 --> 00:48:17.430
and then if the functionality is
what we want and then is it

NOTE Confidence: 0.8802752

3222b37f-b033-4a52-bcf3-85aa06b09be9
00:48:17.430 --> 00:48:21.830
efficient or is it cost benefit,
cost effective or kind of

NOTE Confidence: 0.8802752

e7c20ee7-78f0-4b12-b530-bd0a821bd8c6
00:48:21.830 --> 00:48:24.230
optimum costs or not, so in

NOTE Confidence: 0.9220905

87a939d3-64ac-4459-954c-567c7bcda106
00:48:24.230 --> 00:48:29.450
analysis. You already given the
design, you have to check the

NOTE Confidence: 0.9220905

52ca57dc-656a-463d-944e-20096c15b64f
00:48:29.450 --> 00:48:30.869
functionality of that.

NOTE Confidence: 0.86139125

f624c7ea-6bcf-472a-b9bd-8f847c7bf529
00:48:31.720 --> 00:48:38.454
So here is the analysis task. So
imagine you are given this unit.

NOTE Confidence: 0.87321377

6a35bed6-99c7-416f-bf98-197709f97af8
00:48:39.040 --> 00:48:43.429
And and with two inputs and
followed by an not gate.

NOTE Confidence: 0.92789954

4469c7d3-9455-46a8-85e1-8233480ba63b
00:48:44.140 --> 00:48:48.004
So you have to analyze it in a
way that you have to determine

NOTE Confidence: 0.92789954

9c0d4700-a49a-429e-9f23-84207f6fb687
00:48:48.004 --> 00:48:49.108
what is the F.

NOTE Confidence: 0.85599446

b22bea00-55b3-4fe0-b464-09932a956e66
00:48:49.960 --> 00:48:55.277
So basically to for the analysis
task you have to simply, I mean

NOTE Confidence: 0.85599446

8cad7024-4450-4999-877c-bc952a565dd8
00:48:55.277 --> 00:49:00.594
just form the truth table based
on the number of Inputs. So we

NOTE Confidence: 0.85599446

32326e29-3a9e-4c89-ad67-c260828ceb3a
00:49:00.594 --> 00:49:05.911
have two inputs to whole units
so X&Y you could Simply put for

NOTE Confidence: 0.85599446

745bf7a1-40b2-4936-b69e-24951da0ebdf
00:49:05.911 --> 00:49:10.001
instance A&B. Or you could
simply say for instance and

NOTE Confidence: 0.85599446

f295c491-8668-4183-a266-ae146f926f26
00:49:10.001 --> 00:49:14.091
other variables, for instance
S&Z any type of variable doesn't

NOTE Confidence: 0.85599446

edb85a70-f12f-44f9-84c5-06451d686b60
00:49:14.091 --> 00:49:19.408
matter, so and then you put all
the variation of the input. We

NOTE Confidence: 0.85599446

f25f3ac8-b830-44a1-8129-4a8db8381287
00:49:19.408 --> 00:49:23.907
have two inputs or all the
variations are either both are

NOTE Confidence: 0.8884636

d5b69ffe-2fa4-47e5-9e36-be9142d6202c
00:49:23.907 --> 00:49:28.063
00110. So there's no other
variations for the input, and

NOTE Confidence: 0.8884636

a129a6e5-1ddd-4a0c-9139-0cc3c89cfcce
00:49:28.063 --> 00:49:32.834
then you have to see given one
instance of the Inputs what is

NOTE Confidence: 0.8669653

6ca115cf-0375-4ff2-841a-2f5723226bf8
00:49:32.834 --> 00:49:38.230
the F. So this is analysis task,
so let's see. In order to

NOTE Confidence: 0.8669653

30c6d4d5-5c1e-48ac-879c-8b89e71c1388
00:49:38.230 --> 00:49:43.040
analyze this unit, you have to
one way is this. Break it into

NOTE Confidence: 0.879809

5b8aa5af-75b5-4066-ae01-1ac3b293d425
00:49:43.040 --> 00:49:48.662
smaller unit. So you could
simply say that let's ignore the

NOTE Confidence: 0.879809

4f38db2f-1595-49c0-b95c-a58c78b278f7
00:49:48.662 --> 00:49:55.532
not operator and think of it as
an and for for now. So F1, what

NOTE Confidence: 0.879809

543c5299-fdef-4ba7-be58-3756ac53fb18
00:49:55.532 --> 00:49:58.738
is F1F1? Is X&Y just one gate?

NOTE Confidence: 0.8155682

63274fac-67c5-4bda-ac14-d0e9a09f70b1
00:49:59.300 --> 00:50:01.890
So there result gonna be 0001

NOTE Confidence: 0.8593081

1969dae1-3578-4fce-95e0-87b08603db88
00:50:01.890 --> 00:50:08.404
cause. All if all is
1, the and is 1, otherwise the

NOTE Confidence: 0.8593081

fe7dab61-8f92-4f46-b893-81b84f293c3f
00:50:08.404 --> 00:50:13.252
output cannot be 0 and then
this is the airport, so the

NOTE Confidence: 0.8593081

be562f47-6156-4826-810a-44d904bffdca
00:50:13.252 --> 00:50:17.292
next is applying the not
operator, so you apply not,

NOTE Confidence: 0.8593081

3db23c4a-4d76-43f8-848c-dc18f83ab947
00:50:17.292 --> 00:50:23.352
but on the F1 and this is the
F1 so you apply not so zero

NOTE Confidence: 0.8593081

dcf95b12-a8cf-4f81-9ad4-f46b3d888188
00:50:23.352 --> 00:50:28.200
becomes 1,0 become 1,0 become
one and one becomes 0. So this

NOTE Confidence: 0.8593081

0024903a-e69b-40ce-82cb-5dd541633aee
00:50:28.200 --> 00:50:33.452
is the output of this unit.
So basically X an Y and then

NOTE Confidence: 0.8593081

73de894a-9312-40b5-8da3-bd94d2861169
00:50:33.452 --> 00:50:33.856
not.

NOTE Confidence: 0.86895925

717aea7b-655b-4e2e-9c3b-73605e34d9d0
00:50:35.220 --> 00:50:38.330
So this is the analysis
of a unit. The most

NOTE Confidence: 0.86895925

a2df872d-7da3-4762-80ec-5ea1ad45f3c8
00:50:38.330 --> 00:50:39.574
simple analysis we did.

NOTE Confidence: 0.8243897

ecd6b874-9672-4d4c-962b-2d5ad080ed9c
00:50:40.780 --> 00:50:44.883
Indeed, this unit, which is
a larger unit having an and

NOTE Confidence: 0.8243897

b26ae16b-f8ed-409e-96ca-36fe6af9459a
00:50:44.883 --> 00:50:48.986
and followed by a not, is
called NAND, not and so

NOTE Confidence: 0.8243897

5a43fd49-049f-41ee-b763-52811405e799
00:50:48.986 --> 00:50:52.716
basically not and or NAND.
We showed in and with

NOTE Confidence: 0.8243897

cffd42bf-b705-4ea8-a005-1ce113093edf
00:50:52.716 --> 00:50:56.819
inversion bubble in order to
be shorter form of that so

NOTE Confidence: 0.8243897

bd90641b-0e4e-42b4-aa99-3e801c153cbe
00:50:56.819 --> 00:51:01.668
and followed by a not is
called nand this is a new

NOTE Confidence: 0.8243897

60c3fd6e-e133-4b3f-bb0d-c2c2e577ca79
00:51:01.668 --> 00:51:06.144
gate. So if you go to the
market they already built a

NOTE Confidence: 0.8243897

50a87bcb-27c7-47f0-a887-c200052de785
00:51:06.144 --> 00:51:07.636
NAND gate for us.

NOTE Confidence: 0.6780988

7ff1e087-aa43-49b9-b143-c9d24dfd4b81
00:51:12.310 --> 00:51:17.890
So formally, this is the truth
table for the NAND, so X&Y

NOTE Confidence: 0.6780988

151249cd-2cb6-4241-9ecd-fcbe53a559ee
00:51:17.890 --> 00:51:23.005
Prime. You could show in Boolean
expression you could shown on

NOTE Confidence: 0.6780988

e71ee421-e438-48bd-b3e3-78ad4a1071ee
00:51:23.005 --> 00:51:29.050
like this X NAND by Y upward
arrow is mean is meaning NAND.

NOTE Confidence: 0.919978

cb402a8e-1403-4a99-b4d5-990078870a39
00:51:29.860 --> 00:51:33.400
So, but let's look at the
behavior of the gate.

NOTE Confidence: 0.85268795

8b9b8297-71a9-411d-ac23-7fae42e31fab
00:51:34.150 --> 00:51:38.011
As you can see here, it's kind
of Just inversion of the and

NOTE Confidence: 0.85268795

1bf0fcc9-e897-4d77-a5bb-e9c7de18c544
00:51:38.011 --> 00:51:42.466
here. If all the inputs are one,
but it's going to be 0 for the

NOTE Confidence: 0.85268795

7e246ec8-ae47-47ca-b71c-d76548aaf4c5
00:51:42.466 --> 00:51:46.624
and gate if all the inputs are
one, the output going to be one.

NOTE Confidence: 0.85268795

d1f8c268-f852-48df-b28f-751e8ff9cd33
00:51:46.624 --> 00:51:50.782
But here if all the outputs are
one the if all the inputs are

NOTE Confidence: 0.85268795

88d2593d-ad60-42f3-85e3-75d09b3a1d0e
00:51:50.782 --> 00:51:54.940
one, the output going to be 0.
So kind of invert of the and.

NOTE Confidence: 0.8999888

19783aa7-b6d7-4b8f-8e36-c8595bb400a7
00:51:55.720 --> 00:51:59.779
If you have at least 1
zero in the input, the

NOTE Confidence: 0.8999888

6ed031cb-401b-406d-95ac-4c33ba37d627
00:51:59.779 --> 00:52:01.255
output gonna be 1.

NOTE Confidence: 0.8250756

a002e57a-3801-4a26-854a-86705104a289
00:52:03.050 --> 00:52:06.680
So you see, the difference of
the and and NAND Gate.

NOTE Confidence: 0.86791474

1b67f89c-4313-4033-b2b2-eae9718231c8
00:52:10.530 --> 00:52:14.202
So because of the commutative
property of the and.

NOTE Confidence: 0.86440724

5e7db11c-a36c-4be3-8adf-4fca34bfcad9
00:52:14.790 --> 00:52:18.222
Because X&Y is the same as

NOTE Confidence: 0.8990616

336aa68d-4dc5-430a-a30a-188cc5858675
00:52:18.222 --> 00:52:20.380
Y. And X.

NOTE Confidence: 0.8198255

b4be8ddb-8834-4de2-97ff-d6000ae79348
00:52:21.050 --> 00:52:26.033
So because of this property of
the and operator, the NAND

NOTE Confidence: 0.8198255

f33e098f-0886-4b7c-842a-cf27d9b9eb04
00:52:26.033 --> 00:52:30.563
operator has the commutative
property too, so X&Y, not is

NOTE Confidence: 0.8198255

512cb998-665e-49b5-9e29-11652f7ab678
00:52:30.563 --> 00:52:36.452
equal to Y&X not. So basically
this is the operator for nand x nand. Y

NOTE Confidence: 0.8198255

fd6de7a0-e222-4c58-859e-d67baea42ff3
00:52:36.452 --> 00:52:39.170
is equal to y nand X.

NOTE Confidence: 0.8296549

0da3c7c3-2933-4ce3-a9b4-733708bb3226
00:52:42.120 --> 00:52:48.555
And what happens if we input the
NAND gate with same input? If

NOTE Confidence: 0.8296549

8f94ec7b-36f9-4d46-8613-a30eee627621
00:52:48.555 --> 00:52:52.515
you put X in both the input of

NOTE Confidence: 0.6921978

7b220b30-b774-4abd-bfcf-b07b266768a6
00:52:52.515 --> 00:52:54.950
the nand. Gates

NOTE Confidence: 0.9031321

8cee8873-915b-4197-bc45-8cdf2f3c473f
00:52:56.960 --> 00:52:59.810
so. What would be the result?

NOTE Confidence: 0.8231355

ad08f1f4-0fca-489f-a59b-726027f4624d
00:53:07.280 --> 00:53:11.947
Marco says ex Prime October hub
says ex prime. So let's see what

NOTE Confidence: 0.8231355

111b021f-dea1-4972-9234-2ea23e850e9c
00:53:11.947 --> 00:53:15.896
happens. So again, this is
another analysis task so we have

NOTE Confidence: 0.8231355

5503c51e-290e-4ddd-b579-7a41442413a7
00:53:15.896 --> 00:53:20.922
to break it into 2 units. First
doing the and and then doing the

NOTE Confidence: 0.8231355

59bc6069-f878-4fb4-a786-f92ccd68308f
00:53:20.922 --> 00:53:26.307
not. So if you break it into 2
into the first one F1 going to

NOTE Confidence: 0.8231355

dd33fc1a-f9ad-43ff-9cda-2bcc85004b28
00:53:26.307 --> 00:53:30.615
be X&X so doesn't matter ending
an input with itself. So this

NOTE Confidence: 0.8231355

8d692ee2-004f-4b75-b1b8-2d3f5ec94e0f
00:53:30.615 --> 00:53:33.128
same zero and one so if it.

NOTE Confidence: 0.86730343

0d0d2365-b579-4d47-9755-867fac26ae6d
00:53:33.230 --> 00:53:40.355
X is zero, X&X is 0 if it is 1,X
and X is 1. So this is the same

NOTE Confidence: 0.86730343

2ee0248b-29fe-48a5-adc7-0b1bc389febd
00:53:40.355 --> 00:53:45.230
as X or in putting an and gate
with the same input doesn't

NOTE Confidence: 0.82695675

435bd4eb-084d-4451-a18f-ad0f2df9db96
00:53:45.230 --> 00:53:47.910
matter. So and then
applying nots.

NOTE Confidence: 0.79439884

d83d10ef-fb46-4c46-bab5-5792f10fe871
00:53:49.070 --> 00:53:51.530
So X&X not.

NOTE Confidence: 0.8745683

035cecb5-0e36-4851-8771-78f6dd0f9172
00:53:52.240 --> 00:53:58.360
Is equal to X, not so you
can see zero becomes 1,1

NOTE Confidence: 0.8745683

60024921-fac6-4c92-aa78-0a1a50327e17
00:53:58.360 --> 00:53:59.890
becomes 0 so.

NOTE Confidence: 0.84493375

d5d6cf69-a24f-4690-9d14-1ad0daa5e12e
00:54:00.910 --> 00:54:06.622
Basically, if you input a NAND
gate with the same input, it

NOTE Confidence: 0.84493375

2c94d404-8b5b-4bf4-a632-7596ff2094a0
00:54:06.622 --> 00:54:08.050
acts like, not.

NOTE Confidence: 0.867337

2889a5a7-703f-403d-8d27-651e3d7ab317
00:54:09.290 --> 00:54:13.310
So if you go to the market
and you couldn't find not

NOTE Confidence: 0.867337

e2290f16-0c01-4448-8cb7-29d2ad988c16
00:54:13.310 --> 00:54:16.995
gate, but you could find an
and gate, you could simply

NOTE Confidence: 0.867337

b62f496b-8e5b-42ad-a85c-c5b1557fb222
00:54:16.995 --> 00:54:21.015
buy it and then whenever you
need a not you could Simply

NOTE Confidence: 0.867337

27fdc6e7-5302-43b2-a212-f4d53710fb68
00:54:21.015 --> 00:54:24.700
put the axe into both input
of the NAND gate it

NOTE Confidence: 0.867337

eaf26183-2604-4fbe-bb8e-2fe45518f3c5
00:54:24.700 --> 00:54:27.715
produced, not. So this is
the kind of conversion

NOTE Confidence: 0.867337

07474619-5572-49a0-8804-89ece6d418f7
00:54:27.715 --> 00:54:28.720
between the gates.

NOTE Confidence: 0.80903995

15a143ca-ee4a-4947-afb5-c975897a02c5
00:54:31.010 --> 00:54:36.290
So in short, NAND with the same
input acts like, not.

NOTE Confidence: 0.8636815

c6e5a2b9-b4d0-4f95-a52e-3527dd7e72b5
00:54:39.030 --> 00:54:44.984
So the next question is like
and an or is it possible to

NOTE Confidence: 0.8636815

bb9f683e-36e2-4198-afcd-eb5814f641c4
00:54:44.984 --> 00:54:50.480
build nand gate with three
inputs? So before this I put

NOTE Confidence: 0.8636815

79ec1de2-5572-40dc-b135-c9066f081423
00:54:50.480 --> 00:54:55.518
some questions in the poll
just to make sure that we.

NOTE Confidence: 0.8762713

da273a2b-f43a-43c9-81fd-1df4543136d4
00:54:59.900 --> 00:55:04.894
Are you actually correctly
follow the topics? So I put the.

NOTE Confidence: 0.82843167

a866487a-22ac-4893-ac96-9f5441ccdbad
00:55:05.940 --> 00:55:10.860
Uh, in the chat box I put it a
link, so please open this link

NOTE Confidence: 0.82843167

500b98e1-95a4-4831-8954-02a52542cd0a
00:55:10.860 --> 00:55:14.140
and send me some feedback that
you can see the.

NOTE Confidence: 0.76555896

7bf20d7f-3bad-4d36-858b-16d9d51b81aa
00:55:15.410 --> 00:55:16.250
Link.

NOTE Confidence: 0.92853403

aca647ce-eecb-4f75-a4e9-cbf159ea6535
00:55:23.830 --> 00:55:27.810
So let me start the.

NOTE Confidence: 0.816871

81cd4295-deef-4b0b-a22b-856410ab6d03
00:55:28.790 --> 00:55:29.480
Poll.

NOTE Confidence: 0.84662825

e853e74e-c385-44f4-9da7-9405f4fa968a
00:55:36.820 --> 00:55:43.310
So can you see the nice?
So please start answering this

NOTE Confidence: 0.84662825

48ee2da4-677f-4d9f-bbf4-2a25d80d5ec3
00:55:43.310 --> 00:55:45.670
poll. The question is.

NOTE Confidence: 0.8746884

51323614-f428-4560-b91a-17c5476e68d4
00:55:47.360 --> 00:55:51.676
You go to the market and you
could find only and with three

NOTE Confidence: 0.8746884

344c30ae-4450-43c0-b9ce-76999ce67ec1
00:55:51.676 --> 00:55:55.660
input, but you want to and
with. You have to only two

NOTE Confidence: 0.8746884

fbd33d7c-e915-468b-a804-57ede7d1e4d7
00:55:55.660 --> 00:55:59.644
inputs X&Y or A&B, or I don't
know for instance W&Z. You

NOTE Confidence: 0.8746884

ba84e4cc-f089-454a-9af7-beb2428beb62
00:55:59.644 --> 00:56:03.296
have two inputs, so is it
possible to employ the and

NOTE Confidence: 0.8746884

5b5bd3e2-4f02-4349-86eb-c3b3a791f5cf
00:56:03.296 --> 00:56:06.948
with three input with for a
task which needs only two

NOTE Confidence: 0.8746884

8fc79ec8-b4bb-4c52-a3a3-e5ee2018cdd8
00:56:06.948 --> 00:56:07.280
inputs?

NOTE Confidence: 0.90815103

71c0f73c-d1d5-4fd1-ad0f-fa49f608e928
00:56:09.440 --> 00:56:12.527
So we have only nine
participants. How many students

NOTE Confidence: 0.90815103

198a1764-49eb-4d2b-bf7c-09daf296e897
00:56:12.527 --> 00:56:16.986
in the class? Right now we have
55 student in the class, so.

NOTE Confidence: 0.87074685

f2f05af3-f4be-4d22-ab0e-c4f8852644a0
00:56:18.690 --> 00:56:20.398
Other students please
participate.

NOTE Confidence: 0.8896078

0df4400d-af64-48a6-afcf-a8e05c1a437d
00:56:23.980 --> 00:56:30.865
So with the and we said that if
you and an input with a 0.

NOTE Confidence: 0.8541492

1370e1e8-53e7-4477-8f6d-d575d6ea78b8
00:56:31.580 --> 00:56:35.496
You always gonna and up with
zero because you introduce at

NOTE Confidence: 0.8541492

78de7f51-5b18-4d48-a147-7f05d2407cec
00:56:35.496 --> 00:56:40.124
this one zero in the input. So
and Gates put zero in the

NOTE Confidence: 0.8541492

7a8fde83-e0c4-44f2-9698-d4f753add7ff
00:56:40.124 --> 00:56:44.752
output. So if you fill the other
input of the and with three

NOTE Confidence: 0.8541492

0ef0f9f1-13f9-4989-afea-387aed745ddf
00:56:44.752 --> 00:56:48.668
input with zero, it's kind of
always outputting 0, so the

NOTE Confidence: 0.8541492

62689c47-0d40-4645-8bf7-e137efee571f
00:56:48.668 --> 00:56:52.940
first one is not the correct
one, the second one. If you

NOTE Confidence: 0.8541492

c9eb50dd-b9b1-46fa-8100-afc244baa6f7
00:56:52.940 --> 00:56:54.720
input an and with one.

NOTE Confidence: 0.8495789

5e56e72a-d89d-49ce-816b-d0237aa5f9e8
00:56:55.390 --> 00:56:59.628
Uh, because still we have to
wait for the other input to see

NOTE Confidence: 0.8495789

3bd97980-2926-4518-8ce7-1844aa85338e
00:56:59.628 --> 00:57:03.866
whether they have zero or no so
filled third input with one is

NOTE Confidence: 0.8495789

39f6c22a-b872-45e5-89b0-a00b0d4a9010
00:57:03.866 --> 00:57:05.496
kind of working for us.

NOTE Confidence: 0.8639184

84e25798-6826-4663-9a08-3c1eb6406ffc
00:57:07.330 --> 00:57:11.558
The third one is cannot use the
third. We said that we can fill

NOTE Confidence: 0.8639184

3a2ac0a8-d740-4a81-8914-f054384e6122
00:57:11.558 --> 00:57:15.484
the other extra inputs with zero
and one for the and. We can

NOTE Confidence: 0.8639184

a3cfc825-d1e9-4302-aaf9-5442ecbf396e
00:57:15.484 --> 00:57:18.806
input it with, fill it with. One
doesn't have an impact.

NOTE Confidence: 0.8629611

73c34a8b-ee00-4ac4-ad0b-e6b38e62f7e3
00:57:19.680 --> 00:57:23.124
And the 4th one is attaching to
the ground attaching to the

NOTE Confidence: 0.8629611

6cf0e777-3955-454e-be31-579c7250f377
00:57:23.124 --> 00:57:26.568
ground means filling with a 0.
So the first option and the

NOTE Confidence: 0.8629611

9060c6a7-6dfe-4d1b-b6f8-d035c9ea7c47
00:57:26.568 --> 00:57:30.586
last one is the same for the
and gate. If you attach it with

NOTE Confidence: 0.8629611

e77628a1-9df6-49f8-a2a8-2e9e3538d160
00:57:30.586 --> 00:57:34.604
a grand or zero, it means that
the output is always 0, so it's

NOTE Confidence: 0.8629611

775a7268-238a-4f27-aafc-c63fa7d184f3
00:57:34.604 --> 00:57:37.474
not the correct answer. So
let's see the correct answer.

NOTE Confidence: 0.8427173

30bb4c4d-1257-4dfd-a970-b3da59a3d377
00:57:40.340 --> 00:57:43.970
Most of you actually put the
correct answer, which is the

NOTE Confidence: 0.8427173

bb9975b8-4c0f-4cb7-a72a-dd967d27c2bf
00:57:43.970 --> 00:57:48.260
feeling the extra inputs when we
are given the and up with one

NOTE Confidence: 0.8427173

df185ee2-fbf7-4af1-8993-3bc16b8ea90e
00:57:48.260 --> 00:57:52.220
because and with one doesn't
have an impact. So let's move on

NOTE Confidence: 0.8427173

761fc295-a138-4f28-ba5e-dc143d910fb5
00:57:52.220 --> 00:57:53.540
to the next question.

NOTE Confidence: 0.8745495

d33fb73c-8c0c-49ce-84eb-932014af52cd
00:57:55.700 --> 00:57:56.759
How about or?

NOTE Confidence: 0.77354115

fd575df9-7805-46ef-abaf-e76ea159000c
00:57:58.210 --> 00:58:03.371
If you are given an or with 3
input and but you only have

NOTE Confidence: 0.77354115

43817bff-7983-4411-8092-e9e04c237c2d
00:58:03.371 --> 00:58:04.562
two inputs, so.

NOTE Confidence: 0.92317724

06a3d29b-ec23-476b-89db-457862153cd2
00:58:05.560 --> 00:58:07.720
The same options as before, but.

NOTE Confidence: 0.8811941

0ff4c226-661e-4f50-8444-f56fc53959ec
00:58:09.490 --> 00:58:12.074
Is it possible to use it for I

NOTE Confidence: 0.9068376

bf9dd7dd-21c9-4003-b591-5dcd94b241e4
00:58:12.074 --> 00:58:15.599
mean? Or no, it's not
possible. We have to wait

NOTE Confidence: 0.9068376

b002a6d6-5659-4b45-adc7-62fb656c4749
00:58:15.599 --> 00:58:18.360
until we have an or with
two inputs in the market.

NOTE Confidence: 0.87194294

5b5e4dfe-c060-4c26-8cd1-b39c4be18f86
00:58:19.950 --> 00:58:24.565
So for the or gate, we said that
if you or anything with 0

NOTE Confidence: 0.87194294

c76364dc-6fc7-4555-ac2d-421b78ac2eb0
00:58:24.565 --> 00:58:29.180
doesn't have an impact, you have
to wait for other input to see

NOTE Confidence: 0.87194294

dd1c82bc-449b-4363-a070-f3e4ee39b6f8
00:58:29.180 --> 00:58:33.440
they have whether they have at
least one digital one in the

NOTE Confidence: 0.87194294

c67f0b74-9e0c-4eec-98a9-dab94ffba2b4
00:58:33.440 --> 00:58:35.570
input or no so attached with

NOTE Confidence: 0.7494282

076214bd-1237-407c-be34-a8fe7dca0958
00:58:35.570 --> 00:58:42.259
ground. Or, uh, attaching with
fill it with zero. doesn't have any

NOTE Confidence: 0.7494282

533bdabc-63e4-4890-a4fd-73be1270c05d
00:58:42.259 --> 00:58:44.804
impact on the OR gate.

NOTE Confidence: 0.8512433

0c1e04c5-f1b8-4820-9fd8-9ce88378d128
00:58:45.560 --> 00:58:50.149
But about 1:00, if you fill the
other extra inputs with one, it

NOTE Confidence: 0.8512433

12038478-1e01-463e-9934-c7ccb4aecf8e
00:58:50.149 --> 00:58:54.385
always output one. So you don't.
I mean want this because you

NOTE Confidence: 0.8512433

698930e5-04ba-4a9c-b875-67f9e5951a68
00:58:54.385 --> 00:58:55.797
ignore the two inputs.

NOTE Confidence: 0.93162096

22edd0d8-8e4f-47b9-9c5b-091de282d61a
00:58:57.260 --> 00:59:00.681
So the answer is the first
option and the last option,

NOTE Confidence: 0.93162096

af7700d4-2f84-4d3d-891b-65ee874d2af1
00:59:00.681 --> 00:59:03.169
so let's see the answers
from your side.

NOTE Confidence: 0.8492681

8f580bf7-c20d-42fb-96c3-abca3ede39fb
00:59:06.550 --> 00:59:10.140
Yes, actually most of you
put the correct answer. So

NOTE Confidence: 0.8492681

54667bbf-bdf0-4395-b213-162fa00a9e5d
00:59:10.140 --> 00:59:14.089
fill it with zero or filled
with ground. So ground in

NOTE Confidence: 0.8492681

c0574f2f-1b94-4771-8b3d-1600fdf0534e
00:59:14.089 --> 00:59:15.884
positive logic is always 0.

NOTE Confidence: 0.9282158

35298357-06d6-4ffe-a0db-a3abc03a30e8
00:59:19.110 --> 00:59:21.336
Let's go to the next question.

NOTE Confidence: 0.9249723

d01f6ee1-0c95-43ca-a487-436a5aab873b
00:59:23.150 --> 00:59:25.206
Let me see what is the
next question.

NOTE Confidence: 0.8509609

0621c76e-9f95-476c-acfe-c794f56f0121
00:59:27.130 --> 00:59:30.811
Oh, the next question is
still wait until they

NOTE Confidence: 0.8509609

9df8518a-e3eb-4ff6-a1bf-4c82b44a9269
00:59:30.811 --> 00:59:32.447
covered the next question.

NOTE Confidence: 0.90542656

815b3acf-5cce-46d0-8175-628d41505dd4
00:59:34.370 --> 00:59:38.099
Thank you so much for your
participation in the poll so.

NOTE Confidence: 0.9243791

e46a3374-7305-4149-93fe-1122b1d691dc
00:59:38.670 --> 00:59:40.644
Let's move on to the next task.

NOTE Confidence: 0.21611556

8232966d-cf7a-4c4b-bbad-286c3eb5c800
00:59:42.980 --> 00:59:43.680
NAND.

NOTE Confidence: 0.935948

8cb21c6e-c38f-45d9-bcc1-00873353274e
00:59:44.800 --> 00:59:45.480
So.

NOTE Confidence: 0.8794533

6fa39cb6-b8fb-48d7-9ad1-3df5efc485c0
00:59:47.030 --> 00:59:50.969
We are given this question with
this task. We want to build nand

NOTE Confidence: 0.8794533

f4f1ec0c-651b-4b72-8929-894d85bf5009
00:59:50.969 --> 00:59:55.211
and with three input. So this is
a kind of Design task, so we

NOTE Confidence: 0.8794533

905dfbb7-01d7-4691-a917-4b26024a838b
00:59:55.211 --> 00:59:58.241
already designed for and with
three input or with three

NOTE Confidence: 0.8794533

c977af12-b34c-435e-8672-6fa8815f6831
00:59:58.241 --> 01:00:00.362
inputs. So we could say that we.

NOTE Confidence: 0.8768695

dbaa4116-4448-4a8a-9adb-9b2fcc12d742
01:00:00.530 --> 01:00:03.830
Follow the same design pattern.

NOTE Confidence: 0.8463669

41202c6e-e470-4ffd-ada1-411a03c88279
01:00:04.650 --> 01:00:10.315
We want this. three inputs and
then not so kind of  nand with

NOTE Confidence: 0.8463669

4a8f482d-dc9d-4a5e-b494-fee4bd854d21
01:00:10.315 --> 01:00:14.800
three inputs. So this means that
if all the inputs are one, the

NOTE Confidence: 0.8463669

e34eef8a-df94-4333-8c19-9d3fb5eec165
01:00:14.800 --> 01:00:19.630
output going to be 0 exactly the
invert of the and gate. And if

NOTE Confidence: 0.8463669

3bdad0be-4a3e-4268-8025-099b62d45612
01:00:19.630 --> 01:00:24.460
you have at least 1 zero in the
inputs, the output going to be

NOTE Confidence: 0.8008817

52851016-768e-49d3-a4d9-bdd5239a869d
01:00:24.460 --> 01:00:29.489
1. So kind of just invert of the
and operator, so this is the

NOTE Confidence: 0.8008817

c3831854-d4b9-4a48-aa33-99cf1b0ee08d
01:00:29.489 --> 01:00:32.932
task. Will have to design if you
follow the same design

NOTE Confidence: 0.8008817

ec174204-5742-445c-97a4-890f17756d55
01:00:32.932 --> 01:00:37.314
pattern as we did for the and
and or we could attach it, stack

NOTE Confidence: 0.8008817

9ef0e20e-d95c-443f-a042-102f18b215fc
01:00:37.314 --> 01:00:39.192
it the nands with two inputs

NOTE Confidence: 0.8253462

1f3acca2-50c0-4251-ac30-425b5e911af7
01:00:39.192 --> 01:00:44.457
together. So the first 2 input
NAND with each other and then

NOTE Confidence: 0.8253462

cdbfc1c5-e836-43b2-b772-0e98bc13abd4
01:00:44.457 --> 01:00:46.839
the results NAND with the third

NOTE Confidence: 0.8753978

4771d6ff-63eb-4206-8174-b9c49007b883
01:00:46.839 --> 01:00:51.653
input. So let's see, let's
analyze this design. So we

NOTE Confidence: 0.8753978

590dd446-7f10-4f7c-bcb9-2c575248cd08
01:00:51.653 --> 01:00:56.537
designed this. We have to make
sure that this is the correct

NOTE Confidence: 0.8753978

505a480f-040c-4260-af5e-b4a4a7e57ff2
01:00:56.537 --> 01:01:01.828
design. So let's analyze it. So
in order to analyze it, we have

NOTE Confidence: 0.8753978

03f8e84b-5562-40e4-ae02-a35ed9d82671
01:01:01.828 --> 01:01:07.526
to see what is F based on the
old variations of the Inputs, we

NOTE Confidence: 0.8753978

8d11397a-a68c-4292-b6b8-5ac9e796cdba
01:01:07.526 --> 01:01:11.596
have three inputs. All the
variations are eight. I mean

NOTE Confidence: 0.8753978

373a3c90-920f-4cad-8aef-f42bbf801186
01:01:11.596 --> 01:01:14.038
different variations,all
0123456 and seven.

NOTE Confidence: 0.80800587

193c2a7c-8e91-43fc-8bc8-31e6aa3fa3db
01:01:14.990 --> 01:01:21.998
So. As we did for the
NAND, first we have to see what

NOTE Confidence: 0.80800587

2c079cc4-407f-40d4-a036-921cf2c761ca
01:01:21.998 --> 01:01:28.564
is F1. The output of the X&Y
NAND, and then F1 nand by Z. This is

NOTE Confidence: 0.8024378

e500edae-781c-4829-b9c9-fd4f6e8f7f84
01:01:28.564 --> 01:01:35.984
F1. So XY not so XY not
is 00 and and not so so the

NOTE Confidence: 0.8024378

3e95a504-fcdf-40f3-99a6-72866c71779f
01:01:35.984 --> 01:01:38.660
and is 0, not becomes one.

NOTE Confidence: 0.80895007

e0bd8da4-4d4f-40c9-9c08-59b2973a853a
01:01:39.210 --> 01:01:42.106
Here the uh and is 0 not become

NOTE Confidence: 0.84541816

44bf3dac-76bb-4b12-9856-45dec0686066
01:01:42.106 --> 01:01:47.387
one. So here, as long as you
have at least 1 zero in the

NOTE Confidence: 0.84541816

37b972b7-2daa-4766-bf6f-32a31a49b001
01:01:47.387 --> 01:01:51.664
first to input, the output is
1. If all X&Y is 1, the

NOTE Confidence: 0.84541816

88801ff0-11dd-427b-84c2-ccb6f1b4bd26
01:01:51.664 --> 01:01:55.941
output going to be not of
the and, so zero the same for

NOTE Confidence: 0.84541816

d6797191-b652-4201-8558-a8503bba2753
01:01:55.941 --> 01:01:56.928
all these variations.

NOTE Confidence: 0.9148779

4c679cbc-0c07-4a87-b840-155f9c18957f
01:01:58.710 --> 01:02:00.279
And then F1.

NOTE Confidence: 0.83468807

a50a7660-0d3a-4bd4-a753-a7b70d816b51
01:02:01.370 --> 01:02:08.630
And zero, not or NAND with not
so the F. So this is the result,

NOTE Confidence: 0.83468807

58a8a502-0658-4a16-817e-8a1f1845dd45
01:02:08.630 --> 01:02:11.050
F1 and Z not or.

NOTE Confidence: 0.84148693

d1b22e5c-489c-4515-a877-bf222d73071a
01:02:12.700 --> 01:02:18.904
instead of f1, we have X&Y not so
this is meaning that F1.

NOTE Confidence: 0.83951324

e471386a-3964-4b5c-9d1a-ee96bd01810f
01:02:19.600 --> 01:02:25.619
And with Z and then not one and
with 00 nots becomes one.

NOTE Confidence: 0.91537684

d1c9773c-3ab5-4b7a-80b0-6d8975056689
01:02:26.310 --> 01:02:30.258
The same as here one and one.

NOTE Confidence: 0.8723622

685bb087-2e0f-4962-92e7-7dd497923916
01:02:30.940 --> 01:02:36.088
F1 and with the z zero and then
not. So if you follow the

NOTE Confidence: 0.8723622

57878d0b-3270-4fff-ba99-2a388c6b1598
01:02:36.088 --> 01:02:40.048
same thing just I mean
consider this one this column

NOTE Confidence: 0.8723622

92c8562d-a46b-48ed-a70f-b5fdae3a0789
01:02:40.048 --> 01:02:44.008
an only the z column you end up
with this result.

NOTE Confidence: 0.8774175

a49389ab-3041-4fec-9ba2-f4588649dc41
01:02:45.630 --> 01:02:51.948
This is evident that the result
of this way we design for the

NOTE Confidence: 0.8774175

09242def-4bf4-41c0-b752-7f297ac261ed
01:02:51.948 --> 01:02:56.808
nand with 3 input is totally is
sometimes equal, but sometimes

NOTE Confidence: 0.8774175

3d9060be-6db3-4c66-bafe-6a8cbb6ab95c
01:02:56.808 --> 01:03:00.696
different results. So this is
what we wanted.

NOTE Confidence: 0.9190806

04865691-358d-4ec8-abc9-f3e8bead25af
01:03:01.590 --> 01:03:03.438
But this is what we designed.

NOTE Confidence: 0.89243835

13aef8ca-fec4-4059-a357-91b86adbffad
01:03:04.270 --> 01:03:10.172
So as long as the inputs are
here like this, the Outputs are

NOTE Confidence: 0.89243835

f613dc23-f272-4c18-8680-3fc2cc734883
01:03:10.172 --> 01:03:16.074
the same, so it's OK. But for
these variations, if Z is 1.

NOTE Confidence: 0.89935625

7d4baa4f-450b-4aea-ac16-ab8776ee769c
01:03:17.290 --> 01:03:20.962
The output of our design and
the output of what we wanted

NOTE Confidence: 0.89935625

41eb90fe-16fd-4d45-8484-153b3266deec
01:03:20.962 --> 01:03:22.186
was there is different.

NOTE Confidence: 0.90742326

521d7f9e-71dd-4460-ab52-92153841858f
01:03:24.080 --> 01:03:27.812
So it means that our design is
not correct, so it's not

NOTE Confidence: 0.90742326

ffc032dd-05ff-4a21-8236-4771b0b0506d
01:03:27.812 --> 01:03:31.544
effective at all. So when it is
not effective, we don't go

NOTE Confidence: 0.90742326

34470db8-fd4e-42a1-8e1f-619478145190
01:03:31.544 --> 01:03:34.965
further for the efficiency and
cost, it means that the design

NOTE Confidence: 0.9353831

d5db91b1-ffcf-487b-8d1f-482d50eeecbf
01:03:34.965 --> 01:03:39.718
is not right. So let me come
back to the.

NOTE Confidence: 0.8560038

247197df-4291-469e-8ad1-1c0189e5482e
01:03:41.350 --> 01:03:46.173
So this design is not a good, I
mean correct design or effective

NOTE Confidence: 0.8560038

a959fb06-0df0-43e6-9839-469578563290
01:03:46.173 --> 01:03:48.770
design. So in order to fix this.

NOTE Confidence: 0.9258274

6b01f0ad-eb03-4fa8-93fc-43a71a24a7a7
01:03:49.730 --> 01:03:51.360
You could simply say that.

NOTE Confidence: 0.8576795

f6f9f92f-5660-43f0-a0d8-dc848ad55948
01:03:51.990 --> 01:03:55.950
We already have an and with
three input. We could simply

NOTE Confidence: 0.8576795

63cd9896-d6c7-491e-909e-8f784f2b7038
01:03:55.950 --> 01:04:00.270
apply nots on after that. So
then you can have a correct

NOTE Confidence: 0.8733823

c171c752-daff-42ca-ba13-aa65d769ec57
01:04:00.270 --> 01:04:05.280
design. So and and with three
input and then applying it not.

NOTE Confidence: 0.8948431

541568f7-39cc-4e5a-84d8-e1097164f5a1
01:04:06.660 --> 01:04:10.729
And you can see that. I mean
this is what we designed here

NOTE Confidence: 0.8948431

6d8fe5a4-da20-4fe8-b026-9dc20a9d376d
01:04:10.729 --> 01:04:14.798
by this design, and this is
what we wanted. So you can see

NOTE Confidence: 0.8948431

8eca7616-b080-47f3-a1fe-1a236c3f2644
01:04:14.798 --> 01:04:17.615
that exactly mean for all
variations given the same

NOTE Confidence: 0.8948431

0560e0f3-c081-4e7a-96af-b16223d81490
01:04:17.615 --> 01:04:19.493
input, they have the same
result.

NOTE Confidence: 0.8682112

d024499b-6d10-427b-a322-ef1f8cda1661
01:04:21.080 --> 01:04:25.168
So it means that this column and
this column is the same, so this

NOTE Confidence: 0.8682112

199618e6-5d93-4b04-a639-903e6f5e7019
01:04:25.168 --> 01:04:26.336
is the correct design.

NOTE Confidence: 0.65798724

55911ab8-be14-4525-8473-8192ac65d3a4
01:04:26.890 --> 01:04:32.046
So. Uh, so comparing
these two designs?

NOTE Confidence: 0.7952141

d8a079e5-f7d5-48fe-b398-9435c84d1e81
01:04:32.830 --> 01:04:38.374
F1 stacking two NAND with two
inputs or an and with three

NOTE Confidence: 0.7952141

63e201fb-356d-437f-9d77-bc67780c6c09
01:04:38.374 --> 01:04:40.684
input and then applying not.

NOTE Confidence: 0.8877041

056bc393-029b-473d-8755-88698cf8d555
01:04:41.430 --> 01:04:46.020
You can see that F1 is not true
at all. An F2 is the correct

NOTE Confidence: 0.8877041

59b516f3-feeb-4b28-a379-4aec634929fe
01:04:46.020 --> 01:04:49.692
one. So when the design is
correct and the other design is

NOTE Confidence: 0.8877041

e8f20a6b-c832-46d6-92d2-61b80aa39010
01:04:49.692 --> 01:04:53.364
not correct, we don't go further to
check the efficiency or the

NOTE Confidence: 0.8872002

42f11688-33bd-4d47-a035-1f2b07bdf3d6
01:04:53.364 --> 01:04:58.760
cost. Because we always the
first priority of us is the

NOTE Confidence: 0.8872002

8c6fba91-ce2a-4157-ba5a-f4357983f7aa
01:04:58.760 --> 01:04:59.981
correctness or effectiveness.

NOTE Confidence: 0.8730374

c68dd666-41e4-41f3-a5b9-8dcb620a0004
01:05:02.520 --> 01:05:08.550
So this is the way we design a
nand with three input. So if we

NOTE Confidence: 0.8730374

6d023a24-68d1-4e5d-a219-d176772a7ceb
01:05:08.550 --> 01:05:12.570
input NAND is this not this? Be
careful about that.

NOTE Confidence: 0.84335387

c1e6e635-79fb-4d67-b664-a7b002266293
01:05:14.860 --> 01:05:18.740
And one thing is that because
of the associativity property

NOTE Confidence: 0.84335387

4ab6e93f-8312-4c25-8eea-7939abd2c070
01:05:18.740 --> 01:05:23.396
of the NAND gate, so the order
is doesn't matter for NAND

NOTE Confidence: 0.84335387

bbd26cd9-e6a0-4bb1-8fb4-c94457cb5580
01:05:23.396 --> 01:05:28.052
with three input. So again, if
you are giving an ad with

NOTE Confidence: 0.84335387

7936cb3b-a6b7-4b6e-ab3c-36b05a364315
01:05:28.052 --> 01:05:31.544
three input, the order doesn't
matter, because this is

NOTE Confidence: 0.84335387

99fbfeeb-3262-4be9-83e8-757c08e96542
01:05:31.544 --> 01:05:35.424
actually an and operator
followed by a not. So you

NOTE Confidence: 0.84335387

2be0c0de-d3e1-4121-8e2d-812344905cb6
01:05:35.424 --> 01:05:39.304
could simply say that and and
with three input has

NOTE Confidence: 0.84335387

7b1820c9-af20-41e6-a8b1-04f902c76385
01:05:39.304 --> 01:05:42.796
associativity, property and
the order of the input doesn't

NOTE Confidence: 0.84335387

25db1afd-a7e9-47ba-80ef-86bacca3c5a1
01:05:42.796 --> 01:05:43.184
matter.

NOTE Confidence: 0.8322755

c34ec577-dd8e-4b03-ad5f-9e23b7f32d9a
01:05:44.900 --> 01:05:49.671
But be careful, you could say we
couldn't say that we can drop

NOTE Confidence: 0.8322755

282d647b-6d4c-4d40-85c6-3a8d957e0e82
01:05:49.671 --> 01:05:52.974
the parenthesis because this
prime this prime. This not

NOTE Confidence: 0.8322755

5859beb3-6e69-4e92-be64-40ef15903b25
01:05:52.974 --> 01:05:54.809
applies on all the Inputs.

NOTE Confidence: 0.85773635

b3422e1b-fe97-480e-813e-655cc8b888d5
01:05:55.440 --> 01:05:58.720
You cannot simply drop the
parentheses, because if you drop

NOTE Confidence: 0.85773635

e66c86c0-95b4-456e-95f4-4b3de9cb2a17
01:05:58.720 --> 01:06:00.688
this, this prime goes to X

NOTE Confidence: 0.8008173

07d91702-ae15-4dcc-9bb3-67e11de36a00
01:06:00.688 --> 01:06:05.320
only. And this primes goes to
y So Be careful this

NOTE Confidence: 0.8008173

b8047ee9-12b9-449d-8b00-f64d1e2f03e1
01:06:05.320 --> 01:06:09.291
time. So here we could say
that it is associated inside

NOTE Confidence: 0.8008173

13813ad0-be6e-4765-a6d1-e973f114f98d
01:06:09.291 --> 01:06:10.013
the parenthesis.

NOTE Confidence: 0.8609082

1d7bc910-a0ef-4d2d-9b6a-ee196bfe1254
01:06:13.050 --> 01:06:17.496
So how about this? Let's look
at. I mean, look at this design.

NOTE Confidence: 0.8609082

595d720e-b404-48e6-a613-553e9f2e06cd
01:06:17.496 --> 01:06:21.942
Although this is not a nand with
three input, we could say that

NOTE Confidence: 0.8609082

7ff4508b-eabd-44cb-8710-ea58bccbab0d
01:06:21.942 --> 01:06:27.072
this is actually X nand, Y and then
nand by Z. So this is the truth

NOTE Confidence: 0.8609082

962cc012-81cb-4381-b9ef-d966e4129c2c
01:06:27.072 --> 01:06:31.518
value as we saw before. Although
this is not what we wanted, but

NOTE Confidence: 0.8609082

03e63246-b144-4a8f-b296-d6d4a5bfb3b9
01:06:31.518 --> 01:06:36.306
this is 1 unit, so we could put
more focus on this and analyze

NOTE Confidence: 0.8609082

943417df-6cbd-4121-af7c-a18276e98723
01:06:36.306 --> 01:06:40.068
this. What's the benefit of
this? An ETC? For instance, we

NOTE Confidence: 0.8609082

0d19dbab-525d-49ad-be02-a9a996701c1b
01:06:40.068 --> 01:06:41.778
can say that is it.

NOTE Confidence: 0.8585468

9530d53d-c432-4c50-89dd-927647f0db70
01:06:41.840 --> 01:06:46.412
Associative this way we can
reorder it or no, we can drop

NOTE Confidence: 0.8585468

40742114-91cf-4050-9cce-505f40b901b0
01:06:46.412 --> 01:06:50.984
the parentheses or not in the
lecture assignments I put in a

NOTE Confidence: 0.8585468

3d635008-3751-4a2f-b147-23af8c1bb871
01:06:50.984 --> 01:06:55.175
question for you to kind of
explore the OR analyze this

NOTE Confidence: 0.84678966

0b04b543-2e19-4e40-9a40-d195a84ff731
01:06:55.175 --> 01:06:59.330
design. Is it the mean,
associative, or know an? What's

NOTE Confidence: 0.84678966

bc72a9c0-5a10-4425-8c20-1a35495891ad
01:06:59.330 --> 01:07:00.880
the benefit of this design?

NOTE Confidence: 0.89095294

e7d3c7cb-664d-4f40-9595-2b7b542cb0dd
01:07:03.670 --> 01:07:09.299
So the second analysis we are
given we have 5 minutes so we

NOTE Confidence: 0.89095294

79aa5ca7-4475-48e8-8e61-44ebc190fa84
01:07:09.299 --> 01:07:11.031
can cover this is.

NOTE Confidence: 0.88360924

9e1f1c7d-346b-4d96-889a-48cd09b10e47
01:07:12.590 --> 01:07:17.825
We followed a nand with not. We
can do the same with or. So is

NOTE Confidence: 0.88360924

0b5cbc4b-950a-49f2-beb4-5d882138af18
01:07:17.825 --> 01:07:22.711
it possible to follow and or
with a not we can say yes. This

NOTE Confidence: 0.88360924

0bff231d-18fa-4d8d-a590-578ebcc59cc1
01:07:22.711 --> 01:07:26.550
is the design, so what's the?
What's the functionality? We can

NOTE Confidence: 0.88360924

c193423e-5019-4bc1-b56b-389771a63fce
01:07:26.550 --> 01:07:30.389
analyze this. This is another
analysis task, so we are given

NOTE Confidence: 0.88360924

0de7dd3c-1791-48ea-998c-ce1c820efd89
01:07:30.389 --> 01:07:33.879
this unit and we are asked to
analyze this unit.

NOTE Confidence: 0.8820916

34921812-a018-4284-ace7-de214a46c7b9
01:07:35.430 --> 01:07:39.392
So we could simply as we did for
the and, you could simply break

NOTE Confidence: 0.8820916

7fbe83b9-8f45-4c8e-91b0-a3db4460d313
01:07:39.392 --> 01:07:42.788
it into two step for all the
variations of the inputs. We

NOTE Confidence: 0.8820916

0f7f1bad-295a-4770-a62b-266f474c1346
01:07:42.788 --> 01:07:46.184
have two variables, so all the
variations are like this. We can

NOTE Confidence: 0.8820916

a2c2f3e0-7f0d-42b0-a6c4-9fc8f3a38f88
01:07:46.184 --> 01:07:47.882
say that what is the output?

NOTE Confidence: 0.8428058

d8660a6e-ee91-4fa3-9d77-56dcb3c18bc2
01:07:49.120 --> 01:07:53.725
So we could simply as we did for
the NAND. What is F1,F1 is or

NOTE Confidence: 0.8428058

8eda9c90-292a-40bf-b7d1-f2d0091aaea3
01:07:53.725 --> 01:07:58.023
X&Y, so this is the result if we
are given all zero, the output

NOTE Confidence: 0.8428058

30cdb63f-348b-4b6d-bed7-c07c0856e5fc
01:07:58.023 --> 01:08:02.628
is 0. If you are given at least
one digit of 1 in the inputs,

NOTE Confidence: 0.8428058

852fbde4-5da9-49bf-9b61-a52fd5b88052
01:08:02.628 --> 01:08:04.470
the output going to be 1.

NOTE Confidence: 0.8661137

b0a3a3a3-5f2f-484e-8886-6728778cc7c1
01:08:05.350 --> 01:08:10.937
And. Followed by and not
operator, so XY prime. So

NOTE Confidence: 0.8661137

58a0ecaf-e4ab-4fa4-8141-ed8cf12b8d4e
01:08:10.937 --> 01:08:17.086
basically zero becomes 110 and
etc. So you can see that this is

NOTE Confidence: 0.8661137

7f9aeddc-de51-4ff9-8374-bc8d41ca6f4e
01:08:17.086 --> 01:08:19.451
a kind of not or.

NOTE Confidence: 0.8624688

5f47ae44-8808-4e7e-af8b-a1ab76898e6d
01:08:20.140 --> 01:08:25.278
So whenever you have an over you
can just, I mean not the OR

NOTE Confidence: 0.8624688

fbeb92c1-0d37-46d6-92b3-2517d1be2c1b
01:08:25.278 --> 01:08:30.049
operator. So in or if at least
one digital one happens in the

NOTE Confidence: 0.8624688

05854d14-b140-4f3a-a37e-095cadc558e4
01:08:30.049 --> 01:08:35.554
in the inputs, the output gonna
be 1. Here going to be 0 if all

NOTE Confidence: 0.8624688

e6a3b78a-f516-41df-aa09-4e0df97a2c08
01:08:35.554 --> 01:08:39.958
the inputs are zero. Here the
output gonna be one. So because

NOTE Confidence: 0.8624688

86683ab0-f76f-45dd-8e82-2705d76694dd
01:08:39.958 --> 01:08:45.463
of this this is called not or or
nor. This is the way we call

NOTE Confidence: 0.8624688

f3129d17-8768-4efb-af94-e80987d875cc
01:08:45.463 --> 01:08:49.867
this gate in the market. They
already built this gate for us.

NOTE Confidence: 0.81408685

1020cd26-9a9c-4c97-b754-356ceb0ccc1b
01:08:50.160 --> 01:08:53.877
an or  followed
with the not.

NOTE Confidence: 0.7781371

ff651a22-574e-431e-b562-4e350a4e179c
01:08:56.390 --> 01:09:01.838
So this is the official, I
mean truth table for the nor

NOTE Confidence: 0.7781371

fa418d1e-f456-4ea1-bee4-1bcd04a4301b
01:09:01.838 --> 01:09:07.740
gate, so you can show the nor
with the Downward Arrow X nor

NOTE Confidence: 0.7781371

a3f64a94-4a88-4b15-ad96-573ed8ababa6
01:09:07.740 --> 01:09:13.642
Y or X or Y not. This is
the way we show nor.

NOTE Confidence: 0.87998277

af307ca4-0441-461b-acf8-c4a2fe805572
01:09:15.390 --> 01:09:20.535
In the exams or in the papers or
in the I mean websites or etc.

NOTE Confidence: 0.87998277

06024427-8fb4-44a9-88ec-a62f03c54926
01:09:20.535 --> 01:09:22.250
They usually follow this form.

NOTE Confidence: 0.70591766

43314b3c-26c6-433b-bd41-31060f573d3e
01:09:23.590 --> 01:09:30.415
X or Y prime even for the
net they said XY prime. They

NOTE Confidence: 0.70591766

f14091e9-faa4-4f3e-addd-18916f7e2ec5
01:09:30.415 --> 01:09:36.190
they rarely use the upward
arrow or downward arrow. They

NOTE Confidence: 0.70591766

5209206e-aef1-4a3d-8248-0f0673cb6443
01:09:36.190 --> 01:09:38.290
usually follow this notation.

NOTE Confidence: 0.875154

229622e4-7ada-4a91-9c5b-15f48eda02a9
01:09:40.230 --> 01:09:43.470
And because of the commutative
property of or.

NOTE Confidence: 0.79884475

08d706cd-2828-44ee-9685-6d07a3d814f0
01:09:44.090 --> 01:09:49.466
Uh, so we can change the order
of the input for nor gate two,

NOTE Confidence: 0.79884475

abe25d39-38f6-4558-bec5-5b2d99dcf979
01:09:49.466 --> 01:09:55.994
so X or Y not is equal to Y or
X not so the NAND the nor

NOTE Confidence: 0.79884475

55e91576-7e4c-40ee-8201-828ae9fb7123
01:09:55.994 --> 01:09:57.914
operator has the commutative property.

NOTE Confidence: 0.84116274

e264f4d9-cede-4b21-a59a-003dda2ecb13
01:10:00.620 --> 01:10:04.736
So my question for you is
this? Uh, what happens if we

NOTE Confidence: 0.84116274

3e245024-c8fb-440e-9f2d-46d639e32cb0
01:10:04.736 --> 01:10:08.509
input nor with the same
input? So in both input of

NOTE Confidence: 0.84116274

3e373034-c30c-4413-b811-0ad1e0e4f38b
01:10:08.509 --> 01:10:12.968
the new or we just put one
input, XX goes to one input,

NOTE Confidence: 0.84116274

19e70f95-f8d6-4d75-9ef0-6dafd03109f6
01:10:12.968 --> 01:10:16.398
an again to other inputs.
What happens to this? So

NOTE Confidence: 0.84116274

8fb8522d-ae62-426f-a28a-5d2c9f106fd8
01:10:16.398 --> 01:10:20.857
again, please go to the poll.
I guess I put it as a

NOTE Confidence: 0.84116274

5cbbe31b-aa39-463b-9fe2-a20561ba274f
01:10:20.857 --> 01:10:22.229
question in the poll.

NOTE Confidence: 0.6882073

aaa50586-4183-4426-9f5b-911b3f017eea
01:10:25.660 --> 01:10:29.748
Yes, uh, let me back to
the.

NOTE Confidence: 0.7400449

57c972f1-21d7-4472-b41a-6928d4150f02
01:10:31.830 --> 01:10:33.730
Poll and then run it.

NOTE Confidence: 0.89588946

bf614a6f-fd88-4f6e-8720-2f739c316fd2
01:10:37.530 --> 01:10:39.590
So please answer this question.

NOTE Confidence: 0.6798883

06f21dce-f74a-4a92-aaa6-ac3dd4429a7b
01:10:45.380 --> 01:10:47.888
So if you input.

NOTE Confidence: 0.83802986

44fee91a-cbee-4221-82b4-d5654b724704
01:10:50.040 --> 01:10:54.132
Both inputs of nor with the same
input X, what happens?

NOTE Confidence: 0.8551382

ed9d1611-2f46-43d2-b9b9-843dbffdd547
01:10:55.040 --> 01:11:00.332
It acts like and it acts like or
not or nand. Basically because it

NOTE Confidence: 0.8551382

70cf730f-106d-4d79-9a6a-32dfc3c9ae81
01:11:00.332 --> 01:11:07.136
is an or first, so it becomes X
or X, so X or X is equal to X

NOTE Confidence: 0.8551382

4dc215d2-b3f1-4909-8a9b-b8cbf466d689
01:11:07.136 --> 01:11:11.294
and then followed by a not. So
it becomes x bar so.

NOTE Confidence: 0.8936128

c1f9c98d-6d80-460c-a19d-218a996d1d1a
01:11:12.020 --> 01:11:15.244
It is clear that
it acts like, not.

NOTE Confidence: 0.93997926

c37fb9f6-bc4b-4d15-b4ea-ba2a78927188
01:11:19.200 --> 01:11:21.080
So let's see the result.

NOTE Confidence: 0.83104897

33d210c8-b58d-4457-ad91-67c356e9834f
01:11:23.490 --> 01:11:26.760
Most of you could actually
answer the correct answer, so

NOTE Confidence: 0.83104897

08d391e0-3138-4025-83ff-e3aaeb01bbeb
01:11:26.760 --> 01:11:28.722
again, let's back to this slide.

NOTE Confidence: 0.9252189

3feb1f9a-a726-4764-975f-121dc869ecbc
01:11:35.420 --> 01:11:40.806
So. Here is the analysis for
this unit. So we could say that

NOTE Confidence: 0.9252189

6b5e7629-1a69-4feb-bb69-b263a4a44365
01:11:40.806 --> 01:11:43.310
so the first step is X or X.

NOTE Confidence: 0.85518426

9f1b81f5-9dac-4c8b-b786-20ec4fc4f3ec
01:11:45.390 --> 01:11:50.790
X or X, or X or X,X equal to X and then
followed by a not.

NOTE Confidence: 0.85212046

b64f590f-3dc7-4a84-b5af-539dae15bd9d
01:11:51.810 --> 01:11:56.994
So X or X, not so if it is zero,
it becomes one. If it is one, it

NOTE Confidence: 0.85212046

dc460b80-0862-4e24-a6dd-d685bc5f6e3e
01:11:56.994 --> 01:11:59.010
becomes 0, so it acts like not.

NOTE Confidence: 0.83012205

9a4917c4-b120-4a0d-b8af-7fd78f8a945d
01:11:59.620 --> 01:12:04.404
So again, if you go to the
market and you couldn't find an

NOTE Confidence: 0.83012205

1664e601-5ee4-40d8-967e-38ee7d97630f
01:12:04.404 --> 01:12:09.188
not gate, you could simply by
the nor gate and then input the

NOTE Confidence: 0.83012205

8bf29070-e882-4ca9-b6db-1e7780ecd284
01:12:09.188 --> 01:12:14.340
nor gate with the same input in
both of the inputs, so it acts

NOTE Confidence: 0.83012205

89070847-d09c-4fe1-8038-5abf5c3ef65e
01:12:14.340 --> 01:12:19.860
like not. So for the nand an nor
if you input the same input in

NOTE Confidence: 0.83012205

8066f790-495f-4546-b7c2-9c1744a3aec8
01:12:19.860 --> 01:12:20.964
both the Inputs.

NOTE Confidence: 0.88121545

bb30e8fc-497c-42cc-bd8f-3d3b63a3a01e
01:12:21.590 --> 01:12:23.630
It like it works like not.

NOTE Confidence: 0.8162799

dc232ec0-89e2-43e3-92b4-4f525f6c1105
01:12:26.200 --> 01:12:30.721
How about Nor with three input?
Meaning that if we are given

NOTE Confidence: 0.8162799

cd7436e4-1e57-4ee1-b957-849c414d09ea
01:12:30.721 --> 01:12:31.543
three inputs.

NOTE Confidence: 0.9298237

379e3c77-aac9-46e0-9492-0e6670bae533
01:12:32.920 --> 01:12:36.682
So let me see we have
time for this.

NOTE Confidence: 0.86879563

c5321647-64b5-43a2-90f9-cea38b7ca731
01:12:38.770 --> 01:12:43.619
I have two minutes so we can
cover this, I guess. So if

NOTE Confidence: 0.86879563

a78c4757-dda7-4235-a366-5099a8c77b76
01:12:43.619 --> 01:12:47.722
you are given three input and
we wanted to apply all

NOTE Confidence: 0.86879563

66a13a01-a0a2-4df0-be62-51b244ca0977
01:12:47.722 --> 01:12:48.841
followed by nots.

NOTE Confidence: 0.8817217

ef92098e-55a5-46a6-b916-77f51f3ad439
01:12:50.070 --> 01:12:55.413
Basically, if all the inputs are
zero, we want to output one if

NOTE Confidence: 0.8817217

2ea70ccf-2de0-49b1-bf3c-81d249fcadba
01:12:55.413 --> 01:13:00.345
at least at least one digital
one happens in the input, we

NOTE Confidence: 0.8817217

0a0833b9-2797-4104-ad0d-7765e2c1e88b
01:13:00.345 --> 01:13:01.989
want to output 0.

NOTE Confidence: 0.87489974

36272f73-403d-4b4b-b6ff-f50c566b7a91
01:13:03.770 --> 01:13:09.048
So this is the behavior of the
nor with three input. So let's

NOTE Confidence: 0.87489974

90a66aa2-52eb-4e4b-9ac9-b7a02fc2dacb
01:13:09.048 --> 01:13:12.296
design it as we did for the and

NOTE Confidence: 0.8185254

c4b832bf-2d89-4765-9644-6bd067dd0ebb
01:13:12.296 --> 01:13:17.606
and. Or so again, a
stacking two nor gates

NOTE Confidence: 0.8185254

fce2754a-850a-43a4-a542-d6b0f4936ef4
01:13:17.606 --> 01:13:18.890
with each other.

NOTE Confidence: 0.8849154

df0b29ab-5b69-4bc7-b328-f70bfe71aaed
01:13:20.200 --> 01:13:21.788
If you do this.

NOTE Confidence: 0.8240657

97784550-ba5f-4436-bcd8-0e8c1e3f656a
01:13:23.040 --> 01:13:29.895
The first One X nor Y and then
becomes F1 and then F1, nor with

NOTE Confidence: 0.8240657

b30f9d2f-453d-4892-a6f2-345d9bd974a4
01:13:29.895 --> 01:13:31.266
Z becomes this.

NOTE Confidence: 0.94025284

71ec1e83-67a0-48ea-9ac8-740a3c660624
01:13:32.070 --> 01:13:33.250
This is the result.

NOTE Confidence: 0.86459655

95059436-7842-4495-ae1e-9e9af6bb7d33
01:13:34.130 --> 01:13:38.078
But this is not what we wanted.
We wanted to input zero in all

NOTE Confidence: 0.86459655

d3bfbf36-a8a6-444d-b79d-dc27ab075022
01:13:38.078 --> 01:13:41.744
positions an if all the inputs
are zero, we want to output one.

NOTE Confidence: 0.81770855

3cc264e2-df2e-49aa-8d51-4520090897b4
01:13:42.650 --> 01:13:47.285
So, comparing this, uh, the
functionality of this design.

NOTE Confidence: 0.82227564

d4cb2dbe-4805-4626-9905-ea0b60c790aa
01:13:48.030 --> 01:13:54.036
But a by what we wanted with
what we wanted, you can see that

NOTE Confidence: 0.82227564

8b326861-3c9f-406e-9198-bb0859e6cf68
01:13:54.036 --> 01:13:58.755
although in some when disease
one they act similar. But when

NOTE Confidence: 0.82227564

f3bc753d-0a47-4cf2-af5f-593f8b821104
01:13:58.755 --> 01:14:03.474
the Z is zero they act
differently. We wanted this one,

NOTE Confidence: 0.82227564

41237b8e-dcb1-4dd8-8ae4-079410b81e92
01:14:03.474 --> 01:14:05.619
but this design outputs this.

NOTE Confidence: 0.9289449

dc73b07e-555d-4471-ae20-49b73a24089f
01:14:06.170 --> 01:14:09.158
So this is not the correct
or effective design.

NOTE Confidence: 0.83073604

82714826-b91b-4083-885c-72426e20babb
01:14:10.500 --> 01:14:15.736
So we could simply say that we
by in or with three input an,

NOTE Confidence: 0.83073604

d03847ca-be6c-40da-8a4f-a1b8e75bf637
01:14:15.736 --> 01:14:21.346
then attach and not to that. So
this is the way so and all with

NOTE Confidence: 0.83073604

346e49c4-0e11-4f7b-b37d-e914f3051e2d
01:14:21.346 --> 01:14:26.208
three input followed by a not.
So this is the true way of

NOTE Confidence: 0.83073604

04610dab-cf88-4f54-bd7c-656a6191a509
01:14:26.208 --> 01:14:28.452
building a nor gate with three

NOTE Confidence: 0.8543722

3ae3b0c1-cfaa-48fc-88b9-ad730d26fe9e
01:14:28.452 --> 01:14:34.020
input. And again, because of the
associativity property of the OR

NOTE Confidence: 0.8543722

e2943b5f-4e1f-4e89-955a-41f5c48cab81
01:14:34.020 --> 01:14:39.858
or. Sorry, this is the tip. Here
we have to put plus here plus

NOTE Confidence: 0.8543722

dc80b4df-7a9a-4521-8325-28096dd9ed2a
01:14:39.858 --> 01:14:41.526
plus X or Y or Z.

NOTE Confidence: 0.8661221

b16a7277-f0ca-4393-a793-d5488b1a730a
01:14:42.690 --> 01:14:47.475
So because of the associativity
property of the OR, we can

NOTE Confidence: 0.8661221

61ca5c39-a3ef-4978-9214-2bee5a5fdc28
01:14:47.475 --> 01:14:53.130
reorder the input of the OR so
ZYX or ZXY and etc. And then

NOTE Confidence: 0.8661221

933165b4-1f63-4dc0-ac49-4f2450614711
01:14:53.130 --> 01:14:54.870
followed by a not.

NOTE Confidence: 0.8345482

65e5940f-461d-4c2c-859e-1881511fef2c
01:14:55.980 --> 01:14:59.390
So whenever you are given
a nor with three input, this is

NOTE Confidence: 0.8345482

1736680b-0084-4638-9227-93cf0dc9736e
01:14:59.390 --> 01:15:02.800
actually an or with three input
followed by a not.

NOTE Confidence: 0.8769883

6fc176c3-cea1-4a35-8d1d-521659e65daa
01:15:04.270 --> 01:15:07.510
So again, comparing the first
design and the second design,

NOTE Confidence: 0.8769883

6725de7f-3137-49bb-b1ed-9eba3eb61439
01:15:07.510 --> 01:15:11.722
the first design is not what we
wanted, so it's not effect based

NOTE Confidence: 0.8769883

bf948cbb-5af9-4da3-bf90-fcf605e25bf1
01:15:11.722 --> 01:15:15.286
on our requirement, but the
second one is I actually doing

NOTE Confidence: 0.8769883

e9ed762d-1317-42d9-baeb-9fee099ce840
01:15:15.286 --> 01:15:19.174
the same. So after is the
effective one. So we choose this

NOTE Confidence: 0.8769883

712ffd6c-a325-4c5c-a8ea-39a88ff1b6a0
01:15:19.174 --> 01:15:22.738
one and then we forget about
the efficiency of cost. Because

NOTE Confidence: 0.8769883

e363ccdc-dfcc-46cd-83e9-b677034ed45f
01:15:22.738 --> 01:15:24.358
this is the correct one.

NOTE Confidence: 0.82092476

269270c9-a37f-45d9-95d1-a60680ee7490
01:15:26.450 --> 01:15:30.597
Again, like the nand in the
lecture I asked you, let's

NOTE Confidence: 0.82092476

456a0ba0-d2a3-40cd-b2d7-2a47400b5fb5
01:15:30.597 --> 01:15:35.498
analyze it more. I mean, if you
stack nor gate with each other,

NOTE Confidence: 0.82092476

02111b32-1fa9-4d86-b07d-9fade88a1aed
01:15:35.498 --> 01:15:39.645
is it associative? Can we drop
the parenthesis or no? And

NOTE Confidence: 0.82092476

a4e6c70a-fbdb-44a7-b9f6-4a7e45c6e877
01:15:39.645 --> 01:15:44.546
what's the behavior? What's the
use of this unit? Why we have to

NOTE Confidence: 0.82092476

7dcc9c11-b404-46f2-8f3a-a4767733f9b9
01:15:44.546 --> 01:15:45.677
build this unit?

NOTE Confidence: 0.8470298

131310d8-3027-4d8a-a0c5-d7bca2c6548c
01:15:46.900 --> 01:15:52.094
Or is it possible to? I mean,
making use of this design or no?

NOTE Confidence: 0.9190961

5e35e525-8245-489c-adfd-0e5ec7b3c665
01:15:53.830 --> 01:15:55.678
And then doing a quick recap.

NOTE Confidence: 0.8821938

06bda103-c9b5-4ff6-95da-8182a7871a11
01:15:56.820 --> 01:16:03.628
So. One thing is that we are in
the positive logic, so we we are

NOTE Confidence: 0.8821938

343bf405-93eb-4382-917d-2b5dd025cf21
01:16:03.628 --> 01:16:08.105
interested in when the output
gonna be 1, otherwise it is

NOTE Confidence: 0.8821938

e1e4c085-1d95-447c-bce6-4f0879cefc82
01:16:08.105 --> 01:16:10.140
attached to ground or 0.

NOTE Confidence: 0.84061986

3693e1dc-1600-4b8a-b046-64b5e0404da7
01:16:11.070 --> 01:16:14.838
With the nut, whenever the input
will have only one input, so

NOTE Confidence: 0.84061986

1bebbe4d-d6d3-4099-ab76-29b9540f0a8d
01:16:14.838 --> 01:16:16.408
whenever the input is 0.

NOTE Confidence: 0.8371894

cf90b305-324b-4fff-bb55-b2c2e74536b9
01:16:17.130 --> 01:16:19.518
Low voltage, the output going to

NOTE Confidence: 0.8750241

706f20e9-48c2-4141-9ec2-7de4e7d7d841
01:16:19.518 --> 01:16:24.491
be high. High voltage, so this
is this statement. Whenever we

NOTE Confidence: 0.8750241

6719e07c-0a56-41d8-91c9-e28fff1f092c
01:16:24.491 --> 01:16:29.937
we see one or high voltage in
the output. In the and, if all

NOTE Confidence: 0.8750241

9b9e3717-ddd4-4221-966e-4402d37de95f
01:16:29.937 --> 01:16:31.493
the inputs are one.

NOTE Confidence: 0.8659315

08932bc4-ad47-4245-b300-9fed6d5d098f
01:16:32.100 --> 01:16:33.370
The output gonna be 1.

NOTE Confidence: 0.8557401

758c0085-6292-4734-9ad0-77af7327af06
01:16:34.490 --> 01:16:38.956
With the OR at least one input
is 1, then the output gonna be

NOTE Confidence: 0.8557401

e7d1a569-90c3-4abd-ad0e-ea05cbafda12
01:16:38.956 --> 01:16:43.103
one. So this is the statement
for the OR gates. If you have

NOTE Confidence: 0.8557401

7c8d01d7-52d7-4ed6-9e06-6da7c6590266
01:16:43.103 --> 01:16:47.569
or with ten inputs, you could
seem as long as you see at least

NOTE Confidence: 0.8557401

bafe0781-a6a8-45fe-a48f-884421390b0a
01:16:47.569 --> 01:16:51.397
one input with digit one, you
don't wait for the others, you

NOTE Confidence: 0.8557401

2de92af6-78f7-46f1-84ea-91618326ff23
01:16:51.397 --> 01:16:52.673
just simply output one.

NOTE Confidence: 0.8392552

9569f240-f983-45b6-bb93-57262d804cda
01:16:53.520 --> 01:16:58.575
(NOTE: The condition for NAND in the slides is INCORRECT! The slides have been corrected on Blackboard. The correct condition for NAND is if at least one input is 0, the output is going to be 1)

NOTE Confidence: 0.8392552

2bfc0619-d6aa-4aa0-b80e-1983b72432e1
01:16:58.575 --> 01:17:00.597
(NOTE: The condition for NAND in the slides is INCORRECT! The slides have been corrected on Blackboard. The correct condition for NAND is if at least one input is 0, the output is going to be 1)

NOTE Confidence: 0.86239916

c4d4f5d2-aab5-4b05-8eb7-3f804674e72f
01:17:01.230 --> 01:17:04.794
(NOTE: The condition for NOR in the slides is INCORRECT! The slides have been corrected on Blackboard. The correct condition for NOR is if all the inputs are 0, the output is going to be 1)

NOTE Confidence: 0.86239916

f008d1f7-5d6e-4e89-b22b-0f16b13ccd35
01:17:04.794 --> 01:17:06.774
(NOTE: The condition for NOR in the slides is INCORRECT! The slides have been corrected on Blackboard. The correct condition for NOR is if all the inputs are 0, the output is going to be 1)

NOTE Confidence: 0.9207913

ee6ce082-2cb6-437b-a6a2-fb572c76dade
01:17:07.910 --> 01:17:12.590
So this is kind of
interpretation or behavior of

NOTE Confidence: 0.9207913

c9008eae-a935-44c5-a359-f1dc033f973a
01:17:12.590 --> 01:17:14.670
the gates so far.

NOTE Confidence: 0.8566431

d21662ab-bc52-4f21-8cab-7a56b8e3c230
01:17:16.680 --> 01:17:20.253
Next I mean session. We
gonna cover new topics

NOTE Confidence: 0.8566431

8601da51-aeda-4f21-8a44-5cc013325b29
01:17:20.253 --> 01:17:23.429
universal set, but I'm ready
for your questions.

NOTE Confidence: 0.831402

58095985-e2b0-46a5-ae55-b9fd59970089
01:17:26.180 --> 01:17:30.887
So practically, wouldn't
you attach it to the ground

NOTE Confidence: 0.831402

fb8e88b5-5a27-4a27-87f2-abe49e11dd52
01:17:30.887 --> 01:17:34.548
for assurence? It is always
0 Nicholas.

NOTE Confidence: 0.8337405

aa168ef3-2312-4f3d-a46f-d2a0b09e0eb0
01:17:36.080 --> 01:17:38.910
I'm not sure I get your
questions. Wouldn't you attach

NOTE Confidence: 0.8337405

10df6a43-2c3c-4882-b7b9-c4be8e926053
01:17:38.910 --> 01:17:40.325
it to the ground for?

NOTE Confidence: 0.8562553

e5240560-fce6-48b9-abdf-790a333c64e5
01:17:40.900 --> 01:17:44.607
Yes, as I said, I'm in
grand in the positive logic

NOTE Confidence: 0.8562553

a5d96543-b242-4587-beb9-7972dcbe3709
01:17:44.607 --> 01:17:47.977
ground is 0, so you can
whenever you need's to

NOTE Confidence: 0.8562553

c4381952-2fc7-42ed-adc9-b9ea6cb93708
01:17:47.977 --> 01:17:51.010
produce zero. There are
multiple ways, one is the

NOTE Confidence: 0.8562553

49b60f1c-44a5-4c9b-90e9-0045e6bed05c
01:17:51.010 --> 01:17:53.369
attaching to the ground,
one is or.

NOTE Confidence: 0.8301848

d11bdb6a-971a-47a0-b7b7-2777a98761ed
01:17:54.780 --> 01:17:58.836
Sorry, and with it with an
input so so you could simply

NOTE Confidence: 0.8301848

ca95c9f2-78b0-45a7-a386-14ad1ea12c61
01:17:58.836 --> 01:18:02.554
bring a wire and then an
not it with itself so it

NOTE Confidence: 0.8301848

e31d713e-1b6b-4c8f-be34-f3bf59d0783f
01:18:02.554 --> 01:18:05.596
always produce 0. There's
another way to producing 0.

NOTE Confidence: 0.676547

0807d01e-fe5f-49e3-be89-c30ae5ddef1b
01:18:07.150 --> 01:18:12.909
Um Nico ask is the efficiency of
a single nor an NAND gate

NOTE Confidence: 0.676547

c721935a-3985-40d8-8cce-821c3997c7e8
01:18:12.909 --> 01:18:15.124
equivalent to using one gate?

NOTE Confidence: 0.9240113

59270add-7291-410f-adc9-7426ab6c4e19
01:18:16.250 --> 01:18:19.180
Or two. Not.

NOTE Confidence: 0.16577464

4f1783a7-b5e8-4868-afb0-ade4d35e99fa
01:18:20.770 --> 01:18:21.750
Uh.

NOTE Confidence: 0.77866894

25fe3c66-f6de-4fd7-9084-278f0d338185
01:18:26.040 --> 01:18:29.930
Efficiency of single nor Oh
Oh, you said are correct.

NOTE Confidence: 0.77866894

00cd22f7-9672-4204-814a-dc33379c22eb
01:18:29.930 --> 01:18:33.820
That's that's a good thing.
That's a good question. You

NOTE Confidence: 0.77866894

92ddf167-61b5-402a-9bdd-3d1a28f99739
01:18:33.820 --> 01:18:38.099
could say that. I mean,
instead of let me back here.

NOTE Confidence: 0.86003155

44ca9670-973d-46ef-baa8-a6cd4ca39777
01:18:40.960 --> 01:18:45.776
So you could say that, uh, this
is the Nor, so we have two

NOTE Confidence: 0.86003155

87d0bfdb-1d0b-435e-b752-3a7a13012378
01:18:45.776 --> 01:18:51.280
step one or an, then followed by
a not. So this is a two step. So

NOTE Confidence: 0.86003155

53722950-b55b-43eb-8588-20e57472bbd3
01:18:51.280 --> 01:18:55.752
in order to have a nor by this
design you have to wait two

NOTE Confidence: 0.86003155

ff1f0e32-cfad-4006-b43e-5cdcbb0e854b
01:18:55.752 --> 01:18:59.880
steps. But as I said in the
market, they already build a

NOTE Confidence: 0.86003155

382d4440-8503-4ba2-bd2d-2fd614a08a0d
01:18:59.880 --> 01:19:05.040
gate for that, so you can apply
nor with one step. So as long as

NOTE Confidence: 0.86003155

639aba32-9927-4b4a-8e55-2e7ad92dbb24
01:19:05.040 --> 01:19:09.856
you have the input with one step
you have the output true. I mean

NOTE Confidence: 0.86003155

7a0fb59f-7245-45e2-950a-1e1d63a19f0d
01:19:09.856 --> 01:19:11.576
whenever you need a nor.

NOTE Confidence: 0.8553788

080389eb-3ff2-4d47-8230-b55f0096b750
01:19:11.660 --> 01:19:15.703
Instead of buying an or an
not, you can simply buy a nor

NOTE Confidence: 0.8553788

f3ffffa8-3105-472e-9ed4-1a9df973753a
01:19:15.703 --> 01:19:19.435
if it is available. So one gate
is much more efficient than

NOTE Confidence: 0.8553788

94093064-dffb-45d4-bc08-fb54ab92aeff
01:19:19.435 --> 01:19:23.167
using two gates. So because of
this day already build us the

NOTE Confidence: 0.8553788

8f8c337f-bb6f-422f-a0c8-f8315a389dad
01:19:23.167 --> 01:19:26.277
newer but the design, the
internal design like this. But

NOTE Confidence: 0.8553788

bde86ee8-63f4-4a7d-82a8-4364b109b55a
01:19:26.277 --> 01:19:30.942
when you build it in a physical
sense, you can build in as a one

NOTE Confidence: 0.8462429

5ff9977e-00ab-447f-bb27-616d8f728760
01:19:30.942 --> 01:19:35.050
gate. Uh, throughout the same
is for nand. You could build

NOTE Confidence: 0.8462429

2ec6698e-d4c4-4ecc-a8d1-e735be1e085e
01:19:35.050 --> 01:19:38.458
an answer if you don't have
with an and and they're not

NOTE Confidence: 0.8462429

3f119f8c-68e4-4989-a12c-ba9eb9db7bc6
01:19:38.458 --> 01:19:41.866
so to a step, but you can
build an efficient one just

NOTE Confidence: 0.8462429

0affd7a0-ec0b-48b2-8328-15a584b26859
01:19:41.866 --> 01:19:44.706
one NAND gate if it is
available on the market.

NOTE Confidence: 0.9176015

8a7078dc-6dae-4144-9884-b1679c46d294
01:19:47.330 --> 01:19:49.948
So I hope I answered your
questions.

NOTE Confidence: 0.8740967

449af826-b9a9-44ec-b6f3-77a39058542c
01:19:51.760 --> 01:19:52.819
Any other questions?

NOTE Confidence: 0.9369215

a9f5eb00-391e-4acd-adb0-2441a0766f36
01:20:00.600 --> 01:20:01.420
No questions.

NOTE Confidence: 0.821912

73d4e7b8-5eed-4064-900d-eae55371a204
01:20:06.530 --> 01:20:11.821
So I'm ready at the office hour,
so if there any question about

NOTE Confidence: 0.821912

61d28e96-f266-4b42-bd03-924aa92d2369
01:20:11.821 --> 01:20:17.112
the lecture or about the labs of
I waiting for you there. Thank

NOTE Confidence: 0.821912

7ad46948-fa69-48fa-ab82-833e106e4a22
01:20:17.112 --> 01:20:21.182
you so much for attending
today's lecture and we continue

NOTE Confidence: 0.821912

8a28667e-ab51-4c1e-b683-39ae30fe3a83
01:20:21.182 --> 01:20:25.659
this topic next this Wednesday.
Thank you. Have a great day.

