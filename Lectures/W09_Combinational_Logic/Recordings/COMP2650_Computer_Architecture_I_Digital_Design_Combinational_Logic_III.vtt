WEBVTT

NOTE duration:"01:07:19.3620000"

NOTE language:en-us

NOTE Confidence: 0.87614954

47a0cb44-4204-469f-a93e-ee6127952050
00:00:03.900 --> 00:00:04.770
Thank you Sean.

NOTE Confidence: 0.846954

17d6ca36-a752-4be7-8429-587667f72a13
00:00:05.780 --> 00:00:08.307
I was about to forget
about recording.

NOTE Confidence: 0.9154493

bb3b2366-9555-45f2-b83c-efa087849e1c
00:00:10.230 --> 00:00:11.150
So.

NOTE Confidence: 0.89046824

92350576-e92a-466f-bb77-df94f546a7ef
00:00:13.060 --> 00:00:17.950
Continuing on the topics we
started last week about the

NOTE Confidence: 0.89046824

623d9130-8ea8-406d-a4b6-b8ab053ace94
00:00:17.950 --> 00:00:23.329
combination of logic, we said
that combination logic is just a

NOTE Confidence: 0.89046824

2ccdee21-b8b4-4897-b2a2-81e50edaea51
00:00:23.329 --> 00:00:27.241
combination of the logic gates
without any feedback.

NOTE Confidence: 0.8797855

c5c7ed52-6613-4bd1-81ed-35ba49398d5d
00:00:28.680 --> 00:00:32.088
We said that at any time, the
main property of the combination

NOTE Confidence: 0.8797855

7737a4eb-600b-4c73-9728-fb6a23aef23b
00:00:32.088 --> 00:00:35.212
of logic, that is that at
anytime, if you provide the

NOTE Confidence: 0.8797855

e9d26122-0bf0-46b5-acc3-041031ffbbd6
00:00:35.212 --> 00:00:36.632
value for the input variables.

NOTE Confidence: 0.7724872

b5d45e80-d78a-4218-9fa4-37b41ae654f4
00:00:37.280 --> 00:00:42.536
Uh, with some propagation delay
you can have the value for the

NOTE Confidence: 0.7724872

f1d0f7c8-f389-4bf4-907d-442746ad58cd
00:00:42.536 --> 00:00:47.354
output. Binary valuables in this
course we can assume that by

NOTE Confidence: 0.7724872

e3428b69-42cb-4e6e-af29-4d1e9e5f6b71
00:00:47.354 --> 00:00:49.544
default the propagation delay is

NOTE Confidence: 0.83577245

b71005fd-36aa-4780-b787-73dca79cdb82
00:00:49.544 --> 00:00:54.391
0. Until I mean the problem
states that there is a delay.

NOTE Confidence: 0.8332423

b2deee63-75bc-481b-b739-d7c30d54942b
00:00:55.820 --> 00:01:01.220
We saw an instance of delay
in the four bit adder with

NOTE Confidence: 0.8332423

47958770-f418-4351-9cb5-15bb902f3e7e
00:01:01.220 --> 00:01:02.570
the carry propagation.

NOTE Confidence: 0.873149

e452a1af-4d60-42fd-9fb6-9756bb7c7a50
00:01:05.430 --> 00:01:09.401
And then we continued with the
category of the combination of

NOTE Confidence: 0.873149

069c531c-b5d6-462e-ae72-d3f1ea2fa7d7
00:01:09.401 --> 00:01:14.094
logic we are. We said that we
want to build a computer system.

NOTE Confidence: 0.873149

80681e8e-198b-4cf9-8750-7ca962e0f68a
00:01:14.094 --> 00:01:17.704
So some logic units or logic
circuits are very essential.

NOTE Confidence: 0.8370074

7384c0dc-d9dc-479f-97ab-8bdd26f5c29b
00:01:18.590 --> 00:01:21.678
We put them into three
main categories, those

NOTE Confidence: 0.8370074

8ed7a994-f1b6-496d-a24d-19df6cb5a6df
00:01:21.678 --> 00:01:23.994
for arithmetic, those
for data transmission

NOTE Confidence: 0.8370074

dfbfe9ef-1b6c-4c1e-84cb-2ea47343765a
00:01:23.994 --> 00:01:25.538
and those for coding.

NOTE Confidence: 0.8538849

fab80409-6e22-4a3c-84be-a563997a4902
00:01:26.840 --> 00:01:30.606
But the arithmetic we covered
the binary addition,

NOTE Confidence: 0.8538849

919bc4e8-384a-44e1-ba8e-0740cabada59
00:01:30.606 --> 00:01:33.834
subtraction, multiplication,
and comparator. So basically

NOTE Confidence: 0.8538849

6abc3932-e4ce-4c64-b6de-e0bf1908c688
00:01:33.834 --> 00:01:38.138
any essential operator for
doing arithmetic. We didn't

NOTE Confidence: 0.8538849

9a425e57-53d0-433a-b200-1b443b33d383
00:01:38.138 --> 00:01:44.056
cover the division you can
think about that, but later in

NOTE Confidence: 0.8538849

21ac325e-8f33-461f-8a95-0279ecc8d2eb
00:01:44.056 --> 00:01:49.436
the sequential logic we may
have time to introduce the

NOTE Confidence: 0.8538849

21ab8615-cc6a-45f6-aa33-610e7a0d215e
00:01:49.436 --> 00:01:52.126
binary division for this
category.

NOTE Confidence: 0.87724

0a46f4e3-c942-4ecd-ab58-7bd9a185d4d7
00:01:53.440 --> 00:01:58.408
Today we're going to move on to
the second category about the

NOTE Confidence: 0.87724

453bbcf6-9986-48a1-ae8b-34ce718b72af
00:01:58.408 --> 00:02:02.134
data transmission. The logic
circuits for this category is

NOTE Confidence: 0.87724

b2912c0b-15f2-47aa-bf2d-0f5679489d1f
00:02:02.134 --> 00:02:05.446
just very useful for
transmitting data from memory

NOTE Confidence: 0.87724

403b5538-e606-4f85-97e9-12ced765307f
00:02:05.446 --> 00:02:11.242
to CPU or vice versa, and later
I mean next week we're going to

NOTE Confidence: 0.87724

93fd2cf9-7b6b-4015-adb1-1c3a9112f42d
00:02:11.242 --> 00:02:14.968
move on to the third category
about the coding.

NOTE Confidence: 0.8318286

91b752e2-ed02-446e-bfc2-28fc01bbf40f
00:02:16.020 --> 00:02:19.500
So let's start with the second
category data transmission and

NOTE Confidence: 0.8318286

085488ab-c1c0-4c4d-9c27-dfec994313e3
00:02:19.500 --> 00:02:20.892
start with the decoders.

NOTE Confidence: 0.77679163

6bca40a4-c53d-49bf-be34-b0c96128d78a
00:02:22.830 --> 00:02:27.329
All when we say decoder. By
default we mean binary decoder.

NOTE Confidence: 0.77679163

e005ec6a-0249-4a2b-a95b-814ee045fd15
00:02:27.329 --> 00:02:32.237
So whenever you see just decoder
it means that binary decoder 

NOTE Confidence: 0.77679163

9c634d6d-e0de-487e-b6a1-b96810ac5e77
00:02:32.237 --> 00:02:36.736
because in the logic circuits we
have BCD decoders will introduce

NOTE Confidence: 0.77679163

85e0092d-fdc7-49f4-b0fd-706a5cd27cd8
00:02:36.736 --> 00:02:37.963
it next week.

NOTE Confidence: 0.828531

3bbfd627-45de-4865-be1a-0306d6fb6c28
00:02:38.520 --> 00:02:42.601
Also we have a display decoders
or seven segment decoders. This

NOTE Confidence: 0.828531

fb79d379-1f3e-4866-8920-a27320cded52
00:02:42.601 --> 00:02:47.795
is one of the questions in the
book for the Chapter 3, so you

NOTE Confidence: 0.828531

a1c6ce28-a26c-4900-9fe2-e76e8ed6b791
00:02:47.795 --> 00:02:52.989
can have a look at that if you
have time we can discuss this.

NOTE Confidence: 0.828531

c47423f6-e220-471b-aeac-b378997185e3
00:02:52.989 --> 00:02:57.070
So if you see just decoder it
means binary decoder 

NOTE Confidence: 0.828531

0b435799-f650-43b0-bde5-d0f6c9172fbf
00:02:57.070 --> 00:03:01.151
otherwise it is BCD decoder,
display decoder or other type of

NOTE Confidence: 0.82894903

430e86a2-08d3-488f-a6d6-e13d2412041a
00:03:01.151 --> 00:03:05.436
decoders. So we're going to
introduce the binary decoders.

NOTE Confidence: 0.82415724

7b5595ba-967e-408f-8263-94a96f368442
00:03:07.570 --> 00:03:12.080
binary decoders is a logic
circuit that Maps a binary

NOTE Confidence: 0.8509618

52c6d8e3-4f89-4b55-a5e9-f94b1aede627
00:03:12.080 --> 00:03:18.270
number. Or we can say that
binary address in in form of the

NOTE Confidence: 0.8509618

d19e6059-2b78-45fa-8a21-f43014d39ef2
00:03:18.270 --> 00:03:23.665
binary number to 1 hot vector.
But what is 1 hot vector? One

NOTE Confidence: 0.8509618

f1937ace-5f70-493b-bf5b-c17ee481bdfb
00:03:23.665 --> 00:03:28.230
hot vector is a stream of
binary values zero and one.

NOTE Confidence: 0.8896466

c494d3e5-b3ed-430f-a24f-106b15841521
00:03:28.880 --> 00:03:33.128
But with this limitation, only
one spot is 1. All the other

NOTE Confidence: 0.8896466

5c606d22-6431-42ea-b44e-73325e2f1817
00:03:33.128 --> 00:03:34.190
spots are zero.

NOTE Confidence: 0.87863076

38bc4775-d8c3-4b9a-8e18-2a873efaea66
00:03:34.860 --> 00:03:38.765
So basically, in the first 2
examples are one hot vector

NOTE Confidence: 0.87863076

5d3d7c39-4d30-4943-a4d2-6055f91c8959
00:03:38.765 --> 00:03:43.025
in that just one cells is
hot, all the other cells are

NOTE Confidence: 0.87863076

341c2043-dc0c-4ed6-9315-6ed3761e2ee4
00:03:43.025 --> 00:03:44.445
cold or low voltage.

NOTE Confidence: 0.87281203

6c2cde67-d52d-4e6d-b4ae-c8e0d00e4065
00:03:45.510 --> 00:03:48.065
Other the third example here

NOTE Confidence: 0.78465056

dba166e2-7ae3-48c0-9822-8b556954fe7f
00:03:48.065 --> 00:03:54.180
because two spot is 1
is not an instance of one

NOTE Confidence: 0.78465056

dd69a31a-dcf8-4378-a85a-d7ba5e2241ba
00:03:54.180 --> 00:03:55.074
hot vector.

NOTE Confidence: 0.8329297

f93d7bc1-9f05-4989-8035-52414f41beb3
00:03:56.130 --> 00:04:01.135
So let's see what's the use of
this logic circuit. I mean why

NOTE Confidence: 0.8329297

eb595911-052a-4e65-811c-740ccd9d0ff0
00:04:01.135 --> 00:04:05.370
we have to decode a binary
number to 1 hot vector?

NOTE Confidence: 0.9065745

125afd79-7d79-49a6-ac9a-5d37027a125f
00:04:07.050 --> 00:04:11.634
So as you may know, in computer
system all the processing is

NOTE Confidence: 0.9065745

a4e818bf-86e5-4294-b20f-e025416d1385
00:04:11.634 --> 00:04:13.926
happening in the CPU or central

NOTE Confidence: 0.8856474

6fdc376b-174f-41d4-8157-1805cca7bb6b
00:04:13.926 --> 00:04:17.404
processing unit. You are
going to build it by the

NOTE Confidence: 0.8856474

f0374673-7617-4395-9ea4-8d88b6fc2b62
00:04:17.404 --> 00:04:18.594
logic circuit in this course.

NOTE Confidence: 0.862213

c1b24711-fdee-475b-a438-cb927d9ea9b6
00:04:19.640 --> 00:04:23.920
Also, we have another unit
called memory and all the

NOTE Confidence: 0.862213

195d1327-1c06-4429-8857-47208e0f8b65
00:04:23.920 --> 00:04:28.200
information as well. I mean for
instance the codes, the

NOTE Confidence: 0.862213

4c4439c3-345f-4314-9c31-da40b22ff07d
00:04:28.200 --> 00:04:32.052
programs, data, etc all must
reside in the memory.

NOTE Confidence: 0.86363053

b6e798e1-0d0a-4fd9-9741-1e5da0c6589b
00:04:32.820 --> 00:04:37.980
And any processing must be all
the data must be transferred to

NOTE Confidence: 0.86363053

bea90ac5-b311-45d7-9749-125592cdea1f
00:04:37.980 --> 00:04:42.710
the CPU for processing, and the
result must be transferred to

NOTE Confidence: 0.86363053

c99027ee-3344-4316-aa99-ae84c2a3ee55
00:04:42.710 --> 00:04:47.870
the memory to just show the output.
So basically there is a

NOTE Confidence: 0.86363053

fcb70af7-488f-45ce-b5c7-c2c355e8e167
00:04:47.870 --> 00:04:51.310
communication between central
processing unit and memory unit.

NOTE Confidence: 0.8654797

232f7103-2edd-4945-9b66-807b3dd43668
00:04:52.910 --> 00:04:57.442
At each time, the CPU must
specify what location of the

NOTE Confidence: 0.8654797

2ce1e660-c7a2-499f-99c3-d13e2a23d313
00:04:57.442 --> 00:05:02.798
memory we have to look at see and
transfer the content of that

NOTE Confidence: 0.8855134

bdb943cf-501d-4f0d-b627-02cbd296b95c
00:05:02.798 --> 00:05:07.940
memory location. So the CPU
does that with an address or

NOTE Confidence: 0.8855134

9a75b785-cb31-43b0-b424-b48d34251a83
00:05:07.940 --> 00:05:12.010
a binary number to select one
of the memory location at

NOTE Confidence: 0.8855134

81758c93-f0a0-4dc9-94a4-e688dd62b300
00:05:12.010 --> 00:05:15.710
anytime. So basically you can
see that the memory location

NOTE Confidence: 0.8855134

e816855f-fe9b-421a-a389-bd3ec1dd7101
00:05:15.710 --> 00:05:20.150
has a vector and at each time
just select one of them.

NOTE Confidence: 0.86491156

920258d5-e21b-496b-a6bc-d5e6542fcf66
00:05:21.840 --> 00:05:26.229
for instance here the second memory
unit, and then the third memory
NOTE Confidence: 0.86491156


45effd99-fc4e-4878-a87f-2e6cfc0f4f11
00:05:26.229 --> 00:05:31.416
unit up up until the end. I
mean, and memory unit. So at

NOTE Confidence: 0.86491156

a3d20d33-cc12-41bd-a5ec-06f02082f0ab
00:05:31.416 --> 00:05:37.002
each time we need to just select
one memory unit here and all the

NOTE Confidence: 0.86491156

d6f8e056-a87a-4aa4-984d-c359a43c3c50
00:05:37.002 --> 00:05:39.396
other memory units must not be

NOTE Confidence: 0.72781074

c8072b51-bb52-4a7a-aa3b-96b999c6a533
00:05:39.396 --> 00:05:42.149
selected, so. All are zero.

NOTE Confidence: 0.8811204

d45bd332-c557-4b5c-8d28-315076cc9e32
00:05:43.410 --> 00:05:48.470
So here the CPU must specify
which memory location to be

NOTE Confidence: 0.84462506

8bb302c5-f836-41d2-a591-0a2adddc7e99
00:05:48.470 --> 00:05:55.932
enabled. So this is the decoder.
This is the task or the logic of

NOTE Confidence: 0.84462506

46eb562c-b0de-4d94-9392-f8adef0b4b0f
00:05:55.932 --> 00:05:59.644
the decoder. So the simplest
decoder is this.

NOTE Confidence: 0.850555

a2d31e85-9fdc-4c96-9af0-a60509a22c32
00:06:00.340 --> 00:06:06.584
If you are given 2 spots and
we want to select just one of

NOTE Confidence: 0.850555

d6301959-5b7a-4471-89cd-d7e4ddaed087
00:06:06.584 --> 00:06:11.044
these spots at anytime, so for
selecting among two combination,

NOTE Confidence: 0.850555

df56130a-1073-430b-8fcc-1628f2e10bfc
00:06:11.044 --> 00:06:13.274
we need just one bit.

NOTE Confidence: 0.9057711

051cb4e6-d2f9-4f8d-b66e-4803ad90c09b
00:06:13.970 --> 00:06:16.306
So if it is zero, we select the

NOTE Confidence: 0.87583905

9d82614f-0a01-4191-99e5-a6fb8586271c
00:06:16.306 --> 00:06:22.360
first spot. And the other spot
is zero. And if it is one, we

NOTE Confidence: 0.87583905

3984a9f9-1acb-4cdd-9951-985175a74947
00:06:22.360 --> 00:06:27.495
select the second spot and the
other I mean the first spot is 0

NOTE Confidence: 0.87583905

2b0d0f89-c015-447c-84c2-694ca8f3e2ad
00:06:27.495 --> 00:06:32.630
so as we already knew by one
binary variable, or one bit, we

NOTE Confidence: 0.87583905

82a256c8-5ba8-47a2-ae00-7418f606ddd4
00:06:32.630 --> 00:06:37.765
can create two combinations 2 to
the power of 1 which is 2.

NOTE Confidence: 0.86108375

5f171ae4-1fa3-4699-9fa7-1080945fe3e0
00:06:38.670 --> 00:06:43.895
So basically this is the most
simplest decoder, one within the

NOTE Confidence: 0.86108375

71051815-fe52-4d33-8acc-b9b136b60620
00:06:43.895 --> 00:06:48.645
input and two outputs based on
the value of the.

NOTE Confidence: 0.7552869

51240e5b-69a7-467a-87e3-c0cf50279977
00:06:49.250 --> 00:06:51.995
Input we want to select
one of the outputs.

NOTE Confidence: 0.8414526

86b41d37-acf1-479a-abec-557b3e5f85b3
00:06:53.290 --> 00:06:56.887
So if you're gonna design is
a logic circuit with one

NOTE Confidence: 0.8414526

bcc2529d-9890-41c0-984f-8bdf28a501cb
00:06:56.887 --> 00:07:00.484
input variable and two output
variables. So we need a

NOTE Confidence: 0.8414526

a5fe3307-f730-45f0-be4a-a6aabaa5e815
00:07:00.484 --> 00:07:01.138
truth table.

NOTE Confidence: 0.80875427

b8fed96e-6d8e-4a55-a2a9-8f232beaea5d
00:07:02.480 --> 00:07:07.232
Uh, with this is called a
decoder. One input 2 to the

NOTE Confidence: 0.80875427

0f123e05-0a45-4012-96ff-7349ea831248
00:07:07.232 --> 00:07:11.192
power of one or two outputs, or
1 two decoder.

NOTE Confidence: 0.7970517

4eb78fc9-08d5-4319-8fa4-dd515dbf0591
00:07:12.580 --> 00:07:18.028
So one input variable and two
outputs whenever X is zero, we

NOTE Confidence: 0.7970517

156ce41a-f746-489f-8395-97663bdf19c6
00:07:18.028 --> 00:07:24.384
makes D0 1 and D1 0 just one of
them is 1 and the other is 0

NOTE Confidence: 0.7970517

4ffdd557-b75f-48d2-8ecf-1ae82bac1b0f
00:07:24.384 --> 00:07:29.378
whenever X is 1 means that
selecting the second output and.

NOTE Confidence: 0.8335864

b6be1fc4-edc7-4e8b-b06a-4b776b3541a5
00:07:30.800 --> 00:07:32.430
Putting the zero in first.

NOTE Confidence: 0.88737565

95a1e526-616e-4bfa-b839-9f6be1fb7ce9
00:07:33.410 --> 00:07:38.116
So as you can see here, at
anytime, only one spot in the

NOTE Confidence: 0.88737565

4b0b1c22-4de8-4fce-a596-55566f57f32a
00:07:38.116 --> 00:07:39.202
outputs becomes one.

NOTE Confidence: 0.922014

0657cb4e-09e8-4516-b5f6-0f0cc4ae56d3
00:07:42.800 --> 00:07:44.888
And if you just.

NOTE Confidence: 0.8403765

e0208a87-48a3-4360-bf5f-e3f4fb507226
00:07:46.960 --> 00:07:51.159
As in the designs that we
already have it, so you have to

NOTE Confidence: 0.8403765

e46c6949-0256-4e31-bdbb-35bc4bd50028
00:07:51.159 --> 00:07:55.681
see what entries makes the output
one and then write it as a sum

NOTE Confidence: 0.8403765

d7756dc6-4cfb-406c-9d2f-7b0785eb998d
00:07:55.681 --> 00:07:59.557
of minterms or right. Look at
those entries. That makes it 0

NOTE Confidence: 0.8403765

6c5b0146-a9d1-4597-8d28-f13e10ec452e
00:07:59.557 --> 00:08:01.818
and write it as a product of

NOTE Confidence: 0.82849085

799ffe66-a93c-4572-b336-c145af4f9d9c
00:08:01.818 --> 00:08:04.220
sum. But if you write it as a

NOTE Confidence: 0.80343556

5cdd983b-edd8-4a05-9e3b-5a68bdee030b
00:08:04.220 --> 00:08:10.387
sum of minterms. D0 only makes
make comes one when the X is 0,

NOTE Confidence: 0.80343556

76076d4f-ace7-4fb1-a9c6-c4039eabe903
00:08:10.387 --> 00:08:13.516
D0 is equal to minterm 0

NOTE Confidence: 0.79654366

4cdbae96-61d4-4832-8133-34a934e446a4
00:08:13.516 --> 00:08:20.921
. And D1 makes becomes
one whenever we have X1, so D1

NOTE Confidence: 0.79654366

bc07fa81-cbaa-4ad0-8d52-d2c428f4a000
00:08:20.921 --> 00:08:23.576
is equal to minterm one.

NOTE Confidence: 0.8153675

af32b5f4-450e-4166-8b6a-721f95c46a06
00:08:25.500 --> 00:08:28.614
So just normal Boolean
function as a sum of

NOTE Confidence: 0.8153675

62fe25c4-0be6-44d2-9c1c-d5383569d6e4
00:08:28.614 --> 00:08:31.728
minterms for those minterms.
That makes the output one.

NOTE Confidence: 0.84107447

6213aca3-6a0b-4b57-944a-c951d24638ea
00:08:33.520 --> 00:08:37.636
So the interesting or the nice
property of the decoder is that

NOTE Confidence: 0.84107447

f615281c-8987-4ce1-866f-6330f5297064
00:08:37.636 --> 00:08:41.752
output is exactly equal to the
minterm, and so the output for

NOTE Confidence: 0.84107447

485dc91f-2630-421d-9069-8f8a5df768ff
00:08:41.752 --> 00:08:43.124
D0 is midterm 0.

NOTE Confidence: 0.7653278

b8bb4efa-0526-4f98-afe4-494c82649078
00:08:43.800 --> 00:08:46.416
Output for D1 is minterm one.

NOTE Confidence: 0.87121004

f9cc6711-675c-44a8-a966-8b763958d250
00:08:47.770 --> 00:08:50.518
And here's the design, so X.

NOTE Confidence: 0.79614705

9828ed55-94f7-4370-94d1-67fed23aa9d8
00:08:51.420 --> 00:08:58.485
If it is 0 not it becomes one,
so D0 becomes one and the

NOTE Confidence: 0.79614705

4d63cc2a-c28a-4346-a62b-f9525e161354
00:08:58.485 --> 00:09:02.253
one is zero. An IF X is a

NOTE Confidence: 0.81810737

b19cd335-3162-4fa9-8bed-051acab01d03
00:09:02.253 --> 00:09:06.594
one. That's becomes a
0, so D0 becomes

NOTE Confidence: 0.81810737

efecc7a1-cbe7-41c5-a91c-8f3eb97f560b
00:09:06.594 --> 00:09:08.026
zero and D1 becomes one.

NOTE Confidence: 0.7596667

e56b4385-b648-415c-9a19-33a5db9d24be
00:09:09.480 --> 00:09:13.880
Just selecting it in two spots
by just one not gate.

NOTE Confidence: 0.79970473

0ea2eb2e-7637-444d-ad6c-ea4122479bc0
00:09:15.780 --> 00:09:22.332
So let's expand the decoder and
now the task is selecting one of

NOTE Confidence: 0.79970473

af9f96ea-f32d-4553-a87d-eee3270cf12a
00:09:22.332 --> 00:09:24.852
the outputs between 4 spots.

NOTE Confidence: 0.8564577

4599ab49-a96a-4578-a3f3-fc145a5c6c75
00:09:25.690 --> 00:09:30.357
So we have four outputs at
anytime. One of them is going to

NOTE Confidence: 0.8564577

207d5811-7c92-4fdb-9e07-361caca35c9b
00:09:30.357 --> 00:09:33.947
be select and become one, all
the others becomes 0.

NOTE Confidence: 0.83772606

73fb8c78-e7aa-4e16-aa75-b8676dbce68c
00:09:34.700 --> 00:09:39.627
So for selecting between 4
spots, four is 2 to the power of

NOTE Confidence: 0.83772606

73846159-3757-4996-93c0-7921179230d5
00:09:39.627 --> 00:09:44.933
2, so we need to it's so it
becomes a decoder 2 by 4.

NOTE Confidence: 0.8346028

9941079d-a6d4-4f85-b314-cd3064e991b9
00:09:46.120 --> 00:09:51.440
So we need 2 bits and based on
the variation of inputs. If it

NOTE Confidence: 0.8346028

f4576058-8465-4e70-8aed-7c064f90fc5f
00:09:51.440 --> 00:09:53.340
is 00 enabled, the 1st.

NOTE Confidence: 0.8289577

4d0e9634-8a00-49f0-a0cc-3cb616bcffd6
00:09:54.120 --> 00:09:56.928
output and all the other outputs are 0.

NOTE Confidence: 0.9172474

c7688d15-1605-4fa7-9e37-d701fe3a6b8f
00:09:58.580 --> 00:10:00.040
If it is 01.

NOTE Confidence: 0.8328584

3e855b06-5269-4844-bcad-282796652ee9
00:10:00.250 --> 00:10:05.020
Meaning that the binary number 01
select the second spot.

NOTE Confidence: 0.8865695

4f854def-c55a-41a5-93a2-823901c7ad7b
00:10:05.660 --> 00:10:07.529
And all the other spots
are zero.

NOTE Confidence: 0.8204615

33f90c58-9a9f-48c5-b346-557334f37053
00:10:08.850 --> 00:10:11.418
10 meaning with binary value 2.

NOTE Confidence: 0.81329644

4aad74d5-505e-4864-b139-7e9c66e88f0c
00:10:12.120 --> 00:10:17.100
We make the this, uh, the
third output or two one and

NOTE Confidence: 0.81329644

45347cff-0c31-4e81-ac2b-2969ce028bf0
00:10:17.100 --> 00:10:21.665
all the other outputs are zero and
Lastly both the inputs are

NOTE Confidence: 0.81329644

690b6307-01d7-488b-9ff7-1db4520427c6
00:10:21.665 --> 00:10:26.645
one. We make the last output
one and all the other output

NOTE Confidence: 0.81329644

68ec1466-69eb-42c6-82a9-3bc5061f023e
00:10:26.645 --> 00:10:27.060
0.

NOTE Confidence: 0.85114425

e91dbb81-a1d1-4b63-beaa-2c09aeead1f2
00:10:28.590 --> 00:10:33.798
So you can see that at anytime
we have one hot vector in the

NOTE Confidence: 0.85114425

e346d308-a710-497b-92fa-11f6508a38e9
00:10:33.798 --> 00:10:38.262
output and based on the binary
number, so this binary number in

NOTE Confidence: 0.85114425

26da86b5-9c88-4728-b221-c0cdef9160c7
00:10:38.262 --> 00:10:43.098
the decoders can be said. This
is a binary address. So for the

NOTE Confidence: 0.85114425

93caa22c-0c53-48ac-947a-dbdd92edfae9
00:10:43.098 --> 00:10:47.562
address 1 one this I mean
location is selected and all the

NOTE Confidence: 0.85114425

8e2b4c20-ad09-47f5-a2b5-6bbd0689d94b
00:10:47.562 --> 00:10:49.422
other location is not selected.

NOTE Confidence: 0.8645538

4a557a2d-4c5a-4d13-b90e-809b103be1d0
00:10:51.060 --> 00:10:56.780
So if you are going to design
this, this is a logic circuit

NOTE Confidence: 0.8645538

a36418b3-8ed6-4998-bf4c-3e64b2ad9db7
00:10:56.780 --> 00:11:01.620
with two input variables and
four output variables. So if we.

NOTE Confidence: 0.8527837

8f1f810e-6b06-45c0-a612-2f0da9cde173
00:11:02.490 --> 00:11:04.812
From the truth table two input

NOTE Confidence: 0.8745266

59b56a0e-c247-47d6-9d29-c5638b522b48
00:11:04.812 --> 00:11:07.530
variables. Four variables.

NOTE Confidence: 0.87665254

7004a02e-a793-4b3f-9757-7d0952610c04
00:11:08.380 --> 00:11:12.857
And we have to see when the
output variables becomes one.

NOTE Confidence: 0.7523628

cafbabdb-1aa7-4e73-bd1d-ba17fdd74f45
00:11:13.600 --> 00:11:18.761
But the D0, whenever the input
is 0 0, becomes one and all the

NOTE Confidence: 0.7523628

c704804c-09c7-4416-b90b-7b4c835eac7a
00:11:18.761 --> 00:11:21.540
other cases is a D0 is 0.

NOTE Confidence: 0.8694445

26ac75f3-28ea-4aa8-ae83-85763819883d
00:11:22.840 --> 00:11:28.090
But the D1 only when the input
is 0 1 becomes one and all the

NOTE Confidence: 0.8694445

63df5594-e966-45d8-ac63-b92a428fd75e
00:11:28.090 --> 00:11:30.340
other cases become zero and etc.

NOTE Confidence: 0.875341

00c863b2-549c-42dd-b80d-2a8ccbd8af2b
00:11:31.320 --> 00:11:32.860
Again for the D3.

NOTE Confidence: 0.8232862

31b75668-f943-4f7b-9234-26692991322c
00:11:33.650 --> 00:11:37.750
Only if the inputs are 1 1,
meaning that the binary

NOTE Confidence: 0.8232862

6b8ff109-9c23-4857-9ea6-840d51547b0e
00:11:37.750 --> 00:11:41.440
number binary addresses 3 D3,
 becomes one. All the

NOTE Confidence: 0.8232862

eb8eaa8d-5842-495e-bcc8-29fbf25a2436
00:11:41.440 --> 00:11:42.260
other outputs are 0.

NOTE Confidence: 0.84178215

bec6e0bf-51eb-4d7b-a6fd-3bdadc7b422a
00:11:44.150 --> 00:11:48.934
So and then we design the logic
circuit for each of the outputs.

NOTE Confidence: 0.71751434

3b383b9f-a94f-42d8-bb1b-32a4405d1caf
00:11:50.290 --> 00:11:54.028
And here is the design. So X

NOTE Confidence: 0.67258334

1a553e27-7246-4787-8e67-4a40f237f792
00:11:54.028 --> 00:11:56.560
x' Y. Y bar?

NOTE Confidence: 0.6686908

79629ec8-0a20-4808-88e8-fabff15481e1
00:11:57.310 --> 00:12:01.927
E 0 is equal to x'
Y' so xbar.

NOTE Confidence: 0.1278705

0c03d8b6-583c-4665-937e-597f802c9bb8
00:12:03.560 --> 00:12:04.400
Y bar

NOTE Confidence: 0.86448383

34ad44e7-bbaa-43cf-8b82-4ec8f1657919
00:12:06.430 --> 00:12:07.310
and with each other.

NOTE Confidence: 0.7961021

a0dc6f4e-e61d-48a7-a6c9-67d8ef6d225c
00:12:08.660 --> 00:12:14.778
And the same for the other outputs.
So you can see that the decoders

NOTE Confidence: 0.7961021

27d5a5e4-6a14-4037-b695-83698d044d69
00:12:14.778 --> 00:12:17.400
or actually voice or the logic

NOTE Confidence: 0.58588004

5ce41da1-3522-41eb-b87c-62d08512845a
00:12:17.400 --> 00:12:20.720
circuit that. Creates minterms.

NOTE Confidence: 0.792115

94bc6e6b-d68e-4559-a75a-bd835aa5953d
00:12:21.350 --> 00:12:28.775
So D3 is XY to minterm 3 D2
is Minterm two, D1 is

NOTE Confidence: 0.792115

fc068806-06fc-42d2-9e3f-197897ef9176
00:12:28.775 --> 00:12:34.715
minterm one. So whenever we need
to produce the minterm we can

NOTE Confidence: 0.792115

56e237c2-8cf8-438c-8c69-a829cd63dd1e
00:12:34.715 --> 00:12:36.200
reuse the decoders.

NOTE Confidence: 0.8264402

95d3e0d2-ab01-4cf5-891b-178f23da2d35
00:12:39.480 --> 00:12:44.576
for the next decoder. We can have
the decoder three by 2 to the

NOTE Confidence: 0.8264402

a90a80b9-9b9a-4e14-9c4e-ec03945e7f75
00:12:44.576 --> 00:12:46.760
power three or three by 8.

NOTE Confidence: 0.82808274

1d6eae60-2787-48a4-8a3f-c28b93164472
00:12:47.540 --> 00:12:53.338
So this is the table from the
book. So for the decoder with

NOTE Confidence: 0.82808274

45eb9a20-b366-4a06-896b-252198b9c37f
00:12:53.338 --> 00:12:58.690
three input we can select from
among the 8 outputs at each time

NOTE Confidence: 0.82808274

8970765e-f55d-4d9e-b857-0e4e01b79cba
00:12:58.690 --> 00:13:04.488
one of them. So whenever this is
the input address is 000 is

NOTE Confidence: 0.82808274

e791ad88-1b0b-4dea-814c-708824fa522b
00:13:04.488 --> 00:13:09.840
select, the first output D0
and all the other outputs are.

NOTE Confidence: 0.90883964

a94f94b9-d731-4f8d-b3f6-ed04116df273
00:13:10.500 --> 00:13:10.980
0.

NOTE Confidence: 0.82974684

54460c2f-2774-4bc2-a614-7046ba696adb
00:13:12.280 --> 00:13:17.675
Whenever the input is the binary
number one, we select D1 and all

NOTE Confidence: 0.82974684

1731e8d2-5bec-486d-b7fb-7c4a341b6679
00:13:17.675 --> 00:13:19.750
the other outputs are zero.

NOTE Confidence: 0.8370873

8917550d-8e6c-435f-9035-d8ad89bbc2ac
00:13:21.420 --> 00:13:26.051
Up until here, whenever the
input address or the number is

NOTE Confidence: 0.8370873

c12c55e2-8da6-4b6f-9e7c-cd80d1f70fac
00:13:26.051 --> 00:13:31.524
7, he just selected D7 and all
the other outputs are zero, and

NOTE Confidence: 0.8370873

1ee68dc4-63fb-41b3-9052-3ab00c3333d2
00:13:31.524 --> 00:13:36.576
then we just designed the logic
circuit for each of the outputs

NOTE Confidence: 0.8370873

f3589307-6c20-4fc9-b749-7572b6cbae46
00:13:36.576 --> 00:13:39.102
for D0 D1 D2. Up until D7.

NOTE Confidence: 0.87379336

5a2c57ad-ef53-4436-8648-f4cd662317b1
00:13:40.290 --> 00:13:44.697
And the design is in the book in
the for the Figure 4.19.

NOTE Confidence: 0.89259297

24861704-13d6-4f20-abad-62a0aaa8792b
00:13:45.500 --> 00:13:49.465
And again, as you can see here,
this is exactly as producing the

NOTE Confidence: 0.6831624

6561465f-2fe0-426e-a22e-6768a9a2ccf6
00:13:49.465 --> 00:13:53.762
minterms. So the D0 is
X'. y Bar Z bar,

NOTE Confidence: 0.6831624

4eb1b1cc-e84a-49cf-a0fc-a55fa92de0a2
00:13:53.762 --> 00:13:55.907
which is the term 0?

NOTE Confidence: 0.81099033

5578d089-6a16-428a-9316-4bc488eb4d9b
00:13:57.130 --> 00:14:03.934
for instance D 6 is the minterm 6,
which is XYZ Bar 110.

NOTE Confidence: 0.79156953

5dff378f-a8c3-4901-b2cf-404bfe9305c9
00:14:09.060 --> 00:14:14.397
we can build a higher
decoders for instance 4.

NOTE Confidence: 0.8051653

69d67e0f-361f-4e22-90ca-4b504d423004
00:14:15.490 --> 00:14:22.015
By two to the power of 4 or 16
coders or decoder. 4 by 16.

NOTE Confidence: 0.8051653

f4f7c097-dced-49f6-af83-e8866e80ff48
00:14:22.015 --> 00:14:25.060
Decoder 5 by 32. Decoder an etc.

NOTE Confidence: 0.9401825

3d197db3-cabd-4856-9723-eb31094d5f2e
00:14:26.050 --> 00:14:27.169
So in general.

NOTE Confidence: 0.7738754

8a932354-b574-42d3-aa53-51ddad540374
00:14:27.930 --> 00:14:31.857
You can have a decoder,
n input and two to the

NOTE Confidence: 0.7738754

1f49197a-0ea3-41e5-ac2f-3347ca7f707d
00:14:31.857 --> 00:14:36.141
power of  n output so n by
two to the power of n.

NOTE Confidence: 0.89835095

913bfa4b-62b0-4b18-bce2-2c9a3a90e46e
00:14:40.400 --> 00:14:41.728
Any questions so far?

NOTE Confidence: 0.9301689

9263c5fd-ed27-45ef-a109-9aae17731b38
00:14:52.090 --> 00:14:53.020
No questions.

NOTE Confidence: 0.8445104

24aa6e81-4078-4d30-a73b-d74e3dd65fb0
00:14:54.530 --> 00:14:59.843
So an interesting problem with
designing the decoder is that is

NOTE Confidence: 0.8445104

d98262ae-198e-4429-a5e0-c330d4227f80
00:14:59.843 --> 00:15:05.156
it possible to reuse a smaller
decoders to build the larger

NOTE Confidence: 0.8445104

4e0f4685-16d3-44e6-8b83-f05cdbdf8d6b
00:15:05.156 --> 00:15:09.020
decoders? This is the
interesting problem. All the

NOTE Confidence: 0.8445104

2d2c88c7-06b9-4a2c-a084-97ee324a9857
00:15:09.020 --> 00:15:13.850
logic circuits, for instance, as
I said, reusing smaller units

NOTE Confidence: 0.8445104

a30c2c81-d89e-4151-9ef0-84c4d6c7e691
00:15:13.850 --> 00:15:15.782
for building larger units.

NOTE Confidence: 0.8524111

ad666fa9-18e6-48af-a53c-93a7ea3e0719
00:15:16.720 --> 00:15:22.011
So for instance, if you are
going to design the two by four

NOTE Confidence: 0.8524111

2c74bad1-5548-4ccc-80ce-43b4a950df95
00:15:22.011 --> 00:15:26.488
decoder and we already bought
the one by two decoders from

NOTE Confidence: 0.8524111

eb39d9f5-92cf-481e-a015-de5fe2863926
00:15:26.488 --> 00:15:32.186
the market and we attach them
in a way to design the two by

NOTE Confidence: 0.8524111

b8c5f5f8-c1a0-4297-a848-8ec09f0f8202
00:15:32.186 --> 00:15:33.000
four decoders.

NOTE Confidence: 0.86400783

ed42bb61-5a57-4742-b186-7a9fe485dc1a
00:15:34.080 --> 00:15:39.932
Answer is yes, and The thing is
this is very easy to think about

NOTE Confidence: 0.8577601

1aab4012-de37-4cf2-afbc-e933c4e73fe0
00:15:39.932 --> 00:15:45.821
that 'cause. The decoder 2 by 4
has two inputs and four outputs

NOTE Confidence: 0.8577601

23291541-7213-434a-bf82-e0f3ff88d19f
00:15:45.821 --> 00:15:50.904
to. If you have one by two
decoders. So you can, you could

NOTE Confidence: 0.8577601

17d8fa9e-8f76-4d99-80cc-768c96b3754e
00:15:50.904 --> 00:15:55.205
say that so I can have two, one
by two decoders.

NOTE Confidence: 0.84729743

3e85e839-5b17-4c76-8fb0-09280e8fff48
00:15:56.950 --> 00:16:01.080
The first decoder actually is
responsible for the first 2.

NOTE Confidence: 0.8186722

7655fb71-91fd-4aa3-a6a2-882d3fbe0fb6
00:16:02.000 --> 00:16:05.960
Spots the second decoder is
responsible for the 2nd two

NOTE Confidence: 0.8186722

707fafe1-2839-4052-a1dd-2462d0dcb8eb
00:16:05.960 --> 00:16:10.316
spots to in general in. In total
you have four outputs.

NOTE Confidence: 0.8566687

837810ba-2d62-4ee8-a08f-d1c6ba9ecfcb
00:16:11.290 --> 00:16:16.570
And then the . The
important part is that the two

NOTE Confidence: 0.8566687

fc053847-715e-4407-914c-e3a77368c204
00:16:16.570 --> 00:16:19.930
input bits goes in what way the

NOTE Confidence: 0.83131325

66825ed0-30fa-445c-aeb1-ea5f8cedad1a
00:16:19.930 --> 00:16:23.687
decoders? So you could say
that the first bit goes to the

NOTE Confidence: 0.83131325

baeb3008-ffa4-4cdc-aacb-00908226b957
00:16:23.687 --> 00:16:26.157
first decoder and the second
bit goes to the second.

NOTE Confidence: 0.83882016

d1f97345-602a-4860-bc0b-4b5aa3f5c762
00:16:28.450 --> 00:16:33.778
Unfortunately, if you tried this
design to get the two by four

NOTE Confidence: 0.8978231

49729b43-83ac-4be0-b8e0-af4fbf7d9378
00:16:33.778 --> 00:16:35.732
decoder. It doesn't work, and

NOTE Confidence: 0.8133006

119771ea-85ed-4fb8-97f8-160e3d422682
00:16:35.732 --> 00:16:40.130
the reason is this.
If you input a 0 0.

NOTE Confidence: 0.8206679

8c956b4b-3d4b-48d5-abcc-cc6e71450d70
00:16:41.250 --> 00:16:45.408
So zero goes to the first
decoder and the first decoder

NOTE Confidence: 0.8206679

470d7bed-16d0-4f14-abc3-405e101894cb
00:16:45.408 --> 00:16:49.566
based on the value of 0 enables
the the zero output.

NOTE Confidence: 0.8930963

5e68e4ce-3320-4735-bc27-03c9c202abe4
00:16:50.980 --> 00:16:51.570
Yes.

NOTE Confidence: 0.85397106

11ed5e4d-52c4-40a2-9660-f875f99b3312
00:16:53.560 --> 00:16:58.037
Also, this zero in the second
both the second decoder and

NOTE Confidence: 0.85397106

841765f6-278b-4d78-8243-166b49bd6e31
00:16:58.037 --> 00:17:00.479
makes the DO of the second

NOTE Confidence: 0.87021387

05b08475-5053-46d6-b49f-7cb3a5a76cc3
00:17:00.479 --> 00:17:05.770
decoder one. So in the output you
don't have one hot vector.

NOTE Confidence: 0.87021387

a2e95784-7ea4-47a0-89ca-12de717b6477
00:17:05.770 --> 00:17:09.410
Actually two spots are one and
this is not correct.

NOTE Confidence: 0.84295

46a4e30f-2236-49e6-aca9-8bc3dc5ec526
00:17:11.210 --> 00:17:16.778
As another instance here, if you
input 01, so the first decoder

NOTE Confidence: 0.84295

0dcb9419-7aff-46bb-9a96-9eaa29a71525
00:17:16.778 --> 00:17:22.346
selects the D1 and the second
decoder selects the D2. I mean

NOTE Confidence: 0.84295

54d988ab-341b-45b6-81d4-a527f6df57b4
00:17:22.346 --> 00:17:25.130
the first output of itself, D0,

NOTE Confidence: 0.8502088

74d702af-a663-442f-91f1-11fe3df2353c
00:17:25.130 --> 00:17:31.424
which is. D2 of the
final decoder 2 by 4 decoder

NOTE Confidence: 0.8502088

6c7db146-380e-45e5-b3ab-1df55cf96bdf
00:17:31.424 --> 00:17:35.764
again in the output. You don't
have one hot vector.

NOTE Confidence: 0.94292086

1b89ad8b-7e9b-41f5-b984-840dfefcfc2c
00:17:37.230 --> 00:17:39.820
Though. What is the solution?

NOTE Confidence: 0.8578179

3a91cf6d-1169-4996-b259-9729db31ad07
00:17:41.440 --> 00:17:45.480
Any of you can mean propose a
solution for this.

NOTE Confidence: 0.912032

bbe5063d-d0e6-4956-bcf7-a0cf7e46ce39
00:17:50.110 --> 00:17:51.620
How can we solve this?

NOTE Confidence: 0.82728213

ffa51a9c-dfc3-40de-9308-8e66f34e9492
00:17:52.510 --> 00:17:57.508
To make the one hot in the re
using the one by two decoders.

NOTE Confidence: 0.7089453

952355c4-acca-43af-9a91-60c4383e1e03
00:18:05.790 --> 00:18:11.510
Marco says connect first decoder
to 2nd decoder.

NOTE Confidence: 0.86104465

f1482af9-9c86-491d-82a1-849fb349f064
00:18:13.420 --> 00:18:15.108
How come because this?

NOTE Confidence: 0.818315

faa419c5-5524-4751-b773-5c27844d3f21
00:18:16.740 --> 00:18:21.019
The one thing is how this is
possible? Because the second,

NOTE Confidence: 0.818315

0cb5762f-84d1-4459-9abc-8be87b709150
00:18:21.019 --> 00:18:23.353
because it has only one input.

NOTE Confidence: 0.8110914

1915a680-5f81-476d-932a-0cc3086ba669
00:18:24.300 --> 00:18:28.260
And the first decoder has two
outputs. So if you wanted to

NOTE Confidence: 0.8110914

abfd8c2d-8860-48a4-9b30-4cdca3f69c3f
00:18:28.260 --> 00:18:31.560
connect the first with the
second one, it's not possible.

NOTE Confidence: 0.8110914

467f84bc-a5a4-4088-ae3f-ad6b91036f94
00:18:31.560 --> 00:18:36.180
The thing is, how do you connect
two output to one input, so you

NOTE Confidence: 0.8110914

23a0fe18-18af-4248-a0d5-db6d3ced0695
00:18:36.180 --> 00:18:40.470
have to come up with the logic
circuit with the D0 and D1

NOTE Confidence: 0.8110914

8bb6e3d8-f74f-4e11-97a8-e9a0beecbd87
00:18:40.470 --> 00:18:43.440
connected to this one, and
another thing is that.

NOTE Confidence: 0.79291093

d5a40965-2df9-4421-89e3-58a89a7d5f3f
00:18:44.260 --> 00:18:48.148
If you connect the first decoder
with the second one, finally you

NOTE Confidence: 0.76221114

cc879972-c3b0-4d05-8ed8-4b35fb59caa8
00:18:48.148 --> 00:18:52.224
have two outputs. But we are
going to build a decoder

NOTE Confidence: 0.76221114

6ad3cdca-78f3-4a14-a11f-35a66ebcff46
00:18:52.224 --> 00:18:53.496
that has four outputs.

NOTE Confidence: 0.85910475

6f91a194-9802-4d64-9c65-64b6e3e82d91
00:18:56.300 --> 00:18:57.608
Solution is this.

NOTE Confidence: 0.8067518

81bc2f19-af40-461f-a5e9-4a2a226c0c46
00:18:59.160 --> 00:19:04.077
Building a decoder that has a
has an enable input but

NOTE Confidence: 0.8067518

db9d1f88-4221-4594-9222-e2ff5a76b65b
00:19:04.077 --> 00:19:08.994
enabled, meaning that we want
to build the decoder that we

NOTE Confidence: 0.8067518

deb4c218-414c-45c3-b5a4-32b2b8adb6df
00:19:08.994 --> 00:19:13.911
can make it. We turn it on,
meaning that working properly

NOTE Confidence: 0.8067518

46d79b6c-3d01-4c30-9237-dc3a33b354ad
00:19:13.911 --> 00:19:20.169
as as we expect that, or we
can turn off decoder and as a

NOTE Confidence: 0.8067518

f219beda-ca4b-4129-9bb0-ec132e98e129
00:19:20.169 --> 00:19:24.639
result all the outputs of the
decoder becomes 0, meaning

NOTE Confidence: 0.8067518

60288957-c7ba-4982-8a8a-523153e47844
00:19:24.639 --> 00:19:27.321
that the decoder is turned
off.

NOTE Confidence: 0.8605838

de363b6c-1d3d-4f8c-b506-a8b49107c889
00:19:28.520 --> 00:19:33.170
So let's see what we mean
by decoder. With additional

NOTE Confidence: 0.8605838

37fa9579-54b5-4799-b754-f707d95c0ab1
00:19:33.170 --> 00:19:34.100
enable input.

NOTE Confidence: 0.86992633

b4f1ff65-410b-4111-86fe-28d58fda175f
00:19:35.670 --> 00:19:39.870
So here is the design. I'm
saying that you already have one

NOTE Confidence: 0.86992633

388b3129-60ca-4737-a41e-0d46f6d3c35e
00:19:39.870 --> 00:19:44.770
by two decoder with one bit in
the input and two in the output.

NOTE Confidence: 0.8804832

aff13e32-4418-4dd2-bc40-8513392a117c
00:19:45.360 --> 00:19:49.715
But I wanna add add additional
input just to say that I'm going

NOTE Confidence: 0.8804832

1113c11e-1b36-47a0-9d88-ce29e7965635
00:19:49.715 --> 00:19:54.740
to turn it on or turn it off if
it is turning on. This worked

NOTE Confidence: 0.8804832

b2d4520e-9e3f-4f55-acaf-d1c9a6a88f90
00:19:54.740 --> 00:19:59.095
like before, but if it is turned off
all the outputs regardless of

NOTE Confidence: 0.8804832

90559ef2-e254-4b17-ad98-646d9d5e1748
00:19:59.095 --> 00:20:00.100
the input going.

NOTE Confidence: 0.7537156

5e9656d4-8018-4f2e-b2e6-dfa62ae0882c
00:20:00.200 --> 00:20:02.828
0 meaning that decoder is off.

NOTE Confidence: 0.8914217

17415fc1-30e9-48ca-8849-cb41cd89e94a
00:20:04.280 --> 00:20:09.128
So if you are going to design
this, we have two inputs.

NOTE Confidence: 0.82614416

28d14e6e-435c-4ae6-8fa4-77c38d3ba28a
00:20:10.110 --> 00:20:13.750
And two outputs. So this
is a new decoder expanded

NOTE Confidence: 0.82614416

4c5013de-094c-436a-a1ed-ce10dde19938
00:20:13.750 --> 00:20:17.754
the code. I mean kind of
new version of the decoder

NOTE Confidence: 0.82614416

f9b60be5-e8b6-4d20-8c30-be1c6c8ff49f
00:20:17.754 --> 00:20:18.846
with additional enabling.

NOTE Confidence: 0.84355634

abe76ff4-412b-447f-aad4-61faa502fc6b
00:20:20.820 --> 00:20:25.149
So if you go so again as an
example, if is is 0.

NOTE Confidence: 0.7302019

c608027c-eabe-467c-b2bc-32a3de2d1f22
00:20:26.350 --> 00:20:30.420
Uh, all the outputs are zero,
meaning that decoder is turned

NOTE Confidence: 0.7302019

a0d877b6-083c-4302-b849-d8a094342aa0
00:20:30.420 --> 00:20:33.750
off regardless of the binary
number in the input.

NOTE Confidence: 0.8241614

698f5475-3334-4f9d-9d77-ce04558919d3
00:20:34.580 --> 00:20:38.264
However, if it is enabled, it
means that it's turned on and

NOTE Confidence: 0.8241614

d67213b3-037b-45f5-bfb8-68120fe50291
00:20:38.264 --> 00:20:41.641
based on the input value we
select one of the outputs.

NOTE Confidence: 0.88799864

9f7fe775-189e-4352-99cb-f421f9818895
00:20:43.420 --> 00:20:48.074
So the truth is, we're going to
have two variables in the input,

NOTE Confidence: 0.88799864

c196a1a7-3fd3-4df1-baaa-2554ef45ff7f
00:20:48.074 --> 00:20:49.148
E an X.

NOTE Confidence: 0.8174503

c8f7ce1d-7386-4f90-af72-b76f6c85ad31
00:20:49.820 --> 00:20:53.285
And still you have two
outputs for the decoder,

NOTE Confidence: 0.8174503

5bbdcbfd-b016-4d14-b3bf-b8197f8d9b91
00:20:53.285 --> 00:20:55.980
one to an if E is 0.

NOTE Confidence: 0.85778797

0f026d71-a8ba-4429-88ca-31914f519ab2
00:20:57.710 --> 00:21:01.648
Regardless of the value of
X, the output is always 0.

NOTE Confidence: 0.85778797

44f87807-ac4e-4d1b-ab87-61fb4f74ee6b
00:21:01.648 --> 00:21:03.080
for D0 and D1.

NOTE Confidence: 0.8663294

25ed4d00-e2a8-4b07-9acd-f98825c134e0
00:21:05.320 --> 00:21:10.075
Again, here in this store he is
zero, X is 1, but because it is

NOTE Confidence: 0.8663294

2629d94d-050b-479d-968b-a1f6a6ad59b6
00:21:10.075 --> 00:21:11.977
turned off the other for both

NOTE Confidence: 0.9384114

245a8c3a-2dec-4123-9ae5-c45621eaaf30
00:21:11.977 --> 00:21:15.630
outputs are zero. However,
if it is enabled.

NOTE Confidence: 0.8657229

cc7084f1-43f0-4cda-a442-c9cf6db62dfc
00:21:16.800 --> 00:21:24.384
This on the X we can output the
0 1 and D1 0 or if X is 1 D0 is zero

NOTE Confidence: 0.8657229

5627c229-d38c-4bfe-b623-43a78fb5f9d9
00:21:24.384 --> 00:21:30.546
and D one is one so whenever it is
enabled, there's a one hot

NOTE Confidence: 0.8657229

767f03f5-4199-404a-a846-9be8ed7ac93c
00:21:30.546 --> 00:21:34.812
vector. Whenever it is not
enabled, there is all.

NOTE Confidence: 0.8096601

d1c633bb-6ddd-4d91-be68-0acb0b1eee48
00:21:35.470 --> 00:21:38.256
The vectors of the
output are zero.

NOTE Confidence: 0.8461751

e481181d-5a7c-4633-820e-01bd222f9b0a
00:21:39.680 --> 00:21:44.480
The problem with this truth
table is that we lose the nice

NOTE Confidence: 0.8461751

daadb0be-d7bc-4442-b97d-18f8b86dc8e2
00:21:44.480 --> 00:21:46.480
property of the decoder, so.

NOTE Confidence: 0.77573997

e3e3c855-2f99-434d-af67-b3abef8e5f8d
00:21:47.450 --> 00:21:52.719
Without the enabled, DO was
equal to minterm 0, D1 was

NOTE Confidence: 0.77573997

3e2c76f7-1133-4e56-9311-6a872aaf9b57
00:21:52.719 --> 00:21:57.030
equal to minterm 1 by
introducing additional input. D0

NOTE Confidence: 0.77573997

f7761f10-39c1-4b86-a86a-6ee22ce7be1b
00:21:57.030 --> 00:21:59.904
is equal to min term 2.

NOTE Confidence: 0.81445676

09c971b1-6fc9-43e7-a2cb-4cc9ce661504
00:22:01.380 --> 00:22:05.580
As you can see here. Because in
the minterm 2, D0 becomes

NOTE Confidence: 0.81445676

ece0f94b-0ab2-4c0a-83fc-66bd0023410e
00:22:05.580 --> 00:22:10.260
one and D one becomes equal to
minterm 3, because when the

NOTE Confidence: 0.81445676

e53dd0d8-6a76-4cb5-b7b9-0b6ebd8e19e6
00:22:10.260 --> 00:22:13.500
input is the minterm3 D1
gonna be 1.

NOTE Confidence: 0.8621566

7f1cb4a9-f765-424b-804e-927f6a89ffe2
00:22:14.610 --> 00:22:18.460
But this is not I mean OK. I
mean, this is not a nice

NOTE Confidence: 0.8621566

ae225d22-3a82-4c16-8752-717c0c7c2cca
00:22:18.460 --> 00:22:21.485
property so that the the
property that the EI in the

NOTE Confidence: 0.8621566

9664291e-2f7f-4cd3-bbfd-72e2f25f62ef
00:22:21.485 --> 00:22:25.060
decoders is equal to the mid
term I is very good. We want

NOTE Confidence: 0.8621566

9f827678-90f7-4d87-bafc-a37168d50dd2
00:22:25.060 --> 00:22:26.160
to keep it so.

NOTE Confidence: 0.87105757

befc7504-a023-427f-aefd-08cf78ebcd32
00:22:27.170 --> 00:22:32.054
We can still assume that we have
the normal decoder without any

NOTE Confidence: 0.9383545

1fc292dd-82ee-41d0-b571-d0d5292aaf9c
00:22:32.054 --> 00:22:33.870
enabled. And just.

NOTE Confidence: 0.8263917

da736ad4-505b-49b0-9c37-35bf24ad1a99
00:22:35.590 --> 00:22:38.824
And the final output of a normal

NOTE Confidence: 0.6072891

99994315-28a6-449c-a9ad-7ca133b22286
00:22:38.824 --> 00:22:41.100
decoder with. Enabling

NOTE Confidence: 0.8610492

fc7edba4-5fa6-44ab-a19b-66134c95c5db
00:22:42.830 --> 00:22:45.077
so basically we have the
normal decoder.

NOTE Confidence: 0.8195744

3b8ad87f-98fb-4819-822a-e151d5e4016d
00:22:46.190 --> 00:22:51.416
At the end, for the output of
the normal decoder, we make an

NOTE Confidence: 0.8195744

b95d124d-63b9-445c-bedd-fe9dd3ed1b12
00:22:51.416 --> 00:22:56.240
another and with the enable
input. If he is 0, all these

NOTE Confidence: 0.8195744

11319fb3-77f5-429f-87fd-6f64ba9bb235
00:22:56.240 --> 00:23:01.064
ants become zero, so it's kind
of diffusing all the outputs for

NOTE Confidence: 0.8195744

77b898ba-d95d-4ed5-9e5f-8a5410306510
00:23:01.064 --> 00:23:03.878
the normal decoder. If it is 1.

NOTE Confidence: 0.89153284

c0576a99-340b-4f34-8b7f-8a3904595683
00:23:05.080 --> 00:23:08.920
You have one in the and,
so it means that the and

NOTE Confidence: 0.89153284

ce968433-afce-4222-8e02-ecfa33fbfb1c
00:23:08.920 --> 00:23:10.520
look at the other inputs.

NOTE Confidence: 0.82213

adff72cb-1250-4d26-a1bb-69729f06841c
00:23:12.280 --> 00:23:13.570
Which is the normal decoder?

NOTE Confidence: 0.8388125

746f70cd-0016-4e03-9cd2-75b1760a9992
00:23:14.320 --> 00:23:18.225
So basically this is the normal
decoder without enabled and we

NOTE Confidence: 0.8388125

66f4f853-7f25-437b-a280-f5285c323cac
00:23:18.225 --> 00:23:22.485
just with the normal truth
table, so the output D0 is

NOTE Confidence: 0.8388125

85ac26aa-3238-447d-bddd-38f326c64854
00:23:22.485 --> 00:23:24.615
means minterm zero. D1 is

NOTE Confidence: 0.87269986

aee6a5cd-9f75-47af-8cbb-f5d4053532a0
00:23:24.615 --> 00:23:28.084
minterm one. But for the enabled

NOTE Confidence: 0.8579728

ce3b284e-ab11-4dd7-9327-5b0c87a22e3e
00:23:28.084 --> 00:23:32.757
input, just. Create an
and with all the parts

NOTE Confidence: 0.8579728

d5484b81-829a-4d79-aff5-e6021c4fa9b8
00:23:32.757 --> 00:23:34.281
of the normal decoder.

NOTE Confidence: 0.75221306

4c35d5f0-f661-40a8-996a-66bebef11fbe
00:23:35.310 --> 00:23:39.990
whenever E is once working fine,
whenever E is 0 all the output is

NOTE Confidence: 0.75221306

f3f7ec51-a0c4-4342-9ec0-a7bdad58511b
00:23:39.990 --> 00:23:42.870
zero regardless of out of the
normal decoder.

NOTE Confidence: 0.8574447

2b6db79a-3413-48aa-bece-778151748597
00:23:43.900 --> 00:23:47.028
So this is called a
decoder with enabled input.

NOTE Confidence: 0.8417862

e96807b5-d6d2-4107-986f-e875baa2d8d6
00:23:50.650 --> 00:23:56.122
So basically with enabled input
we just add an and with output

NOTE Confidence: 0.8417862

8c059f59-b7da-4e9e-9708-379e4c03e497
00:23:56.122 --> 00:23:57.490
of the decoder.

NOTE Confidence: 0.7907902

c28f965c-81e9-4073-886e-0358690c7b38
00:23:59.060 --> 00:24:01.321
So now we have a decoder with

NOTE Confidence: 0.8608476

26e6e808-0278-43b6-8844-2a6932c7f031
00:24:01.321 --> 00:24:07.290
enable input. So with this
design you can now build the two

NOTE Confidence: 0.8608476

37c954d1-633c-43ba-a070-ca9782cdfab8
00:24:07.290 --> 00:24:11.466
by four decoder by reusing one
by two decoders.

NOTE Confidence: 0.80445296

b1f8688b-f47a-42b9-a88d-60d76b0534aa
00:24:12.080 --> 00:24:17.327
So here, basically a here's
the design. So we we are

NOTE Confidence: 0.80445296

3d28e31c-aead-4bd6-994d-5f390c4df96c
00:24:17.327 --> 00:24:22.574
given 2 bits in the input. So
we attach the lowest

NOTE Confidence: 0.80445296

fe8c19dd-9728-46c2-85bf-26a8f060bc7f
00:24:22.574 --> 00:24:24.482
significant bit both
decoders.

NOTE Confidence: 0.9030798

3c81b260-2414-460e-a932-0f7d6cad43b9
00:24:25.670 --> 00:24:26.530
As you can see here.

NOTE Confidence: 0.8230294

9ace093e-40bd-4abd-a1d9-6cc0b4081203
00:24:28.060 --> 00:24:32.360
And then attach the highest
significant bit to the enabled

NOTE Confidence: 0.8230294

1e6b96c0-0d08-428f-b2c5-8679c05fcb5f
00:24:32.360 --> 00:24:34.080
input of the decoders.

NOTE Confidence: 0.93750095

c8ded578-22bd-44ed-9fbf-d4c252e30051
00:24:36.330 --> 00:24:40.650
So as you can see here, based on
the value of Y.

NOTE Confidence: 0.83307844

6c974a61-0d93-47d7-827a-7e16c2b1d49f
00:24:41.330 --> 00:24:44.230
We can enable one decoder.

NOTE Confidence: 0.80569583

007000c8-f837-4478-887c-fcba0f422295
00:24:44.830 --> 00:24:48.662
Or select one decoder
and deselect or turn

NOTE Confidence: 0.80569583

aaabf917-5d40-4124-ad73-cddb975af32f
00:24:48.662 --> 00:24:50.578
off the other decoder.

NOTE Confidence: 0.89371556

1d56c2a5-da4b-4473-86e0-d0357ad93e9c
00:24:51.970 --> 00:24:53.734
So let's see this in their

NOTE Confidence: 0.7934821

61abca2b-b764-4672-ac25-b050336a5614
00:24:53.734 --> 00:25:00.990
example. So imagine the the
Y is 0 not one, so

NOTE Confidence: 0.7934821

7e76a650-443c-476e-a536-7598e8cf16cc
00:25:00.990 --> 00:25:02.796
the first decoder?

NOTE Confidence: 0.9092941

bfc0fa54-34e4-4ec5-bfc4-9651ae23e2af
00:25:03.470 --> 00:25:04.580
Is active now.

NOTE Confidence: 0.86279935

da2781b7-d2c3-4ca4-8ab1-cc92fd12c59b
00:25:05.140 --> 00:25:09.820
And zero goes here. The second
decoder is not active.

NOTE Confidence: 0.831612

67c978f1-3eca-4961-af1a-8d13f7e4f903
00:25:10.810 --> 00:25:13.960
But when it's not active always the
output. Gonna be 0.

NOTE Confidence: 0.87953466

7357aec1-e8ae-4127-9b5f-e5958207ef9b
00:25:14.550 --> 00:25:17.504
So this the 2nd two spots are

NOTE Confidence: 0.85446316

f49a7c21-4ad8-4427-b99e-c181fe242956
00:25:17.504 --> 00:25:23.782
always 0. And the first two spot
depends only on the 1st decoder,

NOTE Confidence: 0.85446316

0d3f01ff-8829-43b6-a7cb-d457ce70bed4
00:25:23.782 --> 00:25:29.690
which is depending on the value
of X, if X is 0, first spot

NOTE Confidence: 0.8402523

875172db-de8d-427c-ae03-4618d598b3c2
00:25:29.690 --> 00:25:34.488
becomes one. And the second spot
0. So the first spot is 1

NOTE Confidence: 0.8329414

9c21cf91-d736-452f-ae0f-0281b83681aa
00:25:34.488 --> 00:25:38.148
zero. The second to the
spot is already 0 because

NOTE Confidence: 0.8329414

4ad9f7e0-64e1-4daa-b9c9-924ccfc882fb
00:25:38.148 --> 00:25:39.708
the decoder is turned off.

NOTE Confidence: 0.7833251

47b6f438-4bde-4d3f-98a9-5ee9f12d85f3
00:25:41.070 --> 00:25:42.950
An IF X is 1.

NOTE Confidence: 0.7717166

d66bb01b-9ae6-4ea5-86f4-0c8d467946e3
00:25:43.560 --> 00:25:46.125
Second, spot of the
first decoder becomes one.

NOTE Confidence: 0.8253452

f153d89f-5363-4b25-b505-5d80bcd4be02
00:25:47.650 --> 00:25:51.247
And the first spot becomes
zero so an almost the 2nd

NOTE Confidence: 0.8253452

125ed850-9613-43e2-a82a-7d978feace37
00:25:51.247 --> 00:25:54.517
spot for second decoder
 is always 0.

NOTE Confidence: 0.9114427

2cedf3a8-5e93-4810-aba2-b380d890a872
00:25:55.720 --> 00:25:58.960
However, if the Y is 1.

NOTE Confidence: 0.81490713

6b25ca36-aa9c-439a-9cba-cbc560b6097e
00:25:59.870 --> 00:26:03.060
First, decoder is not active.

NOTE Confidence: 0.85074943

28b80e25-8bb2-4ffd-ad0a-3507991fc6aa
00:26:03.990 --> 00:26:07.752
And the second decoder is
active. So always the first to

NOTE Confidence: 0.85074943

258de211-b905-4d5a-bb06-93e3bb55ee5a
00:26:07.752 --> 00:26:12.882
spot are going to be 0 and based
on the value of X. Now the

NOTE Confidence: 0.85074943

ad8c820c-3a49-4b64-ad4e-f41560d7032a
00:26:12.882 --> 00:26:15.960
output of the second decoder
going to be 1.

NOTE Confidence: 0.8049641

6cccfa51-bf49-41c5-84c5-d28a4e2062e3
00:26:16.690 --> 00:26:21.354
or 0 So if X is zero, a second
decoder is active.

NOTE Confidence: 0.7731424

36a3c8da-92b1-4b8f-99b9-a8dd2dcdd29f
00:26:21.930 --> 00:26:26.176
Thought EO of the second,
because it becomes one which is

NOTE Confidence: 0.7731424

c9da746a-ec64-44d8-8129-7970160fee3a
00:26:26.176 --> 00:26:29.264
the D2 of the  The two by

NOTE Confidence: 0.9014644

29ed1e38-dca7-4e1c-92e8-6fe07bfb1dbe
00:26:29.264 --> 00:26:32.780
four decoder. And if X is 1.

NOTE Confidence: 0.7754806

9163cc3a-7bae-4047-9a43-11e83957f6b5
00:26:34.270 --> 00:26:39.121
Uh, again the first decoder is
attend off always 0 second

NOTE Confidence: 0.7754806

96bada47-8dc7-44d8-9a38-d1a145bf64a4
00:26:39.121 --> 00:26:44.854
decoders active. An X is one, B1
becomes one which is equal to

NOTE Confidence: 0.7754806

09e6738b-7a07-4b25-846b-ce80d9c1ac16
00:26:44.854 --> 00:26:47.500
the D3 in the larger decoder.

NOTE Confidence: 0.9234756

6ba722f7-12d8-4b58-a1e8-a6818598f143
00:26:48.120 --> 00:26:50.432
So as you can see here, based on

NOTE Confidence: 0.8037297

da6c6210-dafb-4e97-bbbf-0830fc021f86
00:26:50.432 --> 00:26:55.958
this design. By turn off and on
the decoders you can have the

NOTE Confidence: 0.8037297

570a5a6e-ee08-4c81-b96b-334c40ae9f00
00:26:55.958 --> 00:26:58.226
one hot vector in the output.

NOTE Confidence: 0.93007946

8b9c5a52-850e-43ba-b781-4ed66e70072a
00:26:59.430 --> 00:27:01.800
And this can be a.

NOTE Confidence: 0.8098951

56a3035b-3333-40ed-a0c5-fc3ae5cbacfd
00:27:02.450 --> 00:27:08.335
2 by 4 decoder. By reusing the
one by two decoders.

NOTE Confidence: 0.86010617

a1a5c766-adb8-4ef5-be6a-09963c8a83a2
00:27:09.300 --> 00:27:14.494
So I have some questions in the
chat box. How come that isn't a

NOTE Confidence: 0.86010617

9c710875-f7f0-46b2-8087-4b207e54ab37
00:27:14.494 --> 00:27:15.607
problem for and?

NOTE Confidence: 0.7692339

5998add1-7134-425b-8b3d-93ef81f34489
00:27:16.420 --> 00:27:17.720
Input 01

NOTE Confidence: 0.9053802

47d2683f-6ae6-4250-972c-636aa91df7ba
00:27:18.890 --> 00:27:22.098
so let's go to the this
one this.

NOTE Confidence: 0.7136204

c6a9e951-f950-4ab1-9523-7b0f44841726
00:27:23.210 --> 00:27:23.770
Nicole.

NOTE Confidence: 0.88212115

4bf4efbb-4403-47ff-9508-1b4f22f42c70
00:27:25.450 --> 00:27:27.778
He was about to explain
how it works.

NOTE Confidence: 0.9262514

babd89f1-9489-41d2-b424-49da3578d9c3
00:27:30.760 --> 00:27:32.300
So is there any questions?

NOTE Confidence: 0.9361146

895aebf9-4292-4efb-b604-bac56a28bbe3
00:27:38.300 --> 00:27:39.310
No questions.

NOTE Confidence: 0.6196436

391a7bd1-6d25-41ab-8c16-d56dcd02bb4f
00:27:43.500 --> 00:27:46.200
Nonika you gotta answer yes.

NOTE Confidence: 0.89752465

569740b1-74e5-4962-9418-94b14153b8fb
00:27:54.350 --> 00:27:56.890
No problem, so let's continue.

NOTE Confidence: 0.9342774

be858275-077e-444b-8dda-811bbcc91ede
00:27:58.980 --> 00:28:01.598
One thing is that if you see.

NOTE Confidence: 0.8198186

d20a5357-ccac-4354-8138-12f086fd3761
00:28:02.370 --> 00:28:06.483
This selection between the
decoders so basically as you

NOTE Confidence: 0.8198186

4bec68df-be2f-417d-b4ed-68396056bf6a
00:28:06.483 --> 00:28:11.510
already knew, whenever we wanted
to select memory spot, we use

NOTE Confidence: 0.83020425

6ba58936-31e0-4d49-ab15-79233c9abe8c
00:28:11.510 --> 00:28:17.390
the decoders. So you can think
of decoders for any selection

NOTE Confidence: 0.83020425

d9a02cce-1824-45ce-99b8-9c52b4fd203f
00:28:17.390 --> 00:28:23.030
tasks, so whenever you are asked
to select one item among n

NOTE Confidence: 0.83020425

16c841eb-c0c7-4555-8e25-2615925ea3e4
00:28:23.030 --> 00:28:28.670
item, so only one of them, so
it's kind of applying designing

NOTE Confidence: 0.83020425

bba708c1-f672-4ab6-9584-ba3e4b0f1ec2
00:28:28.670 --> 00:28:33.840
the decoder because the decoder
only selects one output and all

NOTE Confidence: 0.83020425

6cd5c0ae-08f6-4785-a716-28c07869431f
00:28:33.840 --> 00:28:36.190
the other outputs are zero.

NOTE Confidence: 0.8726105

9371dc9e-e6bc-4372-a186-43a56c69d3ae
00:28:37.130 --> 00:28:42.102
So again, whenever you see a
selection task, just one item

NOTE Confidence: 0.8726105

f118ffd2-2ed2-4835-9a35-adecb9b322f2
00:28:42.102 --> 00:28:43.458
among an item.

NOTE Confidence: 0.80427784

71e03d2b-a9c9-4f80-8a29-e1cf71dfbb35
00:28:44.440 --> 00:28:48.785
Hence you that you have to use
some kind of decoder.

NOTE Confidence: 0.82494193

23cd492a-7296-4887-9294-7aaa248f35db
00:28:49.850 --> 00:28:56.960
for instance here for the decoder 2
by 4. You have to select one of

NOTE Confidence: 0.82494193

3c9c88ec-e2c2-4eb3-bd81-098aa9952c76
00:28:56.960 --> 00:28:59.330
the decoders, one by two

NOTE Confidence: 0.8905031

146f776e-c1cf-40ce-b842-65cd4b3ec41e
00:28:59.330 --> 00:29:03.419
decoders. Either the first one
or the second one. So we are

NOTE Confidence: 0.8905031

22aa57d3-0499-448b-a612-d339f82a38f4
00:29:03.419 --> 00:29:04.495
selecting one of them.

NOTE Confidence: 0.7623137

5d9757c4-a3da-49f6-aa84-9cb6be90eb4a
00:29:05.140 --> 00:29:10.743
As you can see here the Y bit,
either select the first one or

NOTE Confidence: 0.7623137

4a352f8f-1969-4597-8ad3-22707a3cb8ab
00:29:10.743 --> 00:29:12.898
the select is second one.

NOTE Confidence: 0.87560695

5058d09d-5c92-4714-998b-c3214572c63f
00:29:13.750 --> 00:29:19.118
So this is another decoder, so
we can simply add another

NOTE Confidence: 0.87560695

add2c7f0-dece-416d-bbc1-76dd8505468c
00:29:19.118 --> 00:29:21.070
decoder one by two.

NOTE Confidence: 0.6138799

b5c914ad-72c1-4364-a09d-ccad91a46dd7
00:29:21.680 --> 00:29:22.928
By two outputs.

NOTE Confidence: 0.8569315

b22adfda-c753-4b39-b854-afff9f8f4888
00:29:23.590 --> 00:29:28.660
And then we just input the Y
the input of this new decoder.

NOTE Confidence: 0.77518445

748221f4-fc84-4ef6-b593-713957097c93
00:29:29.340 --> 00:29:36.942
If Y is 1, E 0 becomes
if Y is 0 D0, becomes active first

NOTE Confidence: 0.78723216

ac79344f-0b5e-41e3-b44a-55a180b4b8bf
00:29:36.942 --> 00:29:42.940
decoder. If Y is 1 D1 
of this decoder becomes one.

NOTE Confidence: 0.8218469

e90720c1-9a94-4235-af5d-256b0fcfdd39
00:29:43.680 --> 00:29:45.685
So the second decoder becomes

NOTE Confidence: 0.80636126

9808cf56-74d0-46c9-90a1-d1cbf839400d
00:29:45.685 --> 00:29:50.636
active. And for this decoder, we
just put one meaning that this

NOTE Confidence: 0.80636126

27663197-3325-4720-9cc5-efd02be58514
00:29:50.636 --> 00:29:52.416
decoder must be always active.

NOTE Confidence: 0.8429315

34c655ae-fbff-4ed3-a831-9f41a9e303d2
00:29:54.570 --> 00:30:00.180
So here you only use the
decoders to design the.

NOTE Confidence: 0.88583314

419ade31-b91f-4e80-9802-e6e3edd48a01
00:30:00.250 --> 00:30:02.400
The two by four decoder.

NOTE Confidence: 0.9144773

a9f924f4-c833-49e1-865a-7eba2262019b
00:30:05.770 --> 00:30:08.695
So here is another example.
So for instance here.

NOTE Confidence: 0.8972131

7738ae6f-e416-404f-a5b8-83465d9a75ae
00:30:09.740 --> 00:30:12.344
X is zero and one is 1.

NOTE Confidence: 0.77534485

11b5aeb3-4ff7-46b1-8eb1-aea9f627b63d
00:30:13.130 --> 00:30:15.386
So X goes to both decoders.

NOTE Confidence: 0.80246997

d0501e73-c1bc-4f0c-a9e0-e79aadb18a3b
00:30:16.730 --> 00:30:20.606
Based on the why we selected
decoder, so one goes to the

NOTE Confidence: 0.80246997

09afacea-5171-4e28-96ad-f1553e650b18
00:30:20.606 --> 00:30:24.159
first decoder, this one in order
to select among these two

NOTE Confidence: 0.8563669

3e3ac19a-b917-44a9-b56b-06948f6d14f3
00:30:24.159 --> 00:30:27.670
decoders. So because X is one,

NOTE Confidence: 0.8283714

85dbb3ce-9bd9-44db-9957-096beefc9408
00:30:27.670 --> 00:30:32.914
D1 becomes. One so the second
decoder becomes Active, E 0

NOTE Confidence: 0.8283714

cd35f567-6bf6-410d-943d-c7c7e29db736
00:30:32.914 --> 00:30:38.192
becomes 0, so the first decoder
is turned off, so the output is

NOTE Confidence: 0.8449912

719af2a0-755c-4419-a7d4-bed7db22b412
00:30:38.192 --> 00:30:43.198
always 0. And the second
decoder, which is active now,

NOTE Confidence: 0.8449912

8226a64f-fe45-4418-8fe1-45843bc938b4
00:30:43.198 --> 00:30:49.162
size based on the value of X X is
0, so D0 becomes one.

NOTE Confidence: 0.8752129

dbf86422-ff6c-4753-9288-1f15fb2cdb33
00:30:49.990 --> 00:30:51.610
And D1 becomes 0.

NOTE Confidence: 0.89840674

5434602f-1267-49e1-b39d-d927be745e67
00:30:52.170 --> 00:30:54.634
So this way we have one hot

NOTE Confidence: 0.89978576

6894b3ab-f85d-4265-9fbf-da32c66ff811
00:30:54.634 --> 00:30:58.912
vector. 10 This is the
same behavior as the

NOTE Confidence: 0.89978576

a606b6be-9e3c-4086-a99c-531d958f2438
00:30:58.912 --> 00:31:01.007
normal 2 by 4 decoder.

NOTE Confidence: 0.8689647

3a7e2bb5-4158-4e53-9091-0682beadc50a
00:31:02.670 --> 00:31:08.368
You can try different example of
this design as one one or one 0

NOTE Confidence: 0.8689647

e150b30d-4c7b-4938-a315-a8da21b4f227
00:31:08.368 --> 00:31:10.403
or 0, zero and etc.

NOTE Confidence: 0.82606804

8e145f5f-8d5a-4a21-a1bf-6ffbc660053a
00:31:13.150 --> 00:31:18.204
So the next question is that so
now we can redesign 2 by 4

NOTE Confidence: 0.82606804

603303f3-44b9-40bc-bfb2-45fb93d9d50a
00:31:18.204 --> 00:31:20.370
decoder by reusing one by two

NOTE Confidence: 0.8769596

db2bf7d9-9e3a-407c-a8e8-e666add977a9
00:31:20.370 --> 00:31:25.934
decoders. So is it possible to
reuse the two by four decoders

NOTE Confidence: 0.8769596

4c554c81-7343-47c4-8d49-f98176e5fe72
00:31:25.934 --> 00:31:28.418
to build 3 by 8 decoders?

NOTE Confidence: 0.825355

87312b54-95cb-455d-a948-d2e57abaa842
00:31:29.380 --> 00:31:31.270
The three by eight decoder,

NOTE Confidence: 0.8038783

7b4c5f15-06b2-4174-9dc5-f9536af1e1f4
00:31:31.270 --> 00:31:36.970
three input. 8 outputs so in
order to produce 8 outputs by

NOTE Confidence: 0.8038783

9b18da7d-98ba-4ad2-a382-c6be33059419
00:31:36.970 --> 00:31:43.004
two by four decoders. You have
to use 2 ,2 by 4 decoders in order

NOTE Confidence: 0.8038783

b15898fe-3475-47e0-91f8-0951360b3f21
00:31:43.004 --> 00:31:44.728
to create 8 outputs.

NOTE Confidence: 0.88533336

29a0da9d-aa30-44a4-9bc5-5fae9c7af926
00:31:45.920 --> 00:31:52.176
And, uh. This is the design
so 2, 2 by 4 decoders.

NOTE Confidence: 0.81744856

577f8f0d-c9be-4b5e-af4b-d0378903e119
00:31:52.980 --> 00:31:58.336
Each of them has a four outputs.
In total we have 8 outputs.

NOTE Confidence: 0.75298816

00f27495-a08a-408a-83b3-bc3adc937bfd
00:31:59.770 --> 00:32:02.800
And the highest

NOTE Confidence: 0.8658161

8e3f6ced-8c27-43e9-8a80-2f2d4bcd74c0
00:32:02.800 --> 00:32:07.888
significant bit. Select which
decoder is going to be active.

NOTE Confidence: 0.8419189

cf883b1d-a6e0-49a3-82db-399b1f37b018
00:32:09.620 --> 00:32:12.900
And all other lower
significant bits attached to

NOTE Confidence: 0.8419189

b7a20cb1-ffb2-4595-aa4b-029803ece370
00:32:12.900 --> 00:32:17.410
both decoder, so X&Y goes to
the first decoder and also

NOTE Confidence: 0.8419189

7542e1bc-b6a5-48b8-8ad0-1b05ff7c687e
00:32:17.410 --> 00:32:19.460
goes to the second decoder.

NOTE Confidence: 0.8313323

7db89c16-47d2-4678-9e47-45cf8e013ff2
00:32:21.060 --> 00:32:26.296
So X&Y, the lower significant
bits goes to all the other

NOTE Confidence: 0.85740495

8f85e101-60b0-48de-88d4-67c4be429b87
00:32:26.296 --> 00:32:29.385
decoders. However, the
highest significant bit

NOTE Confidence: 0.85740495

88b702e7-325c-4025-845e-c9cc8cdab178
00:32:29.385 --> 00:32:32.922
select switch decoder going
to be active at anytime.

NOTE Confidence: 0.20182961

b6476f36-54a9-4706-bfc0-85af4afa3295
00:32:39.430 --> 00:32:40.100
Ah.

NOTE Confidence: 0.7941622

12e4b339-ff50-49af-8541-ee2cfaa58923
00:32:41.640 --> 00:32:47.330
Nicholas asked a question that
decoder acts like or gate.

NOTE Confidence: 0.74699193

46cca44d-a882-416a-8f38-89f7bfb6b146
00:32:48.080 --> 00:32:51.769
Ah no, because The thing is or.

NOTE Confidence: 0.80342865

97f62b31-6bfe-44f6-9ff0-e4e28204da05
00:32:53.160 --> 00:32:58.200
for instance if you have one thing is
that for the OR gate you always

NOTE Confidence: 0.80342865

9c63cc4e-2b9f-4a70-bdc5-32b6766197d0
00:32:58.200 --> 00:32:59.280
have one output.

NOTE Confidence: 0.8024514

bc52d1bb-afb7-4440-9d8a-0933a064a89f
00:33:00.590 --> 00:33:04.454
Decoder, for instance, if you
have two inputs for the OR gate,

NOTE Confidence: 0.8024514

3291d351-d71e-4ae2-90ca-18aed7b1fc5f
00:33:04.454 --> 00:33:08.962
you have one output. If you have
three input in the OR gate, you

NOTE Confidence: 0.8024514

a9232bad-1d9e-43ac-9409-a7856262e4e6
00:33:08.962 --> 00:33:13.148
have one output but. For the
decoder it based on the n out

NOTE Confidence: 0.8024514

7d455c38-119d-4b4a-a8c3-f2b3ced7a98d
00:33:13.148 --> 00:33:17.656
n input put to the power of N
output, so that behavior is not

NOTE Confidence: 0.8024514

ee46f7fa-a6ae-48ff-a211-04c464a5166e
00:33:17.656 --> 00:33:19.266
similar to the OR gate.

NOTE Confidence: 0.85992414

4a3704dc-76b9-4c58-bc40-3d94e84dac3c
00:33:20.380 --> 00:33:24.148
And also as you, as you saw in
the design of the decoder.

NOTE Confidence: 0.7985219

16e8f244-5bd6-4d40-a7f6-06f445a51b3d
00:33:24.770 --> 00:33:30.750
I haven't used or always the the
main gate in the decoder. Let's

NOTE Confidence: 0.7985219

2e95ed55-9717-47f5-a605-b0ad0e1e6a2f
00:33:30.750 --> 00:33:36.270
come back here. Here, the main gate
in the decoder is the AND.

NOTE Confidence: 0.7777032

dc1d7263-5028-4ddd-9896-0b8913408e2d
00:33:37.360 --> 00:33:42.244
Meaning that only based on minterms because
we are going to generate the

NOTE Confidence: 0.87287396

3f47a0b9-1df2-4d1a-ab62-592c218abed1
00:33:42.244 --> 00:33:47.370
minterms in terms of the AND
within the binary variables.

NOTE Confidence: 0.77150023

8dbb5987-98de-422a-ab37-53e59c062b01
00:33:52.710 --> 00:33:54.336
Did I answer your
question, Nicholas?

NOTE Confidence: 0.8779145

69ced328-be2a-4d3c-8ed4-0d7a8925d8ca
00:33:58.610 --> 00:34:04.034
OK, so here is another, this is just
an example. For instance here.

NOTE Confidence: 0.8779145

b678a441-859a-4d8e-94b4-d6b964023792
00:34:04.034 --> 00:34:07.650
If we input 110 for the three by

NOTE Confidence: 0.835481

d3719632-4122-424b-80e2-cad6aab0c418
00:34:07.650 --> 00:34:12.374
eight decoder. So the highest
significant bit goes to the selected

NOTE Confidence: 0.835481

2d38fbd9-1708-42dc-bee7-3410b0c7e731
00:34:12.374 --> 00:34:17.456
decoders. Sp it is 1, so it goes
here and D1 becomes one

NOTE Confidence: 0.835481

93485329-83be-4765-af60-b01b39eb0fa3
00:34:17.456 --> 00:34:18.908
which selects the second

NOTE Confidence: 0.79481137

e95e6c29-b125-4a8b-9266-1471421444bd
00:34:18.908 --> 00:34:24.532
decoder. And the D0 is 0, so
it means that the first decoder

NOTE Confidence: 0.79481137

2dc59a8b-0205-4b30-ac36-e04ddbc90733
00:34:24.532 --> 00:34:25.956
is turned off.

NOTE Confidence: 0.8405756

5915536f-d2dd-4ca4-b024-1f69e837602f
00:34:26.890 --> 00:34:29.802
And the two other bits
connect both

NOTE Confidence: 0.8405756

53bd2b8a-1253-4e7c-90c3-e22c47d0101e
00:34:29.802 --> 00:34:32.714
decoders, 10. 10 goes
here, but this decoder

NOTE Confidence: 0.8405756

23d68b6b-5391-4a11-81a4-0a9bb724c325
00:34:32.714 --> 00:34:35.626
is turned off. There's always
zero in there.

NOTE Confidence: 0.86902416

af757f27-1daf-460f-80a5-455111a1527b
00:34:37.010 --> 00:34:38.557
So it doesn't matter what is XY

NOTE Confidence: 0.8118968

3165a96a-46e5-4195-bfd1-c0197b771421
00:34:38.557 --> 00:34:44.594
However, the same
XY goes here. This is

NOTE Confidence: 0.8118968

7cc97d71-5650-4ea9-9dba-2f317c608587
00:34:44.594 --> 00:34:50.516
active. So 01. 01 is the
binary address or binary

NOTE Confidence: 0.8118968

06f2255b-c50c-4899-8fcc-a6b2e2f976e3
00:34:50.516 --> 00:34:54.464
number 2, so it enables D2.

NOTE Confidence: 0.83950174

fcb8a4a8-7532-40e7-a443-5523d7f24d6f
00:34:56.820 --> 00:35:02.244
And then all the other aspects
are 0. D2 of the second

NOTE Confidence: 0.83950174

1af44acc-aa27-428a-bcec-5626840f7047
00:35:02.244 --> 00:35:08.120
decoder is equal to the D6 of
the overall decoder, 3 by 8.

NOTE Confidence: 0.8069445

d4defe01-fdf7-46a6-872a-c46c4dcea703
00:35:09.390 --> 00:35:13.355
And this is the new decoder.
Just by using 1 one by two

NOTE Confidence: 0.8069445

99fad0a1-c87e-4057-863e-680b3a063a06
00:35:13.355 --> 00:35:16.100
decoder to select which
D is going to be active.

NOTE Confidence: 0.6590724

c3de89f5-6f44-4c78-b42c-a1f62ffc09a6
00:35:16.750 --> 00:35:20.280
And two 2 by 4 decoders to
generate the outputs.

NOTE Confidence: 0.8481814

4b649be2-612d-4a1c-a6d5-eaad48f18030
00:35:22.590 --> 00:35:27.595
So you can think of this
question. Is it possible to

NOTE Confidence: 0.8481814

fc294c86-bd56-46ac-961f-b37a7cba6db0
00:35:27.595 --> 00:35:31.690
design 4 by 16 decoder by
reusing smaller decoders?

NOTE Confidence: 0.8106875

761055c7-d004-42d2-866c-8cde17c4ec2a
00:35:32.900 --> 00:35:36.080
Using three by 8 quarters only?

NOTE Confidence: 0.8097423

6f82f533-2ccc-4033-a7ae-6a85e561e5c7
00:35:37.010 --> 00:35:40.640
2 by 4 decoders only or a
mixture of them?

NOTE Confidence: 0.864047

475be9e2-c26b-4532-bb21-0a981522a276
00:35:41.450 --> 00:35:47.848
Or can I design the 4
by 16 decoder only using the one

NOTE Confidence: 0.864047

1301937d-f217-4560-bdbd-688f74c9f9fe
00:35:47.848 --> 00:35:53.332
by two decoder? The answer is yes. For
the this one, 3 by 8.

NOTE Confidence: 0.8794832

6a8dc4ed-64c7-4b18-b472-77ca77a837c3
00:35:53.990 --> 00:35:59.979
Ah. You have to use two 3 by 8's
in order to create 16 outputs.

NOTE Confidence: 0.8545159

cb8c7a5a-1b94-4931-989e-ecd1bd1b2917
00:36:00.580 --> 00:36:05.802
But the thing is, in order to
select one of the three by eight

NOTE Confidence: 0.8545159

49fbcce4-c5ca-4d3d-a01b-ad7bafafd329
00:36:05.802 --> 00:36:07.294
decoders, you have to

NOTE Confidence: 0.7701111

72b1ea9a-47cc-4be3-a74d-805018c1194e
00:36:07.870 --> 00:36:11.974
Use one by two decoders, so
it's not possible to just use

NOTE Confidence: 0.7701111

073b47e0-b13f-4444-afc9-69a94a20977d
00:36:11.974 --> 00:36:14.710
the 3 by 8 decoder. You need
another decoder:

NOTE Confidence: 0.8575704

b0b9701e-464e-42b7-9972-871eef4f08a3
00:36:15.940 --> 00:36:20.090
One by two decoder. So this is
kind of interesting.

NOTE Confidence: 0.70859706

b36469ef-79ce-433a-9887-fc011543267b
00:36:21.440 --> 00:36:25.400
The Ppoblem with the redesign,
larger decoders needs smaller

NOTE Confidence: 0.70859706

600a49ff-fd22-4865-87e3-09b416578570
00:36:25.400 --> 00:36:25.895
decoders.

NOTE Confidence: 0.8369788

9d5c2ea4-47b7-4c4e-9f8f-7bb4495b8037
00:36:27.900 --> 00:36:34.620
If you look in the market, you
can simply buy it. This is the IC

NOTE Confidence: 0.8369788

022bf71b-553c-40e5-90bc-6cfef4cde12a
00:36:34.620 --> 00:36:36.540
for 3 by 8 decoder.

NOTE Confidence: 0.91836953

9c9813ae-c50e-422a-b3d3-b67b8d34e653
00:36:37.630 --> 00:36:40.934
And this is the price,
where is the price?

NOTE Confidence: 0.37525705

5664fdea-b346-48d8-a450-9c87bc0c5fbb
00:36:43.000 --> 00:36:44.968
Ah oh here.

NOTE Confidence: 0.8207878

72e94f6d-0983-478c-9b54-0c32d84e70c0
00:36:45.830 --> 00:36:47.170
Here is the price.

NOTE Confidence: 0.8857516

40dce7b2-4a92-406b-81b0-43f0995b3ec6
00:36:47.810 --> 00:36:53.340
But, uh, please go to this link.
This is a data sheet. I already

NOTE Confidence: 0.8857516

ee1d84e2-9beb-4da6-bcb4-1d28d93e5b4d
00:36:53.340 --> 00:36:57.685
opened the data sheet for what
you can see in the.

NOTE Confidence: 0.82023215

a13f3e74-04ca-4554-9fea-ae31fa4d68bb
00:36:58.790 --> 00:37:05.489
Uh. Market when you go to
buy a decoder. So this is the IC,

NOTE Confidence: 0.82023215

1da394e9-ffe7-4180-9d10-567ccaf5c55a
00:37:05.489 --> 00:37:09.965
each pin off the IC is
described in this data sheet

NOTE Confidence: 0.82023215

41acad70-bb21-4edd-8a92-023080575ea1
00:37:09.965 --> 00:37:15.560
says that the the output of the
decoder is Y0 up until Y6 and

NOTE Confidence: 0.82023215

b4710521-f7bf-4745-b8e8-d0408e1ccbf7
00:37:15.560 --> 00:37:17.052
this is Y7.

NOTE Confidence: 0.8451373

f1f32a03-0c1b-4ac2-aa82-8afb07838a43
00:37:17.790 --> 00:37:23.133
It's just equal to D0, D1 up until
D7 for our 3 by 8

NOTE Confidence: 0.8451373

56f95167-cccc-4738-965a-54520cd595db
00:37:23.133 --> 00:37:28.065
decoders. This is the ground.
A B C are the input of the decoder

NOTE Confidence: 0.8451373

8a1f3e69-51b6-4763-b5a5-749d18442b4c
00:37:28.065 --> 00:37:33.408
and this is the ground and I'm
not sure what are these two

NOTE Confidence: 0.84580886

b543b005-421d-4d4f-a693-69389614e951
00:37:33.408 --> 00:37:39.370
pins. And. Here is the logic
symbol for that. This is the

NOTE Confidence: 0.84580886

24da084c-5f98-4c0c-9d6c-3a2d636b87ff
00:37:39.370 --> 00:37:43.402
enable input. Oh yes, so the
enable input are these three, the AND

NOTE Confidence: 0.84580886

3d1bfa47-76c2-49d2-b755-5659befa3283
00:37:43.402 --> 00:37:46.762
of these. So this is the decoder
with enable input.

NOTE Confidence: 0.8734333

dbc24095-064f-4773-bcfd-3d1743e328d0
00:37:48.980 --> 00:37:53.924
So just for your information,
for the code, this is not

NOTE Confidence: 0.8734333

2dc8e5af-cc13-457d-acd2-d3634cc3088a
00:37:53.924 --> 00:37:57.220
important. This is important
for computer engineers who

NOTE Confidence: 0.8734333

9cdb188d-e508-4eb6-a27d-54ec64b13249
00:37:57.220 --> 00:38:00.104
want to actually build the
logic circuits.

NOTE Confidence: 0.79826176

7d01294f-fce8-4570-ae9b-e0207124fb1b
00:38:01.400 --> 00:38:06.314
So for instance, if you want to
build the 4 by 16 decoder,

NOTE Confidence: 0.79826176

cc1086ea-3348-4620-a6ed-3550db8a35da
00:38:06.314 --> 00:38:11.930
you have to buy two of
these IC's and one of the one by

NOTE Confidence: 0.79826176

fded0492-09b9-41b5-9a90-4dc22f0b5cf7
00:38:11.930 --> 00:38:15.440
two decoder IC to rebuild the
4 by 16 decoder.

NOTE Confidence: 0.83729655

e90fd584-80eb-449e-8533-6be236f0c82b
00:38:16.680 --> 00:38:20.748
Just for your interest,
I just put that here.

NOTE Confidence: 0.80644965

5c140eac-7912-4bc8-bee5-fe49e0a8d196
00:38:22.800 --> 00:38:28.460
And another nice property of the
decoder is that because

NOTE Confidence: 0.80644965

971911ad-9799-43d0-92d8-e395768f43df
00:38:28.460 --> 00:38:32.988
decoders creates the minterms
in the output,

NOTE Confidence: 0.8334389

83e46920-3fe0-4d0a-894b-1d2618a43403
00:38:33.680 --> 00:38:38.256
We can design the Boolean
functions either in the form of

NOTE Confidence: 0.8334389

8e933675-f2d5-406d-9102-3611ae108851
00:38:38.256 --> 00:38:43.248
sum of minterms or product of
the Maxterms by using the

NOTE Confidence: 0.8334389

28c71443-0f02-436c-b7a9-f0072bbdbc4f
00:38:43.248 --> 00:38:46.576
decoders, and this is very
interesting, I mean.

NOTE Confidence: 0.85541314

0d0cdba5-1e4f-4564-b794-2ff96b10e458
00:38:49.390 --> 00:38:54.395
So imagine you are given a
Boolean function as a sum

NOTE Confidence: 0.85541314

65b3460f-8f5c-4e16-bdd5-2044aed61a9f
00:38:54.395 --> 00:38:55.760
of minterms 2, 4, 7.

NOTE Confidence: 0.80033773

454f81e6-03ce-47f6-8c04-1a9da5abad26
00:38:57.560 --> 00:39:02.516
We already knew that by Decoder 3
by 8, you can create or you can

NOTE Confidence: 0.80033773

0290aaf9-445d-45f1-b663-b2f17ecb3c45
00:39:02.516 --> 00:39:07.118
put a minterm from 0 up
until minterm 7 because at

NOTE Confidence: 0.80033773

53b1e763-5463-42ba-920f-f7d9344f94ec
00:39:07.118 --> 00:39:11.720
anytime based on the inputs, for
instance if it is 000, the output

NOTE Confidence: 0.80033773

7583a98c-f4be-48cb-b133-2d5658e13e60
00:39:11.720 --> 00:39:16.676
for minterm 0 is
gonna be 1, and all the other minterm outputs

NOTE Confidence: 0.80033773

4a906e57-53e8-4f88-86e9-882a0b816dfc
00:39:16.676 --> 00:39:20.924
are gonna be 0, so the decoder is
kind of acting to produce

NOTE Confidence: 0.80033773

db837f44-6d20-409c-b75d-501840b0123f
00:39:20.924 --> 00:39:24.110
the minterms based on the value
of the inputs.

NOTE Confidence: 0.7976479

77b72ecc-2512-485b-afca-ce4f0b05cf31
00:39:24.940 --> 00:39:28.384
So for this function, we say that
it is going to be one

NOTE Confidence: 0.7976479

24eae220-2e7c-4224-a94d-7174d3c69f6f
00:39:28.384 --> 00:39:32.402
whenever the minterm 2 is in the
input, minterm 4 is in the input

NOTE Confidence: 0.7976479

69a96bb5-1d5b-445e-92b0-c17663eb0013
00:39:32.402 --> 00:39:34.411
or minterm 7 is in the

NOTE Confidence: 0.80452895

b08e6b40-e7cb-4e6e-96c5-a98535a3a533
00:39:34.411 --> 00:39:41.610
input. So in other words, if
the value of the inputs are 010,

NOTE Confidence: 0.80452895

b32304cc-e617-421c-a4ba-63ab2da45662
00:39:41.610 --> 00:39:43.630
2 for minterm 2, D2 becomes one.

NOTE Confidence: 0.81749916

8e13eb6c-2734-4e48-aa38-87a174806b1f
00:39:44.710 --> 00:39:46.540
All the other outputs are zero.

NOTE Confidence: 0.8893895

0a8eeb39-0a5b-417e-8794-6f731577a390
00:39:47.430 --> 00:39:51.830
If the value of the input is 4
meaning it is 100 (001 is a MISTAKE!),

NOTE Confidence: 0.82165426

3a6dfe9c-50bc-4172-b487-c5272407ea61
00:39:52.470 --> 00:39:56.025
D4 becomes one and all the other
outputs are zero.

NOTE Confidence: 0.866505

c97ccab2-7888-4784-a4e0-bde9f4590cb2
00:39:56.820 --> 00:40:00.250
And whenever we have the seven
in the input, 111,

NOTE Confidence: 0.7476123

560d4f3d-847d-428a-9e37-5288ad96a318
00:40:00.900 --> 00:40:03.580
D7 becomes one so

NOTE Confidence: 0.7223738

91ff2d1b-fcb5-4b06-b4af-6321f43b2377
00:40:04.570 --> 00:40:11.694
if we OR the output, D2, D4 and D7,
it is exactly as the

NOTE Confidence: 0.7223738

58c01a8a-1142-4150-b325-03fd74ffc72a
00:40:11.694 --> 00:40:15.530
Boolean function, this one.
Sigma minterms 2, 4, 7.

NOTE Confidence: 0.8391578

e38dfa1e-4a02-4104-8c7c-f3e7abd47cdb
00:40:17.750 --> 00:40:22.538
So this is a general idea for the
design of any Boolean function if

NOTE Confidence: 0.8391578

0d43b20e-a5d3-48a6-8018-46d9c4254c69
00:40:22.538 --> 00:40:26.927
they are using sum of minterms by
using the decoders.

NOTE Confidence: 0.81966877

a96933b8-e5c1-4ec0-9ae7-1a9ad1eb2343
00:40:29.530 --> 00:40:33.171
Also, you can use the decoders
for designing the logic

NOTE Confidence: 0.81966877

953fdaea-ef93-45b2-9517-bb4cd434c250
00:40:33.171 --> 00:40:35.157
circuit based on the product of

NOTE Confidence: 0.7579988

91dc33fe-c050-4d40-97c8-e355d15909ca
00:40:35.157 --> 00:40:40.114
the Maxterms. Maxterms were those
terms that output 0.

NOTE Confidence: 0.8182495

d9d5c397-3545-44a1-b4a8-fcfba89678e1
00:40:40.770 --> 00:40:47.364
And also Maxterm I is equal to
minterm I followed by the not, we

NOTE Confidence: 0.8182495

192244e3-7d1b-41d9-bce8-f82f126f4f25
00:40:47.364 --> 00:40:52.074
already covered this. So here
the Boolean function is maxterms

NOTE Confidence: 0.8182495

9c382116-553b-4882-8600-7a4be0258e48
00:40:52.074 --> 00:40:57.726
0,1,3,5,6. Meaning that if we see
these values in the input, the Maxterms

NOTE Confidence: 0.8182495

9867bbe0-453e-4b2d-ac23-71f3adf1e4ce
00:40:57.726 --> 00:41:02.436
or the entries for the
Boolean function becomes 0.

NOTE Confidence: 0.68586826

7f167d34-ff52-4624-9f12-8561476dddb9
00:41:03.590 --> 00:41:05.830
So for instance, if

NOTE Confidence: 0.878176

dd0b99ab-5def-4e6b-9af1-a5bc39ba4996
00:41:06.540 --> 00:41:08.437
You have the zero in the input.

NOTE Confidence: 0.8084897

b5466dab-011d-4001-805a-d6917e6f18ea
00:41:09.160 --> 00:41:14.490
D0 becomes one which is the
minterm, and we have to apply

NOTE Confidence: 0.8084897

b4ec12bf-0ca7-421a-b634-70ba1a7e7677
00:41:14.490 --> 00:41:19.410
another not on top of that, so it
becomes 0. So D0 not.

NOTE Confidence: 0.7002825

f11a3c5f-4ce0-4756-a907-f5c0f89e71a6
00:41:19.990 --> 00:41:21.670
And then maxterm one.

NOTE Confidence: 0.757812

9258e1fc-e57d-4a07-ac7c-3aaba0dca731
00:41:22.770 --> 00:41:24.710
Minterm 1 and not.

NOTE Confidence: 0.69136536

c42317a6-fabc-49f8-9869-d088df10012d
00:41:25.330 --> 00:41:30.920
Maxterm 3: minterm 3 not, and
etc., followed by

NOTE Confidence: 0.662557

0932592c-055e-49b8-91fc-d12fb7b6151c
00:41:32.890 --> 00:41:34.450
a final AND.

NOTE Confidence: 0.7665641

80a4b543-da69-4261-aad0-cff687b42b14
00:41:35.310 --> 00:41:37.430
This is the AND so.

NOTE Confidence: 0.8255354

49d6d798-e9ca-4df8-a05f-9ca579b43984
00:41:38.120 --> 00:41:44.266
Minterm I not becomes maxterm and
then this is the product

NOTE Confidence: 0.8255354

af6ff8cb-f1c6-41db-89c7-134417e8e94d
00:41:44.266 --> 00:41:49.534
of sum, so you can design any
Boolean function in terms of

NOTE Confidence: 0.8255354

1f99f9ce-fd7b-4b59-b6d8-58f4b5325319
00:41:49.534 --> 00:41:53.485
product of maxterms based on
decoders like this.

NOTE Confidence: 0.7658449

a6137ace-2818-4036-963d-5728954ce6ee
00:41:54.940 --> 00:41:59.035
But each maxterm you see, you just
select that minterm in the

NOTE Confidence: 0.7658449

76af5be1-2225-4735-ba47-11f78fc7ae66
00:41:59.035 --> 00:42:01.240
decoder and apply and not on top

NOTE Confidence: 0.39767435

67f84085-d593-46b7-bee0-f35b94892bf4
00:42:01.240 --> 00:42:03.320
of that.

NOTE Confidence: 0.7662373

a02bf0d7-5f30-45d2-b1e8-859cd164e291
00:42:04.250 --> 00:42:05.450
Followed by the AND.

NOTE Confidence: 0.77722603

2f3e1853-c0be-4b04-81af-70d78d70890a
00:42:07.510 --> 00:42:12.372
For instance, if you are
going to redesign full adder

NOTE Confidence: 0.77722603

8cff3cab-b9a6-45a2-9312-8dd9ee088913
00:42:12.372 --> 00:42:16.350
using the decoder, we already
designed the full adder using

NOTE Confidence: 0.77722603

4aa68f5a-9d20-4a66-b6c6-b3a7a4eeebd4
00:42:16.350 --> 00:42:21.212
logic circuits. Also by using one half
adder, also by using two half adders

NOTE Confidence: 0.77722603

b00a770d-8573-45c3-9ea6-3d4b1d6db245
00:42:21.212 --> 00:42:22.980
and one OR gate.

NOTE Confidence: 0.8304013

a20954b4-1fe1-4368-ac11-5f4ee7b63955
00:42:23.690 --> 00:42:26.759
So now we want to redesign the
full adder using decoders.

NOTE Confidence: 0.79620636

abe7ff4a-25c1-4c1a-9e36-aebc215ed275
00:42:27.550 --> 00:42:33.340
So the sum in the full adder is
equal to minterms 1,2,4,7 and the carry

NOTE Confidence: 0.79620636

5d2ce08f-98ac-4ed4-abef-9f51bfb4c690
00:42:33.340 --> 00:42:37.972
is minterms 3,5,6,7. Sum is
exclusive or of the XY and the

NOTE Confidence: 0.79620636

0657202a-c8ae-47e2-8632-81ac9a6b5a8b
00:42:37.972 --> 00:42:39.902
carry from the previous step.

NOTE Confidence: 0.79452014

a702dec3-9878-46eb-9c06-f41923798224
00:42:40.660 --> 00:42:46.120
And the carry is XY OR X
AND with the carrier from

NOTE Confidence: 0.79452014

1964fc0a-5348-4c2e-b335-b1a902851d02
00:42:46.120 --> 00:42:50.670
the previous step. Or Y
AND with the carry with

NOTE Confidence: 0.79452014

efbb41c5-64b0-42ad-a61e-0f00a72441ba
00:42:50.670 --> 00:42:52.490
the previous step.

NOTE Confidence: 0.839565

a4af8be0-99bb-4ab7-a49f-a0f1383bdb1b
00:42:53.530 --> 00:42:57.625
And this was the truth table for
that. So for the full adder,

NOTE Confidence: 0.839565

ec9d13f7-202e-4514-b7be-c26a2d6b822a
00:42:57.625 --> 00:43:01.405
given XY and the carry from the
previous step, this is the

NOTE Confidence: 0.88228995

f45518cb-22aa-4704-bc46-61c03d6fab68
00:43:01.405 --> 00:43:06.984
carry. And this is the sum. We
already said that two

NOTE Confidence: 0.7929516

887c203b-6fc2-40b0-b81a-531462328036
00:43:06.984 --> 00:43:12.199
lectures ago. So now we want
to redesign carry and sum

NOTE Confidence: 0.7929516

dcc3ccaf-258a-401d-8ce9-e73b9f2acbfc
00:43:12.199 --> 00:43:16.209
based on the decoders. So
basically in the decoder,

NOTE Confidence: 0.7929516

c189b71a-6f46-43eb-9ffc-3ff8e1bf11b9
00:43:16.209 --> 00:43:21.422
what decoder do we need? We
need a decoder 3 by 8. Three

NOTE Confidence: 0.7929516

d99a9009-842e-4ed0-99eb-ad339164a399
00:43:21.422 --> 00:43:22.625
inputs by 8 outputs.

NOTE Confidence: 0.73942167

79dde4ef-30bd-4c81-8c69-3fcb08163c5c
00:43:24.000 --> 00:43:31.633
The minterms 3, 5, 6, 7 for the carry.

NOTE Confidence: 0.73942167

142df293-9073-4d59-ad49-de64e9a9cbce
00:43:31.633 --> 00:43:34.868
Minterms 1, 2,

NOTE Confidence: 0.8019939

69a83066-5a12-48c5-b9fb-01ab83949cf7
00:43:35.500 --> 00:43:37.860
4 and 7 for the sum.

NOTE Confidence: 0.9121716

a0b50879-2661-40f4-a832-2363716448ad
00:43:38.910 --> 00:43:41.206
And here is the design for the

NOTE Confidence: 0.57362086

deac531d-2e9e-4662-97bf-6d925bcaf46a
00:43:41.910 --> 00:43:44.410
full adder using a decoder.

NOTE Confidence: 0.8388674

4a1d0bd6-0427-4367-926e-206fa70fe347
00:43:45.330 --> 00:43:49.590
1 2 4 7 for the
sum.

NOTE Confidence: 0.75559425

2b62947f-cd2c-478e-8e7a-346700da5d69
00:43:50.900 --> 00:43:53.840
And for the carry 3 5 6 7.

NOTE Confidence: 0.8287384

90e9064f-10cf-416e-a812-4b01ed2e1571
00:43:55.550 --> 00:43:59.499
One thing is that normally if
the decoder doesn't show the

NOTE Confidence: 0.8287384

baf37fff-07af-4b5f-b214-a616ff156000
00:43:59.499 --> 00:44:05.243
order of the bits, the order is
as we said here, X Y Z. So Z is

NOTE Confidence: 0.8287384

f709f613-9506-4286-ba7c-84be216dc839
00:44:05.243 --> 00:44:08.833
the highest significant bit. And X
is the lowest significant bit.

NOTE Confidence: 0.7894049

fecaafa5-1d18-4d2c-bf52-78a77b03412c
00:44:09.670 --> 00:44:14.998
However, if you reorder
the inputs, for instance in the

NOTE Confidence: 0.7894049

c958a93a-7dee-4b17-a0fa-04f291909a23
00:44:14.998 --> 00:44:19.882
book, you have to specify the
significance of the bit, the

NOTE Confidence: 0.7894049

faae2562-226b-46fc-83d3-140c732c6619
00:44:19.882 --> 00:44:24.322
significant of the bit. For
instance, in the book, the decoder

NOTE Confidence: 0.7894049

760ca0c8-58ae-4127-b55c-b57c9b0c5c5b
00:44:24.322 --> 00:44:29.206
uses the reverse order of
the significance, so that's why

NOTE Confidence: 0.7894049

f23227bd-3f17-4b1d-8090-fb25162d4b04
00:44:29.206 --> 00:44:30.982
it specifies the significance.

NOTE Confidence: 0.86786735

42bfae86-1960-488a-af98-8917b4987981
00:44:31.590 --> 00:44:34.380
This is the lowest
significant bit and this is

NOTE Confidence: 0.86786735

fd9de2dc-37c0-4cac-9195-bfd3811405fa
00:44:34.380 --> 00:44:35.310
the highest significant bit.

NOTE Confidence: 0.7092933

8118990a-78b9-4193-a6e8-e70f5d57bbe2
00:44:39.030 --> 00:44:40.870
Any questions so far?

NOTE Confidence: 0.8628864

5fca15e7-2399-47be-8867-78bf97462f56
00:44:44.390 --> 00:44:49.070
So basically, decoders are
generally for the task of

NOTE Confidence: 0.8628864

c9d728e6-5395-45b3-ab9b-f10d950eabfb
00:44:49.070 --> 00:44:51.670
selection, one item among N

NOTE Confidence: 0.8050483

96660ccf-567a-426e-8536-0e2a88053cc1
00:44:51.670 --> 00:44:56.880
items. And we can reuse the
orders for writing the Boolean

NOTE Confidence: 0.8050483

2ad77b48-9396-4361-bdc6-7a8ac8a6ebb6
00:44:56.880 --> 00:45:00.850
function using the sum of
minterms, because it acts like

NOTE Confidence: 0.8050483

a9a02b06-afba-470d-8543-bedf39bb0b45
00:45:00.850 --> 00:45:06.011
enabling one minterm at a time in the output.
But also we can reuse decoders

NOTE Confidence: 0.8050483

4c427363-ffa1-4d81-92bc-10f70946d30f
00:45:06.011 --> 00:45:10.378
for writing Boolean functions based
on the product of the maxterms.

NOTE Confidence: 0.7770907

f29e8ea6-c8e5-441c-b073-27069913c5cf
00:45:11.130 --> 00:45:13.668
Basically, for those maxterms,
we just select the minterms

NOTE Confidence: 0.7770907

281b18f5-889e-4cbd-8e55-7cc9ffa8a4b8
00:45:13.668 --> 00:45:17.052
in the output of the decoder
and apply the not so it

NOTE Confidence: 0.7770907

765e0ca1-45db-4821-93f8-74ce9eb27485
00:45:17.052 --> 00:45:17.616
becomes maxterm.

NOTE Confidence: 0.7894771

79e2cd92-f820-4ebb-adf0-1a2ed64ada34
00:45:20.390 --> 00:45:24.520
Ah, if there's no question
we can continue with the

NOTE Confidence: 0.7894771

34647a90-b274-41b1-a16f-e354f720a8f2
00:45:24.520 --> 00:45:27.824
next topic: logic
circuit encoders.

NOTE Confidence: 0.73662066

cb38a167-47ef-4538-8445-a7ed1e6270be
00:45:29.820 --> 00:45:35.190
Encoder, as the name implies,
it's the reversed logic of the

NOTE Confidence: 0.73662066

477a8626-9f89-4237-bb13-f389e789b0c5
00:45:35.190 --> 00:45:40.560
decoder. Decoder wants to decode
a binary number to 1-hot vector

NOTE Confidence: 0.90280217

d5595fd1-5448-4637-a3ec-bc03619ebc43
00:45:41.270 --> 00:45:42.740
for the task of selection.

NOTE Confidence: 0.8205751

f9fe24d9-5245-4b40-8458-3065431ac15a
00:45:43.450 --> 00:45:47.203
Encoder actually does the
reverse. It receives a 1-hot

NOTE Confidence: 0.8205751

2a815fda-1e0f-4e42-bd45-89bf27b20807
00:45:47.203 --> 00:45:52.207
vector and it includes the 1-hot
vector to the binary address

NOTE Confidence: 0.8205751

84ac0909-a645-406d-92ef-63bd29a81944
00:45:52.207 --> 00:45:53.458
or binary number.

NOTE Confidence: 0.78109795

a39adc65-af0e-44c2-91fb-1023db112161
00:45:54.810 --> 00:45:59.906
So for the encoder, 1-hot vector is in the
input and a binary number or binary

NOTE Confidence: 0.78109795

164b04a6-036d-47ab-8a74-6554872b05a9
00:45:59.906 --> 00:46:01.474
address is in the output.

NOTE Confidence: 0.86119473

2d576a4d-3f23-45b6-9381-44857fa8b4c6
00:46:02.820 --> 00:46:05.844
So for instance, for the
decoder, one by two.

NOTE Confidence: 0.8370411

c5da0cd6-7c39-4183-8640-3396806964f5
00:46:06.710 --> 00:46:10.994
If you just input the output of
the decoder to the encoder, the

NOTE Confidence: 0.8370411

ae9e49f9-4b2a-4f54-b30f-b223b6ea255d
00:46:10.994 --> 00:46:12.779
encoder is 2 by 1.

NOTE Confidence: 0.90610063

83083a09-e318-44c0-9d2c-f7c7b6963ba1
00:46:13.360 --> 00:46:17.658
So there's the logic. So let's see how
can we design the encoder.

NOTE Confidence: 0.7763834

cda3e58c-1897-40b1-b359-66c779229592
00:46:19.950 --> 00:46:27.124
So for the encoder 2 by 1, two
is 2 to the power of 1 * 1,

NOTE Confidence: 0.7763834

99289764-53d7-41a2-9f73-fa19eb99ec71
00:46:27.124 --> 00:46:32.610
meaning that by 1-hot vector of
2 elements, we can encode

NOTE Confidence: 0.7763834

ccb1fedd-3dea-4eef-8d11-3aabb3a0f591
00:46:32.610 --> 00:46:33.876
the 1-hot

NOTE Confidence: 0.87480164

18beba8c-86f8-48d6-a454-ddf4bc7aa608
00:46:34.440 --> 00:46:37.200
to one single bit X.

NOTE Confidence: 0.8712899

7d06ad06-4765-4d53-a9b3-67f29813a170
00:46:39.420 --> 00:46:43.680
So the design, we have
two inputs, D0 D1, and we

NOTE Confidence: 0.8712899

358f7a23-c3af-4aeb-8dab-7021deffe78b
00:46:43.680 --> 00:46:45.810
have one output F1.

NOTE Confidence: 0.879307

b55a8acb-1f8f-4789-a752-646a4dbd584a
00:46:46.850 --> 00:46:52.978
So if D0 is 1 and D1 is 0,
this is the 1-hot vector.

NOTE Confidence: 0.7918081

9a439837-638f-4280-90ef-dabe895c3bf2
00:46:53.610 --> 00:46:56.886
So we say that the binary number

NOTE Confidence: 0.835096

8448ebf1-f4a8-4d61-a49c-9482b47aa27f
00:46:56.886 --> 00:47:02.240
is 0. Again, if you think of
the decoder, if you input

NOTE Confidence: 0.835096

1993351e-2b80-4161-b440-3c952ea1767d
00:47:02.240 --> 00:47:06.368
the zero, it makes 01 in the
output. For the encoder, it's the reverse.

NOTE Confidence: 0.835096

57b85764-eb2d-4029-aa1f-f33ad3351d86
00:47:06.368 --> 00:47:09.464
If you input 01, the output, the
binary number is 0.

NOTE Confidence: 0.86697763

57b9c542-f065-4a8e-9824-e888b248add5
00:47:10.570 --> 00:47:14.422
Also for this output, if you
input the 1-hot 1 0, it

NOTE Confidence: 0.86697763

1f558da6-8492-4f5a-a700-0b08c59e2d60
00:47:14.422 --> 00:47:16.027
creates the binary number
one.

NOTE Confidence: 0.864768

52da6a58-9d95-463b-a198-1353fd88707e
00:47:17.240 --> 00:47:21.761
However, there are two instances
in the input for this logic

NOTE Confidence: 0.864768

e032ee05-e446-47c5-b1c2-1de68fa31040
00:47:21.761 --> 00:47:26.282
design that doesn't have any
meaning for task of encoding. If

NOTE Confidence: 0.864768

5693bc83-9ed9-4199-ba2c-49cac485d6d2
00:47:26.282 --> 00:47:32.036
both are zero, it's not 1-hot
anymore. Also, if both are one, this is

NOTE Confidence: 0.864768

38b454fe-82b1-4084-81a0-5ea6dc786cae
00:47:32.036 --> 00:47:36.968
not 1-hot vector anymore. For
these two cases, the output of

NOTE Confidence: 0.864768

7438729d-6a57-4ec5-94ef-f033b40b6cfd
00:47:36.968 --> 00:47:41.078
the encoder is not determined,
so it's not valid.

NOTE Confidence: 0.89143616

5ee0851b-9d34-4e1b-ba5c-cecaf7479d24
00:47:43.000 --> 00:47:45.562
We already saw and we already said that
sometimes

NOTE Confidence: 0.90404767

6342506c-8708-4fe7-b15f-b05d1c8c3629
00:47:45.562 --> 00:47:49.951
in practice, the value of the
Boolean function in the output

NOTE Confidence: 0.90404767

29553680-873e-4b1d-a46b-5d7455dbd586
00:47:49.951 --> 00:47:54.228
is not valid or we cannot rely
on the value. This is another

NOTE Confidence: 0.90404767

8889d4a1-ae14-4583-a768-43d30498b5e6
00:47:54.228 --> 00:47:57.518
instance, and we said this is
called don't care conditions.

NOTE Confidence: 0.8192913

b277ccdb-b064-445b-95d0-38c94a714562
00:47:58.120 --> 00:48:02.795
We simply just don't care about
the result in the output

NOTE Confidence: 0.8192913

b0f05bc1-60ff-4f65-9990-5e7e6a5c9d2b
00:48:02.795 --> 00:48:08.320
function, we just care about those
output that have the 1-hot in the input.

NOTE Confidence: 0.8192913

5b956e49-313d-4639-8f7e-6cbcf60ee41b
00:48:08.320 --> 00:48:12.570
For those with without any
1-hot, we just simply ignore

NOTE Confidence: 0.8847366

33eb7667-a144-4aa8-983f-db96068371cf
00:48:12.570 --> 00:48:16.088
that. But we said that the
don't care conditions

NOTE Confidence: 0.8847366

c82d81be-70d5-4300-a92d-38cc8826d00d
00:48:16.088 --> 00:48:18.195
actually helps us to
minimize the Boolean

NOTE Confidence: 0.8847366

0d964d50-919c-4ca4-a77b-6e2f0736ba64
00:48:18.195 --> 00:48:21.506
function. So right now if
you are going to write a

NOTE Confidence: 0.8847366

77a5b04e-bf18-4df2-862c-d8829422559f
00:48:21.506 --> 00:48:22.710
Boolean function for F1,

NOTE Confidence: 0.840554

48dc9e17-b28c-4711-a4ac-b7f3b19aa47c
00:48:23.820 --> 00:48:26.964
the only time they are F1
becomes one is the minterm

NOTE Confidence: 0.8323939

2a574524-4227-472b-bc89-be604d339f32
00:48:27.690 --> 00:48:32.134
10, minterm 2. But we can reuse
these don't care

NOTE Confidence: 0.8323939

414fcd38-68b2-490b-bcda-f17aef92dff2
00:48:32.134 --> 00:48:35.770
conditions to minimize F1 a
little bit more.

NOTE Confidence: 0.9309721

9f212541-dff8-4c0c-8210-b55549388bea
00:48:36.760 --> 00:48:39.851
So if you put it in the
Karnaugh map with two variables,

NOTE Confidence: 0.77322644

6762330d-3f20-41d8-b962-43e14fa2510b
00:48:42.880 --> 00:48:46.796
these are the cells in the
Karnaugh map with two variables, so

NOTE Confidence: 0.77322644

a487d98d-47be-4329-8539-ceb0b9122a95
00:48:46.796 --> 00:48:48.932
the only minterms that is one is minterm

NOTE Confidence: 0.90102834

f5aeccb2-d20d-4c83-9e8a-5509e6d2d90f
00:48:48.932 --> 00:48:54.686
2. Minterm 1 is zero and the
other two cells are don't care.

NOTE Confidence: 0.90102834

93da4516-77bb-48ae-9505-f26b1a4e0fe5
00:48:54.686 --> 00:48:57.710
So if I'm going to write the F1,

NOTE Confidence: 0.7582473

eba98d35-654d-4762-8977-081affc0f4ea
00:48:58.430 --> 00:49:02.530
include the shared region
with this don't care so it

NOTE Confidence: 0.7582473

40d89b49-13dd-4e8d-ba57-97c32293bdd8
00:49:02.530 --> 00:49:03.760
becomes D0 not.

NOTE Confidence: 0.73309624

d179ea23-c49b-4167-94b8-01afb6edccc8
00:49:04.810 --> 00:49:09.160
Or we can use shared region, so
F1 becomes D1.

NOTE Confidence: 0.75293934

7c203d36-353f-4864-a0fd-1a0214cf7d9a
00:49:10.160 --> 00:49:15.958
So the only benefit of the don't
care condition is just to, uh,

NOTE Confidence: 0.75293934

9ba33e99-b220-4f7d-93a4-f41b7fe47269
00:49:15.958 --> 00:49:17.296
do more minimizations.

NOTE Confidence: 0.8599142

155204fe-453a-492c-9171-7ddc28b94965
00:49:18.850 --> 00:49:22.700
But the thing is, so now we have
designed the encoder.

NOTE Confidence: 0.8664949

c0a1bf00-c44d-4950-b7f7-6b3660fd248f
00:49:23.720 --> 00:49:28.292
Two inputs, one output. But the
thing is, in practice, you have

NOTE Confidence: 0.8664949

38b5c51c-35b0-4a42-aae7-a1bcc354ab73
00:49:28.292 --> 00:49:33.245
to make sure that whenever you
see the output, that output is a

NOTE Confidence: 0.8664949

8b6212ff-0d28-46c5-81c6-22c866a788cb
00:49:33.245 --> 00:49:38.198
valid one. For instance, if you look
at the value here and if the

NOTE Confidence: 0.8664949

ad83e9ff-29dc-40a0-8b45-b003eb159bfa
00:49:38.198 --> 00:49:43.532
value is zero, you have to make
sure that this zero is not the

NOTE Confidence: 0.8664949

9c2df907-a8bd-44d9-8d0b-453ee9b2327d
00:49:43.532 --> 00:49:48.104
correct 0, because the input is
00, the input was not right.

NOTE Confidence: 0.8097728

fb88fed5-627e-4e0d-9396-ce0b82adb2bd
00:49:49.050 --> 00:49:55.230
So in practice for the encoder,
we add another output called valid

NOTE Confidence: 0.78439564

c645771c-9d6c-48de-be5d-609e9a2c5d27
00:49:55.230 --> 00:50:00.316
or V. The value of the valid
just determines if the value of

NOTE Confidence: 0.86772096

e669e31a-ad1f-4bcd-9c5a-0da09327ef90
00:50:00.680 --> 00:50:05.540
F1 is valid to look at or not.
So whenever we have 1-hot in

NOTE Confidence: 0.86772096

f39233f1-34e7-4e74-9d54-c095c554ef5a
00:50:05.540 --> 00:50:09.752
the input, the valid is 1. Whenever
we don't have any 1-hot in the

NOTE Confidence: 0.86772096

d10c51e4-2e10-4493-b3d8-ab839faaacc5
00:50:09.752 --> 00:50:14.288
input, it means that the value
value in the F1 is not a valid

NOTE Confidence: 0.808069

c9d3f8ac-7a06-4c17-98b5-27cc59cc66f5
00:50:14.910 --> 00:50:16.920
value, so V is 0.

NOTE Confidence: 0.8189415

1b242d90-b083-41b5-a771-c084ec99d5d3
00:50:18.400 --> 00:50:22.417
And if we write the Boolean
function for V, V is the minterm.

NOTE Confidence: 0.8189415

d930be64-4ec4-4100-b1d2-8c020b43b5c7
00:50:22.417 --> 00:50:25.816
As you can see here minterm
0 and minterm

NOTE Confidence: 0.82917887

067d530b-0c95-4860-a595-ddecbfe70554
00:50:26.670 --> 00:50:31.976
2. So, if you put it in
the Karnaugh map, it becomes the

NOTE Confidence: 0.82917887

c1417ece-9f13-4925-abef-b54b09ab6691
00:50:31.976 --> 00:50:35.136
diagonal cell which is not
adjacent, so we said that

NOTE Confidence: 0.82917887

46bba013-2fbf-448e-bfb0-cf778073a0ff
00:50:35.136 --> 00:50:37.980
whenever you see the
diagonal cell, which is a

NOTE Confidence: 0.82917887

883e2c79-abfb-403b-a52b-778900c2fb8f
00:50:37.980 --> 00:50:41.456
hint that this is an
exclusive or. So, as you can

NOTE Confidence: 0.82917887

8d26a2db-5ec7-4f67-81db-dba43772dfdf
00:50:41.456 --> 00:50:45.880
see, D0 or D1 bar, and
D0 bar or D1, so

NOTE Confidence: 0.82917887

ddb24259-c859-4ea9-9ed3-befc662fa049
00:50:45.880 --> 00:50:48.724
this is exclusive or between
D0 and D1.

NOTE Confidence: 0.8110524

5a52b2fa-51af-46a9-a4c4-fede8888cf4f
00:50:51.490 --> 00:50:54.248
This is the encoder 2 by 1.

NOTE Confidence: 0.81186116

9a8bef24-7870-4659-bc5f-2bbdb0f0146d
00:50:55.060 --> 00:50:57.010
So two inputs.

NOTE Confidence: 0.84080195

352d7ed3-2e9f-4d2e-9e39-7a9e0c6bfe83
00:50:58.130 --> 00:51:02.070
One output F1 and one output for the
validity of that.

NOTE Confidence: 0.81700474

d8a2b39f-3f3a-4484-a52c-2a167778efdf
00:51:02.690 --> 00:51:06.811
Whenever valid is one, we just
then look at F1.

NOTE Confidence: 0.8610794

86e86506-386d-492b-a9a4-ce83d72ee324
00:51:06.811 --> 00:51:12.178
If V is 0, meaning
that the inputs are not

NOTE Confidence: 0.8610794

5dfd2291-10c2-4920-a115-f8095bba4c48
00:51:12.178 --> 00:51:14.397
1-hot vector, it means F1 is not valid.

NOTE Confidence: 0.8181162

bee7fc9b-7ba4-4a3e-b473-3ce55128f208
00:51:19.030 --> 00:51:24.952
For the
larger encoder after two by one,

NOTE Confidence: 0.8181162

5ff109a7-07f6-4bbd-bdad-ca650c626640
00:51:24.952 --> 00:51:31.297
we can have two to the power of
two by two, so it becomes four

NOTE Confidence: 0.8181162

59efade5-3e29-447e-9e81-e7d1a402124f
00:51:31.297 --> 00:51:36.796
by two. So if you receive a 1-hot
vector with four elements, we

NOTE Confidence: 0.8181162

03bca28d-454f-490a-bf8d-ac1ab40b7a18
00:51:36.796 --> 00:51:41.026
can encode it to the binary
number with two bits.

NOTE Confidence: 0.8397465

d0937406-ae0a-409a-9558-07db4537ac59
00:51:42.010 --> 00:51:47.680
And you need a valid output just to
say that the inputs were valid.

NOTE Confidence: 0.8397465

ae016ba8-c151-4c87-a0b1-ba7b4d39910c
00:51:47.680 --> 00:51:50.515
Then you have to look at the

NOTE Confidence: 0.629988

96f82a63-ed26-435e-85c9-86f617229de3
00:51:50.515 --> 00:51:55.238
outputs. So decoder 2 by 4,
encoder 4 by 2.

NOTE Confidence: 0.85215867

20f7f41b-0b39-4bdf-b98f-58a735534f3c
00:51:58.020 --> 00:52:03.571
So for the encoder four by two,
you have four variables in the

NOTE Confidence: 0.85215867

21b72c38-555e-4d3d-9250-4f2f02494a2b
00:52:03.571 --> 00:52:07.414
input, two variables in the
output, plus one additional

NOTE Confidence: 0.92818797

55fdb117-44f5-45f5-8921-43fa1e555cba
00:52:07.414 --> 00:52:10.235
output V. And this is the truth

NOTE Confidence: 0.79068506

227ebb80-d66a-40a0-8ebd-db6980220a7c
00:52:10.235 --> 00:52:14.499
table for that. So four
input variables, D0 up

NOTE Confidence: 0.79068506

54eb5927-edb1-46b8-b110-faa18cbe3133
00:52:14.499 --> 00:52:15.720
until D3.

NOTE Confidence: 0.83460945

19ad7b58-59bc-4f3c-b304-1a40b6e36d85
00:52:16.760 --> 00:52:23.455
Two outputs X&Y, F1, F2 and one
additional output F3 as a valid.

NOTE Confidence: 0.8352366

6a5bfe48-82d8-4586-8a17-e9607b611040
00:52:24.600 --> 00:52:29.385
If all are zero, this is not the
1-hot vector, so the valid is

NOTE Confidence: 0.8352366

6db77c5b-be32-44d1-8d0f-e10916d45961
00:52:29.385 --> 00:52:31.937
0 and we don't look at the X&Y.

NOTE Confidence: 0.80264217

41e46dac-7dba-4ed1-963b-1857daf4720f
00:52:33.900 --> 00:52:39.260
The 2nd row. This is the 1-hot
vector. D0 is 1 and all the

NOTE Confidence: 0.80264217

ca14a656-3ea9-4502-8f15-35994fd907d6
00:52:39.260 --> 00:52:40.935
other inputs are zero, so.

NOTE Confidence: 0.8036737

50fc377f-5d9d-40b1-84bb-3f5e25bac6c7
00:52:41.640 --> 00:52:46.862
This means that we can encode
this 1-hot vector to minterm 0.

NOTE Confidence: 0.8036737

b807e330-a349-4afa-a98d-bb79ed8b3379
00:52:46.862 --> 00:52:48.354
Minterm 0 is 00.

NOTE Confidence: 0.9058648

6623de8d-6dfa-4604-ac87-cea3cc1c6040
00:52:49.050 --> 00:52:50.058
And this is valid.

NOTE Confidence: 0.8106896

2904a4eb-0215-4a76-9885-1c76d1374b02
00:52:51.680 --> 00:52:59.072
The 2nd row. This is a 1-hot
vector, so D1 is 1, so we

NOTE Confidence: 0.8106896

8fcbacad-3181-47ff-b74f-85a7af2eeb9d
00:52:59.072 --> 00:53:04.143
generate the minterm 1. Minterm one is 01
and this is valid.

NOTE Confidence: 0.81516397

e3ca638b-1463-4451-b85f-2456b8c105a1
00:53:05.930 --> 00:53:11.824
The 4th row. This is not a
1-hot vector, so this is not

NOTE Confidence: 0.81516397

74cb34cc-39da-414c-a0f3-66bd8c3620f9
00:53:11.824 --> 00:53:14.350
valid and we shouldn't look at

NOTE Confidence: 0.75173646

1e6af04f-2737-470f-8a53-7308688dc1d2
00:53:14.350 --> 00:53:16.700
the output, and etc.

NOTE Confidence: 0.80792785

8cef856b-e82f-4dfe-8b3e-0d85c5076ff4
00:53:18.090 --> 00:53:23.860
So. Then we have to design the
Boolean function for F1. Let's

NOTE Confidence: 0.80792785

d03c88a8-ddb9-4ab3-95a4-00612510d617
00:53:23.860 --> 00:53:28.930
see which entries makes it one
and write it as a sum of

NOTE Confidence: 0.80792785

f200fb14-dc84-4b29-8124-22a765eb3e68
00:53:28.930 --> 00:53:32.830
minterms and we can reuse the
don't care condition for

NOTE Confidence: 0.80792785

a74a81bb-835c-400c-b271-deaaffb175ce
00:53:32.830 --> 00:53:34.780
minimization. The same for F2.

NOTE Confidence: 0.827911

d17c91d0-423c-476e-9aa0-919f8462aa4a
00:53:35.760 --> 00:53:37.108
Sum of minterms.

NOTE Confidence: 0.83828604

233c0a36-0211-4a2f-8079-cfe61cfcf77c
00:53:38.100 --> 00:53:40.102
And then reuse the don't care

NOTE Confidence: 0.836969

8abdbab6-3512-4af1-b9a8-43907adb148e
00:53:40.102 --> 00:53:44.355
conditions for minimization. The
same for the valid. We have

NOTE Confidence: 0.836969

9e290369-9411-46b0-8705-2779f03d6581
00:53:44.355 --> 00:53:48.700
four input variables, so we can
minimize using the four variable

NOTE Confidence: 0.8189683

32ea8ef7-2f1a-47ff-9147-49167b51aae8
00:53:48.700 --> 00:53:51.590
Karnaugh map. For the F1,

NOTE Confidence: 0.833547

6fbec599-a544-4da9-aca7-4dffb0c3799e
00:53:52.700 --> 00:53:57.350
by reusing the don't
care conditions, we can

NOTE Confidence: 0.833547

226b734b-9770-4d49-9c90-c56deed54514
00:53:57.350 --> 00:54:02.000
create two large regions,
so F1 becomes D1 or D3.

NOTE Confidence: 0.86763746

78000da4-c099-49c3-b0f8-6302a2241aa2
00:54:03.830 --> 00:54:09.038
This is the one so we can create
the adjusting cells here. So in

NOTE Confidence: 0.86763746

31bec496-0030-43d0-a31e-7902bfb8374f
00:54:09.038 --> 00:54:12.758
this region, the only thing that matters
is the value of D1.

NOTE Confidence: 0.7988651

5793c21a-782c-483f-a94c-c6219d3a2418
00:54:13.560 --> 00:54:17.824
D0 is either zero or one and
D2 and D3 are either zero or one.

NOTE Confidence: 0.9302564

5277b18b-0d7d-477a-8f02-fbc347f5733a
00:54:18.450 --> 00:54:19.380
In this region,

NOTE Confidence: 0.9131545

a9673cba-a8a1-4b5d-b100-7ef35957456e
00:54:20.410 --> 00:54:23.170
The only thing that matters is the
value of D1.

NOTE Confidence: 0.8985884

b7858a2b-01b0-4788-b5a9-86cf7c9698ef
00:54:24.290 --> 00:54:25.109
It's always 1.

NOTE Confidence: 0.80706227

03d1f1de-e850-4c0a-85e8-e6102958d875
00:54:27.870 --> 00:54:33.246
F2 the same, so for F2, the
minterm four is 1. So you

NOTE Confidence: 0.80706227

b5c93c29-343f-4bd5-8dfa-000364f3eefe
00:54:33.246 --> 00:54:37.470
can create 2 shared regions and
in these regions we only

NOTE Confidence: 0.8241208

8b056f50-6091-441e-9cdd-b93bd895e818
00:54:39.060 --> 00:54:40.840
have D2 or D3.

NOTE Confidence: 0.8454674

c64a1621-5c81-4ff2-800b-41280c341e29
00:54:42.370 --> 00:54:48.180
So F2 is equal to D2 or D3, and
for the validity or valid

NOTE Confidence: 0.8497657

bfb9ebfa-cd13-4019-aed3-5301228d6343
00:54:48.180 --> 00:54:53.602
output, whenever we have a
1-hot vector in the input, the

NOTE Confidence: 0.8497657

a61d598e-5ad9-4967-839d-7e3c7795f7bd
00:54:53.602 --> 00:54:55.090
valid must be one.

NOTE Confidence: 0.84854114

63b86ae1-f50e-4dc3-9e1c-e156ae895488
00:54:57.020 --> 00:55:01.101
And all other cases, we
shouldn't look at the output.

NOTE Confidence: 0.84854114

bc2af0ce-8d6c-4980-a205-7c79653c6145
00:55:01.101 --> 00:55:04.811
The output isn't valid or not valid, so
all are 0.

NOTE Confidence: 0.8368826

7bf4d8e6-1774-43cc-8b9e-9d3197116a3e
00:55:05.560 --> 00:55:10.552
So as you can see, there is no
way to simplify this function,

NOTE Confidence: 0.8368826

d9a02077-b05d-4ddd-b797-3b163533ac5f
00:55:10.552 --> 00:55:15.544
But this is a diagonal cell, we
can use the

NOTE Confidence: 0.8368826

44f8158a-d3b4-4ad7-968a-ea5e028afb11
00:55:15.544 --> 00:55:16.696
exclusive or to simplify the Boolean

NOTE Confidence: 0.8869106

e9bb70f6-9830-4004-bf3e-8dfbe6bfbcb6
00:55:18.340 --> 00:55:18.860
Function.

NOTE Confidence: 0.8399876

01175a43-1f83-4008-a6ef-1c2ba5148d5b
00:55:20.390 --> 00:55:26.004
Based on this, so this is the
full form. You can just use the

NOTE Confidence: 0.8399876

013beac1-d024-4e21-966b-57c0522644f9
00:55:26.004 --> 00:55:29.613
distributive postulate extracted
for this one. The red one.

NOTE Confidence: 0.8399876

565bf1eb-9cab-44ac-b87c-8e64f5ccdfec
00:55:29.613 --> 00:55:32.420
Extracted inside the parentheses,
becomes exclusive or.

NOTE Confidence: 0.8468658

929a0637-8ba1-417a-bf09-b1f05a40f2c6
00:55:33.580 --> 00:55:37.155
The blue one, here you can
extract and then the inside of

NOTE Confidence: 0.8468658

f9094716-389e-4748-b8ec-5686e7a3e4ba
00:55:37.155 --> 00:55:38.780
the parenthesis becomes
exclusive or.

NOTE Confidence: 0.89780366

28bbbbe3-3400-403c-8f80-f3ee46223fac
00:55:40.340 --> 00:55:41.680
And here is the design.

NOTE Confidence: 0.9345398

2a933ee0-7966-46ce-8d3e-b84d89183256
00:55:42.860 --> 00:55:44.048
This is the four

NOTE Confidence: 0.7959706

fbea53c9-2d22-49b3-bae8-b72d534bf1dc
00:55:44.900 --> 00:55:50.202
by two encoder with an additional output
as the valid.

NOTE Confidence: 0.5140518

184cdd1d-9a50-4331-8f2e-9078011c08c9
00:55:55.310 --> 00:55:55.950
Ah.

NOTE Confidence: 0.8533388

62de8572-cf77-42b1-8ca2-5ce50de29526
00:55:58.180 --> 00:56:01.407
One thing is that
for the encoder.

NOTE Confidence: 0.8972016

5c5ff79a-2b52-48f0-82fe-cde1c6167e66
00:56:02.930 --> 00:56:04.778
As you can see in the
truth table.

NOTE Confidence: 0.84036565

ff59bb72-6dbf-4eb8-9469-98d8c166481d
00:56:07.080 --> 00:56:08.865
Let me come back to the truth table

NOTE Confidence: 0.88360405

0d4ee93e-42d8-40f4-8b4e-3029d9a28fb7
00:56:08.865 --> 00:56:12.550
here. Most of the rows

NOTE Confidence: 0.9146231

da4be5c6-943e-4544-8725-dcc2dac9e8e1
00:56:13.470 --> 00:56:15.432
in the truth table are invalid

NOTE Confidence: 0.91312796

958db44e-5ffd-47b2-8d99-3b32ecdee7e8
00:56:15.432 --> 00:56:18.770
or not valid. Very few of them

NOTE Confidence: 0.93616843

9ef0ce92-b755-476d-bb0b-445831457697
00:56:18.770 --> 00:56:20.780
are valid. OK.

NOTE Confidence: 0.7644859

b5104b15-4946-4994-8bf8-c7a9b60653c5
00:56:21.680 --> 00:56:27.395
So in practice, they said,
let's reuse these invalid

NOTE Confidence: 0.7644859

5b1a1a91-d7c8-4daf-921b-0ef5ace085e3
00:56:27.395 --> 00:56:29.300
rows or invalid

NOTE Confidence: 0.85079294

54ee5efc-dd8c-4531-9cbb-f2a8105347f6
00:56:30.630 --> 00:56:36.318
combination of inputs in the
encoder, but since this is a

NOTE Confidence: 0.85079294

63b6ce6b-86e9-4408-9091-716d132416d6
00:56:36.318 --> 00:56:42.006
invalid 1-hot vector, is it possible
to reuse it for, for instance

NOTE Confidence: 0.85079294

75288bb2-d935-472e-8be0-74e008a9e33d
00:56:42.006 --> 00:56:43.428
for this one?

NOTE Confidence: 0.93671125

b8be92b7-79b9-4005-995d-bba068c428be
00:56:44.670 --> 00:56:45.708
This is called

NOTE Confidence: 0.67633593

922b8624-c635-4123-9944-f2a220cc676c
00:56:47.680 --> 00:56:53.345
Priority Encoder, so basically in
the Priority Encoder, we want to

NOTE Confidence: 0.8553329

79881fa3-1065-4452-a831-dda8ab1a81a0
00:56:53.345 --> 00:56:59.870
reuse invalid rules in
the normal encoder.

NOTE Confidence: 0.87406605

c467846a-720c-45a0-a049-e20c523ff3e0
00:57:01.790 --> 00:57:06.050
So how is this possible?
So back to the normal

NOTE Confidence: 0.87406605

64cf3570-113e-4d8c-9391-26b26cae057e
00:57:06.050 --> 00:57:08.180
encoder of four by two.

NOTE Confidence: 0.92432845

371542c6-856c-4aef-8f34-d1adf8252587
00:57:09.560 --> 00:57:10.848
So the question is.

NOTE Confidence: 0.7742327

620d0977-ed22-49e3-8cb8-67e8d681574f
00:57:11.950 --> 00:57:14.476
The first invalid row is this.

NOTE Confidence: 0.91606486

d9c407f3-36a8-4ff4-ba46-94dbacd271ab
00:57:15.570 --> 00:57:18.970
So we have

NOTE Confidence: 0.86687446

5b7cd899-3ff6-4f2b-8a42-1f6c4a01e2a0
00:57:18.970 --> 00:57:24.366
0011. So this is not
a 1-hot vector in the input,

NOTE Confidence: 0.86687446

78501049-c787-4158-80f7-e919d0ffe276
00:57:24.366 --> 00:57:25.736
but we could say that,

NOTE Confidence: 0.8086071

d385341d-0646-4c75-8bc0-24a8383dba9e
00:57:26.360 --> 00:57:28.382
We can start from the highest

NOTE Confidence: 0.8817125

4faf2714-5afb-45b2-ba2e-109478ae6280
00:57:28.382 --> 00:57:33.120
significant bit as long
as what we are doing is correct,

NOTE Confidence: 0.8817125

ca9db4fd-0e42-4c39-92bf-a32cf8a2d0ae
00:57:33.120 --> 00:57:38.070
so 001 to up until here,
we see a 1-hot vector.

NOTE Confidence: 0.86974835

55ed178b-1d84-4ec2-b4f7-a1c8bf861842
00:57:40.200 --> 00:57:44.193
We don't care about what's
happening in the rest of the

NOTE Confidence: 0.86974835

a0b5027a-e4ce-42f3-8dc2-3e0a1269dcad
00:57:44.193 --> 00:57:48.549
bits because we always assume that
the input is in the right

NOTE Confidence: 0.86974835

ccec746e-5d5c-4fe5-a951-6d125af1d99b
00:57:48.549 --> 00:57:53.631
1-hot vector. So I can say
that 001. So this is a 1-hot

NOTE Confidence: 0.86974835

08e5759c-d1e8-4549-9c1f-e6387f555d25
00:57:53.631 --> 00:57:57.987
vector. Do not look at what's
happening in the rest of the

NOTE Confidence: 0.86974835

7b294287-40ac-4cd4-afc2-9902c916b432
00:57:57.987 --> 00:58:01.617
bits, and I assume all the other
bits are zero.

NOTE Confidence: 0.8948598

eda49522-02b3-459f-93c9-c5c2b0088254
00:58:02.710 --> 00:58:05.660
And this one happens based on
the noise or etc.

NOTE Confidence: 0.87446845

ab1790ec-7e9d-42a2-ab21-00348b243973
00:58:06.450 --> 00:58:11.476
So then I can assume that this
is zero and I can reuse this

NOTE Confidence: 0.85955715

e30d2a6e-b1f2-4c59-84c2-78aed410319f
00:58:11.476 --> 00:58:15.320
row. It has the same
behavior as this.

NOTE Confidence: 0.87343186

fde11346-292d-4584-84e1-cda8d9d4ac4b
00:58:16.550 --> 00:58:18.368
So I can make it valid.

NOTE Confidence: 0.8188099

e630c76e-5fb3-4a2c-9be6-edb866680ebc
00:58:19.420 --> 00:58:23.260
And produce the binary
address of binary minterms

NOTE Confidence: 0.8188099

b19342a0-279f-432b-84d6-5a79f6a905de
00:58:23.260 --> 00:58:25.180
for this role.

NOTE Confidence: 0.86235386

7956690e-a0f3-4a7d-a73f-b8b82e1fe7b4
00:58:26.430 --> 00:58:30.980
As you can see here, I give the
priority to the D1 as opposed

NOTE Confidence: 0.86235386

4f355ce0-5331-46c1-85d4-be3e88eb7d2a
00:58:30.980 --> 00:58:34.555
to the D0, so the priority goes
to the highest significant bit.

NOTE Confidence: 0.87360454

2b70bf0b-e14b-4c65-9cc6-9a198dc3f2ff
00:58:35.920 --> 00:58:38.760
So another invalid 1-hot
vector is here.

NOTE Confidence: 0.8090538

44b3e123-ab56-499e-b1db-a52e5a4186e1
00:58:40.080 --> 00:58:41.820
So again, I start from the

NOTE Confidence: 0.84229875

29223939-e5c8-4365-9efc-5127489a060a
00:58:41.820 --> 00:58:47.282
highest significant bit. 01, so up
until here, I see a 1-hot vector.

NOTE Confidence: 0.84229875

6bf21fff-e83a-4bf9-a9f4-3826d4dd683e
00:58:47.282 --> 00:58:54.450
OK, so I don't look at the rest
of the bits, so I said that here,

NOTE Confidence: 0.84229875

73db8641-b10a-4193-88cb-df725d00940b
00:58:54.450 --> 00:59:00.722
up until here, I see zero up
until D2 which is 1. So

NOTE Confidence: 0.84229875

db49813c-2ea9-415c-9290-6a4cf610c959
00:59:00.722 --> 00:59:04.754
right away, I output the binary
number for D2.

NOTE Confidence: 0.84403676

d4e6ba7a-181f-4c2f-8605-c55bfd57c763
00:59:06.460 --> 00:59:10.958
So I make this row valid and
then output the minterm 2.

NOTE Confidence: 0.832923

e37e3953-7da1-4b06-a78f-2b689eda4db9
00:59:13.550 --> 00:59:18.050
Second, this one,
the next row is also invalid,

NOTE Confidence: 0.832923

d32f0bf2-59b8-468e-b1d2-1905511aa86c
00:59:18.050 --> 00:59:22.550
but again, if I start from
the high significant bit 01,

NOTE Confidence: 0.832923

1790b8f9-83ee-41e3-b5df-a91810c7a038
00:59:22.550 --> 00:59:27.425
I just ignore the rest of the
bits and I assume that all

NOTE Confidence: 0.832923

78aa78fd-0651-483f-b745-857a63ab2c09
00:59:27.425 --> 00:59:32.300
the other bits are zero and
reuse this 1-hot, this row.

NOTE Confidence: 0.832923

2b908af7-0836-4a82-8ed4-eafe62bdda9e
00:59:32.300 --> 00:59:34.175
Very similar to this row.

NOTE Confidence: 0.81593204

7783a789-570f-4671-b8e8-50766188125f
00:59:35.310 --> 00:59:38.350
So I make it a valid output 10.

NOTE Confidence: 0.9094328

a02d0845-d14c-47db-9f4d-9e78335f2619
00:59:39.460 --> 00:59:40.668
The same is here.

NOTE Confidence: 0.8447946

cdfc2a6b-f2a6-4cc9-8726-6e7f7a76f392
00:59:42.480 --> 00:59:49.298
Reuse this row for the minterm
similar to this row.

NOTE Confidence: 0.8632297

d387a7f3-b348-4ba4-b4b2-2a0f6fa1fa32
00:59:52.790 --> 00:59:55.128
So the next invalid row is here.

NOTE Confidence: 0.8814873

f12c7532-5dfc-4c74-ac0b-65716c5137e1
00:59:56.240 --> 01:00:00.390
So all these rows are invalid
because they are not

NOTE Confidence: 0.83139884

f5412585-64c8-49c8-9809-9b7bf3d458e9
01:00:00.460 --> 01:00:04.528
1-hot, but I can say that
starting from the high significant

NOTE Confidence: 0.83139884

debce946-07d8-4f56-8174-a99ad4772963
01:00:04.528 --> 01:00:07.240
bit, I see one, so this is 1-

NOTE Confidence: 0.91846853

078a769a-971a-4c21-af8e-7f9d86be345d
01:00:07.240 --> 01:00:11.710
hot. I assume that all the other
bits are zero.

NOTE Confidence: 0.79543084

d8a03e10-e544-477d-b203-4e4388519839
01:00:12.420 --> 01:00:16.190
And I reuse these rows as
I like this one.

NOTE Confidence: 0.8503328

7240c3c9-a728-4dab-bc0a-ba4eaacdb5db
01:00:17.430 --> 01:00:19.536
I make all these rows valid.

NOTE Confidence: 0.81986064

a9e30a27-fc30-44eb-a227-8082a7de866e
01:00:20.220 --> 01:00:21.906
And then I output the minterms

NOTE Confidence: 0.8741998

1d9b33f1-e0a0-4b52-96c0-289fb8d01216
01:00:22.540 --> 01:00:25.447
as I see the 1-hot for
the D3.

NOTE Confidence: 0.84635824

52e4fdae-7ab8-49a7-99ec-a5b8fd1e005b
01:00:28.360 --> 01:00:32.749
So this way, you design a new
encoder called Priority Encoder.

NOTE Confidence: 0.84635824

0e43f23c-c97e-4ee7-a086-4e5ce5f091f2
01:00:32.749 --> 01:00:37.936
Whenever you see the input, you
look at the value in the

NOTE Confidence: 0.84635824

1029a9d9-8d7b-4417-8410-96a74c00c9c1
01:00:37.936 --> 01:00:39.532
input from the highest

NOTE Confidence: 0.8492883

730c8187-0af5-4b51-8738-10c1cb7da918
01:00:39.532 --> 01:00:44.548
significant bit. And if it
is correct, you just simply

NOTE Confidence: 0.8492883

c2342e26-5916-4c05-a65d-0c607acf071e
01:00:44.548 --> 01:00:48.517
output the minterms for that
correct 1-hot vector.

NOTE Confidence: 0.86792505

daa2e752-f9c9-41fb-b625-18d22d930b16
01:00:50.530 --> 01:00:57.194
So now if you are going
to design the truth tables for

NOTE Confidence: 0.86792505

613551d1-85f9-4bd8-818c-819844fcef82
01:00:57.194 --> 01:01:03.382
the F2, we have to write the
minterms, which is 4 5 6 7.

NOTE Confidence: 0.8853412

3b185e39-c2b3-4060-8c5d-542df81564ce
01:01:04.140 --> 01:01:07.680
And then here 9 10 up until

NOTE Confidence: 0.8505738

c1ad4f12-b534-4517-9efb-387ced7a04d2
01:01:07.680 --> 01:01:14.920
15. For F1, we have to
write the minterms 2, 3,

NOTE Confidence: 0.8505738

9cbf5f0c-7bf5-4172-9e65-ba3583efa9ed
01:01:14.920 --> 01:01:17.348
and then comes here.

NOTE Confidence: 0.67755044

b8b9e303-2746-4927-83d7-607146498a70
01:01:18.030 --> 01:01:22.309
8 and etc. For the V, it's
again the same.

NOTE Confidence: 0.86336637

34ec21c7-32a8-4ef7-8309-4144fb3fa633
01:01:22.940 --> 01:01:25.784
So these are just normal
Boolean functions, so you

NOTE Confidence: 0.86336637

d97afa5f-a1d0-4124-9c0c-99125fd69b72
01:01:25.784 --> 01:01:30.208
write it as a sum of minterms
and put it in the Karnaugh map with

NOTE Confidence: 0.86336637

81f2dc07-27f6-42b2-9cca-a5eddb5ee6b1
01:01:30.208 --> 01:01:31.788
four variables and minimize
it.

NOTE Confidence: 0.87176216

833d3268-3b90-4676-ac6d-7afa23bcbfdc
01:01:33.800 --> 01:01:37.080
One way to show this
table is this.

NOTE Confidence: 0.8294964

dfe672b1-4d25-4079-805d-0d40545a71ae
01:01:38.140 --> 01:01:41.693
You could say that for those
at you just simply ignore

NOTE Confidence: 0.8294964

f9bb6ab8-7256-4e5a-8c47-b6b889d8799d
01:01:41.693 --> 01:01:45.246
looking at, put the X. This
X is a don't care

NOTE Confidence: 0.8294964

2bd3c346-6f08-4d86-8564-d2ea1d30dc51
01:01:45.246 --> 01:01:48.153
condition because don't care
condition happens only in the

NOTE Confidence: 0.8294964

0898ebc6-151a-450a-a013-e959396c9f28
01:01:48.153 --> 01:01:51.706
output functions. This X is
just saying that we don't look at

NOTE Confidence: 0.8294964

a36bf004-670e-4977-996c-c80ad4c595ff
01:01:51.706 --> 01:01:53.321
the value in the input.

NOTE Confidence: 0.8216582

3185130a-96d8-4058-8e7d-9c708a6487ae
01:01:54.420 --> 01:01:58.380
As you can see here, these two
rows are the same.

NOTE Confidence: 0.84423447

379f6a6d-e1d7-4166-9b17-914f7053f491
01:01:59.210 --> 01:02:01.180
These 3 rows are the same.

NOTE Confidence: 0.8623507

665462f5-68c2-4fd1-8daf-4c3e2e702382
01:02:01.900 --> 01:02:07.588
And these old rows are similar,
so we can absorb these similar

NOTE Confidence: 0.80866265

58f0da6f-4d3e-4f02-a090-40b0804822de
01:02:07.588 --> 01:02:13.826
rows to just show
a dense truth table. This is not

NOTE Confidence: 0.80866265

fa152d64-7b8c-4d9a-8c2d-2157328718e4
01:02:13.826 --> 01:02:18.290
a normal truth table. This is
just a dense version of the truth

NOTE Confidence: 0.80866265

75c06184-0867-41c9-ba2d-177bd76ce091
01:02:18.290 --> 01:02:20.522
table just to show a priority

NOTE Confidence: 0.8607355

24bd817f-aa33-438b-b6f9-a31094db8912
01:02:20.522 --> 01:02:26.110
encoder. The only instance that
remains invalid is this, 0000. It

NOTE Confidence: 0.8607355

e19d3f6e-d337-4fa4-acb4-39aeec8a7f3a
01:02:26.110 --> 01:02:31.765
means that the value is not valid,
V is zero. It means that the

NOTE Confidence: 0.8607355

e5b9fc22-4ab3-4e3e-8cb3-7997e53aa7fd
01:02:31.765 --> 01:02:36.985
the encoder is turned off and
you shouldn't look at

NOTE Confidence: 0.7982073

68173c0c-a728-41c2-b2e4-7f115d1ccc1f
01:02:36.985 --> 01:02:42.663
the output. So you reuse all
the other invalid 1-hot

NOTE Confidence: 0.7982073

97cdcecd-2c38-4681-9152-2beac4b9a04f
01:02:42.663 --> 01:02:43.944
vectors, or invalid inputs.

NOTE Confidence: 0.82191235

83693021-41a3-400d-ba73-35d6a951b66c
01:02:45.180 --> 01:02:50.031
The only invalid vector
actually, you just keep it as a

NOTE Confidence: 0.82191235

bc8808a1-a5f8-4bf4-8943-edd19506558b
01:02:50.031 --> 01:02:52.677
10 off option for the encoder.

NOTE Confidence: 0.8646237

b1663de1-da1a-42ee-81a8-79bff19170a5
01:02:54.250 --> 01:02:58.530
And here is the design after
the simplification in the

NOTE Confidence: 0.8646237

3087b6f8-c941-45af-9023-65c46f241923
01:02:58.530 --> 01:03:00.242
panel with four variables.

NOTE Confidence: 0.83646953

3c163076-be92-4bab-801b-1d3c38317ec9
01:03:02.760 --> 01:03:08.360
So four inputs, two outputs
plus an additional valid

NOTE Confidence: 0.7866014

87dde874-5b5d-4e0a-a498-ebaa98e4ab8d
01:03:09.910 --> 01:03:14.750
output. And these are the Boolean
functions after minimization by

NOTE Confidence: 0.7866014

321d702c-631a-4ba2-bded-15e9cdb31542
01:03:14.750 --> 01:03:16.800
the four variable Karnaugh map.

NOTE Confidence: 0.85110337

22617736-defd-4853-b0ff-cf4653debf59
01:03:20.470 --> 01:03:24.403
What is the priority? The
application of the encoders?

NOTE Confidence: 0.8049142

769fd696-2543-42ff-b22e-c3ad4e95c52b
01:03:25.470 --> 01:03:29.826
And the priority encoders? Dr.
Fani. Yes. It's 9:50. OK, just

NOTE Confidence: 0.8049142

dbe4e153-f830-43e2-ad3f-eafb4ff59277
01:03:29.826 --> 01:03:34.545
one more minute and I'm done
just to show you that there's an

NOTE Confidence: 0.8049142

cab1e1b8-a774-4703-b9e5-9905a7b668d5
01:03:34.545 --> 01:03:38.175
application for encoder. We know
the application of the decoder

NOTE Confidence: 0.8049142

a8c81480-5a01-4bf4-bfdd-2bec3697c78f
01:03:38.175 --> 01:03:39.627
for selecting the memory

NOTE Confidence: 0.85869753

278ee103-37a9-4d7c-9fab-c9fa504c5df3
01:03:39.627 --> 01:03:42.390
locations. But what is the
application for encoder?

NOTE Confidence: 0.8428416

60f4750e-a372-44a6-bbd5-3887ca4ad392
01:03:43.580 --> 01:03:46.464
One application is the
positional encoders. For

NOTE Confidence: 0.8428416

4660ac41-1ec2-434c-a8d3-9c4d76afb9fe
01:03:46.464 --> 01:03:50.584
instance, if you have an
compass, you can create a

NOTE Confidence: 0.8428416

a2fbdea6-7fab-41f2-a406-eec1c5d42370
01:03:50.584 --> 01:03:54.704
digital compass. So you can
assign that whenever the compass

NOTE Confidence: 0.8428416

c82035e6-834a-444e-a0af-9cf1c4cf0146
01:03:54.704 --> 01:04:00.060
actually shows a direction, you
make it 1 and put it into the

NOTE Confidence: 0.8428416

24ac754f-272f-432f-9798-a6204a9b6a94
01:04:00.060 --> 01:04:01.296
encoder and

NOTE Confidence: 0.86515784

77597e99-5f32-4aa7-a776-c5830a43cd19
01:04:02.970 --> 01:04:05.810
provide a encoding mechanism for

NOTE Confidence: 0.90863496

a9484e57-f0b8-44a6-81fa-d5088806507c
01:04:05.810 --> 01:04:11.120
the directions. So for instance,
in this device, if you go to

NOTE Confidence: 0.90863496

124dcfb8-785b-45a6-b992-93e5ac39610c
01:04:11.120 --> 01:04:14.162
this link, you can read more
about this device.

NOTE Confidence: 0.8482013

cd28acab-b956-498f-9dc5-350a1b7ab7b0
01:04:14.830 --> 01:04:20.718
So this is a compass, so if it
is East it is wired to D2 and

NOTE Confidence: 0.8482013

442336d6-b576-4ef6-8439-9dddda246e00
01:04:20.718 --> 01:04:25.134
makes it one, and all the other
directions are zero, because at

NOTE Confidence: 0.8482013

d24719dc-d9b3-4f00-99d2-ead8b0c028a2
01:04:25.134 --> 01:04:27.342
anytime, only one direction is

NOTE Confidence: 0.87030756

e01ed0ff-00d1-4c61-966e-424018f4280c
01:04:27.342 --> 01:04:32.184
enabled. And in the output you
have a binary code or binary

NOTE Confidence: 0.87030756

f237e6b5-0a7b-4d3c-bb88-db1278c89279
01:04:32.184 --> 01:04:33.600
number for that direction.

NOTE Confidence: 0.9258479

529262c5-6be3-4bc1-9e9c-32d8f0412e63
01:04:34.340 --> 01:04:39.968
So this is a way to produce a
binary number for directions.

NOTE Confidence: 0.7492116

25235552-6c89-488f-a1b0-6293ca2f98d1
01:04:42.260 --> 01:04:44.720
8 directions, 3 Binary numbers.

NOTE Confidence: 0.8525755

35b030a8-7af6-4b17-943e-0cc250099aa6
01:04:45.330 --> 01:04:50.188
And this is the truth table. For instance,
for South, we create 100, the binary

NOTE Confidence: 0.8525755

60fbe2ae-5b5c-4cc0-9ce3-5a3e032f8083
01:04:50.188 --> 01:04:52.270
number for 4. For West, you create 6.

NOTE Confidence: 0.90822625

d5ca4de7-0dd3-4656-a27a-485d49b50e5f
01:04:53.380 --> 01:04:55.245
Another application is for the

NOTE Confidence: 0.79344624

bf871bf9-7624-4d32-a07c-b9df8c9915fe
01:04:55.245 --> 01:04:59.590
keyboard. For instance, in the normal
keyboard, the standard keyboard

NOTE Confidence: 0.85035396

bfa0bdd8-3523-4163-932f-239cdd1cb4a4
01:04:59.590 --> 01:05:05.926
has 104 keys, so we can
say that at anytime, only one key

NOTE Confidence: 0.85035396

cb63825f-f6a0-4d29-8e04-017298531518
01:05:05.926 --> 01:05:11.360
can be pressed when
all the other keys are dressed,

NOTE Confidence: 0.85035396

e33b91fe-06c9-4d0a-9f12-9088a0276c4e
01:05:11.360 --> 01:05:16.376
so one key is 1 and all the
other keys are zero.

NOTE Confidence: 0.8679949

a0d91d9e-dfac-4ca8-9bb6-d8b63f7de8df
01:05:17.430 --> 01:05:22.539
Then you can put the 1-hot
vector for the encoder to produce

NOTE Confidence: 0.8679949

ab060324-60f6-4299-b016-4e0a66e59121
01:05:22.539 --> 01:05:24.897
a binary number for each key.

NOTE Confidence: 0.83075196

607248e1-b3ca-48a4-941c-3bf8e6088ec0
01:05:25.470 --> 01:05:27.974
For instance, if you
press for instance K.

NOTE Confidence: 0.85040355

b728e97d-54c1-43d7-9f0b-3ba3b71822a3
01:05:29.760 --> 01:05:34.440
K becomes one and all the other
keys becomes zero and then you

NOTE Confidence: 0.85040355

fe67a527-82ab-47c6-b515-28459151b670
01:05:34.440 --> 01:05:38.730
input it into the encoder, and
the encoder produce a binary

NOTE Confidence: 0.85040355

d5dbd0c1-fdd9-4089-8b9b-a8408ee01d41
01:05:38.730 --> 01:05:43.800
number for the key. This way you
encode each key in the keyboard

NOTE Confidence: 0.85040355

7e42cc74-50dc-4e48-9ed4-560eb8b47d91
01:05:43.800 --> 01:05:45.360
as a binary number.

NOTE Confidence: 0.7883704

99dd178c-1a24-4064-908e-e6562ad4ce45
01:05:47.600 --> 01:05:52.550
So I'm done with the decoder and
encoder and priority encoders,

NOTE Confidence: 0.7883704

fe501111-d935-49aa-93e2-09956de1eb2a
01:05:52.550 --> 01:05:54.350
and the application for that.

NOTE Confidence: 0.89619046

8f90fdbd-1e75-473d-a970-c68ed313c315
01:05:54.980 --> 01:06:00.756
So next week I'm going
to introduce multiplexer

NOTE Confidence: 0.89619046

71b747aa-da65-4129-a5c9-6b0f40f3633c
01:06:00.756 --> 01:06:02.922
and the coders.

NOTE Confidence: 0.8131032

1f14dc2f-a3b4-4587-b68f-7d45caed07d2
01:06:04.170 --> 01:06:07.734
Thank you all for your
attention and, uh, I'm

NOTE Confidence: 0.8131032

4e181d0c-fad0-4347-bdb0-06ce2b59119a
01:06:07.734 --> 01:06:09.318
ready for your questions.

NOTE Confidence: 0.85969895

c218a6db-d939-460d-b6f1-b406da86b9e4
01:06:18.910 --> 01:06:19.860
Any questions?

NOTE Confidence: 0.093206346

250f7168-7c32-4bc6-90e2-70ebd61147d1
01:06:32.830 --> 01:06:33.510
...

NOTE Confidence: 0.83019245

0866e547-f761-4e3d-8b2e-815e33858a2b
01:06:37.300 --> 01:06:42.422
If there are no questions, have
a great day. I'm going to be in

NOTE Confidence: 0.83019245

d95cac17-ff0f-40f5-bcd6-31a8163a8cf5
01:06:42.422 --> 01:06:47.150
the office hour if you
have any questions or concern

NOTE Confidence: 0.83019245

f1b1a8e4-b94e-429d-be13-1a933435db14
01:06:47.150 --> 01:06:50.696
about the lab assignment, the
lecture assignments, the slides,

NOTE Confidence: 0.83802956

b9731cb1-36a8-4743-ba7b-40d4e85f70a3
01:06:50.696 --> 01:06:57.182
etc. And I'm going to check the
midterm marks and we'll release it

NOTE Confidence: 0.83802956

361152ad-fe1e-467e-a25f-7635167a1783
01:06:57.182 --> 01:06:58.946
in just one hour.

NOTE Confidence: 0.8667796

fd291a2e-2b1a-4d54-a524-4dbdb6a5a880
01:07:00.690 --> 01:07:01.859
Have a great day all of you.

NOTE Confidence: 0.90580285

af1da2b0-4ae8-4e83-a54f-81be020069e1
01:07:04.940 --> 01:07:05.870
Thank you Justin.

NOTE Confidence: 0.8521814

21cdd359-32d6-4049-b5d2-9e4b17c486b1
01:07:07.850 --> 01:07:08.900
Thank you Nicholas.

NOTE Confidence: 0.49434125

80012f81-5064-4d38-8b53-0b51c34e3eff
01:07:15.950 --> 01:07:18.700
So I stop recording.


