WEBVTT

NOTE duration:"01:21:53.6880000"

NOTE language:en-us

NOTE Confidence: 0.520077347755432

0c5eacaf-5630-4f12-8cea-867a508d699e
00:01:02.300 --> 00:01:06.160
So it seems

NOTE Confidence: 0.854164838790894

8dd17537-91b4-4c5f-90e1-2ec155635237
00:01:06.160 --> 00:01:11.308
there are few people
in the session, but

NOTE Confidence: 0.841263890266418

dec0519b-4b6e-429e-9870-6cc15e5e3562
00:01:11.860 --> 00:01:16.337
more are joining, so let's
start. Before I start, I just

NOTE Confidence: 0.841263890266418

4fef068e-d1f9-4376-93c3-4e72d76674fb
00:01:16.337 --> 00:01:21.628
wanted to let you know that I
mean I uploaded the lab assignment

NOTE Confidence: 0.841263890266418

6302afd2-2c68-4f51-992e-a93de44f7629
00:01:21.628 --> 00:01:27.733
for this week and as I promised, I
mean, I made part of the lab

NOTE Confidence: 0.841263890266418

00d9f17a-6d5f-4f93-9537-f8677448d82c
00:01:27.733 --> 00:01:32.210
actually optional. So if you
have time you can do that.

NOTE Confidence: 0.841263890266418

274bcee3-3e66-471f-8cbe-4a73cca41b8e
00:01:32.210 --> 00:01:36.280
Otherwise it's just optional.
For instance, the lab report is

NOTE Confidence: 0.841263890266418

7e6d0d7e-ed95-4f26-a6a2-3f34488e260f
00:01:36.280 --> 00:01:38.315
optional, and it's necessary if

NOTE Confidence: 0.875607550144196

19f71f47-d55a-4a85-bfac-74108332efaf
00:01:38.330 --> 00:01:43.562
you think that you have to
explain how to run the program

NOTE Confidence: 0.875607550144196

4501f472-61a7-4b17-bf2f-a56fa848569e
00:01:43.562 --> 00:01:48.794
for the markers, because as I
said, I mean if the markers

NOTE Confidence: 0.875607550144196

45c1b915-8ad1-488c-bf53-fdd7d7ceb6d9
00:01:48.794 --> 00:01:53.590
cannot run the program, you lose
mark. Otherwise it is optional and

NOTE Confidence: 0.875607550144196

fe2783dc-435e-4fba-8336-4686381e7c41
00:01:53.590 --> 00:01:57.950
basically this week's lab
is about outputting the

NOTE Confidence: 0.851895034313202

46fcdbf7-8673-4dee-aade-c4605363bfcb
00:01:57.960 --> 00:02:02.904
Boolean function as a form of a
product of maxterms. So last

NOTE Confidence: 0.851895034313202

5c823758-b2a0-4c3b-8030-23ead38fb979
00:02:02.904 --> 00:02:08.260
week was sum of products, this
week is going to be the product of

NOTE Confidence: 0.851895034313202

80d3a3f4-df2a-4e68-be52-c70bae2f5d41
00:02:08.260 --> 00:02:09.496
product of maxterms.

NOTE Confidence: 0.626020073890686

c7f5528e-c2fe-4a34-ba8a-167bd51e1b46
00:02:10.280 --> 00:02:14.609
So that's just, uh, about the
lab and let's start.

NOTE Confidence: 0.822492063045502

d660d57f-7217-4041-971d-c69200cb3345
00:02:16.440 --> 00:02:21.808
So before I start again, uh,
is there any question about the

NOTE Confidence: 0.822492063045502

ebe6de4b-2578-42d0-99bd-3c3df8e94073
00:02:21.808 --> 00:02:27.176
last week lectures or
previous lectures

NOTE Confidence: 0.822492063045502

244ebcbd-9897-46e6-8eea-b6e65124876b
00:02:27.176 --> 00:02:31.568
or any concern about lab or
lecture assignments?

NOTE Confidence: 0.934344887733459

677c140b-5f28-4a82-b4da-de9abef44792
00:02:33.290 --> 00:02:36.809
I'm happy to take your questions
or any issue.

NOTE Confidence: 0.902351260185242

a29e0bc9-f35f-412f-a597-4773a47b8f86
00:02:41.010 --> 00:02:44.220
Let me see the chat box.

NOTE Confidence: 0.787752687931061

48ee859f-119b-4939-a1a6-bbf9faa1e9a9
00:02:46.350 --> 00:02:50.010
So it seems there are no

NOTE Confidence: 0.899595379829407

41c3077e-ad9f-424b-8aed-6828117272c2
00:02:50.010 --> 00:02:54.640
questions. Again like
before, so in order to make

NOTE Confidence: 0.899595379829407

dbbf90fe-0fa5-423b-954a-1b1511b0f681
00:02:54.640 --> 00:02:57.640
sure that everybody has the
focus to the slides, please

NOTE Confidence: 0.899595379829407

1ccb18df-81d8-4b26-83cf-f306bac7e111
00:02:57.640 --> 00:02:59.440
send me some feedback at
least.

NOTE Confidence: 0.587952852249146

6ff7e3c8-2fd3-4abb-862b-baf9dfb3b7ca
00:03:03.290 --> 00:03:05.939
Thank you, Wendy.

NOTE Confidence: 0.460060089826584

0e0e58d8-56ad-49df-8f9a-120fe0544704
00:03:06.480 --> 00:03:09.570
Gabe, thank you, thank you.

NOTE Confidence: 0.805318593978882

95864b0e-e586-4774-a43e-2bf595af23a0
00:03:10.390 --> 00:03:14.622
Nelson, Nicholas, Ethan.
Thank you so much, Justin.

NOTE Confidence: 0.805318593978882

c187dae7-b397-4d28-8001-f0ac0f57fc26
00:03:14.622 --> 00:03:16.209
Thank you Marco.

NOTE Confidence: 0.903469622135162

92c99112-8c12-43b6-bf0f-5025f6f003ff
00:03:17.880 --> 00:03:23.176
Thank you and let's
start. So we already.

NOTE Confidence: 0.261364132165909

d992133b-3834-4d0c-89c8-8ae1ea5cace3
00:03:25.270 --> 00:03:26.340
Ah.

NOTE Confidence: 0.773303329944611

3958ee90-5895-4757-af65-b3041d17a06e
00:03:27.850 --> 00:03:34.897
Uh, we already covered some
essential combinational logic

NOTE Confidence: 0.853248119354248

9a7f9cd1-80d1-45bb-a3df-f8d2848af932
00:03:34.897 --> 00:03:40.975
or essential logical circuits
for any computer systems, for

NOTE Confidence: 0.853248119354248

94cf3417-438f-4b66-a648-6e0cfee3ada1
00:03:40.975 --> 00:03:45.255
doing arithmetic and also data
transmission. Decoders and

NOTE Confidence: 0.853248119354248

829c34b8-a7a3-45f1-b3ee-ac7bd7b69b04
00:03:45.255 --> 00:03:50.605
encoders. Today, we are going
to continue with this category.

NOTE Confidence: 0.853248119354248

0963f9bc-06a5-4a17-a98d-890587a35539
00:03:50.605 --> 00:03:54.350
Data transmission, we will introduce
multiplexers and demultiplexers,

NOTE Confidence: 0.853248119354248

6036b106-34f8-40b3-bdce-88d236eacebc
00:03:54.350 --> 00:04:00.235
and then we move on to the
coders. The coders were introduced

NOTE Confidence: 0.853248119354248

f2683e89-d35b-4248-902f-a474982d180b
00:04:00.235 --> 00:04:06.655
in the book in the first chapter
and continued in this chapter

NOTE Confidence: 0.873222768306732

402eda18-0092-41e0-b137-5b641f33eb2e
00:04:06.655 --> 00:04:12.928
so, I promise to you that I
will cover fully it in this

NOTE Confidence: 0.873222768306732

f37728d1-ab1d-4c2f-875c-ad9905d93c88
00:04:12.928 --> 00:04:18.616
chapter, so I'm going to finish
this chapter today for the coding

NOTE Confidence: 0.873222768306732

09fcd646-0253-405f-8ce3-f544e7bc3993
00:04:18.616 --> 00:04:22.882
and all the logic circuits
required for coding, especially

NOTE Confidence: 0.873222768306732

1d7ebe06-5ba1-4a97-8c51-42c89d3238e2
00:04:22.882 --> 00:04:24.778
for the binary codes.

NOTE Confidence: 0.902950942516327

ce32ad22-8000-4866-8809-6c2a491675d0
00:04:25.770 --> 00:04:29.074
So let's continue with
the multiplexer first.

NOTE Confidence: 0.782232999801636

89dc433a-b286-47b4-9ccf-f30b5bbca669
00:04:31.450 --> 00:04:36.670
So multiplexers are also
abbreviated as MUX or MPX. So

NOTE Confidence: 0.782232999801636

931e5fe6-7ebd-4b0f-b34e-21fd1994bd3d
00:04:36.670 --> 00:04:42.934
whenever you see MUX or MPX
is, it means that we are

NOTE Confidence: 0.904230058193207

b1f8a67b-bf3b-497e-963c-7684cef1f03d
00:04:42.940 --> 00:04:45.604
Talking about the multiplexers

NOTE Confidence: 0.864256799221039

93a5f281-6fc2-4937-80ce-8e325bf23077
00:04:45.604 --> 00:04:52.448
and, the use of the multiplexers
is this. As we saw in the

NOTE Confidence: 0.864256799221039

67c6a84c-e0bc-4496-ad2e-c8bdda92ffe5
00:04:52.448 --> 00:04:56.938
decoders, whenever a CPU
wants to process an information,

NOTE Confidence: 0.864256799221039

663c9b34-e51a-4a5d-8025-2f7e5fa57a3d
00:04:56.938 --> 00:05:01.428
the CPU must first select the
memory location. The second step

NOTE Confidence: 0.864256799221039

eec62463-f121-49b9-993d-6b098670406b
00:05:01.428 --> 00:05:06.367
is when selecting the memory
location, the CPU must let

NOTE Confidence: 0.864256799221039

614eb8b4-fb6d-47ec-b56b-5fb41785267c
00:05:06.367 --> 00:05:11.755
the content of that memory
location be shared to the CPU in

NOTE Confidence: 0.864256799221039

67308711-08df-4982-901d-b1c6f12cd17d
00:05:11.755 --> 00:05:16.694
order to be processed. So first
is selecting a memory location

NOTE Confidence: 0.845398545265198

28e5c24c-ec4e-4ae7-93f0-34b948536684
00:05:16.694 --> 00:05:21.262
and 2nd is transferring the
content of that memory location

NOTE Confidence: 0.845398545265198

b2187804-4b7f-4f6b-858d-86d1bbe636cb
00:05:21.262 --> 00:05:26.256
to process. So
decoders were for the first one,

NOTE Confidence: 0.845398545265198

ce814312-5d13-42c8-8234-0d16dfe33234
00:05:26.256 --> 00:05:30.796
addressing or selecting just one
memory location out of many

NOTE Confidence: 0.847098350524902

02eba2c4-c9bd-4aa1-b43e-f7596a4ecf71
00:05:30.796 --> 00:05:35.114
memory locations. Multiplexers
are for the second step,

NOTE Confidence: 0.847098350524902

fa548f5f-b7f7-4213-8a7c-a5cd4ce0c5ec
00:05:35.114 --> 00:05:39.380
which is for
transferring the information.

NOTE Confidence: 0.868524610996246

60e44138-1e04-4e01-845a-74c386a21856
00:05:40.860 --> 00:05:46.910
So basically, uh, the connection
within the CPU and memory module

NOTE Confidence: 0.868524610996246

58e07219-2c97-4d94-b673-a2a1aaef39fa
00:05:46.910 --> 00:05:54.060
is called a motherboard. You can
see. Let me show you.

NOTE Confidence: 0.755684614181519

77f11fec-9b8d-4145-b101-47a90bee9aa7
00:05:54.060 --> 00:05:58.267
You can see in any board.
Let me show my camera

NOTE Confidence: 0.755684614181519

29f425ac-c70e-4206-a965-0ca60ac29100
00:05:58.267 --> 00:05:58.868
first.

NOTE Confidence: 0.765959739685059

52fd58a9-d4ce-4c84-bb1c-d6b3a0864d5d
00:06:05.400 --> 00:06:10.300
So you can see that in any
computer system board, you have a

NOTE Confidence: 0.765959739685059

894b62f9-439a-4894-a19a-ece707ed5e90
00:06:10.300 --> 00:06:14.850
CPU. This is the CPU that I
mean, you can simply detach from

NOTE Confidence: 0.765959739685059

b6d6ab53-a4cd-47de-b2ad-38eb3fb8b6cd
00:06:14.850 --> 00:06:15.900
the main board.

NOTE Confidence: 0.84981095790863

edab7e04-01ee-4e5b-a562-bd48b4168461
00:06:16.540 --> 00:06:18.568
So this is the CPU chip.

NOTE Confidence: 0.694713652133942

05225b48-0077-47ea-bab1-6d94cded58ce
00:06:19.130 --> 00:06:21.320
Uh, this is from Intel.

NOTE Confidence: 0.782085657119751

652adb4b-ff64-4b2e-993d-7b71f8df1e43
00:06:22.140 --> 00:06:25.050
I believe. And also.

NOTE Confidence: 0.831238210201263

84c3ebd1-7db9-4960-8795-2a61165a86f5
00:06:25.590 --> 00:06:30.694
These are the slots for the
memory modules, so you can

NOTE Confidence: 0.831238210201263

fd7c91ca-9c9d-4fbc-b328-be91717fc1c9
00:06:30.694 --> 00:06:35.798
install the memory modules here.
So I can have some memory

NOTE Confidence: 0.862910926342011

0a9d6010-d6d5-43bc-b423-8a5016edcfff
00:06:35.798 --> 00:06:40.506
modules here. These are the
memory modules. So basically the

NOTE Confidence: 0.862910926342011

8b07ca74-4d98-479d-ba38-5539f2864195
00:06:40.506 --> 00:06:45.226
CPU actually is in communication
with the memory modules through

NOTE Confidence: 0.862910926342011

d37d4192-71e2-4f93-a84c-8ef7f5b33452
00:06:45.226 --> 00:06:47.586
a board or main board.

NOTE Confidence: 0.865816235542297

ad989cd0-af15-48c9-99e7-43880ec1a21a
00:06:48.210 --> 00:06:54.075
But, uh, in abstract level,
we can call it a BUS or a shared

NOTE Confidence: 0.865816235542297

06f0956b-2ad2-4ead-a03d-cf08de07d5c0
00:06:54.075 --> 00:06:57.203
stream. So let me go back to the

NOTE Confidence: 0.600729167461395

eff2c0dc-d341-4cc3-97d9-01db0b6ee5a1
00:06:57.750 --> 00:06:58.660
slides.

NOTE Confidence: 0.831840097904205

e17c2ac7-fd56-4920-b717-17759015ab0a
00:07:00.370 --> 00:07:05.298
So imagine this is the most
simplified version of the

NOTE Confidence: 0.831840097904205

5f27d1dd-8319-4138-9cea-2c4b06575996
00:07:05.298 --> 00:07:10.226
that shared stream or shared
motherboard. All the

NOTE Confidence: 0.831840097904205

15a53c5d-bb4f-4fe5-a274-640f77c8c2b5
00:07:10.226 --> 00:07:14.706
information is transmitted
through that to the CPU and back and

NOTE Confidence: 0.831840097904205

2d15ea47-440a-4c22-bda6-9eb21883bb08
00:07:14.706 --> 00:07:19.634
forth between the CPU and memory
module. So after selecting a

NOTE Confidence: 0.831840097904205

e5a1149b-0105-4e0e-adb7-1cca69e8419a
00:07:19.634 --> 00:07:24.562
memory location by the
decoder, the content of that

NOTE Confidence: 0.831840097904205

6ec4751a-b0d8-4481-8e70-c12d3a4e9534
00:07:24.562 --> 00:07:27.698
memory location must be
transferred to CPU

NOTE Confidence: 0.877341389656067

98186057-dad6-4078-8901-57d6857b0ef2
00:07:28.330 --> 00:07:33.699
To be processed. So one thing
is that we just let the first

NOTE Confidence: 0.877341389656067

16f006e2-9c13-499f-a0b9-26f279525bdd
00:07:33.699 --> 00:07:37.829
memory location to have this
shared area to transfer the

NOTE Confidence: 0.877341389656067

819906ba-f7c3-4aab-8100-02192823fa88
00:07:37.829 --> 00:07:39.894
information to this single
output.

NOTE Confidence: 0.85649573802948

e186bb79-a998-4914-aca2-1cfe1729101b
00:07:42.050 --> 00:07:46.208
If the CPU selects the second
memory location, then the second

NOTE Confidence: 0.85649573802948

2b2571f8-7f1a-40c8-b467-17c0a600d1b5
00:07:46.208 --> 00:07:50.366
memory location can share or
stream all their content to the

NOTE Confidence: 0.847293496131897

f6823494-dcd4-465f-84ee-ee9c48deeef2
00:07:50.366 --> 00:07:53.846
CPU. Third one, fourth, and

NOTE Confidence: 0.936030328273773

bfdee834-d44e-4132-a7dc-e3d078513806
00:07:53.846 --> 00:07:57.120
etc. So you can see that.

NOTE Confidence: 0.823769330978394

118d3f93-6c5a-48bb-86c4-ee5a0a2077e9
00:07:57.720 --> 00:08:03.077
A MUX is a logic unit that
just switches between different

NOTE Confidence: 0.902321219444275

d1e3096c-eac1-4301-9bae-1eab392aff57
00:08:03.077 --> 00:08:06.488
inputs to one single output.

NOTE Confidence: 0.869794368743896

d2f96613-0d80-42ed-bb8e-ac47ab767a2a
00:08:07.640 --> 00:08:12.612
The most simplest form of this
multiplexer has only two inputs,

NOTE Confidence: 0.869794368743896

9ca0a10c-7bd4-477d-8194-91af97079a7c
00:08:12.612 --> 00:08:17.584
so two inputs are going to be
transferred to one single

NOTE Confidence: 0.861082971096039

c4a63c2e-ad0d-4774-b656-87c0275faf1d
00:08:17.584 --> 00:08:24.390
output. So two can be dervived
by two to the power of 1,

NOTE Confidence: 0.861082971096039

0e7683dc-477c-45ba-a82d-5fff1212b162
00:08:24.390 --> 00:08:29.525
meaning that we need to have only one
bit to select among two inputs.

NOTE Confidence: 0.861082971096039

24f6ee53-157a-406f-b250-3cc602fed9d5
00:08:29.525 --> 00:08:33.475
So let's see what multiplexer 2
by 1 looks like.

NOTE Confidence: 0.859894335269928

8f8b6615-52f7-4a91-9a0b-ad0e8eb74ad4
00:08:34.360 --> 00:08:40.249
So this is the multiplexer two
by one. You have two inputs, I0

NOTE Confidence: 0.859894335269928

2af588a8-f24d-44ee-b654-166f1e9db052
00:08:40.249 --> 00:08:46.591
and I1. In order to select
within two inputs, we need 1 bit.

NOTE Confidence: 0.856566190719604

3c3abb27-658d-4dba-a50f-b1d447591514
00:08:47.140 --> 00:08:52.096
Uh, because with one, we can have two
combinations, zero or one. Based

NOTE Confidence: 0.856566190719604

01c806ec-de12-430a-8ea7-44e9c8072fcf
00:08:52.096 --> 00:08:57.052
on different combination of 1
bit, we can select one of the

NOTE Confidence: 0.856566190719604

e34c0e12-1b10-4270-ab05-3a7262ed241f
00:08:57.052 --> 00:09:00.769
inputs and attached that input to
the single output.

NOTE Confidence: 0.864455223083496

6e1b7402-32d1-4336-84f0-60377d6b9568
00:09:01.400 --> 00:09:08.000
So this is the MUX 2 by 1. So
in order to design this logic

NOTE Confidence: 0.864455223083496

ad0ad793-c145-4b88-b390-1394699d3ec5
00:09:08.000 --> 00:09:13.720
circuit, we have 1,2,3 inputs and
one single output. So if we form

NOTE Confidence: 0.827267944812775

7f9ee9a3-914c-4b9b-b209-ba912108f18b
00:09:13.720 --> 00:09:19.562
the. Uh, so if S is 0,
the first input is going to be

NOTE Confidence: 0.827267944812775

fb5738ad-c3f0-46d3-aaab-5c2addf8debc
00:09:19.562 --> 00:09:24.094
selected, and if S is 1,
the second input is going to be

NOTE Confidence: 0.827267944812775

7d91c034-b51b-4542-b2f9-65987d2e5164
00:09:24.094 --> 00:09:27.390
selected and attached to
the output, so again,

NOTE Confidence: 0.796280086040497

babfb9c0-ab85-484d-a1e6-6bee21086652
00:09:28.690 --> 00:09:32.146
if S is zero, F is going to be I0

NOTE Confidence: 0.859659194946289

50c336a0-66ac-4916-99f5-afec6a071e06
00:09:32.146 --> 00:09:34.450
If S is 1,

NOTE Confidence: 0.704359114170074

03d70a54-7588-4db3-b9cd-7080fd94a8b4
00:09:34.960 --> 00:09:36.640
F is going to be I1.

NOTE Confidence: 0.850972235202789

39e98426-2888-40b7-9d16-bbfbfdc5f269
00:09:37.660 --> 00:09:44.086
Whatever I1 is, either zero
or one. And here is the truth

NOTE Confidence: 0.850972235202789

d3c934f8-9574-423b-abe5-296fd42461f7
00:09:44.086 --> 00:09:50.053
table, so three input variables:
I0, I1 and switch input S, and

NOTE Confidence: 0.850972235202789

5c444eca-89a1-43b9-9491-71abc2f64f93
00:09:50.053 --> 00:09:52.807
then a single output F. Whenever S

NOTE Confidence: 0.867415845394135

af6cf875-733a-43c2-9e74-e1f78331d9ce
00:09:52.807 --> 00:09:59.030
is 0, we don't care about the
input I1. We only care

NOTE Confidence: 0.867415845394135

de6fd49c-3a81-48a1-91ef-1bde83517510
00:09:59.030 --> 00:10:04.910
about I0 and you can see
that whenever S is 0, whatever I0

NOTE Confidence: 0.867415845394135

acc7c3c6-2d30-47d7-a114-b97f3ae5c67d
00:10:04.910 --> 00:10:07.850
is, F is exactly the same.

NOTE Confidence: 0.923551440238953

d6d25cf5-2683-40c8-86e5-7b69fcfff4ac
00:10:07.850 --> 00:10:11.590
So 00 11 00 11.

NOTE Confidence: 0.90004551410675

61ac6ac7-8d96-4c04-a99c-6afcd0312c96
00:10:12.200 --> 00:10:17.444
However, if the switch actually
goes to the second value, I mean

NOTE Confidence: 0.90004551410675

9980b4fc-cf89-42fd-bd1a-aebdaeac4283
00:10:17.444 --> 00:10:19.192
the second option,

NOTE Confidence: 0.862009704113007

882f738f-e331-4937-aa96-b57ce5d8b1ef
00:10:19.750 --> 00:10:25.960
it selects the I1 instead of I0
we don't have to be worried

NOTE Confidence: 0.862009704113007

5872c2de-04c2-4098-bd09-08e243bf748d
00:10:25.960 --> 00:10:31.756
about the I0, only I1.
Whatever I1 is, F is going to

NOTE Confidence: 0.862009704113007

1df09a41-2963-4755-b339-91dda8e142f2
00:10:31.756 --> 00:10:37.552
be that, so I1 is zero, F is 0. I1 is 00,
the other two options 11, so F is 11.

NOTE Confidence: 0.891438543796539

80d15f26-0643-46cf-bfd8-6514eab6fd1c
00:10:37.552 --> 00:10:43.278
So you can see that by
selecting, we can attach the F to

NOTE Confidence: 0.891438543796539

d7a853df-5d6c-43b7-a6b5-975573fc411d
00:10:43.278 --> 00:10:45.008
be one of the inputs.

NOTE Confidence: 0.838368117809296

7d9b0ed4-abb2-48f3-85dd-897da1ee5119
00:10:45.520 --> 00:10:51.357
So this is the normal truth
table, so we can design F by

NOTE Confidence: 0.838368117809296

b8c69dfb-d914-44a3-81a4-a2f093a3e36e
00:10:51.357 --> 00:10:55.398
writing the sum of minterms.
So the minterm 1

NOTE Confidence: 0.86160796880722

bec3f8c0-eff6-440f-9e86-870aaf97aade
00:10:56.050 --> 00:10:58.306
is IO, I1 and S.

NOTE Confidence: 0.701938092708588

b367c176-b29a-46e2-b344-2abfb2f8a39a
00:10:58.820 --> 00:11:04.770
m3, m6, and m7.

NOTE Confidence: 0.733611702919006

fc0c3ad4-0852-44a6-8cf0-30f265fd9a7d
00:11:05.740 --> 00:11:10.500
And if we put it in, so minterm
one, minterm 3, minterm 6, and

NOTE Confidence: 0.895298480987549

05818a35-2acc-42e6-b297-6fd6deb6cd37
00:11:10.500 --> 00:11:15.687
minterm 7. In order to simplify
that, we can put it in the

NOTE Confidence: 0.895298480987549

6097f664-8e3c-4867-ae0d-645f2df0bc91
00:11:15.687 --> 00:11:19.394
Karnaugh map with three input
variables, I1, I0 and S.

NOTE Confidence: 0.895298480987549

eaa1bae7-5ad3-40d3-b981-36727a17faec
00:11:19.394 --> 00:11:21.753
And these are the shared

NOTE Confidence: 0.879542529582977

93c90d18-b19a-4626-ad81-d88e534a64bc
00:11:21.753 --> 00:11:27.112
regions. One is this and one is
this. You can create this shared

NOTE Confidence: 0.879542529582977

55cc99d0-5aae-41f4-bbd5-a96aadbf2c37
00:11:27.112 --> 00:11:31.248
region too but it
doesn't help with more

NOTE Confidence: 0.921002745628357

80c2df8b-c974-4c76-aebb-293c1ea03d34
00:11:31.248 --> 00:11:36.170
simplification. So as you can
see here, for the first region,

NOTE Confidence: 0.844578087329865

216055e5-3ac2-4df8-b52a-b3560b937038
00:11:36.970 --> 00:11:38.890
Whenever S is 0,

NOTE Confidence: 0.851175725460052

d7e27b17-7507-4f47-b00b-310cbe6c6fd0
00:11:39.760 --> 00:11:43.907
It doesn't matter what the value of
I1 is, only the value of I0,

NOTE Confidence: 0.851175725460052

d3a24189-edce-4e55-b3aa-aaf00e0fd752
00:11:43.907 --> 00:11:46.140
so the first term, we have S

NOTE Confidence: 0.851063966751099

4ec62178-c7a9-41e6-a94b-46e5c6843cbd
00:11:46.140 --> 00:11:51.216
bar AND I0. And the second shared
region or adjusting cells here,

NOTE Confidence: 0.851063966751099

86df5f21-b550-49c0-bac9-33c2002666c6
00:11:51.216 --> 00:11:56.592
S is going to be one. This time the
value of I0 doesn't matter, I1

NOTE Confidence: 0.851063966751099

944f726f-6ede-4829-9a27-8557a0f30e7b
00:11:56.592 --> 00:11:58.896
matters. So S, I1.

NOTE Confidence: 0.835302531719208

057a6fd3-fcb5-4350-a1f1-9c162ced075e
00:11:59.560 --> 00:12:04.420
So again, if you look at closely
to the Boolean expression, based

NOTE Confidence: 0.835302531719208

31704777-472a-4847-b116-351e13d94d87
00:12:04.420 --> 00:12:10.495
on the value of S, F is going to be
equal to either I0 or I1.

NOTE Confidence: 0.835302531719208

c31fbe1a-9c07-47ee-ba97-667b7b587621
00:12:10.495 --> 00:12:13.735
So for F, if S is 0,

NOTE Confidence: 0.8408362865448

b6de4bd2-db4a-4084-9fc6-8c30a81a2c3c
00:12:14.640 --> 00:12:19.034
This term is going to be 0, so we can
simply remove that. This term

NOTE Confidence: 0.8408362865448

d68f586a-c6b9-4caa-88a4-4bfabe3974ea
00:12:19.034 --> 00:12:23.766
is going to be S bar, which means
one and then one AND by I0.

NOTE Confidence: 0.8408362865448

8ab43c85-882a-4c9f-bab0-481caee1338d
00:12:23.766 --> 00:12:26.132
Whatever value of the IO goes to

NOTE Confidence: 0.868933916091919

c3b4defd-04b8-4d0a-a605-74f5fb2db88d
00:12:26.132 --> 00:12:32.790
F. The same is when the S is
is going to be one. If S is 1, this

NOTE Confidence: 0.868933916091919

52258694-fbae-4cf8-ab18-f1a43b19080f
00:12:32.790 --> 00:12:34.278
term is going to be 0.

NOTE Confidence: 0.837773144245148

2cc488e7-b65b-464c-9980-b45e2d69c4b4
00:12:34.890 --> 00:12:40.042
So we have to just think about
this and S is 1. One AND by I1

NOTE Confidence: 0.837773144245148

b0690c65-3984-4cf2-9b85-f69480f671fa
00:12:40.042 --> 00:12:42.618
means I1, so F is going to be equal

NOTE Confidence: 0.886182844638824

303d0166-2f14-488b-9b13-bd4c3695446d
00:12:42.618 --> 00:12:49.690
to I1. And this
happens with all the other

NOTE Confidence: 0.886182844638824

9ee8ba72-f30b-402c-9637-40fac5d35e48
00:12:49.690 --> 00:12:52.936
larger multiplexers. So
basically F is

NOTE Confidence: 0.769307792186737

41904c3c-a1bb-4492-b16f-22ba4803048d
00:12:53.480 --> 00:12:57.665
sum of minterms based on
the switch input.

NOTE Confidence: 0.886643052101135

06622f59-c369-46f8-b83d-b2e89e6b13ce
00:12:59.080 --> 00:13:03.892
And here is the design. I just
copy pasted from the book.

NOTE Confidence: 0.860675275325775

a77815c3-467d-499e-b6d7-cd05a5565367
00:13:04.820 --> 00:13:09.920
So two by one multiplexer, 01,
and this is the single output

NOTE Confidence: 0.860675275325775

b6fa50c0-91ce-46a6-a76c-a69be825f9a9
00:13:09.920 --> 00:13:12.470
and this is the Switch input.

NOTE Confidence: 0.799327075481415

c43465ea-10e4-4e31-828c-21422fdb9653
00:13:13.290 --> 00:13:16.535
Based on the search input,
either Y is equal to

NOTE Confidence: 0.799327075481415

c3d59e50-c15b-4107-aaf8-fbd24ad16081
00:13:16.535 --> 00:13:18.305
I0 or equal to I1.

NOTE Confidence: 0.829300284385681

65c44f30-d85a-433b-88a1-6b859475e746
00:13:19.470 --> 00:13:26.334
But one thing is that, let's look
closely to the logic circuit. We

NOTE Confidence: 0.829300284385681

1e86f59d-9f1a-4816-90f1-96dba4d0e32c
00:13:26.334 --> 00:13:32.670
can see that the multiplexer is
very similar to the form of SOP

NOTE Confidence: 0.829300284385681

efe4277b-c242-4167-9d74-4ed96206c859
00:13:32.670 --> 00:13:39.534
So one level of AND and
final level of OR.

NOTE Confidence: 0.856817424297333

0a12c520-e1dd-4284-b76b-a6b01f5f742e
00:13:40.160 --> 00:13:44.580
Yes, sum of product. So first
level is the AND, and second is

NOTE Confidence: 0.856817424297333

1a5303d3-14de-431a-8010-dfd465b08093
00:13:44.580 --> 00:13:45.940
the OR or sum.

NOTE Confidence: 0.836821019649506

b3214b9a-813a-4de4-b9cb-6d44a8172da1
00:13:46.870 --> 00:13:51.502
So basically the S is the main
important input because the S

NOTE Confidence: 0.836821019649506

98fa9ddc-2dbe-4802-b354-85e8d603ba10
00:13:51.502 --> 00:13:56.520
activates only one of the ANDs
and the other AND is going to be

NOTE Confidence: 0.836821019649506

c3a78324-817c-426e-a73f-2f72582efcda
00:13:56.520 --> 00:13:59.608
only 0. So for instance, if S is

NOTE Confidence: 0.876219093799591

9c283f9f-6cbf-4fec-99b0-2d661f95549a
00:13:59.608 --> 00:14:04.880
0, this AND is going to be always 0
because zero AND with anything is

NOTE Confidence: 0.876219093799591

b3c69a13-0f30-4878-b694-64ae2d19716f
00:14:04.880 --> 00:14:10.280
is going to be 0, so this OR is going to
depend on the other AND, which

NOTE Confidence: 0.876219093799591

8deb6894-3992-4c47-8145-62c77241715b
00:14:10.280 --> 00:14:11.720
is activated by this.

NOTE Confidence: 0.837217330932617

0db5c300-d2fb-4a82-8e3b-5adcee5b5a5c
00:14:12.310 --> 00:14:17.725
Zero comes here turns into one, so now this
AND must be wait for the I0.

NOTE Confidence: 0.837217330932617

76d51520-f16d-4f95-9feb-631aa4d3bbc6
00:14:17.725 --> 00:14:20.974
Whatever the value of I0
goes to Y.

NOTE Confidence: 0.885497212409973

dcf93f86-b597-460a-9eba-18719f9626d2
00:14:21.910 --> 00:14:28.336
So just pay attention to the I
mean, this two level AND and OR.

NOTE Confidence: 0.847255408763886

4af1b628-6e2e-4002-ba64-67f27001a286
00:14:31.480 --> 00:14:36.381
This is the another way to write
the MUX truth table. So

NOTE Confidence: 0.847255408763886

3eae9d93-8f4c-4b43-bdb3-ec6119084f00
00:14:36.381 --> 00:14:40.151
basically if S is zero, F is going to
be I0.

NOTE Confidence: 0.768556296825409

de1ee1d1-8114-4764-8f36-ed539eff7fc3
00:14:40.790 --> 00:14:47.048
S is 1, F is going to be I1, so this
is another way to write a

NOTE Confidence: 0.673673272132874

f482e32f-df9d-403f-8320-ea4a54d7e719
00:14:47.048 --> 00:14:53.540
Boolean function. S bar I0,
whatever value of I0, or S I1.

NOTE Confidence: 0.855345845222473

a2db21d4-5bf1-4f8e-bd33-2ae777d05fbf
00:14:53.540 --> 00:14:58.750
This is because of the
property of the MUX. Because

NOTE Confidence: 0.855345845222473

eefe4cce-346d-4ea4-a9bb-15136e4857b2
00:14:58.750 --> 00:15:03.216
the value of S depends
depends on I0 or I1.

NOTE Confidence: 0.901977241039276

a9bc44c8-b833-41ec-8e02-ed36de98d3c1
00:15:05.520 --> 00:15:09.862
So in order to build a larger
multiplexer, now we can have two

NOTE Confidence: 0.901977241039276

79900eb2-803a-4893-902c-ee2d114b9d59
00:15:09.862 --> 00:15:13.870
to the power of 2 by 1, meaning
that 4 by 1.

NOTE Confidence: 0.84973156452179

b8221b60-53de-4f7d-8153-ae86089d7702
00:15:14.390 --> 00:15:20.088
So now we have four inputs and
we want to select one out of

NOTE Confidence: 0.84973156452179

8e6b474e-ae6d-43bd-90f7-de4cad705b04
00:15:20.088 --> 00:15:24.972
four inputs and connect to the
output. The single output. So in

NOTE Confidence: 0.84973156452179

3948011b-9ffc-44cd-b5ad-96327b7bf4c8
00:15:24.972 --> 00:15:30.263
order to select one input out
of four inputs, we need two

NOTE Confidence: 0.839735269546509

16dee637-b6a6-484a-9cc3-22d64a94b488
00:15:30.263 --> 00:15:33.245
switch inputs. SO and S1

NOTE Confidence: 0.858520209789276

38beb3da-8d70-4901-a5b0-153c3e710b1a
00:15:33.245 --> 00:15:39.560
and based on different
combination of S0 and S1, we

NOTE Confidence: 0.858520209789276

f07ae63b-109c-4f6d-b26e-faacb106e6c8
00:15:39.560 --> 00:15:44.528
can select four inputs and
connect them to the F. So if both are

NOTE Confidence: 0.858520209789276

1a525964-ccca-4dfc-ba67-fe4101b53c86
00:15:44.528 --> 00:15:49.082
00, the first input is going to be
attached to single output.

NOTE Confidence: 0.912376642227173

10202c72-2138-4663-86f2-b5894a7a3780
00:15:50.280 --> 00:15:52.040
01. The second one.

NOTE Confidence: 0.896596312522888

8b5d7661-cf79-41a4-a362-709030b6df08
00:15:52.790 --> 00:15:57.326
10 I2 and
then 11 I3.

NOTE Confidence: 0.793716132640839

5ee3b4f1-b50c-4148-8f99-75b3f67ad669
00:15:58.360 --> 00:16:03.172
This is the convention, so based
on the binary number for the

NOTE Confidence: 0.793716132640839

28b7d195-cccf-4b29-974a-f34a94b2fb7b
00:16:03.172 --> 00:16:08.385
switch input, we select uh, the
input based on the bus, so 11

NOTE Confidence: 0.853951215744019

574ff321-9151-4830-a5a0-c9e9815c7513
00:16:08.385 --> 00:16:12.730
selects I3. 10 selects
I2 and etc.

NOTE Confidence: 0.843380391597748

d7dfda8b-3dff-479a-8504-6a5a3f5d7f31
00:16:14.300 --> 00:16:21.216
So in order to design this, we
can simply form a truth table

NOTE Confidence: 0.843380391597748

042608eb-a411-448e-b997-b6b30a989ba6
00:16:21.216 --> 00:16:26.536
with 1 2 3 4 inputs. And +2 switch
inputs, so six inputs.

NOTE Confidence: 0.831914186477661

352e5d0b-061b-477f-beca-cd9ac09fca04
00:16:27.590 --> 00:16:32.738
And one single output F. So
the truth table is going to have

NOTE Confidence: 0.831914186477661

4870089e-d93f-443f-a434-fe251343f0f0
00:16:32.738 --> 00:16:35.312
how many rows? Anyone of you?

NOTE Confidence: 0.933551132678986

2028a9b4-a089-4d52-923d-93c69747e7c8
00:16:38.730 --> 00:16:40.795
You can answer in the chat box.

NOTE Confidence: 0.900352239608765

887c85da-1cb8-41ef-ad23-e005ced65685
00:16:41.350 --> 00:16:46.670
So if you have 4 + 2 =
six input variables.

NOTE Confidence: 0.811597168445587

86dd493c-5ce4-4b46-a6b6-03a24d00c95d
00:16:47.460 --> 00:16:51.390
And one single output, how
many rows is the truth table

NOTE Confidence: 0.811597168445587

b89d58a4-21a5-429d-88f7-33a8cab0d847
00:16:51.390 --> 00:16:52.176
is going to have?

NOTE Confidence: 0.808112800121307

61fa07b8-679d-4403-834a-64f378443ca9
00:16:53.530 --> 00:16:57.512
2, someone says true. Actually
we are is going to have two to the power

NOTE Confidence: 0.808112800121307

e7d231e0-ff4a-481a-8071-3da9d2e9f921
00:16:57.512 --> 00:17:01.856
of 6 rows, so the two to the
power of 6 is

NOTE Confidence: 0.852217078208923

57891fa7-58d1-4338-8afc-e9bbd88dea56
00:17:04.720 --> 00:17:09.890
64 rows, I believe yes. So
that's a huge truth table.

NOTE Confidence: 0.840642273426056

9ccecbd4-b6e8-44b3-b335-db216ba5fcce
00:17:10.770 --> 00:17:15.775
But as we saw in the
truth table for the two by one

NOTE Confidence: 0.840642273426056

c2537ab3-64e6-497c-802c-a639d818b98e
00:17:15.775 --> 00:17:17.315
MUX, we can simply

NOTE Confidence: 0.85556948184967

98d78100-1d57-4421-9a3a-9988b724399b
00:17:17.920 --> 00:17:22.522
rewrite a shorter form of the
truth table by this. You could

NOTE Confidence: 0.85556948184967

29c05ad7-8849-4c68-b3e6-1dd4cd0e88cb
00:17:22.522 --> 00:17:23.938
say that whenever the

NOTE Confidence: 0.844785451889038

fd137be1-27ac-4d0b-be4f-26e8b1992380
00:17:24.500 --> 00:17:28.118
Switch inputs, I mean S0
and S1 are both 0,

NOTE Confidence: 0.876552283763886

f03348a6-fd37-4aa9-84c4-a76da1dddc8a
00:17:28.820 --> 00:17:34.357
0 0, we don't care about the
value of the I1, I2, I3. We just

NOTE Confidence: 0.876552283763886

d18ecdae-9508-472b-a96a-c3c445d0cccc
00:17:34.357 --> 00:17:38.795
care about the value of I0
because in this case, I0 is going to

NOTE Confidence: 0.876552283763886

f40ca8a4-e2dc-4363-b13e-f32cb861b825
00:17:38.795 --> 00:17:43.550
be in the output, so whatever the
value of I0, F is that. So if it

NOTE Confidence: 0.876552283763886

f51ac98c-6bee-4213-93b8-321aa99ab449
00:17:43.550 --> 00:17:47.671
is zero, F is going to be 0. If it is
1, F is going to be 1.

NOTE Confidence: 0.873144507408142

eee6436f-834d-41fa-9b84-89b685bde5d6
00:17:49.710 --> 00:17:53.502
The same for the other two
rows, or if the switch inputs

NOTE Confidence: 0.873144507408142

0f23656b-57c3-4605-8642-cb040a47af25
00:17:53.502 --> 00:17:57.610
are 01. We only care about the
value of I1, and we don't

NOTE Confidence: 0.873144507408142

dc6bb1a4-f99f-491a-8935-8aad30686129
00:17:57.610 --> 00:17:59.822
care about the value of I0.

NOTE Confidence: 0.906633615493774

a8450bbb-9382-410a-8a3b-7f4725dcedcb
00:18:01.740 --> 00:18:06.712
So this is the simplified
version of the truth table and

NOTE Confidence: 0.906633615493774

b63d93c2-f0d2-49ec-8de3-0954f4f116ca
00:18:06.712 --> 00:18:11.684
you can see that the F is equal
to I1, 00 11.

NOTE Confidence: 0.861347198486328

071a513f-5847-437e-a8af-a1eb7bccbcb1
00:18:12.290 --> 00:18:14.642
And etc. So whenever the inputs

NOTE Confidence: 0.881309688091278

1916747b-d584-478d-ab8d-222c209ae899
00:18:14.642 --> 00:18:20.153
are one, only the I3 actually
goes to the outpu. 00 11, and

NOTE Confidence: 0.881309688091278

275c9bce-307e-4c2d-9471-fb6d50206407
00:18:20.153 --> 00:18:25.132
we don't care about the value of
the I0 I1 and I2.

NOTE Confidence: 0.911091566085815

8ab37e95-fed3-4e23-bf50-efa909a884f5
00:18:27.280 --> 00:18:34.266
And then in order to simplify
this, we have to put it in the

NOTE Confidence: 0.911091566085815

41304a46-21c7-4965-a437-3a7f13a4ce13
00:18:34.266 --> 00:18:36.262
Karnaugh map with six variables,

NOTE Confidence: 0.806219756603241

86f3637a-4ac6-4c21-a1d5-79cc6bbb746d
00:18:36.262 --> 00:18:41.948
1 2 3 4 5 6. And write the F as a
sum of minterms, so you

NOTE Confidence: 0.806219756603241

9adbbd45-5447-4292-b5a9-6adae8d0a7f2
00:18:41.948 --> 00:18:46.220
have to write which minterms is F
going to be 1. All those minterms

NOTE Confidence: 0.806219756603241

b5fa4c81-d91a-41b3-b280-42cd7e686e1f
00:18:46.220 --> 00:18:51.560
that have one in the I0 and
any value in the I1 I2 I3 is going to be

NOTE Confidence: 0.806219756603241

a525868e-1fd4-4d98-b43e-cffcd5915fa7
00:18:51.560 --> 00:18:52.984
one in this row.

NOTE Confidence: 0.942632913589478

e258c4e6-35db-4be3-842c-54407e896ef0
00:18:53.790 --> 00:18:54.918
The same is here.

NOTE Confidence: 0.853042304515839

08f82c80-f3d9-4ddb-85c4-7c21fb95c6f5
00:18:55.770 --> 00:19:00.376
All the rows that have one in
the I1 and any other thing in

NOTE Confidence: 0.853042304515839

160c56f8-e122-4db3-893c-67ed12e5687f
00:19:00.376 --> 00:19:03.008
the I0 I2 I3 is going to be the minterm

NOTE Confidence: 0.873277008533478

939a10ca-bd2f-4c43-a3c1-ed76353a1246
00:19:03.008 --> 00:19:09.263
for F because it makes it
one and etc. So if you put it in

NOTE Confidence: 0.873277008533478

8685d0c4-4e51-4811-9a67-5852d3c18198
00:19:09.263 --> 00:19:13.124
the Karnaugh with six variables,
actually you don't have to

NOTE Confidence: 0.873277008533478

1869ab5a-6ab7-457f-9c14-164b9cd0a59a
00:19:13.124 --> 00:19:18.038
do that because I mean we can
simply see that F is 1 whenever

NOTE Confidence: 0.803272306919098

2e2a27cb-9f22-4ca1-8a01-34ef1d577731
00:19:19.930 --> 00:19:27.532
00 and I0 is 1, so
S0 bar, S1 bar, I0

NOTE Confidence: 0.933124780654907

28f78684-b8f7-4578-bd3c-2ab7818496e1
00:19:27.532 --> 00:19:30.200
or this is the other time.

NOTE Confidence: 0.866117179393768

5e33a875-50b0-4646-99bb-34f6edf9fa01
00:19:30.710 --> 00:19:37.766
S0, S1 bar, I1 and
ETC., and that's the beauty of the

NOTE Confidence: 0.866117179393768

8773af47-8393-40c1-b32d-1984e7fe2405
00:19:37.766 --> 00:19:39.782
Boolean function for the

NOTE Confidence: 0.926560521125793

04417248-5566-4580-9eec-5b97ad65eac6
00:19:39.782 --> 00:19:42.398
multiplexers. And here is the

NOTE Confidence: 0.813838481903076

ec3f21c7-52ee-49c3-bb16-225e7b2246f4
00:19:42.900 --> 00:19:47.616
Uh, uh, sum of minterms after
minimization, so you can prove

NOTE Confidence: 0.813838481903076

c41dcb62-1002-4eac-bd0e-9b9c512ffae5
00:19:47.616 --> 00:19:52.725
that this is exactly the same as
the minimized form in the Karnaugh

NOTE Confidence: 0.813838481903076

65ed7935-32ed-46bf-8d38-979d58d4e73f
00:19:52.725 --> 00:19:55.869
with six variables, but it's
already shown that

NOTE Confidence: 0.709110915660858

12d2b39a-363f-4e68-bb10-15108e7389be
00:19:56.520 --> 00:20:03.439
whenever it's 00, I0 is attached, so
SO bar, S1 bar.

NOTE Confidence: 0.863225996494293

9da411c8-c09b-4480-8ae5-ee3ec784da86
00:20:04.140 --> 00:20:09.067
The only thing that happens is
going to be I0, so all the

NOTE Confidence: 0.863225996494293

97068534-eceb-43c1-a674-ea373199a18f
00:20:09.067 --> 00:20:13.236
other terms is going to be 0 if
the S0 and S1 is going to be 0.

NOTE Confidence: 0.865096986293793

dd936b26-8791-414a-ae6d-ad2ca94cbe11
00:20:14.290 --> 00:20:19.414
All these terms is going to be 0. The
only terms that actually remains is

NOTE Confidence: 0.865096986293793

ee0c66ac-27d2-4d95-9300-1ef4e86dffba
00:20:19.414 --> 00:20:24.538
here. This one becomes 0 bar 1. 0 bar 1.
So it only depends on the I0.

NOTE Confidence: 0.851665854454041

fe6d7231-9e68-4cde-bf99-10da32fed4df
00:20:26.020 --> 00:20:30.112
The same with other combination
of the S1 and S0. For instance,

NOTE Confidence: 0.851665854454041

0650033b-5596-4c98-9622-62ce88ae15a1
00:20:30.112 --> 00:20:34.948
in this case, if S0 is zero
and S1 is going to be 1,

NOTE Confidence: 0.907948851585388

0a498d1a-45b4-42c6-a007-0b3318d5ee40
00:20:36.040 --> 00:20:38.356
So this term is going to be 0.

NOTE Confidence: 0.834100008010864

a0a713c5-c23b-4dc2-b7d3-94e9bcc90e5b
00:20:39.740 --> 00:20:45.876
This term is going to be 0. S0
because it's 0.

NOTE Confidence: 0.876904964447021

915c29b3-49b8-4faa-929d-35a26e341330
00:20:46.590 --> 00:20:49.250
Yes, S0 is 0.

NOTE Confidence: 0.871412515640259

dc7c03e4-2dd1-438a-a67d-cc5e093a11e4
00:20:50.250 --> 00:20:54.644
And all the terms is going to be 0.
This term also is going to be 0

NOTE Confidence: 0.871412515640259

5823be30-b786-4d5e-8bd6-fa16cb7e395b
00:20:54.644 --> 00:20:59.376
because S0 is 0, so the only
remaining terms is this, 0 bar

NOTE Confidence: 0.871412515640259

8e629c05-5d25-49e4-9b64-2b75743ffe56
00:20:59.376 --> 00:21:00.390
makes it one.

NOTE Confidence: 0.8857461810112

25c351b6-ae8d-40ec-b31e-78e0949ecb2c
00:21:00.910 --> 00:21:06.606
S1 is 1, so this is going to be one
and the only thing that happens to be

NOTE Confidence: 0.8857461810112

8aec58fa-f73d-46ac-9404-27ac2ff58b78
00:21:06.606 --> 00:21:09.810
in the AND is I2, so F is equal

NOTE Confidence: 0.863612473011017

ef33e011-2144-4880-b5b8-ce00b1ee6ea0
00:21:09.810 --> 00:21:15.838
to I2. If I2 is zero, F is 0.
F I2 is one and F is 1.

NOTE Confidence: 0.840880036354065

5c3d743e-3298-497d-8d7d-6d56d5acbb7e
00:21:17.360 --> 00:21:19.440
And let's design this.

NOTE Confidence: 0.894645094871521

7afc5c25-7857-4d5c-9846-1fe3e01f2679
00:21:20.170 --> 00:21:26.324
So. For the MUX four by one, you
can see that again we have two

NOTE Confidence: 0.894645094871521

55b3a7f5-f1e2-48e0-b305-405d357ee8c9
00:21:26.324 --> 00:21:28.400
levels, one level AND, one final

NOTE Confidence: 0.863449573516846

059e3d2f-fa40-478b-bf72-cbd76162af80
00:21:28.400 --> 00:21:31.000
level OR. And the switches

NOTE Confidence: 0.865748524665833

c9ff0cf6-55b6-48e0-a11a-d0c153169c54
00:21:31.730 --> 00:21:36.592
Only activates one AND and all
the other ANDs are always 0, so

NOTE Confidence: 0.865748524665833

c977bca5-2bbd-4943-b982-757c74cc5dad
00:21:36.592 --> 00:21:39.958
if the S0 S1 is going to be for

NOTE Confidence: 0.880475401878357

947a13d1-aaec-4d5f-a0cc-65b20ac0bae6
00:21:39.958 --> 00:21:46.501
instance 00. So 00, only this
becomes one. This becomes one, and

NOTE Confidence: 0.880475401878357

543365c3-d98e-4e8a-aa14-55ebe2b3a190
00:21:46.501 --> 00:21:48.817
only activates this AND.

NOTE Confidence: 0.861553311347961

4d85ee8d-1811-4535-b376-3da7eaeecd59
00:21:49.390 --> 00:21:54.928
And all the three other ANDS
is going to be 0 always. So this OR

NOTE Confidence: 0.861553311347961

ce38c25c-722c-4f5b-b4d3-6d3e8de97872
00:21:54.928 --> 00:21:59.614
only depends on this AND and if I0
is 0,

NOTE Confidence: 0.879687607288361

1bc10170-1813-41f6-a328-0aa7ed35fa4c
00:22:00.250 --> 00:22:04.114
This is going to be 0. If I0
is one, it is going to be 1.

NOTE Confidence: 0.8499436378479

696803ad-5e51-4c8c-9b76-b2939c973ced
00:22:05.870 --> 00:22:09.029
And that's a nice logic circuit
for the MUX.

NOTE Confidence: 0.871753811836243

38bb6cfa-5835-4934-875c-021023b44674
00:22:09.800 --> 00:22:15.785
You can design MUX 8 by one.
For the 8 by 1, how many switch

NOTE Confidence: 0.871753811836243

2a0c9dbf-7bc8-41d4-8e28-92e6642e6540
00:22:15.785 --> 00:22:16.982
inputs do you need?

NOTE Confidence: 0.915875613689423

5a48b87f-2017-4e27-a802-e926a4300ff6
00:22:17.540 --> 00:22:18.980
Can anyone answer this?

NOTE Confidence: 0.837652742862701

e03874c6-f4e8-42e1-a921-d38de71ae8d1
00:22:23.560 --> 00:22:27.603
Now we want to build a larger
MUX. I mean we want to

NOTE Confidence: 0.837652742862701

8e5cbd3f-ed5a-405d-81bb-6442f3e8008e
00:22:27.603 --> 00:22:31.024
select within eight inputs
and attach one of them to the

NOTE Confidence: 0.837652742862701

c68a309b-ee5f-4acb-ba45-19bc68677c37
00:22:31.024 --> 00:22:33.512
single output. How many
switch inputs do we need?

NOTE Confidence: 0.821173787117004

6a835bad-96fa-4506-b8a9-72740231571e
00:22:34.740 --> 00:22:38.051
If you have I0,
I1 until I7.

NOTE Confidence: 0.860320925712585

9ca22f9e-2b1e-403f-afaa-4eba99a901b3
00:22:39.190 --> 00:22:43.990
Yes, correct Justin says three inputs.
So because eight is 2 to the

NOTE Confidence: 0.860320925712585

860ee7da-3a04-412f-adf1-aa310cb3eefc
00:22:43.990 --> 00:22:48.790
power of three, so we need 3
switch inputs to select because

NOTE Confidence: 0.860320925712585

269b2be8-2a8c-4e65-9592-72f529409a34
00:22:48.790 --> 00:22:52.790
3 inputs has eight different
combinations and we can assign

NOTE Confidence: 0.860320925712585

95cd9efb-dd1a-48c6-be1a-a4fa9dc81df0
00:22:52.790 --> 00:22:55.190
each combination to one of the

NOTE Confidence: 0.833510398864746

94ddd1d5-852e-40f4-9fc6-afa82c0914fc
00:22:55.190 --> 00:23:01.782
inputs. In general, if you are
going to build a multiplexer 2

NOTE Confidence: 0.833510398864746

13ad299d-7a21-4734-a606-54bed3e61188
00:23:01.782 --> 00:23:07.686
to the power of N by one, you
need N switch inputs.

NOTE Confidence: 0.853580951690674

e1abd673-fe0a-461f-ac21-d796d479107d
00:23:08.480 --> 00:23:13.235
So based on the value of SO up
until SN, you can select one of

NOTE Confidence: 0.853580951690674

4947781a-a92f-42a8-8119-eda57244e63c
00:23:13.235 --> 00:23:18.307
the inputs from I0, I1
up until I 2 to the

NOTE Confidence: 0.840971708297729

6390f97e-ce69-4622-a3bf-87c0ba14add7
00:23:18.307 --> 00:23:22.506
power of N. Attach one
of them only at a time

NOTE Confidence: 0.840971708297729

61b24d03-fc2c-4dfc-9b1f-e3436eceb6b6
00:23:22.506 --> 00:23:23.734
to the single output.

NOTE Confidence: 0.788853824138641

85430fdc-bbd3-49ad-87fd-0ed2a7d3c436
00:23:25.650 --> 00:23:29.318
One thing is that.

NOTE Confidence: 0.831081211566925

cf61dfa5-b25a-4c35-abc9-89c28318fabf
00:23:30.810 --> 00:23:36.522
Indeed, if you compare the logic
circuit of the MUX with the

NOTE Confidence: 0.831081211566925

78cf16a9-c80e-4056-9704-02150f3aa46d
00:23:36.522 --> 00:23:41.758
decoders. For the decoder, we
already knew that in the decoder,

NOTE Confidence: 0.831081211566925

0993a83e-c1f0-4a60-bd32-1bdd4662a1b1
00:23:41.758 --> 00:23:46.518
you just transform a binary
number to a 1-hot vector.

NOTE Confidence: 0.852263689041138

76ffe338-0a78-4baf-97a5-b14b15dd6fa4
00:23:47.370 --> 00:23:50.898
And if you look at the logic
circuit for the decoders, the

NOTE Confidence: 0.852263689041138

4758ade8-ae2e-4a34-98c8-d27436b0258b
00:23:50.898 --> 00:23:54.720
1-hot vector haves
ANDs, and at each time, one of

NOTE Confidence: 0.852263689041138

67661600-dd50-49de-b5d6-6773f0c866fa
00:23:54.720 --> 00:23:59.130
the ANDs is going to be one, and all
the other ANDs are going to be 0.

NOTE Confidence: 0.852263689041138

6b470b6b-96e0-4515-9d9a-c4fbdca7bce4
00:23:59.130 --> 00:24:00.600
This is for the decoder.

NOTE Confidence: 0.852219700813293

1d34716a-4c72-4639-b1bd-77709515e840
00:24:01.420 --> 00:24:05.468
So you can see that it's a
very similar logic circuit

NOTE Confidence: 0.852219700813293

415abad1-1512-447a-b511-fb0e9e9b9501
00:24:05.468 --> 00:24:09.884
for the MUX, so for the MUX,
based on the switch inputs,

NOTE Confidence: 0.852219700813293

ea18e006-7d83-408e-802b-f72eca3c39cb
00:24:09.884 --> 00:24:13.932
which are the binary inputs in
the decoders, you can activate

NOTE Confidence: 0.852219700813293

cedc2d19-5d45-46c0-ba98-310bc9b18ed7
00:24:13.932 --> 00:24:15.404
one of the ANDs.

NOTE Confidence: 0.791475236415863

bb75d9f5-9476-426c-8245-155d7a21b5a9
00:24:16.540 --> 00:24:22.546
And for the decoders, when
the AND is going to be activated, the

NOTE Confidence: 0.791475236415863

8e7fa4f6-f425-4a98-8838-0bddaecc43a6
00:24:22.546 --> 00:24:29.644
output is always one, but here
we just input the

NOTE Confidence: 0.791475236415863

ea96fadd-05cf-40c1-8556-579cd55ba90c
00:24:29.644 --> 00:24:32.920
I0 I1 I2 and I3 to the ANDs.

NOTE Confidence: 0.835010230541229

f08681cb-c9fe-4d62-b8cc-1fcba9aa9bba
00:24:33.660 --> 00:24:38.730
So this is the extra input to
the ANDs when we compare this

NOTE Confidence: 0.835010230541229

0cdc651d-19ca-43e0-94e5-302f08163669
00:24:38.730 --> 00:24:42.630
logic circuit with the decoders.
Also, the decoder doesn't have

NOTE Confidence: 0.835010230541229

085995c2-2b8b-4f2c-b469-fbe7b2763198
00:24:42.630 --> 00:24:45.750
any OR, so in the MUX, we have

NOTE Confidence: 0.85018914937973

1a9fab2c-2c32-4f4b-b938-771841c91c53
00:24:45.750 --> 00:24:52.287
final OR. So it gives you an
idea that it is possible to

NOTE Confidence: 0.85018914937973

41b549de-226e-47f0-8035-0906a761550b
00:24:52.287 --> 00:24:56.400
redesign the MUX with decoders
plus an OR gate.

NOTE Confidence: 0.933396816253662

20403f8a-5891-46d6-9131-c23c1e9425d8
00:24:57.030 --> 00:24:58.920
So you can think about this at

NOTE Confidence: 0.8447145819664

3951652b-e1a5-4484-809e-de08d9cb95c8
00:24:58.920 --> 00:25:05.151
home. Uh, actually? In the book,
there is a way to build the MUX.

NOTE Confidence: 0.8447145819664

77201665-266c-4a6c-bfaa-bfa12140eddd
00:25:05.151 --> 00:25:10.182
You can read about that, by reusing
the decoders. So if you are

NOTE Confidence: 0.8447145819664

fd0f6a87-8c6c-4734-8d1a-102e5975d5e5
00:25:10.182 --> 00:25:15.987
going to build a MUX 4 by 1, it
is possible to reuse the decoder

NOTE Confidence: 0.8447145819664

a6594934-214c-47d9-8b9a-20ddc49c0a51
00:25:15.987 --> 00:25:17.148
2 by 4

NOTE Confidence: 0.739360332489014

c1e14037-ce52-410f-a4c0-0b8197733b53
00:25:17.890 --> 00:25:22.928
Plus, an AND, an OR gate and
some additional things.

NOTE Confidence: 0.932701528072357

6f580a39-0e7c-40fc-bd9f-4eeb93b37456
00:25:24.060 --> 00:25:26.990
And another thing is that.

NOTE Confidence: 0.835421502590179

7d58e916-aa35-4cea-b341-f0ab60cc252c
00:25:27.530 --> 00:25:32.158
As I said, the logic circuit of
the MUX has two levels gates.

NOTE Confidence: 0.835421502590179

b0157434-b6c9-47b5-80c6-d61d6a1d5820
00:25:32.158 --> 00:25:36.786
One level is the ANDs and one
final level OR. This is very

NOTE Confidence: 0.835421502590179

9c969a9b-7576-4c29-85c3-7ec7baec94c3
00:25:36.786 --> 00:25:40.702
similar to the sum of products.
You remember for instance, in

NOTE Confidence: 0.835421502590179

9c7b3445-5cef-4a35-9fd0-9ceb2d05c681
00:25:40.702 --> 00:25:44.618
the last week labs, you have to
output the Boolean function

NOTE Confidence: 0.835421502590179

e15f2235-2f86-4771-8b36-b5c12f3a36d5
00:25:44.618 --> 00:25:47.110
based on the sum of minterms or

NOTE Confidence: 0.903359413146973

102f6c14-824f-4ff0-8502-07b8b4ef4208
00:25:47.110 --> 00:25:52.500
sum of  products. So the MUXs are
very similar to the sum of

NOTE Confidence: 0.833406388759613

ca80e98d-8e6f-4fee-acd6-2cfb5112466d
00:25:52.500 --> 00:25:56.995
products. So it gives us a hint
that we can

NOTE Confidence: 0.779881775379181

88386241-2598-47b3-bd14-ec6f9ae26b32
00:25:57.580 --> 00:26:03.200
redesign any Boolean function
based on the sum of products

NOTE Confidence: 0.754814684391022

0a5549c4-9283-42ac-9f7e-7e2c6a490d46
00:26:03.860 --> 00:26:07.628
by reusing the MUX. We did that
with the decoders, we really

NOTE Confidence: 0.754814684391022

ea7b53d6-20b3-405d-8803-dd8f6e05cbb3
00:26:07.628 --> 00:26:11.082
saw that with the decoders, we
can redesign the any Boolean

NOTE Confidence: 0.754814684391022

180da535-459c-42fd-a815-99650d83f6da
00:26:11.082 --> 00:26:15.478
function. Now we want to see that,
How can we do that with MUX?

NOTE Confidence: 0.833441972732544

4845ff92-fccc-46e5-aec8-363c9340c2b3
00:26:18.160 --> 00:26:23.540
So with multiplexers, we can
reduce on any Boolean functions

NOTE Confidence: 0.833441972732544

c0608c98-aff3-4b93-a5da-2331b2821b0e
00:26:23.540 --> 00:26:25.692
based on the SOP.

NOTE Confidence: 0.860285103321075

3a1a85e4-7bbb-4367-b76e-2f5a886b3d1c
00:26:26.780 --> 00:26:32.188
I'm not talking about this, but
you can think about this. Is it

NOTE Confidence: 0.860285103321075

56081c86-950c-4306-8fa2-fd90d290aca5
00:26:32.188 --> 00:26:36.348
possible to, whether it is
possible to use multiplexer for

NOTE Confidence: 0.860285103321075

7ee8b211-0044-4a15-b041-a2f3ae4407c2
00:26:36.348 --> 00:26:38.428
product of sums or not?

NOTE Confidence: 0.879501163959503

a6fe2b53-0803-4b66-8a4a-ec0f96e55c22
00:26:38.970 --> 00:26:43.084
This is possible, but you have
to redesign a little bit, using

NOTE Confidence: 0.883213937282562

1418af4b-275a-48cc-90d7-0ef1a904c247
00:26:43.084 --> 00:26:46.772
demultiplexers. But today
I'm going to talk about the

NOTE Confidence: 0.883213937282562

c53e7261-0109-4743-a82e-3b966df42fbe
00:26:46.772 --> 00:26:47.774
sum of products.

NOTE Confidence: 0.833578169345856

29b290ff-d439-460f-ae82-e1e6b086e24d
00:26:49.720 --> 00:26:54.352
You can read about this in the
book. There's another type of

NOTE Confidence: 0.833578169345856

8cf2cffa-75e2-41bb-90ef-4a6dea070d1d
00:26:54.352 --> 00:26:58.598
multiplexers built with the
NAND gates. With that you can use

NOTE Confidence: 0.833578169345856

e741e38d-2ad3-4561-824e-8c61d8c53b40
00:26:58.598 --> 00:27:00.142
the product of sum.

NOTE Confidence: 0.813315093517303

2a34f0c4-650f-4150-ac1a-927c15ac030f
00:27:01.170 --> 00:27:07.943
But let's see how can we use
the MUX for a Boolean function

NOTE Confidence: 0.813315093517303

e10d12aa-f9dc-4af4-ab4f-42f6ec6bd81b
00:27:07.943 --> 00:27:11.069
based on the sum of products.

NOTE Confidence: 0.89118093252182

68c8a61f-ad6f-4471-99aa-bacbf33f8df2
00:27:12.040 --> 00:27:15.888
Imagine you go to the market and
buy a MUX 8 by 1.

NOTE Confidence: 0.761525571346283

845eb490-220c-465c-86b3-54d8cbbe872d
00:27:16.460 --> 00:27:21.470
And now, uh, you're asked to
write a Boolean function

NOTE Confidence: 0.761525571346283

c93f885a-0aa3-404a-980a-e1f72801a6ba
00:27:21.470 --> 00:27:25.979
based on the three input
variables XY&Z and this

NOTE Confidence: 0.761525571346283

c7f467a1-d93d-46a3-aac6-6cf2bbe74bd7
00:27:25.979 --> 00:27:31.490
Boolean function F is a Sigma. It
means sum of these minterms,

NOTE Confidence: 0.761525571346283

f9858652-790e-4227-8256-597f2cfc980d
00:27:31.490 --> 00:27:37.001
for instance with m0, m1, m4, etc.

NOTE Confidence: 0.926686525344849

8ae459df-30dc-4fc8-a2cc-3a9ed11a5366
00:27:38.160 --> 00:27:40.000
So the thing is.

NOTE Confidence: 0.836396753787994

498d6895-1a19-4ed7-925a-a4e291f93d69
00:27:41.190 --> 00:27:44.880
You can simply attach the
input binary variables for

NOTE Confidence: 0.836396753787994

921b8827-938e-4598-a044-a2daf77f7bb5
00:27:44.880 --> 00:27:48.980
the Boolean function to the
switch input of the MUX.

NOTE Confidence: 0.851885080337524

2956af9d-c645-46f7-8a45-4b44a300960b
00:27:50.200 --> 00:27:55.504
And the thing is, when you do
that based on the binary number

NOTE Confidence: 0.851885080337524

decca12d-7dd2-4158-9d7d-ddab455ac750
00:27:55.504 --> 00:27:59.992
in the binary input variables,
you select one of these inputs.

NOTE Confidence: 0.823918044567108

1bf9da29-9b4a-423a-bc32-f2aaded7edfd
00:28:01.510 --> 00:28:07.354
For instance, if F, the Boolean
function, is Sigma minterm one

NOTE Confidence: 0.823918044567108

45feaf32-c3f6-4f99-9535-d5066ee92d63
00:28:07.354 --> 00:28:14.659
and etc. So m1 is 001.
So if you attach this 001 to the

NOTE Confidence: 0.823918044567108

5872a626-efcc-4c4e-8b80-bd2a3a1bb8dd
00:28:14.659 --> 00:28:18.068
S0 S1 and S2, it selects I1.

NOTE Confidence: 0.909056603908539

23cd930f-18ff-4d16-b2f5-5f644e0034a4
00:28:19.260 --> 00:28:21.900
So I1 is going
to be attached to F.

NOTE Confidence: 0.841360747814178

d00dde74-f65f-4ce8-be40-bea469151540
00:28:22.910 --> 00:28:27.866
Because F is the Sigma minterm
one. So it means that whenever

NOTE Confidence: 0.841360747814178

9cc8c4fa-e249-4c94-9973-8996a912200d
00:28:27.866 --> 00:28:34.061
minterm one is 1, everything is 1. So
I1 is attached to F. So I1

NOTE Confidence: 0.841360747814178

1fe1babb-52b2-4191-a199-4072814ada1b
00:28:34.061 --> 00:28:39.430
is going to be one in order to
make F1. So basically for this

NOTE Confidence: 0.841360747814178

d5e1cc7a-c509-490e-bfbe-f7273ad0114f
00:28:39.430 --> 00:28:43.560
instance, 001, you have to input
one into I1.

NOTE Confidence: 0.865506410598755

d43cfb4d-f0e9-488a-b686-f3afad8ca13f
00:28:44.450 --> 00:28:47.460
And for all other minterms, you
have to check what.

NOTE Confidence: 0.709107100963593

0a8fb6cf-78d3-41bd-bd31-860899aa925b
00:28:48.280 --> 00:28:52.048
is going to be the input of each
input in the MUX.

NOTE Confidence: 0.91107565164566

b5f8b5b6-10ec-4626-9a08-c8690e27570a
00:28:52.730 --> 00:28:56.010
So let's this is the general
idea, so let's practice.

NOTE Confidence: 0.802810311317444

8b018d95-436a-4f8b-bca5-1acd4a05827f
00:28:57.410 --> 00:29:02.008
Imagine we're going to
redesign the full adder by MUX.

NOTE Confidence: 0.802810311317444

086cacf3-7e7c-4a02-838c-c33ca7e2abc6
00:29:02.008 --> 00:29:07.442
We already built the full adder
by only one half adder. Also we build

NOTE Confidence: 0.802810311317444

11431937-e4ea-43c8-9b03-1200ae4360b6
00:29:07.442 --> 00:29:12.040
the full adder by reusing two
half adders. Also, we redesign

NOTE Confidence: 0.802810311317444

637cf087-4d42-43b0-926b-f11963a367f5
00:29:12.040 --> 00:29:16.220
full adders last lecture by
using the decoders. Now we're

NOTE Confidence: 0.802810311317444

42c49f16-3188-49c2-be98-4786f5cea02b
00:29:16.220 --> 00:29:21.654
going to build the full adder
by using MUX. So in the full

NOTE Confidence: 0.802810311317444

c41b4e15-0619-43df-a9e4-066200e00ac1
00:29:21.654 --> 00:29:26.670
adder, we have this sum output,
which is the Sigma minterms 1,2,4,7.

NOTE Confidence: 0.802810311317444

ef1ee97a-3277-4118-b789-ef86f50cc6fa
00:29:26.670 --> 00:29:27.924
Basically the exclusive

NOTE Confidence: 0.681644856929779

32ab38ec-c20f-4967-84ae-2ea24bd15350
00:29:27.990 --> 00:29:33.247
OR of the X, Y and the carry
from the previous step.

NOTE Confidence: 0.832342565059662

ea28c362-085d-4698-bbbf-dad65d72e11a
00:29:34.790 --> 00:29:40.562
And the carry, the final carry
from the full adder is a Sigma

NOTE Confidence: 0.832342565059662

5e39bcf4-80b8-4000-9ddc-8f3994f3e656
00:29:40.562 --> 00:29:45.446
minterms 3,5,6,7, which is basically
based on this truth table. You

NOTE Confidence: 0.832342565059662

8e548dc9-f79f-4cd6-8b41-984c332f8fed
00:29:45.446 --> 00:29:46.778
can see that.

NOTE Confidence: 0.874767899513245

6860b987-e0b3-47be-b101-c954aaff3daf
00:29:46.780 --> 00:29:51.160
This is the final carry. The
final carry is X&Y.

NOTE Confidence: 0.821984767913818

6a55775c-abe8-4633-83a3-aafc058aa269
00:29:51.930 --> 00:29:56.730
And also carry from the
previous step, so X&Y.

NOTE Confidence: 0.803536772727966

b9d16682-6072-4bb3-a31b-111b65a555f7
00:29:58.110 --> 00:30:02.160
And carry from the previous step
and Y carry from the previous

NOTE Confidence: 0.803536772727966

dcf5eb66-f8c9-4fdd-897d-10abf3fc08d4
00:30:02.160 --> 00:30:07.425
step  and X. So we already saw
this if you put the carry,

NOTE Confidence: 0.803536772727966

d521cf17-2ab7-456d-a96a-f28ccde451e3
00:30:07.425 --> 00:30:09.855
Sigma minterms 3, 5, 6, 7 in the Karnaugh map

NOTE Confidence: 0.799975156784058

f3243fa1-5f41-4133-87c5-ce5b72d1023d
00:30:09.855 --> 00:30:14.749
with three variables, we can
simplify that. But I mean

NOTE Confidence: 0.799975156784058

0ae57e03-416c-4732-a3f4-a469ba28a375
00:30:14.749 --> 00:30:17.095
without simplification it's
Sigma minterms

NOTE Confidence: 0.834128975868225

d06c74e0-e3e1-4847-b9bf-c41888040edf
00:30:17.730 --> 00:30:22.852
three, five, six, and seven.
The same for the sum output. But

NOTE Confidence: 0.834128975868225

6efecb1d-e0fa-44a2-9e05-492383675fe7
00:30:22.852 --> 00:30:24.428
we already knew that.

NOTE Confidence: 0.851153969764709

fa47e877-226b-4747-b05c-8f9b08babaf6
00:30:24.430 --> 00:30:25.948
Now we want to use MUX.

NOTE Confidence: 0.913474082946777

f29f4a5e-4312-404c-942c-78bc21d83662
00:30:26.990 --> 00:30:29.614
First, let's see what
happens with the S.

NOTE Confidence: 0.815459370613098

a7b4177f-8ac4-4486-aad6-35f25b811446
00:30:30.660 --> 00:30:35.763
For the S, we have
Sigma Minterms 1,2,4,7 so.

NOTE Confidence: 0.910791456699371

ccffe2b0-f30e-4aec-aaa5-aa5a8df0e7ea
00:30:39.090 --> 00:30:40.060
Here.

NOTE Confidence: 0.907624542713165

e35a3b09-d97e-46d3-ad49-04b7189cc62a
00:30:41.070 --> 00:30:42.890
The first one is the minterm one.

NOTE Confidence: 0.819084763526917

6eb0b74a-acde-4695-afa4-9327073c7570
00:30:43.490 --> 00:30:50.684
Meaning that in the input, we
is going to have X = 1, Y = 0 and carry

NOTE Confidence: 0.819084763526917

1a929bca-7c2d-4432-a991-304a62a96bfc
00:30:50.684 --> 00:30:58.532
from previous step = 0, so 001. 001,
if we connect to switch inputs,

NOTE Confidence: 0.819084763526917

30d743f5-b5b9-4844-9311-f90d6cefe163
00:30:58.532 --> 00:31:00.494
makes the I1

NOTE Confidence: 0.820317566394806

e31a5e32-a539-4648-993d-00fe62937a1e
00:31:01.930 --> 00:31:05.461
Attached to the output. The
output,we can

NOTE Confidence: 0.820317566394806

f0e02f3b-9acc-4356-8b75-9f62eb47e331
00:31:05.461 --> 00:31:07.708
rename F right now to S,

NOTE Confidence: 0.864754378795624

80f7d9bd-02a4-4f4f-b144-b38ec0039c13
00:31:07.708 --> 00:31:13.787
the final sum. So if you have
minterm one in the input, S is going to

NOTE Confidence: 0.864754378795624

483726f8-75b9-43c0-9371-a5d7b1d17354
00:31:13.787 --> 00:31:19.442
be one, so in the MUX, I1
is attached to S, and I1

NOTE Confidence: 0.864754378795624

33c8297c-c106-4ba0-8b34-b8b8cf478747
00:31:19.442 --> 00:31:23.966
must be one, so we can simply
input one into the I1.

NOTE Confidence: 0.928809583187103

ef74ba7f-6ea2-4fef-af3e-6ca2d2384211
00:31:25.260 --> 00:31:26.648
The next one is.

NOTE Confidence: 0.213871717453003

adefb9e9-5cd3-4ece-8bd3-313c8969deb9
00:31:29.270 --> 00:31:31.080
Ah.

NOTE Confidence: 0.849099218845367

ea338f9e-2e48-4690-8b90-25bd120c8840
00:31:32.160 --> 00:31:39.728
Sorry I didn't get
your question. I'll be

NOTE Confidence: 0.849099218845367

08488dd5-1694-4742-8c70-9fc568e0cea7
00:31:39.728 --> 00:31:43.512
back with your question.

NOTE Confidence: 0.806123793125153

319b8866-a4fe-4776-b82c-4c42d934651a
00:31:43.520 --> 00:31:49.284
Let's finish this. The
second minterm, the second minterm

NOTE Confidence: 0.821669340133667

5e09acdb-e679-4585-bbc3-378893c076f2
00:31:49.284 --> 00:31:56.376
is 2.
Minterm 2, minterm two is 010. If

NOTE Confidence: 0.821669340133667

232bcc6f-6620-41fc-8c2e-5268a445dcd7
00:31:56.376 --> 00:32:02.772
you attach this to the switch
input of the MUX, it selects I2.

NOTE Confidence: 0.819186151027679

5e4272a4-6962-4fc8-8ac0-2e684a367038
00:32:04.260 --> 00:32:08.910
We know that sigma minterm
2, meaning that the minterm

NOTE Confidence: 0.819186151027679

9fde9aa6-4152-4a65-b9e8-646a626f0c9d
00:32:08.910 --> 00:32:14.955
2 makes S1. So if you attach
010 to the MUX, it selects

NOTE Confidence: 0.819186151027679

070e4d41-4734-4a91-acd3-fbe8d993085b
00:32:14.955 --> 00:32:21.465
I2 to the S and I2 must be
one in order to make S1.

NOTE Confidence: 0.83403205871582

76d47140-e187-46dd-bf68-4179dcf164f8
00:32:24.090 --> 00:32:29.286
The third minterm is minterm four
m4 is 100. When you

NOTE Confidence: 0.83403205871582

3250e696-5f51-4c46-ace7-e51cb1cc7478
00:32:29.286 --> 00:32:34.482
attach this to the switch input
of the MUX, it selects I4.

NOTE Confidence: 0.762996733188629

8cf9611f-c503-4eca-9e12-e6f5c1ca55b4
00:32:36.040 --> 00:32:39.930
You see that minterm four selects
I4 in the MUX.

NOTE Confidence: 0.753611266613007

36eb62f6-2552-457c-a83c-c6b77ff23a46
00:32:40.630 --> 00:32:46.160
And I4 is now attached to the
S. And because m4 is in this

NOTE Confidence: 0.753611266613007

9a9f389e-4705-412e-9583-be498c7eb6d3
00:32:46.160 --> 00:32:50.110
Boolean function, it makes S = 1. I4
must be an input with one.

NOTE Confidence: 0.716448664665222

f522b32a-ac31-471f-bb57-33bfbae68bdf
00:32:51.300 --> 00:32:56.370
The last one is m7, so you can
assume that you can

NOTE Confidence: 0.81234884262085

6f7bd307-75b6-4782-a7c7-acea07199ef0
00:32:57.040 --> 00:33:02.243
anticipate that m7 attached to
switch input of MUX selects I7

NOTE Confidence: 0.81234884262085

acadccec-1509-4fb9-84c4-b022339fdabd
00:33:02.243 --> 00:33:07.919
and because m7 makes S = 1, I7
must be an input with one.

NOTE Confidence: 0.860094845294952

da14b81e-37bf-4a72-a594-65d82f35e0ba
00:33:09.350 --> 00:33:14.940
So in other words, whenever we
have m1, m2, m4, m7 in the switch

NOTE Confidence: 0.755438208580017

8806910e-367c-4942-a090-e80a4a684869
00:33:14.940 --> 00:33:17.600
input. The inputs

NOTE Confidence: 0.817901790142059

47e4ebfa-6159-4e98-9f0a-d85e4fa0aed1
00:33:18.270 --> 00:33:20.199
Must be

NOTE Confidence: 0.830438017845154

f102ce20-c4fe-4b27-979e-7708d0991ab7
00:33:20.780 --> 00:33:23.900
Enabled, or inputted by 1.

NOTE Confidence: 0.823914527893066

e20ded27-5021-488e-87e1-497fedd14220
00:33:24.450 --> 00:33:29.246
Otherwise, for all the other
minterms, they must be 0 because

NOTE Confidence: 0.823914527893066

ea1b5158-13e3-44f2-b159-15086ff10934
00:33:29.246 --> 00:33:32.734
in other old minterms
for instance, minterm zero, minterm three

NOTE Confidence: 0.823914527893066

960e2437-e756-4482-b305-c10064787d93
00:33:32.734 --> 00:33:39.274
and etc., S is 0. So you have to
input the other inputs in the

NOTE Confidence: 0.823914527893066

320f41bc-5c06-4b91-9e10-5c2f60510cbc
00:33:39.274 --> 00:33:40.582
MUX with zero.

NOTE Confidence: 0.850905179977417

b53f9d3c-b166-41e7-bfdb-5a7a417b2c24
00:33:42.090 --> 00:33:46.040
So this is the Boolean

NOTE Confidence: 0.849007308483124

c32b8f4f-723b-46e9-828a-ddb35c8ac9c7
00:33:46.040 --> 00:33:50.807
function S by reusing the MUX
8 by 1.

NOTE Confidence: 0.789007008075714

e32d86fb-9597-4193-bf4a-fdb52e78ba7f
00:33:53.530 --> 00:33:58.366
For the carry, the same. For the
carry, minterm three

NOTE Confidence: 0.789007008075714

7978b300-2e35-4260-927f-07e5e7c4c54b
00:33:58.366 --> 00:34:02.830
makes this C = 1. Minterm three in
the inputs of the MUX

NOTE Confidence: 0.789007008075714

96daac80-3367-4664-923d-dabc5145dece
00:34:02.830 --> 00:34:05.062
selects I3. So one to the

NOTE Confidence: 0.770853161811829

88949fd3-8b2d-46d7-9133-9bf377f51f20
00:34:05.062 --> 00:34:08.520
I3. Minterm 5 select I5.

NOTE Confidence: 0.842162489891052

2235cec8-8e44-4a7d-b514-0d6abbf3ea5c
00:34:09.300 --> 00:34:10.568
1 to the I5.

NOTE Confidence: 0.766318082809448

27c43e23-3dff-45b7-8f76-2a362c7e95fe
00:34:11.320 --> 00:34:18.040
Minterm 6 selects I6, 1 to the I6.
Minterm 7 selects I7, one to the

NOTE Confidence: 0.766318082809448

10710218-f431-46f4-a3df-f4e852093419
00:34:18.040 --> 00:34:24.280
I7, and in all other inputs of
the MUX, we input 0 because

NOTE Confidence: 0.766318082809448

ddc5cbf3-0cd8-43e3-9c52-0985881e49ad
00:34:24.280 --> 00:34:29.560
these minterms makes C = zero, and
then we don't have those

NOTE Confidence: 0.766318082809448

b8508e0f-41d4-40cc-b858-62854ef92d12
00:34:29.560 --> 00:34:31.000
minterms in the C.

NOTE Confidence: 0.788008391857147

3f6dcf9c-4ea2-4bab-8789-be9ead216996
00:34:34.740 --> 00:34:39.684
So now I can take your questions
so Mingxi says.

NOTE Confidence: 0.794399619102478

52366b51-eace-42ea-9693-5be3a111474d
00:34:42.570 --> 00:34:48.100
01101001. I keep seeing XOR here,
is x xor y xor z.

NOTE Confidence: 0.872173964977264

af700f02-7eaa-48e5-ae40-cc5c74161879
00:34:50.130 --> 00:34:52.986
I'm not sure I understand
your question Mingxi.

NOTE Confidence: 0.815938115119934

28f576c0-6194-4b8f-94d0-a7c3967f2043
00:34:56.150 --> 00:34:58.390
What do you mean by XOR?

NOTE Confidence: 0.748024165630341

b75e6139-fd8b-4af8-b295-7503a6b183ce
00:35:06.980 --> 00:35:12.430
You're talking
about this.

NOTE Confidence: 0.849553346633911

0d2ef78d-cc69-49f7-b8b2-8a1a0e52c4ab
00:35:13.630 --> 00:35:14.510
Here.

NOTE Confidence: 0.77724015712738

0fb603ea-ca86-4f29-a220-3c3677e39272
00:35:16.540 --> 00:35:23.584
OK, so we said that
the sum in the full

NOTE Confidence: 0.77724015712738

26cc4e0d-5a0e-481e-8530-5d22c97629f4
00:35:23.584 --> 00:35:30.628
adder is the exclusive or of
all the three inputs.

NOTE Confidence: 0.944801867008209

dd66a796-cfeb-4533-8f9b-e3cffa683c99
00:35:31.460 --> 00:35:32.330
So.

NOTE Confidence: 0.885236144065857

cabba1b6-69f0-4b21-8fe0-2c3f15b3c353
00:35:34.010 --> 00:35:35.450
We said that.

NOTE Confidence: 0.827893793582916

0d360222-c37e-4b1c-bf1c-bfe63dd8ccf5
00:35:41.000 --> 00:35:46.013
So for instance here, the
exclusive or of these three,

NOTE Confidence: 0.827893793582916

4ded9dcf-445a-48bc-8444-b2eb50426319
00:35:46.013 --> 00:35:49.355
exclusive or, this is 1 and then

NOTE Confidence: 0.909570693969727

295e7ae5-6fae-42f2-9951-26fd00dd1238
00:35:49.355 --> 00:35:54.359
one yes. 010 exclusive or
one.

NOTE Confidence: 0.842526793479919

ec92e456-d065-4108-9895-efe8482f94ba
00:35:56.160 --> 00:36:01.298
Exclusive or 1, 1 is going to be
000 exclusive or 0.

NOTE Confidence: 0.245258867740631

48778265-73ba-4961-a6c3-718ddf7d3938
00:36:02.840 --> 00:36:03.620
And.

NOTE Confidence: 0.698465824127197

522a54ce-ae60-4723-8260-650fe3269dfe
00:36:09.530 --> 00:36:17.272
Ah, so again, true, actually
the sum is exclusive or XY and

NOTE Confidence: 0.698465824127197

126ebfea-2f1e-419c-94f9-067559578ea9
00:36:17.272 --> 00:36:19.484
carry from previous step.

NOTE Confidence: 0.938957929611206

8ab442f0-58dc-498d-9ca4-b6e0911975b0
00:36:20.100 --> 00:36:21.480
So what's the question?

NOTE Confidence: 0.766853868961334

388eae13-3028-435f-979c-fd459116bd1c
00:36:28.270 --> 00:36:34.215
Oh.
Great yes yeah, actually that's

NOTE Confidence: 0.766853868961334

336396ec-9280-4650-b191-6dae8bbcd4c5
00:36:34.215 --> 00:36:39.168
the beauty of this sum because
in the half adder, what about m7?

NOTE Confidence: 0.85660183429718

39d18c5a-56fd-4459-b9e4-ea6a6debeee6
00:36:40.560 --> 00:36:47.877
Uh. Again, m7, the exclusive
or of XY, 11 becomes zero and then

NOTE Confidence: 0.85660183429718

6109e731-1568-44a1-8572-78a403c37835
00:36:47.877 --> 00:36:51.039
the exclusive of 01 becomes one.

NOTE Confidence: 0.914125502109528

ae6bf286-348a-4073-af9b-5b381e6ea81a
00:36:51.820 --> 00:36:54.790
So the same for the m7.

NOTE Confidence: 0.873553276062012

3507562e-3181-4aed-a291-0648ed0b113f
00:36:56.250 --> 00:37:01.470
So we already designed this full
adder two lectures ago,

NOTE Confidence: 0.873553276062012

841a2f9e-44c3-4996-9b32-73db256dd1b6
00:37:01.470 --> 00:37:07.125
so you can have a look at the
design, but please practice on

NOTE Confidence: 0.873553276062012

2964c4dc-6d76-4f38-86f5-f3c19c2c49eb
00:37:07.125 --> 00:37:09.300
that because you have to

NOTE Confidence: 0.796269476413727

2f271ce5-9841-4ab1-bc97-26473177ec49
00:37:09.300 --> 00:37:13.880
remember. They half adder is
exclusive of XY, full adder

NOTE Confidence: 0.796269476413727

946dd432-4d76-44a7-a8af-1fddcf53dcb0
00:37:13.880 --> 00:37:18.330
is exclusive of XY and the carry
previous step. Also, these

NOTE Confidence: 0.796269476413727

ef94a99d-c1e5-49f6-b596-45303372ec1c
00:37:18.330 --> 00:37:22.780
are the most famous
logic circuits in any computer

NOTE Confidence: 0.796269476413727

f3480dc4-42be-423f-a347-113d78ba148f
00:37:22.780 --> 00:37:26.785
system, so half adders, full
adders. In the lecture

NOTE Confidence: 0.796269476413727

b0565f97-5f33-44ba-81d5-413334e8a62e
00:37:26.785 --> 00:37:30.790
assignment for previous week,
I put a question about

NOTE Confidence: 0.796269476413727

1335b83a-af4d-4494-af51-e1c04bad94a0
00:37:30.790 --> 00:37:34.795
subtractor. So you have half
subtractor, full subtractor, so

NOTE Confidence: 0.796269476413727

47558471-f156-4e6e-8f6e-e0f760743c22
00:37:34.795 --> 00:37:39.690
these are the famous logic
circuits, so you have to kind

NOTE Confidence: 0.796269476413727

ba65bbc2-7d16-4622-9f58-491a4bc7de8f
00:37:39.690 --> 00:37:41.025
of memorize them.

NOTE Confidence: 0.838308811187744

25c38978-7c4a-4cac-839b-191932a10ac3
00:37:43.470 --> 00:37:48.683
So, so you saw that we can reuse
the MUX for any Boolean

NOTE Confidence: 0.920323371887207

17679947-d6f0-4815-bdb8-7bee3ccf5f1e
00:37:48.683 --> 00:37:51.338
functions. So the next is.

NOTE Confidence: 0.863226354122162

2aeeb850-c802-4b49-863e-4c583c35bf74
00:37:53.020 --> 00:37:59.676
In the book, in this
page 161, it proposes a better

NOTE Confidence: 0.863226354122162

296fd6a7-ba91-427e-bfb8-6e71f02eadbe
00:37:59.676 --> 00:38:05.308
approach to reuse a smaller size
MUX for the same Boolean

NOTE Confidence: 0.876033544540405

22ac3838-6c2f-43ad-9d3b-82b3bb36c69c
00:38:05.308 --> 00:38:09.510
function. So basically what we
did here is that whenever we

NOTE Confidence: 0.876033544540405

55f73fdb-e4a2-47e0-96c1-478d9a470eb8
00:38:09.510 --> 00:38:13.206
have a Boolean function with
three inputs, we need a 2 to the

NOTE Confidence: 0.876033544540405

6836660e-b5f4-4a2e-b108-e1061ea298af
00:38:13.206 --> 00:38:15.054
power of 3 by 1 MUX.

NOTE Confidence: 0.857965052127838

34baea0d-ac50-4c8f-95b4-81d3472ed012
00:38:15.630 --> 00:38:21.038
If the Boolean function has four
input variables, we need a 2 to

NOTE Confidence: 0.857965052127838

878a9d9e-debd-4bcb-a519-d2019d2a58d5
00:38:21.038 --> 00:38:26.030
the power of 4 by 1, meaning
that 16 by 1 MUX.

NOTE Confidence: 0.88944810628891

d3830e36-feff-4d61-b217-031c64c227b4
00:38:26.540 --> 00:38:29.970
So depending on the number
of input variables for the

NOTE Confidence: 0.88944810628891

8d1aeb31-dc83-45c5-b7ee-f17e3294405e
00:38:29.970 --> 00:38:33.057
Boolean function, we have to
select the specific MUX.

NOTE Confidence: 0.929673433303833

4880fb3d-b819-4edb-8ffa-9782dd2620c8
00:38:34.270 --> 00:38:36.405
But in the book, it says that

NOTE Confidence: 0.934939384460449

2bd727bb-bab6-4730-a251-4d46c162ec73
00:38:38.290 --> 00:38:40.830
There is a way to

NOTE Confidence: 0.807247519493103

c66a25f1-fd9a-4df8-b732-f68d4947a23e
00:38:41.530 --> 00:38:45.798
Reuse a smaller size MUX for
a Boolean function with larger

NOTE Confidence: 0.807247519493103

168fd147-67e2-42e5-96b2-c4dbafd1077e
00:38:45.798 --> 00:38:50.066
size. For instance, if you have
a Boolean function with three

NOTE Confidence: 0.807247519493103

ffa31bde-b512-4d11-a83d-a526c9f7b060
00:38:50.066 --> 00:38:52.006
input variables, we can reuse

NOTE Confidence: 0.859642624855042

5778d10a-a03a-4c63-9845-259326bdf4bd
00:38:52.006 --> 00:38:57.117
the MUX with 4 by 1, meaning
just two input switchs.

NOTE Confidence: 0.871924102306366

2ba16c7b-72e3-45cf-b5a7-af27f089e889
00:38:57.810 --> 00:39:01.924
If you are given a Boolean
function with four variables, we

NOTE Confidence: 0.871924102306366

a3626186-f067-47d5-a3dc-aefefe7d0cf0
00:39:01.924 --> 00:39:03.420
can reuse the MUX.

NOTE Confidence: 0.859567999839783

bec3e5c2-02f5-48e8-8dcf-5aac7aba2f93
00:39:03.920 --> 00:39:06.584
8 by 1, two to the power of 3, for

NOTE Confidence: 0.894974291324615

6a27dd50-6f69-4ca2-b1ef-e7a24ec75c56
00:39:06.584 --> 00:39:12.115
three switch inputs. So it means
that one bit less than the

NOTE Confidence: 0.894974291324615

b2df7601-2d49-4038-9d08-f880deb21ace
00:39:12.115 --> 00:39:15.755
number of input variables for
the Boolean function.

NOTE Confidence: 0.889539659023285

953ef4c9-8f6c-4792-9913-7d321d3116ea
00:39:16.770 --> 00:39:21.801
So let's see how it is possible.
I just wanted to quickly explain

NOTE Confidence: 0.889539659023285

9dfd22d4-de06-4e12-abf5-ad1d9033bf50
00:39:21.801 --> 00:39:25.671
that you can fully read about
that in the book.

NOTE Confidence: 0.872525036334991

597d22a1-5562-4fd7-b55f-18e059cf3d03
00:39:26.350 --> 00:39:30.607
So basically again, if you're
going to redesign the full adder

NOTE Confidence: 0.801556587219238

33053b1a-d2e4-43f8-bb0c-dc1dbb952c8f
00:39:30.607 --> 00:39:35.790
by MUX. For the full adder, we
have three input variables: X, Y,

NOTE Confidence: 0.801556587219238

7851603c-f80f-4462-af21-7eb18259f4ca
00:39:35.790 --> 00:39:37.210
and carry from previous system.

NOTE Confidence: 0.863373637199402

065a4e21-b2d0-47ca-be04-8cf0fcbd8bda
00:39:38.390 --> 00:39:43.606
We saw that we can reuse the 8
by 1 MUX, but now we want to

NOTE Confidence: 0.863373637199402

73e875a7-2ed6-4c27-baa1-060f1b3be1e3
00:39:43.606 --> 00:39:47.518
see can we reuse a smaller
size MUX 4 by 1?

NOTE Confidence: 0.928020358085632

89b69063-d508-4a16-8967-b70dc76cebaf
00:39:48.100 --> 00:39:50.200
The answer is yes, and this is

NOTE Confidence: 0.835921883583069

ddfd53e4-b1fd-4909-9f8d-499dac27f347
00:39:50.200 --> 00:39:55.077
the approach. You simply detach
the highest significant bits

NOTE Confidence: 0.860460042953491

5efd47a2-a51a-4cf8-988e-9fccf2621277
00:39:56.020 --> 00:40:01.688
And put it in the input. I'll
explain how, and then all the

NOTE Confidence: 0.860460042953491

4bb1be6d-570f-42cc-ad0b-4f39e3bb4699
00:40:01.688 --> 00:40:05.176
other lowest significant bits
goes to the switch inputs.

NOTE Confidence: 0.807911515235901

f34ff4db-b7fd-4b50-a892-cc61a1b838aa
00:40:06.030 --> 00:40:08.838
So here we have three input
variables. The highest

NOTE Confidence: 0.807911515235901

3eebff68-d1e3-44a5-b2e4-35ff888da4e1
00:40:08.838 --> 00:40:12.270
significant bit is the carry
from previous step. So you just

NOTE Confidence: 0.807911515235901

b0ba50b0-c500-4106-a55d-31142b999e28
00:40:12.270 --> 00:40:16.014
detach it and put it in the
input and all other lower

NOTE Confidence: 0.807911515235901

3217507e-6ae8-4bb8-bb01-10605909d819
00:40:16.014 --> 00:40:18.822
significant bits goes to the
switch input X and Y.

NOTE Confidence: 0.844134449958801

f23820f1-ee46-41fd-8606-d517d524e712
00:40:19.720 --> 00:40:24.634
And now let's see how can we
input, so we have two switch

NOTE Confidence: 0.844134449958801

4d2d9a41-7fe5-4a34-a24e-b51859713a4f
00:40:24.634 --> 00:40:28.036
inputs, so we can
select four inputs.

NOTE Confidence: 0.856175541877747

592d34c9-2cef-4ad0-9e97-67f1f7a5f5b2
00:40:28.830 --> 00:40:33.234
So let's see how can we input
the carry from the previous step to

NOTE Confidence: 0.856175541877747

cdd57e88-4539-4314-a5d8-912276c7a5f3
00:40:33.234 --> 00:40:38.005
the input of these four by one
MUX in order to build the

NOTE Confidence: 0.856175541877747

d7eddbc7-7d33-4c68-a118-d0468efa94ac
00:40:38.005 --> 00:40:39.473
Boolean function for S.

NOTE Confidence: 0.865616500377655

08b11ca2-f188-4d54-91de-7ad5729ca7a5
00:40:40.740 --> 00:40:48.447
The first one. So minterm one
must make S = 1. Minterm one is

NOTE Confidence: 0.821790516376495

55b2665e-2c95-4fec-8182-6f8552b9bba5
00:40:48.447 --> 00:40:55.163
001. So zero goes to the
inputs here, and 01 goes to

NOTE Confidence: 0.821790516376495

e5d3c852-a189-484e-994f-279fafa8ffc9
00:40:55.163 --> 00:40:57.728
switch inputs. 01 selects the

NOTE Confidence: 0.881361961364746

0913d72e-d69b-4f68-a8a7-a1cffff17e19
00:40:57.728 --> 00:41:04.148
I1. And I1 now is attached
to the S and S must be one.

NOTE Confidence: 0.766617119312286

0e9b198d-ed21-44dc-bec7-2a2e3ba66ee6
00:41:05.740 --> 00:41:11.275
Carry from the previous step is 0, so
if I put a not on top of that, it

NOTE Confidence: 0.766617119312286

bce2fc0d-bb4f-4458-980f-5b8cb9323940
00:41:11.275 --> 00:41:12.751
means that carry bar

NOTE Confidence: 0.816908299922943

b665566a-c68f-49c3-94fc-387c775a7098
00:41:13.370 --> 00:41:19.100
makes the S = 1. Carry is 0, not
makes it one. So I1 becomes

NOTE Confidence: 0.816908299922943

09d9fbd2-ed72-4735-bb26-5333d1e87374
00:41:19.100 --> 00:41:21.010
one and S is 1.

NOTE Confidence: 0.791036546230316

a51ff2c3-4b9a-43d5-b411-f7815d22f192
00:41:22.950 --> 00:41:27.650
Let's move on to the next
minterm. The second

NOTE Confidence: 0.791036546230316

90a5b994-5565-4dc6-9c91-0fbfb701cc5e
00:41:27.650 --> 00:41:33.760
minterm, minterm 2. Minterm 2 is
01000 goes to the input and 1

NOTE Confidence: 0.791036546230316

ca52ada4-7f73-4566-9870-2ff0a16116a9
00:41:33.760 --> 00:41:36.110
zero goes to switch inputs.

NOTE Confidence: 0.841295301914215

dd855a7b-a3e5-4c15-8fec-4ddd939acd43
00:41:36.860 --> 00:41:42.800
10 Selects I2 in the four by one
MUX I do now is attached to

NOTE Confidence: 0.841295301914215

87a80a48-c927-4ccc-a629-531cb7be42f1
00:41:42.800 --> 00:41:49.136
the S, S must be one for the
minterm. 2 So I 2 must be one.

NOTE Confidence: 0.818479597568512

20a6f7a1-2f68-4565-9424-43f3933d210a
00:41:49.770 --> 00:41:54.124
carry from previous step is 0, so I
applied and not on top of that

NOTE Confidence: 0.818479597568512

bd17ab15-d307-4a4f-a3cf-bc142e819bf8
00:41:54.124 --> 00:41:55.990
in order to make it 1.

NOTE Confidence: 0.905584037303925

239db951-0680-45ec-aeab-3a985c32b9e0
00:41:56.640 --> 00:41:58.188
Now S is 1.

NOTE Confidence: 0.894289374351501

f4c4de4c-b904-412b-a60e-5c1218819533
00:41:59.730 --> 00:42:01.710
The next min term is 4.

NOTE Confidence: 0.829606056213379

2f8cc856-c769-41f5-9fde-c6f52db48558
00:42:02.430 --> 00:42:08.604
Four is 1001 goes the input, 00
goes to the switch input, 00 in

NOTE Confidence: 0.829606056213379

8179b26a-0fe7-444a-99f4-e0a5334e411f
00:42:08.604 --> 00:42:15.219
the MUX selects I0 and now I
zero attached to the S as must

NOTE Confidence: 0.829606056213379

a4938a87-ff02-4592-8906-aaa9479d6896
00:42:15.219 --> 00:42:20.070
be one, because minterm four
makes S1 an now already carry

NOTE Confidence: 0.829606056213379

c148a1b3-fb7e-4de3-99d1-d4818f08564e
00:42:20.070 --> 00:42:24.480
from previous step is one. I
just simply input the carry

NOTE Confidence: 0.829606056213379

f9d61c22-f6e4-4352-8271-d9f2aababf53
00:42:24.480 --> 00:42:25.803
from previous step.

NOTE Confidence: 0.791952133178711

3e6939e9-91e1-4ebd-9c2b-ec79d4693a5a
00:42:27.280 --> 00:42:30.016
This is 1, so one goes to the

NOTE Confidence: 0.850028455257416

64e8ddd6-62bf-415f-be40-e59dbce6300c
00:42:30.016 --> 00:42:33.210
S And the last minterm is 7.

NOTE Confidence: 0.844478070735931

8a77e7d6-c519-4b4c-b5a8-704243d46209
00:42:34.310 --> 00:42:39.314
111 The the higher significantly
goes to the input. This goes to

NOTE Confidence: 0.844478070735931

9a6ac8da-6e68-4442-9616-f99865c20a70
00:42:39.314 --> 00:42:45.152
switch inputs. 11 Select I3 and
I3 is in now attached to S and

NOTE Confidence: 0.844478070735931

f11c1b9b-5794-4816-a80f-185e4a57ba8b
00:42:45.152 --> 00:42:51.824
M7 makes S1. So I3 Must
be one in order to make S one

NOTE Confidence: 0.844478070735931

c84eb051-10a0-4b29-ac73-6e99125b5ef5
00:42:51.824 --> 00:42:53.075
in the MUX.

NOTE Confidence: 0.802878141403198

a19d24cc-fde2-4a6e-84cd-526d2de89852
00:42:53.690 --> 00:42:56.890
We already knew that the
California previous step is 1,

NOTE Confidence: 0.802878141403198

6d716f43-355f-4511-8dff-8234fa6d51b4
00:42:56.890 --> 00:43:00.090
so we just attach carry from
previous step to the I3.

NOTE Confidence: 0.869631409645081

111bbe4d-04e6-4621-aeaf-d5c3684584bf
00:43:01.340 --> 00:43:05.710
So based on the value of
carry from previous step,

NOTE Confidence: 0.869631409645081

55822184-e4d0-40d1-b9fc-c88428c8b7f5
00:43:05.710 --> 00:43:10.517
either the normal form or the
compliment form, we can write

NOTE Confidence: 0.869631409645081

a6a731c9-f62a-4c00-8167-f4d59fdee8f0
00:43:10.517 --> 00:43:14.887
the Boolean function for S by
a smaller size multiplexer.

NOTE Confidence: 0.731208205223084

e119fc15-573f-4ec3-b717-50d6f2e23dbd
00:43:17.630 --> 00:43:23.142
The same is for the uh, for the
final carrying the full adder.

NOTE Confidence: 0.731208205223084

cea39f6d-a1f5-43d9-81e9-0881a416bdb8
00:43:23.142 --> 00:43:26.958
The final carry in the full
adder is minterm 3567.

NOTE Confidence: 0.726360440254211

c417465d-288e-40db-a891-ada0cd0dc08b
00:43:27.490 --> 00:43:32.818
And if you put its practice for
the each mintern, so minterm three

NOTE Confidence: 0.849460303783417

6cb0d228-2f95-453c-a7b9-3e5a62d4a3ef
00:43:32.818 --> 00:43:40.037
is. 011
So zero goes to the input, 11

NOTE Confidence: 0.849460303783417

2b8ab918-34af-461e-8f93-cccba4e210eb
00:43:40.037 --> 00:43:42.442
goes here, 11 Selects I3.

NOTE Confidence: 0.775957107543945

4f530ac8-08a1-4d08-b110-da389d5c1564
00:43:42.990 --> 00:43:48.476
Now I 3 attached to the
carry, so it must be one I3

NOTE Confidence: 0.775957107543945

68b66abe-31da-489b-ad59-89f0005905ab
00:43:48.476 --> 00:43:53.118
carry from previous step zero
followed by the not becomes one.

NOTE Confidence: 0.919893562793732

8dafaa5f-51b7-4369-8054-dc15a9dde424
00:43:54.300 --> 00:43:56.240
Why we have this?

NOTE Confidence: 0.798717796802521

d2d2cbcb-2880-4e44-a33d-d807a097599c
00:43:56.870 --> 00:44:01.864
terrm to the I3 Because another
min term between 7, minterm.

NOTE Confidence: 0.798717796802521

b2d15afe-513c-4724-8893-73b3fb09061c
00:44:01.864 --> 00:44:08.220
7 is 111 so one one in the
switch input selects I3 and this

NOTE Confidence: 0.798717796802521

68612ab6-2f18-407f-9cb0-d37ef3aa1ce6
00:44:08.220 --> 00:44:11.852
time the Carry from previous
step is 1.

NOTE Confidence: 0.757254004478455

01141aad-d6c8-42e1-b13f-e1200a8d551c
00:44:12.530 --> 00:44:17.532
So. carry from previous step is One in
minterm three carry bar

NOTE Confidence: 0.757254004478455

423b4c14-ba4d-43fe-995e-b17ed26b3c5d
00:44:17.532 --> 00:44:23.040
in minterm 7 Carry so either
this or this so this is the

NOTE Confidence: 0.757254004478455

f45f309c-f33d-4c92-85b0-b7baf72c12d5
00:44:23.040 --> 00:44:26.712
complement postulate anything
or with the complement format

NOTE Confidence: 0.757254004478455

beaf1ed0-686f-4e5b-807e-e7eae0bc9460
00:44:26.712 --> 00:44:31.302
itself makes it one. So I
three is always one.

NOTE Confidence: 0.807384192943573

76946a30-1566-4e3f-aec4-c283d22e43ba
00:44:33.830 --> 00:44:36.798
For the final carry
off the full adder.

NOTE Confidence: 0.876061797142029

dd11e512-5950-4852-8104-d70f4f94f0f7
00:44:38.020 --> 00:44:43.228
As you can see here in all these
minterms we never select I0

NOTE Confidence: 0.876061797142029

3225c79b-1c7a-4805-933e-46e0601f30fc
00:44:43.228 --> 00:44:48.064
because for the I0 you have
to put 00 in the X&Y.

NOTE Confidence: 0.824127495288849

e3e8bd4b-226c-4526-9d57-92c4fe075c41
00:44:48.600 --> 00:44:54.264
So either 100, either 000, so
none of minterms. None of these

NOTE Confidence: 0.824127495288849

3db8b6ee-f1a1-4cc4-9b1e-e67d0098ebe3
00:44:54.264 --> 00:44:57.568
minterms are in the in this sum

NOTE Confidence: 0.87148380279541

3af13e7e-5db1-4398-962f-88d02fadbd63
00:44:57.568 --> 00:45:04.020
of minterms. So we don't have
minterm zero. We don't have

NOTE Confidence: 0.87148380279541

87c31f10-0b5d-4098-8785-8167edb0238a
00:45:04.020 --> 00:45:10.429
minterm four, so I0 never
selected for this MUX, so it's

NOTE Confidence: 0.87148380279541

1d4aed4a-e80b-45dc-a7ec-3de6a7c48617
00:45:10.429 --> 00:45:16.345
always zero. You can check for
the other two inputs, so this

NOTE Confidence: 0.87148380279541

1bcadea3-ebe5-4c4f-9c66-63c33bfc9c38
00:45:16.345 --> 00:45:18.317
way you can read.

NOTE Confidence: 0.87931889295578

012fd0f9-1646-4f00-9acf-61e0ece5dfaa
00:45:18.330 --> 00:45:23.236
You can use the smaller size
MUX for any Boolean functions,

NOTE Confidence: 0.87931889295578

224e091b-bc5d-44ee-a73b-ddbe1c7da615
00:45:23.236 --> 00:45:25.466
so this is the approach.

NOTE Confidence: 0.838664710521698

65492f0a-c1ff-41c7-9d70-1122cd7a6b52
00:45:26.020 --> 00:45:29.694
Detach the highest significant
bits and put it in the input

NOTE Confidence: 0.838664710521698

e352d1af-7cb3-47c4-b578-d7ba68ab029d
00:45:29.694 --> 00:45:33.368
side of the MUX on all the
others. Lower significant bit

NOTE Confidence: 0.838664710521698

4196cb7f-caa6-4cf0-b475-c4badf784e1a
00:45:33.368 --> 00:45:38.044
goes to the switch inputs and
then you have to 1st you have to

NOTE Confidence: 0.838664710521698

bb021236-6fff-4a73-9b84-7434d62ce1a8
00:45:38.044 --> 00:45:42.386
step by step. Check the minterms
in order to see what value of

NOTE Confidence: 0.838664710521698

64137868-64d7-4ec2-8a31-ff220d7703c4
00:45:42.386 --> 00:45:46.060
the high significantly goes to
the input side of the MUX.

NOTE Confidence: 0.812331020832062

7402c23a-cee2-45be-8314-bd2e132c2eab
00:45:49.220 --> 00:45:54.856
Uh. And here is the final
design. So based on the XY and

NOTE Confidence: 0.812331020832062

1737af02-fdb2-4bc0-96c0-fd7eaed16b7e
00:45:54.856 --> 00:45:59.032
Carry from previous step, one
MUX for the S and one MUX for

NOTE Confidence: 0.812331020832062

f9a157e6-d01c-432a-905a-a3b2a994f0fc
00:45:59.032 --> 00:46:01.468
C and these matches are 4 by

NOTE Confidence: 0.848519086837769

3db38b5d-ebd5-44cc-a7df-fe53bafbdd6f
00:46:01.468 --> 00:46:03.700
1. Is love just having?

NOTE Confidence: 0.89651083946228

a4a60749-2ea9-45da-99e6-26d231add7fa
00:46:04.810 --> 00:46:08.606
2 to the Power 3 eight by one
you have 4 by 1.

NOTE Confidence: 0.782793521881104

41e132d6-5119-4461-be72-075255b12e25
00:46:12.320 --> 00:46:18.056
There is another way to as I
said, to design the multiplexers

NOTE Confidence: 0.782793521881104

3ad1bf1b-66b3-4691-9673-15895627deac
00:46:18.056 --> 00:46:22.358
with decoders. This is with
additional gate called Three

NOTE Confidence: 0.837533950805664

fe814727-90d5-4d3e-9a3e-94bc2d50bce1
00:46:22.358 --> 00:46:28.817
State gate. I leave it for you to
read about this in the book, so

NOTE Confidence: 0.837533950805664

216dc9b7-b0d2-40e4-a316-257d99327d96
00:46:28.817 --> 00:46:33.744
I leave some assignment for you.
I mean, this is part of this

NOTE Confidence: 0.837533950805664

67bd03f7-9ac1-4975-8cbd-c233cd22554c
00:46:33.744 --> 00:46:38.292
course, so please read the book
and explore what is the three

NOTE Confidence: 0.837533950805664

e2bc8689-4ea8-4ec9-bb9b-5cfd61d202fe
00:46:38.292 --> 00:46:42.840
state gate and how can we use
the three state gate plus

NOTE Confidence: 0.837533950805664

ec205793-fcef-4f7c-9c9f-bb81a10cca1d
00:46:42.840 --> 00:46:44.356
decoders to build multiplexers.

NOTE Confidence: 0.818086981773376

69b0565a-faca-4e77-8520-62e187813f21
00:46:46.570 --> 00:46:51.290
And the next topic is D-
multiplexer. So before I

NOTE Confidence: 0.818086981773376

0da11aab-0a87-4bd3-8689-782fc5c0e2bd
00:46:51.290 --> 00:46:55.538
start this topic, I'm happy
to take your questions.

NOTE Confidence: 0.853561222553253

1bebabb6-52fe-498b-8fe6-b6731e53eedd
00:46:57.070 --> 00:46:58.540
About multiplexers.

NOTE Confidence: 0.846479713916779

7ea3ca4e-40e7-403a-a5d7-37e5f0926068
00:47:00.430 --> 00:47:04.558
So multiplexers are for
selecting one input, attaching

NOTE Confidence: 0.846479713916779

617a5c5f-a6dc-4260-bc7d-f7d6011ee1a0
00:47:04.558 --> 00:47:09.718
it to one single output.
Basically the main logic unit

NOTE Confidence: 0.846479713916779

12778eab-d4e2-4e5c-b2df-2462946b0e28
00:47:09.718 --> 00:47:13.846
for select transferring
information from memory to the

NOTE Confidence: 0.846479713916779

dc8064b3-508c-4084-992b-9692d508514d
00:47:13.846 --> 00:47:19.522
CPU and But you can reuse it
for designing any Boolean

NOTE Confidence: 0.83395791053772

058ba41a-55c6-4573-932d-5ae4e599f959
00:47:19.522 --> 00:47:23.474
function. boolean function
with N input variables. Can

NOTE Confidence: 0.83395791053772

b8161828-0762-46bd-8578-a9a7ff62579b
00:47:23.474 --> 00:47:29.102
we redesigned by the MUX 2 to
the power of n by one also

NOTE Confidence: 0.83395791053772

d053474b-dc0a-4a65-9b5a-69df8df894e7
00:47:29.102 --> 00:47:32.720
based on the optimizer
in the book you can

NOTE Confidence: 0.83395791053772

ebf3ef08-c825-4df5-a321-f02dfa1e0a8b
00:47:32.720 --> 00:47:36.740
reuse is smaller size
multiplexer 2 to the power of

NOTE Confidence: 0.83395791053772

efe0925e-84b8-4d95-b933-2dbb7d681cd5
00:47:36.740 --> 00:47:42.368
N - 1 by 1 in order to write
a Boolean function for with

NOTE Confidence: 0.83395791053772

a168bc83-af67-42ca-9ec4-8446723c5a56
00:47:42.368 --> 00:47:43.574
n input variables.

NOTE Confidence: 0.934553325176239

d7730278-c311-459f-b66e-23858dd290a5
00:47:46.410 --> 00:47:49.020
No questions aa.

NOTE Confidence: 0.834041953086853

8ae6d022-6673-4b3d-b6cd-94dee13e7bfe
00:47:50.260 --> 00:47:54.372
So the next topic is
demultiplexer. We already

NOTE Confidence: 0.834041953086853

dbdaa9e6-bfeb-492a-93e0-ee442003df3b
00:47:54.372 --> 00:48:00.026
introduced decoder and then we
said that there is a reverse

NOTE Confidence: 0.834041953086853

1c4555f1-ea9b-40f7-aa92-294f4f5ce367
00:48:00.026 --> 00:48:05.166
logic called encoder for the
MUX. The same. We introduced

NOTE Confidence: 0.834041953086853

7905f82c-49c4-4540-a84b-937a7f3876b3
00:48:05.166 --> 00:48:09.792
multiplexers selecting one input
and attaching to the output.

NOTE Confidence: 0.834041953086853

bc7126cf-edae-433c-9c8e-b0d16ad53b02
00:48:09.792 --> 00:48:11.848
Demultiplexer is the reverse

NOTE Confidence: 0.83099240064621

010d8632-4ffd-4b83-8423-90bd8ae010fb
00:48:11.848 --> 00:48:18.067
logic. Attaching one single
input to one of the single

NOTE Confidence: 0.854548752307892

e520bff0-1797-41ba-9e7f-c19c00678f95
00:48:18.067 --> 00:48:23.940
outputs. And here is the logic.
So this is the MUX 4 by 1 for

NOTE Confidence: 0.854548752307892

f80723fc-1353-400e-8537-c808ce02fd72
00:48:23.940 --> 00:48:27.350
input based on the switch input
will select one of them.

NOTE Confidence: 0.855623364448547

901e07c6-e5aa-407e-beb3-7a16787dc865
00:48:27.960 --> 00:48:33.160
De-MUX is the reverse logic,
so based on the switch input we

NOTE Confidence: 0.855623364448547

059fec16-6156-4bd6-9035-a3e3d1a35860
00:48:33.160 --> 00:48:35.560
attach the single input only one

NOTE Confidence: 0.868206858634949

87914410-db5f-4904-a0a3-2d15dc03155e
00:48:35.560 --> 00:48:40.448
input. 2 one of the four output
1 by 4.

NOTE Confidence: 0.861472427845001

2a84ee54-ffd4-4a0b-8853-46c3f9e007a5
00:48:43.040 --> 00:48:47.682
And you already, if you master
how to design the multiplexer,

NOTE Confidence: 0.861472427845001

499b9ec4-c7d5-4c58-b3ac-fa04c1d74ccb
00:48:47.682 --> 00:48:52.746
De-MUX. So this is the truth

NOTE Confidence: 0.861472427845001

4ff0cb35-d60f-4157-b844-1d6e2c42a4ff
00:48:52.746 --> 00:48:56.544
table. If the S 0 and S1 is 00.

NOTE Confidence: 0.820774614810944

c53344f5-c0e3-4899-b828-bb2c6b044e5a
00:48:57.770 --> 00:49:01.130
F is going to be attached to the O0 to

NOTE Confidence: 0.923456311225891

951bb96e-0f4b-40c5-a8ec-4597be5607a9
00:49:01.130 --> 00:49:04.899
output 0. So whatever the value
of F is.

NOTE Confidence: 0.86119556427002

c15d19ae-8d25-4ada-957b-30584dfee367
00:49:05.740 --> 00:49:11.030
The value of output 0 is going to be
that so 0011.

NOTE Confidence: 0.888230383396149

4ece46b3-cea9-4451-acf9-8f23767b6dd7
00:49:12.620 --> 00:49:15.315
All the other outputs
is going to be 0.

NOTE Confidence: 0.898694276809692

d504cc3b-04b5-4579-8c97-e59deeacd81d
00:49:17.010 --> 00:49:19.887
If the switch goes to the second

NOTE Confidence: 0.862595558166504

b5a4e317-b69e-4856-9f74-2322a39dc545
00:49:19.887 --> 00:49:24.290
combination 01. Whatever value
of F is goes to the O one.

NOTE Confidence: 0.875321209430695

a438432c-0f04-4d86-8fe7-289ce37b546d
00:49:25.040 --> 00:49:27.576
And all the other
outputs is going to be 0.

NOTE Confidence: 0.869330286979675

57ace793-0e8b-4631-805c-bc32e693dd0f
00:49:30.130 --> 00:49:35.620
10 O2 And all
the other outputs is going to be 0.

NOTE Confidence: 0.883638978004456

d4f00747-6e99-497f-b95d-b051244f0ded
00:49:36.170 --> 00:49:40.948
And. The last combination 11
selects all three.

NOTE Confidence: 0.857243180274963

4390152e-156e-49eb-8ef0-9d0721b47a47
00:49:41.470 --> 00:49:44.500
So whatever, whatever the
value of F goes, the O

NOTE Confidence: 0.857243180274963

8a51ac75-d567-4be6-bcdf-1b1cc6aa8231
00:49:44.500 --> 00:49:47.227
three and all the other
outputs kind of be 0.

NOTE Confidence: 0.865513563156128

1cb33af2-3d79-4895-a953-7415fd17047d
00:49:48.670 --> 00:49:52.810
And here is the shorter format,
the truth table. So we can

NOTE Confidence: 0.587141931056976

aeed615e-6d28-4fb6-8cb5-71c3bc549b04
00:49:52.810 --> 00:49:55.645
simply just. Merge these two

NOTE Confidence: 0.856964588165283

0ce7c012-aa38-4746-8bf4-3e02a5abe08b
00:49:55.645 --> 00:50:02.161
rows. An say that whenever
S 0 and S1 is 11 O3 is

NOTE Confidence: 0.856964588165283

4e058188-5fb8-4e17-99f5-188ba225b0cf
00:50:02.161 --> 00:50:03.634
equal to F.

NOTE Confidence: 0.862736344337463

681575a4-1c17-4c72-b871-b6ad280bd590
00:50:05.120 --> 00:50:12.720
So 0000 is F and all the other
output 0 01 O one is F or

NOTE Confidence: 0.862736344337463

3fab5945-214f-4cf4-80a6-9844f1dee4ec
00:50:12.720 --> 00:50:18.420
the other output 0 and up until
here 11 O3 is going to be F.

NOTE Confidence: 0.86449259519577

2606691d-b0e1-429e-a444-3e07038c464e
00:50:19.170 --> 00:50:20.778
And all the other outputs is going to

NOTE Confidence: 0.84390926361084

eb1e9bc1-c3ee-42ac-bc36-521a54dce6cc
00:50:20.778 --> 00:50:27.264
be 0. And we have 4 output
variables of O0 O1 O2 O3 for each

NOTE Confidence: 0.84390926361084

f3250e49-2bf2-4afc-b169-cd1c5b6b0219
00:50:27.264 --> 00:50:32.388
one we have to write the Boolean
function based on the sum

NOTE Confidence: 0.84390926361084

1ef1e627-205c-4ae3-a96f-3e393efe9dfd
00:50:32.388 --> 00:50:37.512
minterms or product of Maxterms.
So we can simply see that for

NOTE Confidence: 0.812206566333771

a5db2223-ce59-491c-95f6-e4413f29e812
00:50:37.512 --> 00:50:41.886
O zero. Is O zero
is always equal to?

NOTE Confidence: 0.84009200334549

80f19bd2-7822-4a64-9f20-b322789de914
00:50:43.260 --> 00:50:50.443
S0 is going to be 0 bar S1.
Gonna be 0 bar so

NOTE Confidence: 0.84009200334549

b6c72017-0a89-421b-ab3c-95250c83a58e
00:50:50.443 --> 00:50:56.320
0 bar 1 010 bar 11 and 1
so depends only on F.

NOTE Confidence: 0.830358803272247

4bee38e0-d0fe-4da7-b6c0-47d36c807054
00:50:57.410 --> 00:50:59.450
The same for the other outputs.

NOTE Confidence: 0.817703068256378

9562ff2f-6f6d-4517-b896-6999c7001385
00:51:00.780 --> 00:51:06.120
And here is the De-MUX design,
so you see that the De-MUX

NOTE Confidence: 0.817703068256378

2b31fde9-a979-4be8-9abc-743610dc0342
00:51:06.120 --> 00:51:11.015
design is very similar to the
multiplexer. The only thing is

NOTE Confidence: 0.817703068256378

4539bb8a-7b47-45c7-8c44-ab118ee009bb
00:51:11.015 --> 00:51:13.240
that it doesn't have the.

NOTE Confidence: 0.848076641559601

862b0aa4-11ef-44cc-83d9-2c4c88e1333d
00:51:14.380 --> 00:51:17.418
Final or it only has the first

NOTE Confidence: 0.841590642929077

79c8f26e-0eb6-4a3b-8de3-99cd0400520e
00:51:17.418 --> 00:51:22.220
level ands. Based on this, which
inputs one of the ands activated

NOTE Confidence: 0.841590642929077

94ebfd4f-64f7-495f-b927-5a50c04140a9
00:51:22.220 --> 00:51:24.320
on all the other are always with zero.

NOTE Confidence: 0.849410831928253

c85f03ca-7ec8-42c2-8647-8b8402beaa28
00:51:24.890 --> 00:51:27.318
And the single inputs.

NOTE Confidence: 0.77307140827179

0e1ead0c-9156-4e69-b964-5b6ab5973868
00:51:28.150 --> 00:51:30.030
Goes to all the ands.

NOTE Confidence: 0.816681504249573

e85e0995-db73-420f-8fa5-431439c42001
00:51:31.090 --> 00:51:34.830
For the deal for the MUX,
we have four input goes

NOTE Confidence: 0.816681504249573

a34d6962-0345-438f-a104-49e895142358
00:51:34.830 --> 00:51:38.570
to the ands, one single
output. But here for the D

NOTE Confidence: 0.816681504249573

2d2cbf3d-791c-409b-ab73-c34fb51f6f24
00:51:38.570 --> 00:51:41.970
MUX we have one single
input attached to all ands.

NOTE Confidence: 0.913879811763763

6448cfac-fa1f-4723-90c0-c769cf9197b5
00:51:44.100 --> 00:51:46.165
And we don't have the final or.

NOTE Confidence: 0.821433305740356

dbc2b871-9c29-454d-89b6-4b130eae2493
00:51:46.900 --> 00:51:49.528
The output of the ands is going to be
the output of the MUX.

NOTE Confidence: 0.90077269077301

499b46f7-7114-49b8-afd0-2f9921dcf093
00:51:50.210 --> 00:51:53.269
This is very similar to
the decoder.

NOTE Confidence: 0.843719720840454

e15b63ae-4060-4713-8301-368aab65f297
00:51:56.800 --> 00:52:02.736
And in fact, if you go to the
market whenever you ask to buy

NOTE Confidence: 0.843719720840454

55b5a4ca-b1d3-4f61-a660-272e8d6eb901
00:52:02.736 --> 00:52:06.552
the demultiplexer, they will
sell you decoder with enable

NOTE Confidence: 0.843719720840454

cbed1ed8-7d5a-4866-915b-1534ba70fa48
00:52:06.552 --> 00:52:12.064
input and. If you say that no, I
want Demultiplexer and

NOTE Confidence: 0.843719720840454

bf82039c-c4ad-43c3-b777-c495a64d0567
00:52:12.064 --> 00:52:15.456
they would say that
demultiplexer is exactly the

NOTE Confidence: 0.843719720840454

4dd66e98-7cba-4f29-bec6-004649601d70
00:52:15.456 --> 00:52:21.392
same as decoder. So, and how
come I leave it for you to think

NOTE Confidence: 0.843719720840454

fc0e6647-31c7-42af-94f1-7b35cd83aac2
00:52:21.392 --> 00:52:26.056
about that? How a decoder with
enable input and this is

NOTE Confidence: 0.774567902088165

86c932fd-ab09-451b-ba58-7ce67e542771
00:52:26.056 --> 00:52:30.173
crucial. Decoder with enable
input, because without enabling

NOTE Confidence: 0.774567902088165

fdec2f78-0796-46ae-bd85-675163240200
00:52:30.173 --> 00:52:35.321
input is not equal. It decoders
with enable input is exactly the

NOTE Confidence: 0.774567902088165

bbff9228-2cf8-4e16-a980-5bb14de9a521
00:52:35.321 --> 00:52:37.037
same as the demultiplexers.

NOTE Confidence: 0.894591331481934

face6292-538c-4721-ac9b-3bb569df2cae
00:52:39.290 --> 00:52:45.257
So think about that how it is
possible. So just look at this

NOTE Confidence: 0.894591331481934

c9dc0567-4a86-4cec-b610-c0ce78165c9e
00:52:45.257 --> 00:52:48.929
design and compare this design
with the decoder.

NOTE Confidence: 0.701421320438385

7898c4fa-fb6f-48f6-9b8d-d5389e743582
00:52:49.600 --> 00:52:52.099
A decoder for.

NOTE Confidence: 0.897230386734009

09cacfd9-36ff-431e-95af-9fc5067737e8
00:52:52.850 --> 00:52:55.919
2 by 4.

NOTE Confidence: 0.836808919906616

78472bbc-e119-4110-8aa4-7024c9aa5788
00:52:57.740 --> 00:53:03.330
This is the decoder here through
by 4 outputs, so this is the

NOTE Confidence: 0.836808919906616

1f8e4b3d-6e99-4b0f-87a6-cd84976f9788
00:53:03.330 --> 00:53:08.490
decoder 2 by 4, but it has
enabled input, so if you.

NOTE Confidence: 0.768159508705139

4ac1ca2c-5fbe-4090-b0da-35f94ca85eb8
00:53:08.490 --> 00:53:13.540
Rotate. The logic Circuit of the
decoder with enable input. It

NOTE Confidence: 0.768159508705139

8fb9a473-b17c-4a46-8123-253d95b1d3dc
00:53:13.540 --> 00:53:16.025
becoms De-MUX. It's interesting,
think about that.

NOTE Confidence: 0.900314152240753

fa1af087-d3bf-4646-b5de-f4d642c31f0e
00:53:17.010 --> 00:53:22.496
And now we are going to move
on to the last category of

NOTE Confidence: 0.900314152240753

fe3f1d9b-d3a7-44e9-9f88-8b4ef978f97b
00:53:22.496 --> 00:53:25.872
the logic circuits or
combination logic, which

NOTE Confidence: 0.900314152240753

cc2d8595-8d27-4618-9c4e-0542b7f35a74
00:53:25.872 --> 00:53:27.138
is about coding.

NOTE Confidence: 0.917879939079285

dbd91cda-0392-4834-9a62-bf3a326c2b08
00:53:28.210 --> 00:53:30.260
So any questions so far?

NOTE Confidence: 0.908863842487335

565adb01-c81d-4b4e-b070-9db77ab1b19f
00:53:32.820 --> 00:53:36.615
This last category is in a
little bit different from the

NOTE Confidence: 0.908863842487335

a0cdd9a4-ea58-4403-94ce-1ce6b291e4c6
00:53:36.615 --> 00:53:40.065
previous two categories or
because I'm going to cover all

NOTE Confidence: 0.908863842487335

417f2a7f-0b0c-42a7-956c-fc7cdc4ed8b2
00:53:40.065 --> 00:53:41.790
the material in the first

NOTE Confidence: 0.94547700881958

b2839ec1-3b28-4a9d-b517-1f2338131ca4
00:53:41.790 --> 00:53:43.760
chapter. So.

NOTE Confidence: 0.886974513530731

15fc95d2-d525-4549-a46f-e359ee4f676b
00:53:46.180 --> 00:53:47.760
It's a completly fresh.

NOTE Confidence: 0.789090275764465

ef41d755-42df-440a-8990-4cf589649b97
00:53:48.530 --> 00:53:52.413
Uh, just to make sure that
everyone has attention to the

NOTE Confidence: 0.934141933917999

e1144866-6dd5-4003-a7b3-8541315ba1e7
00:53:52.413 --> 00:53:55.340
lecture and. Please send
me some feedback.

NOTE Confidence: 0.776852309703827

7db01e67-e2dc-4aba-b1ec-0fb7a464aadd
00:53:58.800 --> 00:54:06.040
Thank you .
Thank you. So it means

NOTE Confidence: 0.776852309703827

15d81987-7ca2-4fd6-93b1-456051534307
00:54:06.040 --> 00:54:09.660
OK, everyone has the attention.

NOTE Confidence: 0.951297163963318

28eb3c1e-d9ea-4c1c-a463-5f30c8adf84c
00:54:10.490 --> 00:54:12.500
Thank you everyone.

NOTE Confidence: 0.842377364635468

9f62feb6-3905-4c0e-9521-ca12d0fe8dcb
00:54:14.190 --> 00:54:17.826
Nice, so that's one thing. The
last category coders.

NOTE Confidence: 0.935684144496918

e04999e4-b498-4da8-ae9a-c5f90acd658c
00:54:18.760 --> 00:54:19.450
So.

NOTE Confidence: 0.853031575679779

619bbb8a-0ad3-4af2-8d42-9cadd8bd885d
00:54:21.080 --> 00:54:26.052
The concept of coding actually
is a well established in the

NOTE Confidence: 0.853031575679779

84375015-19de-4c01-ada2-9fac170d6510
00:54:26.052 --> 00:54:30.120
topic called cryptography. So
actually there is an optional

NOTE Confidence: 0.853031575679779

02ee75b2-0506-4497-b591-28f5b6be9f1b
00:54:30.120 --> 00:54:33.284
course in computer science
called cryptography which

NOTE Confidence: 0.853031575679779

85d9dfc9-644a-4bef-929a-b603523a8afc
00:54:33.284 --> 00:54:38.256
basically discuss all this thing
about decoding. But here we just

NOTE Confidence: 0.853031575679779

365b5dcd-c019-4e0a-8788-3c5522cef104
00:54:38.256 --> 00:54:40.968
wanted to simply touch on the

NOTE Confidence: 0.788771092891693

db4a6053-b45b-46df-8ae4-20f97dad6da1
00:54:40.968 --> 00:54:43.870
topic. Uh, the coding is

NOTE Confidence: 0.686120510101318

cd59abe5-552c-4209-a441-950f8bde23a4
00:54:43.870 --> 00:54:50.602
basically has. 1 first
step, encoding meaning that

NOTE Confidence: 0.838363647460938

ef7e021a-41b6-435e-8612-e4b16e99f6b3
00:54:50.602 --> 00:54:57.180
assigning Any symbol B to
any other symbol A so it's

NOTE Confidence: 0.838363647460938

a4b6ba68-956c-4fe6-a3a6-6b12c3d2480d
00:54:57.180 --> 00:55:01.491
a mapping. So from one
source domain to another

NOTE Confidence: 0.838363647460938

7c8f273f-92bf-479a-b372-4de408dd4565
00:55:01.491 --> 00:55:05.802
target domain we just
created mapping. So if you

NOTE Confidence: 0.838363647460938

a84d401d-983a-4a0b-ad4d-5e26016a8958
00:55:05.802 --> 00:55:11.071
go from the source domain
here pick an elements A and then

NOTE Confidence: 0.838363647460938

38ae97f4-ca30-4bbb-a766-9142e3f348eb
00:55:11.071 --> 00:55:14.903
assign is another another
element from the target

NOTE Confidence: 0.838363647460938

e466ed76-d9a8-46bb-9830-8f2761150888
00:55:14.903 --> 00:55:19.214
domain B. We call this
encoding so a encodes to B.

NOTE Confidence: 0.853373765945435

95cdb121-afb3-4c7d-ba79-46da669cb484
00:55:20.600 --> 00:55:25.955
If you go there to the reverse,
we if we are given the B from

NOTE Confidence: 0.853373765945435

37aba8c2-daa0-420a-b2ec-2d972065ed23
00:55:25.955 --> 00:55:30.239
the target domain and we are
asked what was the element from

NOTE Confidence: 0.853373765945435

f040f89c-b778-4be0-ad30-bbbeb4b2c220
00:55:30.239 --> 00:55:31.310
the source domain.

NOTE Confidence: 0.858656704425812

9a49284d-085a-4981-add2-5156fc6ee641
00:55:31.930 --> 00:55:35.890
In order to figure out the
reverse process is called

NOTE Confidence: 0.858656704425812

3f6354d8-0799-41c6-b368-afdd73eab1bc
00:55:35.890 --> 00:55:40.246
decoding, so this is the I
mean, two main step encoding

NOTE Confidence: 0.858656704425812

628fece5-baa9-42ba-9024-199779165670
00:55:40.246 --> 00:55:41.038
and decoding.

NOTE Confidence: 0.876321792602539

7f687c86-9e24-4952-9dff-78f1b9bc80e3
00:55:42.490 --> 00:55:46.612
So whatever this encoding and
decoding happens between this

NOTE Confidence: 0.824398636817932

6a3c2de1-4c7c-4184-93b4-7f359c863031
00:55:46.612 --> 00:55:50.990
source domain. For instance, an
element of the source domain A and

NOTE Confidence: 0.824398636817932

4ea56525-ed79-4260-82f4-e731fe354ec7
00:55:50.990 --> 00:55:52.586
element of the target domain B.

NOTE Confidence: 0.858927667140961

95e3c670-b140-4d3d-b4c2-112ae73b76f0
00:55:53.180 --> 00:55:56.500
This is going to be happen with the
Convention, so this mapping.

NOTE Confidence: 0.870200574398041

a95ce0b5-f9ff-4dd0-bfb4-d40b4640c565
00:55:57.390 --> 00:56:00.987
This convention might be a math
algorithm. For instance, all the

NOTE Confidence: 0.870200574398041

a55c7102-fa13-4e12-bd09-f47bb7f358f3
00:56:00.987 --> 00:56:03.930
conversion in the radix
numbering system were based on

NOTE Confidence: 0.870200574398041

b9162182-ebf7-4fcd-967f-20bb0fb17f49
00:56:03.930 --> 00:56:07.527
the algorithm. For instance, if
you are given a decimal number

NOTE Confidence: 0.870200574398041

27b5d76d-9583-4e09-996b-62ebbb910699
00:56:07.527 --> 00:56:11.778
and you're asked to convert it
to the base two, you use an

NOTE Confidence: 0.870200574398041

4e25532c-d20e-4991-aaaa-d374a023725f
00:56:11.778 --> 00:56:15.048
algorithm you divide by two
multiple times and put the

NOTE Confidence: 0.870200574398041

8cf77571-2645-4b5a-805f-6ae713bb1256
00:56:15.048 --> 00:56:17.991
remainder in the reverse order.
This is an algorithm.

NOTE Confidence: 0.854994297027588

9dd67d9a-f193-4d5b-a319-21cf7453cb87
00:56:19.030 --> 00:56:23.635
Or if you are given a number in
base 16 and you're asked to put

NOTE Confidence: 0.854994297027588

9f8aaf98-b3aa-4374-829d-94e8690527ba
00:56:23.635 --> 00:56:27.319
it in the base eight. So
basically you have to bring the

NOTE Confidence: 0.854994297027588

81d89e1a-a692-4d4f-88de-2b20de80b7e2
00:56:27.319 --> 00:56:31.310
base 16 to base 10 and then
base 10 to the base eight.

NOTE Confidence: 0.854994297027588

89fa53e2-7f73-4bdd-8114-e45e127b0bf6
00:56:31.310 --> 00:56:35.301
This is an algorithm, so this
mapping is based on the math or

NOTE Confidence: 0.854994297027588

654804d2-9b81-41a9-b4ae-887b25e27e45
00:56:35.301 --> 00:56:36.529
algorithm to do that.

NOTE Confidence: 0.867112100124359

36537dba-8049-42af-939e-fbb4a0fe491b
00:56:37.700 --> 00:56:41.000
Sometimes it's not based on
algorithm. There are no math

NOTE Confidence: 0.867112100124359

c878b866-0d06-48ea-bc16-802c76da497e
00:56:41.000 --> 00:56:45.290
involved in the mapping. This is
just based on a look up table.

NOTE Confidence: 0.867112100124359

8b01133e-e60d-4941-9c53-34c045c8e50b
00:56:45.290 --> 00:56:49.910
It says that whenever you see a
put P whenever you see C put

NOTE Confidence: 0.867112100124359

903b7596-8dec-4c7f-98b7-a4cbc04a0419
00:56:49.910 --> 00:56:52.550
D. So this is a look up table.

NOTE Confidence: 0.877159595489502

b94e9d7e-6d95-403b-b917-1b39087fd6c9
00:56:53.130 --> 00:56:58.920
We already saw such a thing in
base 64. The base 64 is one of

NOTE Confidence: 0.877159595489502

c088d2e4-2389-410b-90e0-97156792a2a4
00:56:58.920 --> 00:57:00.850
the bases, but the assignment

NOTE Confidence: 0.864994645118713

ece45d8c-c1f4-46de-a5a9-873d77384b78
00:57:00.850 --> 00:57:06.816
of. Each digits, each element of
the or each symbol of the base 64

NOTE Confidence: 0.864994645118713

787b7bfc-7deb-4d34-8a64-e68e74ff1b2f
00:57:06.816 --> 00:57:11.304
to its decimal value was based
on the look up table.

NOTE Confidence: 0.887435734272003

8b9dd8cc-9def-4c24-97bc-e7d67011ee70
00:57:11.820 --> 00:57:16.297
For instance, the forward slash
was the last elements with the

NOTE Confidence: 0.887435734272003

87878e9a-48d4-4596-af6f-f6e75e4f7723
00:57:16.297 --> 00:57:17.518
value of 63.

NOTE Confidence: 0.874638617038727

1e68ce17-af8c-4c4c-88b6-3b52a1add7ac
00:57:18.080 --> 00:57:21.860
So whenever you are asked to
figure out the value of each

NOTE Confidence: 0.874638617038727

952f63f5-94c3-4ab6-9faa-558b849620aa
00:57:21.860 --> 00:57:26.270
symbol in base 64, you have to
ask for the look up table. What

NOTE Confidence: 0.874638617038727

6903046b-e4a3-4037-85bb-5e315a0444df
00:57:26.270 --> 00:57:30.680
what is the look up table to map
between the value and the symbol

NOTE Confidence: 0.870803117752075

cee5c307-01ee-4adc-ba2e-093852cceb4a
00:57:30.680 --> 00:57:36.107
in base 64? Sometimes it is
based on the engineering in the

NOTE Confidence: 0.870803117752075

03db4d96-6b64-4a67-a0bd-a5c8bd6bce77
00:57:36.107 --> 00:57:40.823
practice will see today some of
them an other thing whatever the

NOTE Confidence: 0.870803117752075

a3db0a00-0f46-4f4a-beaf-3761841779c6
00:57:40.823 --> 00:57:44.753
mapping is, it must be a
convention that you always

NOTE Confidence: 0.870803117752075

370681a7-f785-4ee9-90fc-22252c69d4a4
00:57:44.753 --> 00:57:49.862
follow that in order to map any
symbol from the source domain to

NOTE Confidence: 0.870803117752075

77db98c1-c4f4-44d5-a698-af0e8d0259a0
00:57:49.862 --> 00:57:52.613
the any symbol to the target domain.

NOTE Confidence: 0.852220058441162

dba0b0fe-f8dd-44b1-9a55-9454db83b5ed
00:57:54.460 --> 00:57:58.662
Sometimes the mappings are not
two ways, meaning that there is

NOTE Confidence: 0.852220058441162

0f228174-e6b9-4301-a065-e83f10e2a018
00:57:58.662 --> 00:58:03.628
a way for encoding, but there is
no way for decoding. It's called

NOTE Confidence: 0.852220058441162

5c92c82a-ff00-48f1-8141-b1327fe3f54e
00:58:03.628 --> 00:58:04.774
one way coding.

NOTE Confidence: 0.8101567029953

9deb56a3-1eff-4f77-9bb1-e5c7080a6944
00:58:05.560 --> 00:58:09.088
You might probably heard about
the hashing codes.

NOTE Confidence: 0.849856615066528

4089ba1d-ae1a-4402-a8b4-2f6ecb30956f
00:58:09.590 --> 00:58:14.582
Hashing code is a way of one way
coding. For instance, you login

NOTE Confidence: 0.849856615066528

2d7aeec0-a545-43c4-93ee-4efe512a98fd
00:58:14.582 --> 00:58:18.806
into any online websites and you
create a password in those

NOTE Confidence: 0.856142818927765

dd754d89-de57-4872-ab06-d134ad313b97
00:58:18.806 --> 00:58:24.390
websites. You know the  your
own password, but all the

NOTE Confidence: 0.856142818927765

cb14014c-dd1b-495c-a55c-96f00aab3fa2
00:58:24.390 --> 00:58:28.910
website designers or developers
on the back. They shouldn't know

NOTE Confidence: 0.847282826900482

8ca2168b-6019-4094-837c-57862f356425
00:58:28.910 --> 00:58:32.802
your password. Uh, otherwise
they may compromise your

NOTE Confidence: 0.847282826900482

35b7bd32-efcd-4d76-8899-818ffaed5469
00:58:32.802 --> 00:58:35.778
password and user password for
some fraudulent activities.

NOTE Confidence: 0.739055037498474

9f023a51-fe11-46cd-bf3e-386b60e5d5f0
00:58:36.330 --> 00:58:43.830
So one thing happens is that
usually the websites all I mean.

NOTE Confidence: 0.866531610488892

147c298e-a1b4-4a17-83af-2c26b098c8be
00:58:43.830 --> 00:58:49.066
Websites actually they make a.
They assign a code to your

NOTE Confidence: 0.866531610488892

51493723-db1b-422e-9e30-188ac41c417e
00:58:49.066 --> 00:58:53.350
password, so basically they
this code called hash code. So

NOTE Confidence: 0.866531610488892

686d384a-da0b-4930-b345-55a365489d1f
00:58:53.350 --> 00:58:59.062
they encode your password to
be. But whenever I look at to,

NOTE Confidence: 0.866531610488892

0e6c00dc-e467-43e1-9ab2-4dd466cced80
00:58:59.062 --> 00:59:04.298
the B I cannot recover your
password. So one way. But there

NOTE Confidence: 0.866531610488892

684f2c3a-4e6d-4089-aa10-71da9637d1ac
00:59:04.298 --> 00:59:09.534
is no decoding. So all the
people that look at your

NOTE Confidence: 0.866531610488892

9377c159-5e11-4515-8ac4-988a70fa227b
00:59:09.534 --> 00:59:14.294
hashcode of your password they
do cannot recover your password.

NOTE Confidence: 0.839312195777893

6234ee46-06ed-4f65-888b-f4eccd2de918
00:59:14.340 --> 00:59:20.052
Ah, this is just an inch. I mean
just the concept one way, but

NOTE Confidence: 0.839312195777893

d6ae0ea1-56e8-41ee-811c-e1c2973de1e8
00:59:20.052 --> 00:59:24.948
today we're going to talk about
two way codings based on look

NOTE Confidence: 0.839312195777893

3f8d00fc-154c-478e-a88e-9d7db3bdaddc
00:59:24.948 --> 00:59:28.212
up tables so we have a look up

NOTE Confidence: 0.809971332550049

7563ecc0-6529-418e-9079-a0a6b0d1a5b3
00:59:28.212 --> 00:59:32.786
table and. Uh, for instance in
base 64, this is the look up

NOTE Confidence: 0.896147727966309

a49fee1d-cd75-46df-8768-cf4cf303d420
00:59:32.786 --> 00:59:37.416
table. So we say that what's the
value of A zero? What's the

NOTE Confidence: 0.881600677967072

3449e6cc-8ff9-4c14-a07e-0baad12d245b
00:59:37.416 --> 00:59:42.510
value of B 1? Or whenever you see
that, what's the symbol for the

NOTE Confidence: 0.881600677967072

eed40be2-832e-4d4d-a72e-ab76f3874901
00:59:42.510 --> 00:59:44.688
value of 18, it is S.

NOTE Confidence: 0.846400082111359

d7f7ac4b-b6cd-46b3-9fa2-5a5cc47b927e
00:59:45.500 --> 00:59:50.973
What's the value of 50? What
what's the value of digits 5 in

NOTE Confidence: 0.846400082111359

0199ebf4-a357-4708-851b-73a2752d443f
00:59:50.973 --> 00:59:53.078
base 64 it is 57.

NOTE Confidence: 0.857910573482513

34ba6184-2cad-41db-b5af-cc358d828f7a
00:59:53.990 --> 00:59:59.718
So this is as you can see, this
is a two way. Coding is on look

NOTE Confidence: 0.857910573482513

29f92d59-7d20-4ea4-a94b-759fc104c99b
00:59:59.718 --> 01:00:03.656
up table and there's no
algorithm for that. You can come

NOTE Confidence: 0.857910573482513

4c2e1eaa-b336-4580-9404-5f317c98c901
01:00:03.656 --> 01:00:07.952
up with an algorithm could say
that for the capital letters 0

NOTE Confidence: 0.857910573482513

575469f2-c0ec-42db-a595-473c3b029752
01:00:07.952 --> 01:00:10.100
up until here to five, but.

NOTE Confidence: 0.886914253234863

1c5aec1a-7e93-48f5-93b8-1052b145ef1e
01:00:10.810 --> 01:00:15.111
Actually there is no. This is
the standard for this decoding.

NOTE Confidence: 0.833690404891968

6f6212ff-7e71-42cd-98be-3a1a5820c3dd
01:00:16.290 --> 01:00:21.970
So today we're talking about
some specific area of coding,

NOTE Confidence: 0.833690404891968

2d15b6c6-c19a-4e2a-b704-c011d445e135
01:00:21.970 --> 01:00:26.514
which is about assigning binary
codes 2 symbols.

NOTE Confidence: 0.895864129066467

d5557ca6-5600-4ebf-b1dd-3ceb400f620e
01:00:27.340 --> 01:00:32.228
So basically you can see that we
just assign a binary number or

NOTE Confidence: 0.895864129066467

1061eaa4-bf8c-4d68-b9ca-c650bf4857e8
01:00:32.228 --> 01:00:34.484
binary code to a symbol or

NOTE Confidence: 0.746330976486206

7a009fca-1f5d-43a3-a5f5-47f3907d6775
01:00:34.484 --> 01:00:42.040
thing. Oh correct, the MD5
is a hashing code, so one

NOTE Confidence: 0.746330976486206

e3484a78-e5c5-4918-85c6-3adbf5ccea95
01:00:42.040 --> 01:00:48.610
way Nicholas, actually Nicholas
asked about the MD 5 is

NOTE Confidence: 0.746330976486206

baf1f26a-a33e-4677-906f-76ac2968caad
01:00:48.610 --> 01:00:55.837
one of the algorithms for hash.
So it's a one way.

NOTE Confidence: 0.671196520328522

82e821a4-9336-47f4-b349-8f09ff624dbb
01:00:55.860 --> 01:00:56.760
Coding.

NOTE Confidence: 0.90338259935379

6670664f-0491-4da1-8805-d093bd575e74
01:00:58.140 --> 01:01:02.532
And this is a code for checking
the accuracy of an information

NOTE Confidence: 0.90338259935379

d6c19b99-1e8f-41de-88d7-debbf34e5e77
01:01:02.532 --> 01:01:03.630
in transmission protocols.

NOTE Confidence: 0.252852588891983

449c0290-79f8-42e0-a454-799bfd255d94
01:01:04.910 --> 01:01:05.560
Uh.

NOTE Confidence: 0.736642479896545

b26e7727-881a-45a6-a8c5-b95ec9d2c6fb
01:01:06.850 --> 01:01:14.470
Yes, this is one way. Yeah,
and there are other, uh, one

NOTE Confidence: 0.837040066719055

e6fe941c-2492-4b64-bd11-a9ba82ab367f
01:01:14.470 --> 01:01:19.310
way codes. That you can just
search about that, but it's not

NOTE Confidence: 0.837040066719055

dd393cd1-6295-44bb-9555-983bdd152a58
01:01:19.310 --> 01:01:23.594
about that. Just just. I mean
just wanted to show you any

NOTE Confidence: 0.843132138252258

894fb75f-70d9-4eaf-b64e-3fbaf66b76a4
01:01:23.594 --> 01:01:27.990
hint. As I said, there's of
course and cryptography that in

NOTE Confidence: 0.843132138252258

25d44452-f887-4759-9a60-be8f79a3f9e2
01:01:27.990 --> 01:01:30.030
that course they talk about and

NOTE Confidence: 0.841984510421753

34e6ea14-68f4-466f-92e1-339bf80edbac
01:01:30.030 --> 01:01:34.190
in full. But just for your
information, MD5 is a

NOTE Confidence: 0.841984510421753

9dfd1e4e-e599-4c10-b4d3-87a024ef61a9
01:01:34.190 --> 01:01:36.334
one way coding as far as I know.

NOTE Confidence: 0.77556049823761

81b889a6-0af5-404f-a441-56c5924264e5
01:01:37.270 --> 01:01:45.210
Ah, so the first binary
code is called binary coded

NOTE Confidence: 0.77556049823761

9a5c69f5-82d5-4c59-a724-4d6f8e44de03
01:01:45.210 --> 01:01:47.592
decimal or BCD.

NOTE Confidence: 0.86366206407547

19dd78a4-78b6-46c3-942c-96d29b3acbf0
01:01:48.160 --> 01:01:54.592
This is another name for that
1248 so 1248 code or BCD

NOTE Confidence: 0.86366206407547

801e6b62-22f6-4c97-8f81-87cacdd8d84b
01:01:54.592 --> 01:02:00.488
code and let's see what it
does. Basically it assigns a

NOTE Confidence: 0.86366206407547

02c913c6-e476-41fc-8ed6-810cae3bdccf
01:02:00.488 --> 01:02:01.560
binary number.

NOTE Confidence: 0.734500408172607

b618dd5d-fb75-4d7e-88bb-f386e39f1d03
01:02:02.840 --> 01:02:05.148
To a decimal digits.

NOTE Confidence: 0.902753174304962

b7006376-6d83-477b-a50b-bad075434b62
01:02:06.300 --> 01:02:08.120
And here is the look up table.

NOTE Confidence: 0.85956484079361

cc2364ba-38a9-4082-9355-dbcd09f07a4c
01:02:08.800 --> 01:02:11.880
SO for 0 in the assigns, 4 bit code.

NOTE Confidence: 0.840314865112305

e59ebc3d-189d-4236-af35-0eb522d15c33
01:02:12.590 --> 01:02:19.858
00010 For the
digit one, it assigns 4 bit code

NOTE Confidence: 0.840314865112305

a4433d85-531f-45a0-974e-beb78a4c3d93
01:02:19.858 --> 01:02:22.810
000 one and up until 9.

NOTE Confidence: 0.869064152240753

6ec9a586-0a7f-49d1-9c0d-09a20a46b5d1
01:02:23.330 --> 01:02:29.170
1001 So you could say
that so this is the binary

NOTE Confidence: 0.869064152240753

b4dc731c-d43b-422c-be08-546093c3ebb1
01:02:29.170 --> 01:02:31.826
number? Uh, what's the
difference between binary code

NOTE Confidence: 0.861229002475739

80e785b6-39e3-43e0-9d48-a2598b1b2027
01:02:31.826 --> 01:02:37.533
and binary number? for digit from
zero to 9 binary number and

NOTE Confidence: 0.861229002475739

eb73e4f6-cd26-483f-b9aa-97cfba56128f
01:02:37.533 --> 01:02:42.103
binary code in the BCD code is
exactly the same.

NOTE Confidence: 0.889097630977631

24327c60-2207-44d5-9808-cf4a8d4b0af9
01:02:43.120 --> 01:02:49.024
OK, however, if you go further,
for instance 10, Eleven, 12 up

NOTE Confidence: 0.889097630977631

3906175e-8a2c-4e34-bdc0-04e0ac7988d7
01:02:49.024 --> 01:02:51.976
until I mean greater numbers in

NOTE Confidence: 0.880455851554871

c1bb60d0-cdaf-4e3c-a4c8-2cc3208890d4
01:02:51.976 --> 01:02:57.147
decimal system. The binary code
going is going to be different

NOTE Confidence: 0.880455851554871

3d2236ae-5ef6-4356-b6fd-50fdc4913599
01:02:57.147 --> 01:02:58.679
from the binary number.

NOTE Confidence: 0.860853612422943

5b582ec6-18b7-4a0b-bbd3-a1439e5c9cc9
01:02:59.180 --> 01:03:00.578
What is this for the 10?

NOTE Confidence: 0.894047975540161

23b482a4-2409-4cf0-a052-b3b8a884b25c
01:03:01.530 --> 01:03:06.822
It in the binary code or BCD
you have to put the code for

NOTE Confidence: 0.894047975540161

7898f22b-fe61-40eb-8fcb-f2d8ac4d244f
01:03:06.822 --> 01:03:10.980
one. So what's the code for
one 4 bit code 0001?

NOTE Confidence: 0.861755907535553

49953955-f13a-4a83-bb59-7e1df788483b
01:03:13.410 --> 01:03:20.358
Uh, what's the code 404 bit
code four zero 0000, This is the BCD

NOTE Confidence: 0.861755907535553

e49e4ecc-ef6a-40f9-9e25-04e09ba1d57d
01:03:20.358 --> 01:03:25.569
code for that. However, the
binary number for 10 is this.

NOTE Confidence: 0.844045102596283

3214b072-36cf-4b85-9126-6685dc6f8744
01:03:27.980 --> 01:03:33.320
So although from 0 to 9 BCD is
exactly to the the same as the

NOTE Confidence: 0.844045102596283

a64298a9-018a-450b-a49c-2e05f6cc7d5d
01:03:33.320 --> 01:03:37.325
binary number, however, for
the 10,11 and greater than

NOTE Confidence: 0.844045102596283

1f02b4c9-2e7b-4066-9dc3-07cddb65c2d5
01:03:37.325 --> 01:03:39.550
nine, these two are different.

NOTE Confidence: 0.91035258769989

07ee5e5a-c290-4c1e-8c6d-8cc8837dcc70
01:03:40.620 --> 01:03:45.105
So basically for the BCD you
have two for each digit in the

NOTE Confidence: 0.91035258769989

100bf812-ee6c-401d-a94c-2c5b1eca71f4
01:03:45.105 --> 01:03:49.245
decimal system you have to put
the four bit code for that.

NOTE Confidence: 0.865195035934448

177b6e58-b817-4f26-b8b1-7eca26409d46
01:03:51.210 --> 01:03:56.978
And the BCD code is called 1248
and the reason is from zero to

NOTE Confidence: 0.865195035934448

d088b650-60d6-488e-9fef-f133a1d8e273
01:03:56.978 --> 01:04:02.334
9. It acts like the binary
number. So the first bit has the

NOTE Confidence: 0.865195035934448

c5e7a8d8-04c0-4221-97a6-c9e7351efb94
01:04:02.334 --> 01:04:05.630
value of 2 to the power of 0.

NOTE Confidence: 0.875404298305511

e593561c-aefc-4ae7-a2be-8de521edb1fd
01:04:06.230 --> 01:04:11.300
So one the second bit is going to have
the value of 2 to the power

NOTE Confidence: 0.929842531681061

d6f970b2-010c-4cca-8280-34023ea6e158
01:04:11.300 --> 01:04:13.550
of 1. 1.

NOTE Confidence: 0.84969824552536

9df10eb1-a4a4-49d8-8ba6-b9b531ca73b2
01:04:14.090 --> 01:04:19.634
Uh, which is the the two value
of two. The third bit has the

NOTE Confidence: 0.84969824552536

bef9dd8f-b0a2-4f50-83af-1296ce610a77
01:04:19.634 --> 01:04:25.574
power of 2 to the power of 2
meaning that four and the 3rd and

NOTE Confidence: 0.84969824552536

8665652e-7390-4c6e-9483-9e0dadd1b3b6
01:04:25.574 --> 01:04:28.346
the 4th bit from zero to four,0 to 3.

NOTE Confidence: 0.875170707702637

d2633f50-6d2c-4539-8a9d-c6669f58756d
01:04:29.440 --> 01:04:34.090
The fourth bit has a value of 2
to the power of three, which is

NOTE Confidence: 0.875170707702637

d039dc58-02cc-41f3-a3b9-f44a9e44d4c4
01:04:34.090 --> 01:04:36.260
8. So from digits zero to 9.

NOTE Confidence: 0.848134219646454

239aa899-39bf-40ba-a061-06e2e3b55ba3
01:04:37.420 --> 01:04:41.470
It has a the value
1248.

NOTE Confidence: 0.85256427526474

f4889890-7047-4e25-8385-c0da07f54a73
01:04:42.650 --> 01:04:47.540
That's why the the BCD is also
called 1248 code.

NOTE Confidence: 0.892435491085052

0e6b6e72-6469-43f1-bcc7-693dee00d445
01:04:50.720 --> 01:04:57.342
One more example is here for 20
you have to put the code for

NOTE Confidence: 0.892435491085052

b484beb7-6795-491d-a7cd-401650bdfa23
01:04:57.342 --> 01:05:03.018
20010 and the code for 0, and what
the binary # for 20 is this.

NOTE Confidence: 0.90265280008316

b8e27da8-f270-4575-92e2-e181687257e5
01:05:07.690 --> 01:05:13.157
So this is another example,
imagine you are given 185 in

NOTE Confidence: 0.780641257762909

6f153488-0b85-4a85-af55-178267724f87
01:05:13.157 --> 01:05:19.063
decimal system. And you're asked
to code or encode it to the BCD.

NOTE Confidence: 0.827049672603607

f686468b-7418-4263-90f1-1855bb0f1366
01:05:19.760 --> 01:05:22.007
Also, you can encode it to the

NOTE Confidence: 0.858248591423035

25e3a5fe-4c16-4a5b-9c37-59ca1ed2c5d7
01:05:22.007 --> 01:05:29.454
binary system. So for the BCD
coding you have to put the four

NOTE Confidence: 0.858248591423035

524be415-6e05-4e21-8317-90b17bc5f917
01:05:29.454 --> 01:05:36.786
bit code for each digit for the
10001 and then 81000 and then

NOTE Confidence: 0.857535243034363

749c1403-9fd0-409c-9801-ce5a0365887d
01:05:36.786 --> 01:05:42.590
five. 0101
However, for the encoding

NOTE Confidence: 0.857535243034363

ced16757-3f2a-4504-991f-2e6a115688d0
01:05:42.590 --> 01:05:44.120
to binary number.

NOTE Confidence: 0.863122820854187

960a7891-9652-4c86-86fa-05106d051688
01:05:45.550 --> 01:05:49.414
You have to be. This is the
algorithm already in the first

NOTE Confidence: 0.863122820854187

f0e6375b-32dd-479c-8f64-b286ae9b4617
01:05:49.414 --> 01:05:52.956
chapter. You have too much. I
mean, repeatedly divide by two.

NOTE Confidence: 0.835865318775177

6d84bb99-b985-4605-8011-b510e853243e
01:05:53.680 --> 01:05:56.930
And then qoutient divided by
two quotient divide by two

NOTE Confidence: 0.835865318775177

1e28ffea-11a8-4034-953b-ed902fdf1257
01:05:56.930 --> 01:06:00.180
and etc and put the remainder
in the reverse order.

NOTE Confidence: 0.835779428482056

b58435c8-6ad7-42cf-bc73-5c797126ceab
01:06:01.560 --> 01:06:06.968
And you can see that this number
in decimal system is encoding to

NOTE Confidence: 0.835779428482056

6a2a823b-828d-44c7-952d-0cdcf0c859a4
01:06:06.968 --> 01:06:10.712
BCD by this and the binary
system by this.

NOTE Confidence: 0.890092015266418

88728168-bcb2-4f04-9a7e-955c20def702
01:06:12.680 --> 01:06:16.340
This is an example to show
you that BCD is not

NOTE Confidence: 0.890092015266418

8fcc845e-00e0-45b3-8c53-e8aad99e9d93
01:06:16.340 --> 01:06:19.085
exactly the same as the
binary number by system.

NOTE Confidence: 0.892615437507629

cc4a7170-f394-416b-a08b-da0aa94c1e5e
01:06:20.430 --> 01:06:25.350
So there are other binary codes
as well. For instance, this is

NOTE Confidence: 0.892615437507629

fa3b9112-7ba0-471f-a7d9-ed4117030480
01:06:25.350 --> 01:06:29.040
the table that includes a three
other binary codes.

NOTE Confidence: 0.772750794887543

e3c4877f-33ab-4735-a222-5343794647cc
01:06:29.730 --> 01:06:34.026
1242 this code also again will
is going to explain it.

NOTE Confidence: 0.856394112110138

3783466d-ccb0-46e8-854a-856cad397263
01:06:34.540 --> 01:06:40.066
Accessed three and minus 1 minus
2 four 8.

NOTE Confidence: 0.798770308494568

cda027a7-ebe4-459b-aa96-787f75ca4d55
01:06:41.120 --> 01:06:43.185
So let's see what are
these codings?

NOTE Confidence: 0.801835000514984

3ffb9a07-3f84-4802-90a9-d9631d49036c
01:06:45.410 --> 01:06:50.534
This is called Aiken code,
where the four bit code has

NOTE Confidence: 0.848215818405151

aee7ea40-46e4-439c-917f-06ed3dbd0374
01:06:50.534 --> 01:06:55.013
these . The first bit
is going to have the value of 1,

NOTE Confidence: 0.848215818405151

a2f83254-9d28-4049-929f-4d42a4521a9c
01:06:55.013 --> 01:06:59.451
the second bit 2, the third
bit 4 so far, the same as the

NOTE Confidence: 0.848215818405151

caaeeee5-5b3a-47c9-8a52-871cb690e0a0
01:06:59.451 --> 01:07:03.255
BCD, but the last bit instead
of having the value of eight,

NOTE Confidence: 0.848215818405151

4f50caee-be2e-4791-a6ea-6e1127b7788c
01:07:03.255 --> 01:07:05.157
it has the value of two.

NOTE Confidence: 0.857751250267029

ffa3c7d3-0e45-4419-9118-c3002599e2ac
01:07:06.580 --> 01:07:11.611
So this is called aiken code
and we'll see why changing the

NOTE Confidence: 0.857751250267029

34b85d99-daad-41ad-8ec1-82dd4e4c1fdb
01:07:11.611 --> 01:07:17.803
value of the last bit from eight
to two has a nice. I mean why we

NOTE Confidence: 0.857751250267029

f33756f7-d1c9-481e-86ef-5b44fa1a815a
01:07:17.803 --> 01:07:22.447
do that? Why aiken do that?
This code actually proposed by

NOTE Confidence: 0.857751250267029

f8a0c8b3-9a08-456d-bd4f-a8f521a8036a
01:07:22.447 --> 01:07:25.156
the Howard Aiken in I believe in

NOTE Confidence: 0.896689116954803

685c2bb5-ed89-49d2-bc95-aa13574b0322
01:07:25.156 --> 01:07:30.730
1970. And this code is still
using in the. I mean handheld

NOTE Confidence: 0.896689116954803

3c02758c-cf29-46c5-8c68-d076e89e959d
01:07:30.730 --> 01:07:34.830
calculators. So the nice
property is that when you change

NOTE Confidence: 0.896689116954803

907aef6c-bbda-4980-a9ee-f8c2163bc5ba
01:07:34.830 --> 01:07:40.160
the highest value from eight or
two to the power of three to

NOTE Confidence: 0.90351390838623

a2a06e91-8db3-4746-859e-c9c00cc000f2
01:07:40.160 --> 01:07:47.068
two. It happens like this from
zero to four. Exactly the binary

NOTE Confidence: 0.90351390838623

2892e64b-8e5e-4f25-96c9-57cf5576d6bc
01:07:47.068 --> 01:07:54.460
number, so zero is 000, one is
0012, is 0010 and etc up until

NOTE Confidence: 0.89701920747757

7ca47467-1e8f-4fe6-90fa-a5ea2cf51fbc
01:07:54.460 --> 01:07:57.598
4. Will you move to the five?

NOTE Confidence: 0.84845757484436

592bf6e5-d48d-4f74-be63-c9edc5c8691b
01:07:58.100 --> 01:08:00.290
Five is the not of four.

NOTE Confidence: 0.824358224868774

d3d3bef8-0344-4435-9a02-9ee22326e265
01:08:01.340 --> 01:08:08.724
So if you apply not operator
on each bit of the four, so

NOTE Confidence: 0.824358224868774

150d84c7-8063-41e6-b9d3-c2273211f984
01:08:08.724 --> 01:08:14.404
this zero becomes 1 1 becomes
0 0. This one, sorry, zero

NOTE Confidence: 0.824358224868774

26ef9ef9-59cb-4cdc-bd38-c17adf7ee7d1
01:08:14.404 --> 01:08:16.676
becomes 1 0 becomes one.

NOTE Confidence: 0.885763883590698

ec3f6038-a28f-48ca-a424-6015c1d1a756
01:08:18.120 --> 01:08:22.670
And then if you go to the six,
six is the not of three.

NOTE Confidence: 0.852672934532166

3eec98bb-c655-41d8-afd1-accb165339d1
01:08:23.240 --> 01:08:28.063
Seven is the not off two, so you
don't have to memorize the

NOTE Confidence: 0.852672934532166

f1a5b723-c99d-4b48-a5a4-0bb2b56f8914
01:08:28.063 --> 01:08:32.515
aiken code. You have to just
simply say that from zero to

NOTE Confidence: 0.852672934532166

d03ab2c3-a2fb-48bb-b9c1-0164c62ada58
01:08:32.515 --> 01:08:33.999
four, exactly binary number.

NOTE Confidence: 0.823613226413727

e0c12fcc-4211-48e0-8ff3-552adc3e0845
01:08:35.010 --> 01:08:40.652
From the five to the nine, is
the not off its complements. so 4

NOTE Confidence: 0.823613226413727

22e77e28-c9ab-4d8d-906e-326f1695e3e4
01:08:40.652 --> 01:08:43.256
The nines complement of four is

NOTE Confidence: 0.86513751745224

bd9ed717-ebc8-43b1-a4c3-7724e80dfc5f
01:08:43.256 --> 01:08:48.783
fine. So you can simply for the
five, you could say that what is

NOTE Confidence: 0.86513751745224

3358e3a8-0207-4363-aaa9-80043ae95022
01:08:48.783 --> 01:08:53.697
the 9 complements of five is 4,
so whatever the code for for the

NOTE Confidence: 0.86513751745224

65b2c5cb-2342-4dfc-926b-d623a09ead8d
01:08:53.697 --> 01:08:55.803
four is, we just simply applied

NOTE Confidence: 0.841084659099579

0e7b5f1e-ef2b-4ba9-a16c-7810f51bfce8
01:08:55.803 --> 01:09:00.670
a not. Another example, for
instance 8. So if you want to

NOTE Confidence: 0.841084659099579

33eba298-eb32-4eff-8dc6-2bfc6d737794
01:09:00.670 --> 01:09:04.666
see what's the code for eight
in Aiken. So you could say

NOTE Confidence: 0.841084659099579

980d4a0e-6973-46ff-8535-a52fa2fd0dce
01:09:04.666 --> 01:09:07.663
that what's in nine
compliments of eight, the nine

NOTE Confidence: 0.841084659099579

43c02add-bea4-46ed-92da-16f1d885466a
01:09:07.663 --> 01:09:09.328
complement of eight is 1.

NOTE Confidence: 0.90613853931427

5ea028f9-d9d1-4c5e-8da6-6673bf924001
01:09:12.560 --> 01:09:19.892
So the code for one is
000 1, so I applied not

NOTE Confidence: 0.90613853931427

0cf9989e-ce12-41e3-aeb8-26ba094db3ea
01:09:19.892 --> 01:09:23.558
on top of that becomes 1110 1110.

NOTE Confidence: 0.840472400188446

07c158f5-6a1b-4eb6-931b-9a144c452626
01:09:24.320 --> 01:09:26.021
This is a nice property of the

NOTE Confidence: 0.851720213890076

b110981c-478c-4402-97fd-13780afa0f7b
01:09:26.021 --> 01:09:30.491
Aiken code. It's kind of a
relationship between nines

NOTE Confidence: 0.851720213890076

6db7f6d2-a5f8-421e-b6b4-c7d6e0f33661
01:09:30.491 --> 01:09:34.821
complement in decimal system and
1's compliment or not operator

NOTE Confidence: 0.851720213890076

7fd0317f-2711-4b8a-bc30-507129131222
01:09:34.821 --> 01:09:36.120
in binary system.

NOTE Confidence: 0.869632124900818

10e97c62-eac2-4a19-a736-a08238b002aa
01:09:37.970 --> 01:09:45.020
Again, as you can see here 5 not
of the four 6 not of three.

NOTE Confidence: 0.742688179016113

eb3b4a90-ff32-439a-b347-284d01c6b8f3
01:09:46.960 --> 01:09:49.795
7 Not off give 2 And atc.

NOTE Confidence: 0.869405567646027

cfeb599f-9001-45e2-b8d6-8d88f12b11b5
01:09:51.520 --> 01:09:56.956
So again, if you're asked to
give the 185 in decimal system

NOTE Confidence: 0.869405567646027

9a15794a-a73f-46c8-aa50-640c209255a9
01:09:56.956 --> 01:09:59.674
an encoding to the aiken code.

NOTE Confidence: 0.873421251773834

2489d08a-5072-45ae-8375-668dd0b8329b
01:10:00.740 --> 01:10:05.030
Which is a weighted code 124.
The last bit has the value of

NOTE Confidence: 0.919424414634705

eb0fd2ad-4d1a-47f2-8ae3-50229cb8c0da
01:10:05.030 --> 01:10:06.879
two. For the first.

NOTE Confidence: 0.766111075878143

807fa70a-9666-43f3-8e5b-f4bdc255c211
01:10:07.520 --> 01:10:10.930
bit you put the code I can
code for this one.

NOTE Confidence: 0.839548766613007

7b13b81b-5506-4bb2-ba97-c0ef7bc5ad08
01:10:11.560 --> 01:10:16.096
For the 2nd digit, you put
the aiken code for 8, but the

NOTE Confidence: 0.839548766613007

f90107a9-2a6b-4f80-b9f0-872090e9743e
01:10:16.096 --> 01:10:20.632
aiken code for 8 is the 9
complements of eight is 1, so

NOTE Confidence: 0.839548766613007

93f6bb4b-c8b7-4e97-b313-55148e19feff
01:10:20.632 --> 01:10:22.522
not on the 9's compliment.

NOTE Confidence: 0.839285373687744

1d729abd-06ad-4957-8478-76b5ca14a10a
01:10:23.540 --> 01:10:28.180
For the five not on the nine
complements of five.

NOTE Confidence: 0.876591980457306

69b4d99b-84d1-4bde-b6f0-9c46352ac26f
01:10:30.170 --> 01:10:34.916
and This is the code for
one. This is the code for

NOTE Confidence: 0.876591980457306

e4202bb2-b990-4538-8b71-d9e0c993cee2
01:10:34.916 --> 01:10:38.894
four in the aiken and then
put the nots on top of that.

NOTE Confidence: 0.876591980457306

9500108c-027d-4409-8b99-92326fe2f65f
01:10:38.894 --> 01:10:42.260
And this is the aiken code
for 185 in decimal system.

NOTE Confidence: 0.794274747371674

12de3ce3-0e88-45ad-8651-e541c2a94647
01:10:44.560 --> 01:10:50.616
Any questions? So the
next code is the

NOTE Confidence: 0.794274747371674

a71ed3ed-b344-4e72-ae19-3a90165a4c2b
01:10:50.616 --> 01:10:55.122
excess 3 code
excess 3. as the name

NOTE Confidence: 0.794274747371674

ab580050-dd03-44d4-91de-d10082e08efe
01:10:55.122 --> 01:11:01.881
says this is proposed
by stibitz it's I think

NOTE Confidence: 0.794274747371674

5851be4f-2044-477d-9b92-924517d30ad6
01:11:01.881 --> 01:11:04.134
it's in 19.

NOTE Confidence: 0.898037791252136

5bd7c1a1-f9ec-4c06-8a9b-d2072d933ee6
01:11:05.430 --> 01:11:10.050
I don't remember you can go to
the Wikipedia. I think it's

NOTE Confidence: 0.850507795810699

8d0f2fd5-3ae9-4cf1-b804-6e66ef9f2b62
01:11:10.050 --> 01:11:13.044
about 1930. or 40 he proposed

NOTE Confidence: 0.849031746387482

e20e60ec-1fa0-4f77-b4b3-c4f4a175a700
01:11:13.044 --> 01:11:18.220
this coding. Uh, basically the
coding for each decimal digit

NOTE Confidence: 0.908277809619904

e1edcf40-4faa-47a2-b7f5-591ac044525d
01:11:18.220 --> 01:11:22.556
is. You have to just apply plus
three and then put the binary

NOTE Confidence: 0.892697095870972

5dfcde3e-7d7a-4517-9b06-e3597fc0cdbd
01:11:22.556 --> 01:11:29.294
code for that. So for the the
code for 0 is 0 + 3 is 3, so the

NOTE Confidence: 0.892697095870972

a78bbb03-c4d3-49c2-8c7d-830ca1e890a6
01:11:29.294 --> 01:11:30.818
binary code for three.

NOTE Confidence: 0.813931941986084

cc9f5d74-2eff-42ea-932a-dab76775c020
01:11:31.770 --> 01:11:34.010
That's why they call it
excess three.

NOTE Confidence: 0.890544354915619

6d99798b-c99a-4477-94b8-24d71c86c093
01:11:35.050 --> 01:11:39.310
The code for one is 1 + 3 four
binary number for 4.

NOTE Confidence: 0.884613513946533

5b2a6b10-bcae-4125-849a-5f8517dd366a
01:11:41.310 --> 01:11:46.835
For instance, for the Nine, 9 +
3 becomes 11, the binary # for 11.

NOTE Confidence: 0.892181932926178

f4d73b84-3071-4be3-b453-51b588d2f0c4
01:11:48.630 --> 01:11:51.715
So basically, the excess three

NOTE Confidence: 0.877795934677124

794f4d36-24a1-4b79-a929-75302af8a8ca
01:11:51.715 --> 01:11:58.488
is the. The number the decimal
number +3 and then you apply the

NOTE Confidence: 0.877795934677124

847fe393-7aca-4a76-aae1-c269d1b323f5
01:11:58.488 --> 01:12:00.200
binary number for that.

NOTE Confidence: 0.882323622703552

abc00071-18d1-4614-b6e6-bc98e3d2dbfa
01:12:02.030 --> 01:12:06.705
So for instance, for the 185,
our previous example for the

NOTE Confidence: 0.882323622703552

d992cad3-f7ab-4ddd-b549-f74fede84cc0
01:12:06.705 --> 01:12:12.230
one you have to just add three
to each digit, so one plus

NOTE Confidence: 0.882323622703552

9aa745ea-2141-441c-9632-a1cdfc27b645
01:12:12.230 --> 01:12:18.605
three, 8 + 3 and 5 + 3, and
then you just put the binary

NOTE Confidence: 0.882323622703552

22f5a35e-be3b-4889-958e-479d1d85b784
01:12:18.605 --> 01:12:20.305
number for each digit.

NOTE Confidence: 0.883148312568665

516fc1c3-e053-4f40-be06-f2338db3cbf4
01:12:21.940 --> 01:12:27.960
The first is the four, the 2nd
11, the third 8th, and then the

NOTE Confidence: 0.883148312568665

3a38da98-07c3-45ab-b0e9-05912a34da5c
01:12:27.960 --> 01:12:30.540
binary number for that. So for

NOTE Confidence: 0.874233841896057

8948ed90-8799-44af-87a4-72f5defe5970
01:12:30.540 --> 01:12:37.871
is 0100. 11 is 1011
an 8 is 1000 binary number

NOTE Confidence: 0.874233841896057

83e55201-71ad-459e-bf3c-178a96c34e54
01:12:37.871 --> 01:12:42.344
for each digit. After
adding with three.

NOTE Confidence: 0.889411270618439

4113e511-148f-4e3e-bd27-aea64a5cc610
01:12:44.130 --> 01:12:47.898
So there's another code.

NOTE Confidence: 0.863422393798828

1857f693-5557-42a4-b1c8-7984a8b2d52d
01:12:47.900 --> 01:12:52.865
This -1,- 2 4 8 meaning that
the first bit has the value of

NOTE Confidence: 0.863422393798828

7090bad3-15f7-4972-91a8-021437c80cab
01:12:52.865 --> 01:12:56.837
minus one. The third bit, the
second bit has the value of

NOTE Confidence: 0.863422393798828

06ddbc55-125f-4aae-aee5-06636f0c9d9b
01:12:56.837 --> 01:13:00.478
minus two. This is the coding
that has negative value. You

NOTE Confidence: 0.863422393798828

12a9bba2-a1d0-439a-ab50-b613a5caaa87
01:13:00.478 --> 01:13:04.119
haven't seen this before, but
this is the first binary code,

NOTE Confidence: 0.863422393798828

e844170a-7e32-468c-898e-99389589fb21
01:13:04.119 --> 01:13:07.429
not binary number. Again,
binary code binary code that has

NOTE Confidence: 0.863422393798828

51bdfdd3-4f2c-4acd-bbaa-c291126a3493
01:13:07.429 --> 01:13:11.401
negative value. The 1st and 2nd
as the negative value and 4th

NOTE Confidence: 0.863422393798828

2d28ba24-6c5e-4517-b75a-3a88971e6930
01:13:11.401 --> 01:13:14.049
and 5th 3rd and 4th has the four

NOTE Confidence: 0.62628448009491

06c0bd45-3332-4ae4-8030-5ba37e39fe41
01:13:14.049 --> 01:13:17.149
and eight. Such as BCD.

NOTE Confidence: 0.823889851570129

14156fab-f80a-481b-9096-c2febd763327
01:13:19.250 --> 01:13:23.220
Although the coding is different
from the aiken, for instance,

NOTE Confidence: 0.823889851570129

348b2d68-49c0-4c26-bc84-307e1c13ae89
01:13:23.220 --> 01:13:28.778
for the one aiken is here. But
for the this code the code is

NOTE Confidence: 0.823889851570129

aabff5c3-e1f0-4957-a9f7-ae0fbf7cc51e
01:13:28.778 --> 01:13:33.542
0111, but it has the nice
property of the aiken, so five

NOTE Confidence: 0.823889851570129

b87b21d4-bbf2-4fc8-9c06-9f2f0eca351e
01:13:33.542 --> 01:13:35.527
is the not of four.

NOTE Confidence: 0.59716659784317

d03e4127-a6d6-427d-b812-abc09af503bb
01:13:36.080 --> 01:13:36.870
and etc.

NOTE Confidence: 0.90466183423996

d1a151d2-dbe6-4982-b2be-78df7de5afe2
01:13:39.510 --> 01:13:44.018
So for this one I either you can
memorize the code or you are

NOTE Confidence: 0.90466183423996

bb593d46-1d15-4f46-992a-3adf83beb605
01:13:44.018 --> 01:13:45.628
given the look up table.

NOTE Confidence: 0.8766970038414

c8b620cc-2711-4305-b0f7-de5b411fadc9
01:13:46.370 --> 01:13:50.726
So for instance, if you are
asked to encode 185 to this

NOTE Confidence: 0.893652021884918

3222bd8d-97f0-472e-9bff-3313d1c6c639
01:13:50.726 --> 01:13:55.530
code. You have to just for each
digit. You could say that what's

NOTE Confidence: 0.893652021884918

0b1e257b-2bf4-42dc-879e-df061f64b3d7
01:13:55.530 --> 01:13:56.710
the code for one?

NOTE Confidence: 0.722963809967041

77c5ea8c-4b43-4f5c-8ef8-13e7f8893daa
01:13:57.270 --> 01:13:57.850
Also.

NOTE Confidence: 0.886658370494843

e4aa1deb-a24e-4a1e-bd56-82270ec6f53a
01:13:59.410 --> 01:14:02.567
What's the code for one is 0111?

NOTE Confidence: 0.878026068210602

5ad9c219-a627-48ee-b74f-bc82d1227dfe
01:14:03.490 --> 01:14:06.696
So 0111 what's the code for 8?

NOTE Confidence: 0.899567902088165

e54b88dd-2859-468c-975e-796111094d87
01:14:07.780 --> 01:14:10.690
Comes here 1000.

NOTE Confidence: 0.8030846118927

980a9d1c-f2b3-45a0-99ff-1f2c413ca820
01:14:11.320 --> 01:14:13.150
1000 and etc.

NOTE Confidence: 0.866029500961304

1c34a92f-3e17-4a32-aedf-7451575628ab
01:14:14.490 --> 01:14:18.366
So I just wanted to skip sum
slide because you're running out

NOTE Confidence: 0.694483399391174

3f00ce42-36e6-4e86-beb2-8d6b8dd3946d
01:14:18.366 --> 01:14:23.608
of time. Uh, read about the self
complementing a the.

NOTE Confidence: 0.857738792896271

9d217fd7-5c7b-4a8d-9055-64700a3cbb7b
01:14:24.160 --> 01:14:30.922
aiken excess three, and this
minus 1 ,- 2, 4 8 has a

NOTE Confidence: 0.857738792896271

a75e6ea7-2e0f-4f56-ba42-5c6830457913
01:14:30.922 --> 01:14:32.854
nice property called self

NOTE Confidence: 0.850468814373016

c1c8121f-4f0c-49c3-975a-48e3b24d477d
01:14:32.854 --> 01:14:36.990
complementing. So I already said
that the 9's compliment of the

NOTE Confidence: 0.897401571273804

c2683b58-0621-4692-8a25-ec26e3cbdf16
01:14:36.990 --> 01:14:41.390
digit. Is equal to the one's
complement of the binary code.

NOTE Confidence: 0.914693057537079

92b3458d-1ea0-4bcb-b82e-eb9b011ca14b
01:14:42.480 --> 01:14:44.824
You can practice on
this slide at home.

NOTE Confidence: 0.83641117811203

3f15a016-8817-4a8a-a58e-a15e3824d4a2
01:14:46.980 --> 01:14:53.019
Uh, another code is Gray code
and the gray code basically

NOTE Confidence: 0.856876373291016

009f022e-a829-46b6-9591-8a7478813cad
01:14:53.019 --> 01:14:59.704
says that. Uh, as you can see,
the Gray code is for zero up

NOTE Confidence: 0.856876373291016

31659239-7773-4a27-93a8-121bb9a95563
01:14:59.704 --> 01:15:04.236
until 15, so this is the main
difference. Other binary codes

NOTE Confidence: 0.856876373291016

ff784d58-c483-45be-b9e0-7cf3af14aadf
01:15:04.236 --> 01:15:09.180
are up until 9, but the Gray
code actually consumes all the

NOTE Confidence: 0.856876373291016

35c966fc-3f50-4f2d-b5e8-7b53822971d8
01:15:09.180 --> 01:15:10.828
combinations of four bits.

NOTE Confidence: 0.890791833400726

117a3b77-b72f-4e88-98ec-15c7f3b30026
01:15:12.140 --> 01:15:18.580
But the assignment is not based
on the binary # 0 goes to 0 1 goes

NOTE Confidence: 0.890791833400726

438c38f8-15f1-4673-bf7c-3a9f516340b3
01:15:18.580 --> 01:15:23.180
to one but three binary #3 goes
to decimal #2.

NOTE Confidence: 0.9077228307724

80f64be3-c82c-4bae-975d-88f561d6d82a
01:15:24.310 --> 01:15:27.694
So the Gray code 4 two is 0011.

NOTE Confidence: 0.820622384548187

32dbeeb1-2911-4453-b822-f5deb98a69e4
01:15:28.830 --> 01:15:33.208
The binary #2 or the Gray
Code 0010 goes to three, so

NOTE Confidence: 0.820622384548187

2298a451-7125-4e73-80d2-e2de9604c370
01:15:33.208 --> 01:15:34.402
this is different.

NOTE Confidence: 0.847089827060699

b8371bcf-e15d-4da1-af71-716497c5f8b8
01:15:36.170 --> 01:15:41.438
Uh, why the Gray code is
useful? You can read about that

NOTE Confidence: 0.847089827060699

7741b6a4-b93e-4ee0-918c-0691905d3924
01:15:41.438 --> 01:15:47.584
in the book, but the property is
that if you are given a sequence

NOTE Confidence: 0.847089827060699

245fc8ae-88e1-4df1-9be0-e26412d28ba8
01:15:47.584 --> 01:15:49.340
of numbers 01234, etc.

NOTE Confidence: 0.874049186706543

2d514468-3dcf-47b3-bab5-9c5a40ff9442
01:15:49.960 --> 01:15:53.000
In the Gray code,
only one bit changes.

NOTE Confidence: 0.92742931842804

b410b56e-6cec-4f84-9c0a-b85c80b94f76
01:15:54.280 --> 01:15:59.269
0 to 1, 1 to 3, 3 to 4, 4 to 5 and
etc.

NOTE Confidence: 0.91213446855545

304f6c49-9bfc-4162-b87d-8971632e023f
01:16:01.890 --> 01:16:04.578
And this is very
important because in

NOTE Confidence: 0.91213446855545

19ff3e80-cb08-41dc-b576-3b3df441fd32
01:16:04.578 --> 01:16:08.034
practice, for instance,
if you are going to move

NOTE Confidence: 0.91213446855545

a4a10e1e-2edb-4ffe-b1f0-e32e083f8407
01:16:08.034 --> 01:16:12.258
from 7 to 8 in a binary
system, you have to

NOTE Confidence: 0.91213446855545

08bfb704-5c6d-426c-9bf4-83936b5001ed
01:16:12.258 --> 01:16:13.410
change 4 bits.

NOTE Confidence: 0.896500766277313

d272fd87-f2d9-4907-8a03-1dcc276783bb
01:16:14.470 --> 01:16:19.558
This is the seven. This is the
8th. So from 7 to 8 you have to

NOTE Confidence: 0.896500766277313

aae57e08-f968-4b6a-ad00-f1464076fed4
01:16:19.558 --> 01:16:24.328
change 4 bits, but in the Gray
code from 7 to 8 you have to

NOTE Confidence: 0.896500766277313

5fd2aeba-ae78-445c-953c-4abcee7b2893
01:16:24.328 --> 01:16:25.918
simply just changed 1 bit.

NOTE Confidence: 0.927354395389557

54634c86-4105-43fe-9068-0487955c235a
01:16:27.890 --> 01:16:29.927
So this is the code for seven.

NOTE Confidence: 0.901623368263245

d2241e25-9de6-4b09-a172-b46c7079624a
01:16:30.460 --> 01:16:34.180
And this is the code for eight
only. The first bit is

NOTE Confidence: 0.89665549993515

3b76ddd9-a75b-4c8c-bdec-9ecf77906afb
01:16:34.180 --> 01:16:39.943
changing. Uh, this helps a lot
with reducing the noise when you

NOTE Confidence: 0.89665549993515

8912530f-3a92-46fe-aab5-f403b00d516a
01:16:39.943 --> 01:16:44.173
transfer information, and this
is the algorithm for that. So

NOTE Confidence: 0.89665549993515

71c84634-7a2b-49d2-8f34-ac09858d0ff7
01:16:44.173 --> 01:16:49.672
you can read about how can we
produce the Gray code for any

NOTE Confidence: 0.89665549993515

018e1d31-77b7-49c7-b2de-1f7040bc4db4
01:16:49.672 --> 01:16:53.902
decimal number, so please read
about these slides at home.

NOTE Confidence: 0.692077457904816

1c6e3216-91ae-46e1-8479-d90bc46a1588
01:16:57.240 --> 01:16:59.420
Uh, basically, uh. Algorithm

NOTE Confidence: 0.864349007606506

60e76c91-015c-4abc-a2b4-908795360976
01:16:59.420 --> 01:17:05.040
says that. For any Gray code
you have to 1st convert the

NOTE Confidence: 0.881718516349792

de564fa5-b8a0-448a-8c7c-227db95a6b28
01:17:05.040 --> 01:17:10.990
binary number. And then so for
20 you make it a binary.

NOTE Confidence: 0.833406507968903

2d3b1234-4ca6-4631-86dd-7d07cf42014b
01:17:11.790 --> 01:17:15.690
First bit of the Gray code.
The same for the other bits.

NOTE Confidence: 0.833406507968903

f51b3222-885c-4177-9495-8c3957ea52ef
01:17:15.690 --> 01:17:19.265
You have to apply the
exclusive or based on the data

NOTE Confidence: 0.833406507968903

735d619d-07b4-4a2e-a70d-488b40ec72f6
01:17:19.265 --> 01:17:20.890
bits and the previous bit.

NOTE Confidence: 0.767053008079529

3e686906-d773-4017-90ee-17332e4b76a0
01:17:24.210 --> 01:17:25.878
This way you generate the Gray code.

NOTE Confidence: 0.831204414367676

cbed5bbd-3cdc-4603-b716-09f52c5231ad
01:17:26.790 --> 01:17:30.450
And if you compare the 20
Gray Code for 20 and 21, there's

NOTE Confidence: 0.831204414367676

dcca6b57-de3d-4891-a56d-0e436a659f72
01:17:30.450 --> 01:17:31.670
only one bit changes.

NOTE Confidence: 0.826513648033142

491e05a0-815e-42fb-b1cf-78c82243f2ea
01:17:33.190 --> 01:17:38.962
Another code is the ASCII code.
Again, read about the ASCII code

NOTE Confidence: 0.826513648033142

05cccda8-ae40-4140-a6f0-7e0a9f195f5c
01:17:38.962 --> 01:17:42.810
at home, but what's the
relationship between the?

NOTE Confidence: 0.802218616008759

7eca7b9c-8ea9-468f-ba11-592c0d98fc6f
01:17:43.890 --> 01:17:45.870
Codes and the combinational

NOTE Confidence: 0.835771024227142

0208c809-6a3f-4a89-bb4e-ff8464090faa
01:17:45.870 --> 01:17:50.781
logic. The thing is, for the
combinational logic we have to

NOTE Confidence: 0.835771024227142

2a54044c-c5bf-4b8e-bd9c-9653b4bbbf70
01:17:50.781 --> 01:17:54.291
design some logic units to
convert the code within each

NOTE Confidence: 0.835771024227142

905fa8d8-3b91-455a-abd4-8de03891efbc
01:17:54.291 --> 01:17:58.152
other code conversion. So we
might for instance, if you are

NOTE Confidence: 0.835771024227142

4995aa83-8762-44e3-9405-e2b76b25c1fb
01:17:58.152 --> 01:18:02.715
given a code in BCD, we want to
design the logic circuit that

NOTE Confidence: 0.835771024227142

80449771-6796-45b7-9b69-242e134aaa86
01:18:02.715 --> 01:18:07.278
outputs the aiken code, or if
you are given the Aiken code you

NOTE Confidence: 0.835771024227142

90cf6461-20d8-4878-b9db-21e06679eb22
01:18:07.278 --> 01:18:11.490
want to output the BCD code. So
this is called code conversion.

NOTE Confidence: 0.761246263980865

11401c9f-9489-4cc8-ae0d-266f637f1170
01:18:13.380 --> 01:18:18.290
Uh, for instance in the book
this example about converting

NOTE Confidence: 0.761246263980865

6d9afce0-990c-471f-a22d-b247df1a5220
01:18:18.290 --> 01:18:23.200
between BCD 2 excess 3 so
encoding to excess 3.

NOTE Confidence: 0.876454770565033

55ea8059-efda-4584-b69d-7d08eb245f7f
01:18:24.120 --> 01:18:28.465
And basically you have four
inputs for the BCD in the

NOTE Confidence: 0.876454770565033

41432159-e80f-4d0d-8b02-b64681dfbdd2
01:18:28.465 --> 01:18:31.625
input and four output for
the excess 3.

NOTE Confidence: 0.866675496101379

74d35a3a-0061-4e31-8bc6-3fd491ca8b30
01:18:32.800 --> 01:18:37.812
And this is the full truth
table. So 000 in the BCD goes to

NOTE Confidence: 0.866675496101379

47132131-9325-4064-ab03-25a63db3d5e3
01:18:37.812 --> 01:18:42.466
three. So this is the code for
three. Is the code for excess

NOTE Confidence: 0.866675496101379

38bea625-894d-41d7-808c-845198878193
01:18:42.466 --> 01:18:43.898
3 for the 0?

NOTE Confidence: 0.891911506652832

ce8e53e1-f927-44e9-866b-734468554e13
01:18:44.520 --> 01:18:48.865
This is a mapping for
one. It goes to 4 for 2. It

NOTE Confidence: 0.891911506652832

c22c3057-3060-4800-b99b-3a34a8a57c35
01:18:48.865 --> 01:18:50.840
goes to five and etc.

NOTE Confidence: 0.879047572612762

b11e2b64-b91b-4d50-ad28-ab4edf07ab85
01:18:52.470 --> 01:18:57.762
These rows are those invalid
values for the BCD code, so for

NOTE Confidence: 0.879047572612762

9c6bc211-793c-415e-a031-92b0a792ff6f
01:18:57.762 --> 01:19:03.936
all these inputs in the BCD you
can simply output. Put a don't care

NOTE Confidence: 0.879047572612762

6ce81271-7e39-4666-83db-adb84a7f1ec8
01:19:03.936 --> 01:19:06.141
conditions and then you can

NOTE Confidence: 0.833065211772919

92c8b9ce-0552-449c-8764-56b71020db7b
01:19:06.141 --> 01:19:11.420
write the. For each output, you
can write the sum of minterms

NOTE Confidence: 0.833065211772919

af03d362-870b-4e32-9d16-3013cca4464a
01:19:11.420 --> 01:19:15.040
using the Karnaugh with four
variables, minimize it and reuse

NOTE Confidence: 0.833065211772919

9e38778e-b5ac-4bf2-87f9-dcdaeae7fb80
01:19:15.040 --> 01:19:16.488
the don't care conditions.

NOTE Confidence: 0.821879088878632

0507da9a-e206-4bac-812d-bc4ef58bd1a3
01:19:17.690 --> 01:19:22.175
And then based on the Karnaugh
four condition, you can have a

NOTE Confidence: 0.821879088878632

d4fccc3c-7d9e-48b6-b311-bd258cf4379c
01:19:22.175 --> 01:19:26.315
code converter in the input.
You can have the BCD code in

NOTE Confidence: 0.821879088878632

c8e4bc20-98a5-4e69-a87e-19113214ef7e
01:19:26.315 --> 01:19:29.765
the output. You can have
the excess 3 code.

NOTE Confidence: 0.848357856273651

ec5ca5f1-4197-4124-a5b5-cc08b39ed7b8
01:19:31.670 --> 01:19:36.883
You can have different encoders
from excess 3 to BCD, BCD to aiken

NOTE Confidence: 0.848357856273651

cfdee024-fd88-4688-944b-2fe5a13ae336
01:19:36.883 --> 01:19:40.893
 etc. So please practice at
home about this conversions.

NOTE Confidence: 0.92425924539566

b267f8a2-532e-43b7-abb9-42f0426d7367
01:19:42.730 --> 01:19:47.042
And unfortunately, we don't have
enough time to cover the other

NOTE Confidence: 0.859895348548889

d1c028d3-35e0-4ec5-beac-400e2206a5f3
01:19:47.042 --> 01:19:52.350
slides. But I'm going to finish
this chapter here. Next lecture.

NOTE Confidence: 0.859895348548889

eeddc49e-729e-46c0-93f1-a6c244f71c2d
01:19:52.350 --> 01:19:56.760
We're going to start this
second, I mean the sequential

NOTE Confidence: 0.859895348548889

fc59f4be-5752-42ac-b578-1fb87370e40f
01:19:56.760 --> 01:19:58.524
logic, the chapter 5th.

NOTE Confidence: 0.889174818992615

64561068-4666-41bd-92b9-b6f4025f56f8
01:19:59.090 --> 01:20:05.306
So you can cover all these
slides at home. Very simple if

NOTE Confidence: 0.889174818992615

b03c96ac-00cf-435d-aee1-610058a0f286
01:20:05.306 --> 01:20:11.004
you have questions please. I
mean, just come to the office

NOTE Confidence: 0.889174818992615

66b96cfc-f8a9-4256-a83c-2c2949d27ec7
01:20:11.004 --> 01:20:16.184
hour or send me some emails
about designing the combination

NOTE Confidence: 0.889174818992615

e5944ad9-289d-4447-b5e5-6ffccae7dfcd
01:20:16.184 --> 01:20:18.774
logic units for binary codes.

NOTE Confidence: 0.86528205871582

9092c339-61c5-4d87-9e84-484aca40184d
01:20:20.420 --> 01:20:25.191
Once this is an example in the
lecture assignment so we can see

NOTE Confidence: 0.86528205871582

4d6f3be8-a0fc-42e3-b09a-59c7de9066d5
01:20:25.191 --> 01:20:29.228
these slides in order to help
you how to design the.

NOTE Confidence: 0.814484059810638

989aaac5-c867-4bf2-84bb-1ca01b11a471
01:20:29.270 --> 01:20:32.969
Seven segment decoder's just
like this is the lecture

NOTE Confidence: 0.870869994163513

10554707-aa3c-4fe8-8edf-cbdb09177c3d
01:20:32.969 --> 01:20:37.381
assignment. In the first chapter
in this slide, I just put some

NOTE Confidence: 0.870869994163513

bd8f83c9-1ee2-4d6f-b256-d26e67a13ec4
01:20:37.381 --> 01:20:38.936
explanation. How can you design

NOTE Confidence: 0.885688841342926

863784ed-cc87-4b1c-b22f-d0a7a532315a
01:20:38.936 --> 01:20:43.273
that? But this was just a
lecture assignments in the

NOTE Confidence: 0.885688841342926

4650ba3b-51ee-4132-ae75-4d3729f79154
01:20:43.273 --> 01:20:44.027
Chapter 4.

NOTE Confidence: 0.671467423439026

446883f7-6313-4d3f-a977-0b0b80f6a8be
01:20:45.290 --> 01:20:46.740
And, uh.

NOTE Confidence: 0.834816515445709

f2af3f1b-27dd-4dc5-9326-1e432a7c211a
01:20:47.970 --> 01:20:52.470
There's some logic units in the
book in this page for arithmetic

NOTE Confidence: 0.834816515445709

85d2104d-9c02-46a5-ac04-0681cd0f95bb
01:20:52.470 --> 01:20:56.970
under codes. For instance, doing
addition in the BCD or doing a

NOTE Confidence: 0.834816515445709

30727c46-16a9-4b08-8d1a-793e79e791d2
01:20:56.970 --> 01:20:59.595
subtraction in BCD or excess 3.

NOTE Confidence: 0.876366555690765

e9618f77-a17a-4027-b655-cc8ffa661ade
01:21:00.180 --> 01:21:05.320
So. Please read about these
in the book and also these

NOTE Confidence: 0.876366555690765

9d7a7d55-34dc-4a4c-be00-01fdba3a6f39
01:21:05.320 --> 01:21:08.264
slides can help you to
understand the topics.

NOTE Confidence: 0.763814330101013

ddc2443f-c827-4e2a-847d-c80101bf8823
01:21:09.670 --> 01:21:12.886
So thank you so much everyone,

NOTE Confidence: 0.824281454086304

b0dcdb87-723e-48c9-bdbc-0d6fca390776
01:21:12.886 --> 01:21:19.488
and, uh. So next lecture
were is going to start the next

NOTE Confidence: 0.824281454086304

da1a8cf1-7680-4eff-84dc-9cd9e2887225
01:21:19.488 --> 01:21:21.366
chapter sequential logic.

NOTE Confidence: 0.884310960769653

47853949-9a30-4162-a54b-f74e4b73896d
01:21:22.570 --> 01:21:25.800
I'm also happy to take your
questions about all these

NOTE Confidence: 0.884310960769653

72ce83f1-a2ae-444c-8698-b68dcadb850f
01:21:25.800 --> 01:21:29.676
materials that you are going to
cover at home using these slides

NOTE Confidence: 0.907749712467194

2a4cd8f1-2f3b-41ac-99e6-f1b6b4a67364
01:21:29.676 --> 01:21:32.546
and the book. Thank you,
have a great day.

NOTE Confidence: 0.849765300750732

83ef5765-275e-4ac3-b041-6c542d08001a
01:21:35.620 --> 01:21:45.770
You're
welcome.

NOTE Confidence: 0.929241120815277

19bd1cc0-daad-43c7-b948-0d676ddf112f
01:21:46.890 --> 01:21:48.720
You too have a great day.

