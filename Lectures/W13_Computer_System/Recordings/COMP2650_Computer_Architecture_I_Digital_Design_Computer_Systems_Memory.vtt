WEBVTT

NOTE duration:"01:26:06.8080000"

NOTE language:en-us

NOTE Confidence: 0.893364548683167

be6235b6-233c-4151-8c75-020b914653c2
00:00:00.040 --> 00:00:02.320
This week gonna be the last

NOTE Confidence: 0.792888224124908

db895b6c-dbc8-4d8e-ae7f-9c06401256cc
00:00:02.320 --> 00:00:07.750
week. Uh, we have this lecture
and the lecture on Wednesday

NOTE Confidence: 0.792888224124908

0c881b7e-f5cb-4d3b-b66f-0aed196bbc6c
00:00:07.750 --> 00:00:12.220
gonna be the last lecture of
this semester. So yes.

NOTE Confidence: 0.927846193313599

540fc359-1281-4b98-9ec8-9e1de2f604ed
00:00:14.470 --> 00:00:20.058
And I hope you enjoyed it I
mean so far and

NOTE Confidence: 0.701977968215942

3d02d4e9-42f4-4d57-85a9-0ab8dde27b82
00:00:21.130 --> 00:00:26.314
Uh, one thing is
that you can go to the I

NOTE Confidence: 0.701977968215942

6139158c-4b1f-450c-a387-f00732cdaccd
00:00:26.314 --> 00:00:28.258
mean, the student UWinsite.

NOTE Confidence: 0.86129766702652

f06cfd75-4a90-4c78-88da-e92bc5211a30
00:00:28.830 --> 00:00:33.230
Put your comments about this
course using the student

NOTE Confidence: 0.86129766702652

c4b9f208-9e5a-4957-ba15-df089ea74d98
00:00:33.230 --> 00:00:34.990
evaluation. The SET scores.

NOTE Confidence: 0.910828232765198

28feb91d-80b3-4297-8e7c-d6fbe9d02ba1
00:00:35.520 --> 00:00:39.624
So please go there and then put
your comments about this course

NOTE Confidence: 0.764182209968567

6591e6e9-7e4f-4bf0-818b-95d06ae6c6f8
00:00:39.624 --> 00:00:45.558
there. Uh,
that survey is the official

NOTE Confidence: 0.764182209968567

0ee1337f-c4e7-4f66-a3e4-fa98c2ae9cd6
00:00:45.558 --> 00:00:47.848
survey by the school and

NOTE Confidence: 0.883214175701141

e37576c6-ccb5-4607-b9c2-3cdcb7c2d3e6
00:00:48.580 --> 00:00:53.398
they gonna let me know your
comments and I will definitely

NOTE Confidence: 0.883214175701141

21b7782f-d3fe-49de-a6f0-979b49424487
00:00:53.398 --> 00:00:56.902
understand it in my next lecture
about this course.

NOTE Confidence: 0.87848573923111

0f783f58-1eeb-4b03-8c19-922ff224559b
00:00:59.300 --> 00:01:00.458
Any other questions?

NOTE Confidence: 0.869350135326386

96357b6a-7456-4413-b5e4-ae518f13433d
00:01:06.860 --> 00:01:13.709
So let's start off. Before
I start today's lecture,

NOTE Confidence: 0.929406046867371

adc6741c-8e88-4285-a0ea-94621517f7d2
00:01:13.710 --> 00:01:15.258
how many of you have actually 

NOTE Confidence: 0.8940709233284

b82394cb-f221-454c-9bb3-da023971d8c8
00:01:15.258 --> 00:01:21.518
seen this movie? This is one of
the greatest movie in the

NOTE Confidence: 0.8940709233284

f9977e77-a49b-434d-84f7-5c54bb17fea5
00:01:21.518 --> 00:01:23.144
history of cinema.

NOTE Confidence: 0.888877809047699

c987cdb4-b179-4ff3-98db-89874bae2dd1
00:01:23.590 --> 00:01:26.298
2001: A Space Odyssey.

NOTE Confidence: 0.868158459663391

840c239e-e413-4bc4-af40-0d068a3c029d
00:01:27.060 --> 00:01:30.417
This movie is made by Stanley
Kubrick in 1968.

NOTE Confidence: 0.894192218780518

530fe18c-2f70-4287-a073-ff747b071d01
00:01:32.020 --> 00:01:33.100
Anybody?

NOTE Confidence: 0.806914806365967

3e1c9ad7-0a3e-4267-a731-314837e2129f
00:01:38.480 --> 00:01:41.765
Nicholas, you saw

NOTE Confidence: 0.934396386146545

b361b6fe-aa23-486a-9d3c-4b2192312d01
00:01:41.765 --> 00:01:45.818
that. And you do you agree that
this is a great movie?

NOTE Confidence: 0.833546042442322

cd89b7bf-1ee2-4678-a2ed-af6eed470cbe
00:01:46.690 --> 00:01:52.084
Oh Justin. For those that have
seen this movie, I mean, do you

NOTE Confidence: 0.833546042442322

71f46ec8-42e0-4bb2-a708-345842ae4bef
00:01:52.084 --> 00:01:56.332
believe that this is a great
movie? Oh yes, yeah for sure. And

NOTE Confidence: 0.833546042442322

bbdae638-cca8-458d-bb8f-d3bb5d7ea121
00:01:56.332 --> 00:02:00.226
for those of you that haven't
seen this movie, I highly

NOTE Confidence: 0.892817080020905

c01308b5-6cb4-49f9-a577-8db368c1d692
00:02:00.226 --> 00:02:06.528
suggest this. It might be boring
for you at the end or something

NOTE Confidence: 0.892817080020905

8341ea47-9565-40d9-8773-869b2511ec81
00:02:06.528 --> 00:02:11.608
like that, but it's definitely worth
the time to spend on watching

NOTE Confidence: 0.892817080020905

891564ff-f629-403b-a7a4-3c3198dc780e
00:02:11.608 --> 00:02:16.688
this movie and basically this
movie is about the main

NOTE Confidence: 0.892817080020905

74d11c79-94c5-4209-99f8-83be0806ef83
00:02:16.688 --> 00:02:21.768
evolutionary steps of the human
species from the very past up

NOTE Confidence: 0.892817080020905

412dbaff-91f4-4afb-905f-623f6e928161
00:02:21.768 --> 00:02:27.864
until the future. So it starts
when we were an animal species

NOTE Confidence: 0.892817080020905

ccf29b88-7c24-406a-a834-ded4c0a05e84
00:02:27.864 --> 00:02:30.912
and then we were able to

NOTE Confidence: 0.835776269435883

eb0b13a8-f137-4cae-b3e0-35c05d12a3ad
00:02:30.950 --> 00:02:34.471
make tools out of the bones, up

NOTE Confidence: 0.815660536289215

12f47fb5-255a-4eb5-9172-2f7d9384f9c7
00:02:34.471 --> 00:02:41.520
until here.
In this movie, it predicts that

NOTE Confidence: 0.815660536289215

d4217ec2-830c-4d21-b9bb-5feaf76d2fa4
00:02:41.520 --> 00:02:47.856
human progress in technology
right now in the year

NOTE Confidence: 0.795323252677917

9ca56cb7-32eb-42b8-a3c1-bbb0bf555ecf
00:02:47.856 --> 00:02:55.201
2001 gonna start from the bones as a simple

NOTE Confidence: 0.764811456203461

8e8bbd2d-6195-40d8-9330-fd2b91ca5d5f
00:02:55.750 --> 00:03:01.090
tool, up until building is
spacecraft or space ship and

NOTE Confidence: 0.764811456203461

ea9ae8d4-1e8d-4502-861e-d983960ac409
00:03:01.090 --> 00:03:02.692
exploring the universe.

NOTE Confidence: 0.836956918239594

9e4f57b6-3f6a-4fa1-823c-4aa9ff542d30
00:03:03.760 --> 00:03:09.780
And this image.
This is part of the movie. This

NOTE Confidence: 0.836956918239594

7ff6c5b6-ff23-4889-b768-9285f4309cc0
00:03:09.780 --> 00:03:14.940
is one of the greatest match
card in the history of cinema

NOTE Confidence: 0.836956918239594

ff89e047-e217-45f9-922d-ef028f1e71d6
00:03:14.940 --> 00:03:19.240
that actually brings this
progress in just one shot. I

NOTE Confidence: 0.836956918239594

e3d0c0b5-c650-4c97-900d-95dce9cb4bf9
00:03:19.240 --> 00:03:24.400
mean from bone of the animals,
you could build tools up until

NOTE Confidence: 0.836956918239594

ef90934d-f234-4e64-9ca2-2ebd4690921d
00:03:24.400 --> 00:03:27.840
building the space ships and
exploring the universe.

NOTE Confidence: 0.815005481243134

1d2f96ea-6856-4008-84c9-da31883e623a
00:03:28.490 --> 00:03:32.516
So that's why this is called
Odyssey. I mean the human

NOTE Confidence: 0.815005481243134

c0c0fa32-eafe-426f-b294-5461f4333671
00:03:32.516 --> 00:03:36.542
Odyssey or a space Odyssey from
the ground to the space.

NOTE Confidence: 0.850300967693329

b07a89e2-1b0b-4f31-9c0d-e6df566aa0b2
00:03:37.390 --> 00:03:40.120
So, I thought that we can rename

NOTE Confidence: 0.839875340461731

aab2385d-8725-4245-a6f8-a63c7debb9b1
00:03:40.120 --> 00:03:45.366
our course. And also the next
course, Computer Architecture

NOTE Confidence: 0.839875340461731

c2b720fe-a70e-455a-9637-4ee3d31ef47a
00:03:45.366 --> 00:03:48.740
2, to this name. I mean A

NOTE Confidence: 0.876739680767059

e1af1323-de7c-4f78-b1c3-ece9bb815565
00:03:48.740 --> 00:03:54.946
Digital Odyssey. Meaning that we
built this smallest unit of

NOTE Confidence: 0.876739680767059

7e73c6ce-aad3-477b-baeb-389abba26269
00:03:54.946 --> 00:03:57.856
digital system, the logic gates.

NOTE Confidence: 0.84201568365097

2241829c-a0c7-4510-a349-c6e7ae449933
00:03:59.460 --> 00:04:03.756
Uh, yeah, I mean, yes, yes.
You'll see later that I mean,

NOTE Confidence: 0.84201568365097

627fc2ed-003c-4e7e-9cff-e44577e4313c
00:04:03.756 --> 00:04:08.052
this is not just the fiction
inside a movie. I mean,

NOTE Confidence: 0.84201568365097

95d469c7-9bf5-4b41-a674-58b55ca7eaa9
00:04:08.052 --> 00:04:12.706
we'll see that we actually did
this progress. We will see in a few

NOTE Confidence: 0.84201568365097

c1ce40b6-d9b1-4dca-b35a-fcc35b348df5
00:04:12.706 --> 00:04:17.718
slides, so we could say that, I
mean we passed and we are

NOTE Confidence: 0.84201568365097

a5fec3be-794d-4863-b51b-023cff37cde4
00:04:17.718 --> 00:04:20.940
going through the digital
Odyssey. We could build the

NOTE Confidence: 0.84201568365097

7963de3a-55c0-4070-95c0-8beb8a43ec7a
00:04:20.940 --> 00:04:25.236
smallest unit of the digital
system using just the gates: AND gate, OR

NOTE Confidence: 0.856959819793701

76058362-3632-47ae-83e5-70a1580db6cd
00:04:25.236 --> 00:04:31.034
gate, and NOT gate. And then we
build some combination of logic

NOTE Confidence: 0.856959819793701

1edfc726-e035-4fe3-b201-aa9251d87b61
00:04:31.034 --> 00:04:35.808
or combinational circuit, and then on top of
that, we could build addition,

NOTE Confidence: 0.856959819793701

9bf8817b-fdbe-4fac-b9b8-d9902556ae28
00:04:35.808 --> 00:04:39.714
subtraction and multiplexers,
encoders and etc. And then for

NOTE Confidence: 0.856959819793701

8b57ce3a-8f60-444b-9a3a-0db27e95041b
00:04:39.714 --> 00:04:45.790
the next step, we said that we want to
store some information. So

NOTE Confidence: 0.856959819793701

c67cf8bb-f95a-43bf-ab08-b1468e0a08c6
00:04:45.790 --> 00:04:50.998
by the idea of repeating the
value. So by the idea of

NOTE Confidence: 0.856959819793701

b3b853c3-7c45-49a9-b903-034e5b9e10af
00:04:50.998 --> 00:04:55.772
feedback, and then we could build
latches, we could build flip

NOTE Confidence: 0.87840336561203

49467d8f-274c-4ade-a5b8-f7009449e3de
00:04:55.772 --> 00:04:57.870
flops. So this is the Odyssey.

NOTE Confidence: 0.839839041233063

a9da1d4a-115f-4058-b102-375711377b12
00:04:58.490 --> 00:05:03.712
So we could build the flip flops
and then out of flip flops, we

NOTE Confidence: 0.839839041233063

7aa72743-b95d-4ddf-a4c8-ec2a81f31c92
00:05:03.712 --> 00:05:08.188
could build a sequential logic.
I mean larger units to

NOTE Confidence: 0.839839041233063

18be6ef9-6c32-46da-86f9-8189b30ccb13
00:05:08.188 --> 00:05:11.545
do calculation that need to
store intermediate results. For

NOTE Confidence: 0.839839041233063

4249dd18-2ab5-4af3-937d-e5e5217f5f9b
00:05:11.545 --> 00:05:15.648
instance, the counters. So for
counting a number, we need to

NOTE Confidence: 0.839839041233063

f086538c-8de8-4062-9838-b73b5d46421d
00:05:15.648 --> 00:05:20.124
store the immediate
number in order to go to the

NOTE Confidence: 0.877261757850647

ba4489e9-9def-4a0f-9dd6-cb975cdc257d
00:05:20.124 --> 00:05:26.239
next number. And that was the
sort of Odyssey or journey. I

NOTE Confidence: 0.877261757850647

ec040a4c-03c7-4c3f-ab35-132fd2775534
00:05:26.239 --> 00:05:31.147
mean, we said that we want to
build a system that calculates

NOTE Confidence: 0.877261757850647

c9859214-b798-4047-8483-d09144b82cf2
00:05:31.147 --> 00:05:35.646
or process the information in the
universe, and we said that the

NOTE Confidence: 0.877261757850647

68ff47df-4c85-4ef7-a8db-95032bc1cf1c
00:05:35.646 --> 00:05:39.736
continuous entities must be
discrete and for them to be discrete, we

NOTE Confidence: 0.877261757850647

1fc378a5-2bd9-42af-ace4-d7c6835f1358
00:05:39.736 --> 00:05:43.008
proposed to represent them by
digits or symbols.

NOTE Confidence: 0.855064749717712

ce0cfefc-82c1-46cc-8c74-de9c738cc1ed
00:05:43.550 --> 00:05:49.426
We said that we have a numbering system.
For hours in the numbering system, we

NOTE Confidence: 0.855064749717712

f7d69f9a-feae-4d2d-b0e6-6c0917a39eae
00:05:49.426 --> 00:05:53.946
introduced logic gates and then
built the combinational logic,

NOTE Confidence: 0.855064749717712

e7bf0c6e-c58b-40e0-a056-8ba1cc858995
00:05:53.946 --> 00:05:58.918
storing the information and then
I mean doing some

NOTE Confidence: 0.855064749717712

315a4e09-a6d4-449f-b1cc-a808ebd07375
00:05:58.918 --> 00:06:04.342
analysis on the information that
we stored, and now the main task

NOTE Confidence: 0.855064749717712

4037a197-5fd8-497f-a970-092d81eb4059
00:06:04.342 --> 00:06:08.410
is building a sophisticated
computer system to do any

NOTE Confidence: 0.89619505405426

4b69fa17-e725-4f5e-b08d-d5e08d57262a
00:06:08.410 --> 00:06:13.624
general computation. So this
week gonna be about building the

NOTE Confidence: 0.89619505405426

d83eff89-6699-4fdc-9226-4757c91c8444
00:06:13.624 --> 00:06:17.208
computer system, using
the sequential logic or

NOTE Confidence: 0.89619505405426

e19893aa-376a-45e5-8770-4f5b9cff4836
00:06:17.208 --> 00:06:21.688
combinational logic to build a
system that can analyze any

NOTE Confidence: 0.874701917171478

fd8c1336-e96b-4e00-b640-6e3296ce3240
00:06:21.688 --> 00:06:26.164
given information. So this
journey doesn't stop

NOTE Confidence: 0.874701917171478

217a2132-4764-4921-b1cc-3461fc64e9ce
00:06:26.164 --> 00:06:30.628
here because this is our last
week. If you want to continue

NOTE Confidence: 0.874701917171478

558802f3-6c54-4892-acc0-c8db2a338ede
00:06:30.628 --> 00:06:34.720
this journey, you have to take
the Computer Architecture 2 in

NOTE Confidence: 0.874701917171478

fc5dfa80-6163-4e9c-a902-a9ef31813b2b
00:06:34.720 --> 00:06:39.556
the next semester and at the end
of that course, you finished this

NOTE Confidence: 0.874701917171478

1cc83d2d-0118-4974-907e-f1e4a31ed68d
00:06:39.556 --> 00:06:43.648
Odyssey or this journey of I mean,
building a computer system. So

NOTE Confidence: 0.874701917171478

05a8b078-7bfc-4870-810e-99d9c87ea528
00:06:43.648 --> 00:06:47.740
we start. I mean, we just
initially start at this step

NOTE Confidence: 0.874701917171478

afe986da-ccaf-43e3-9d55-bb8714567bf9
00:06:47.740 --> 00:06:52.948
and I hope
that I can motivate you to take

NOTE Confidence: 0.874701917171478

a083670c-a8e1-4edc-84fd-1fd898f48e56
00:06:52.948 --> 00:06:54.436
the Computer Architecture 2 class

NOTE Confidence: 0.894594550132751

d6e5d136-dfed-435b-9a8f-3cdba0f36670
00:06:54.450 --> 00:06:57.150
to continue this journey.

NOTE Confidence: 0.8794766664505

ed9b39b2-cc96-4cc3-9257-b99aa28a0155
00:06:58.930 --> 00:07:03.090
So basically building a computer
system is like building a

NOTE Confidence: 0.8794766664505

968ea88d-c5e0-4a65-be9d-fcdce2fab07a
00:07:03.090 --> 00:07:07.250
telescope. So computer
science is not the science of

NOTE Confidence: 0.8794766664505

0a78afd2-47bd-46ff-aa2d-6805642f5d30
00:07:07.250 --> 00:07:11.826
building computers. This slide
is from the

NOTE Confidence: 0.8794766664505

8586f463-495e-44e1-b690-1b8063647022
00:07:11.826 --> 00:07:16.818
first week. We said that we want
to build computers, but

NOTE Confidence: 0.8794766664505

0a06ca34-04c7-43ae-b7c9-a53bb20968f7
00:07:16.818 --> 00:07:20.562
computer science is not the
science of building computers.

NOTE Confidence: 0.89294445514679

9ec65d60-26dd-4c1b-83bc-23117d9c1b32
00:07:20.562 --> 00:07:23.250
There are different disciplines.

NOTE Confidence: 0.782337307929993

d0ee0a63-08f3-4170-a664-0247d6fdd5eb
00:07:23.770 --> 00:07:27.730
But computers, if we could
build computers, the

NOTE Confidence: 0.782337307929993

0bd243d6-0dab-43f5-9390-789a6a159359
00:07:27.730 --> 00:07:32.130
computers can help the computer
scientist alot because they can

NOTE Confidence: 0.782337307929993

b2b998e2-bf8c-4340-b420-65a95c15e680
00:07:32.130 --> 00:07:36.970
do calculations. Not through human
beings, but by some systems. This is

NOTE Confidence: 0.782337307929993

78c2bfa8-33d4-4f15-b062-06a046da0391
00:07:36.970 --> 00:07:40.930
very similar to the astronomy
and telescopes. Although

NOTE Confidence: 0.782337307929993

aafa75d1-b798-4fed-8d31-5d727949fad6
00:07:40.930 --> 00:07:43.570
astronomy is not the science of

NOTE Confidence: 0.816205024719238

86c813ae-9937-48b8-a07d-ea1df8c0c695
00:07:43.570 --> 00:07:47.946
building telescopes, you
could build telescopes, powerful

NOTE Confidence: 0.816205024719238

bb78cb9d-2477-491e-ae9d-4b97513ac963
00:07:47.946 --> 00:07:52.126
telescopes, so we can explore the
universe much more better, and

NOTE Confidence: 0.816205024719238

812f3fd6-3222-4df7-a76a-7d266ba7f722
00:07:52.126 --> 00:07:57.560
it helps the astronomers alot.
So that was the main goal

NOTE Confidence: 0.816205024719238

a9bb94d6-4136-423a-91fe-707a9a6ab2ff
00:07:57.560 --> 00:08:02.158
behind this course and the next
course. So we want to start

NOTE Confidence: 0.816205024719238

1282b027-9dc2-4e26-b32c-b14281891a37
00:08:02.158 --> 00:08:04.248
building computers today. I mean

NOTE Confidence: 0.821759343147278

3ac9f76a-c5f0-4bd5-bc5d-994a3b1a8b2f
00:08:04.248 --> 00:08:08.960
this week. By using our
knowledge of numbering systems,

NOTE Confidence: 0.821759343147278

371cc1bd-c0fd-45e0-8813-5ce8adc5ab4d
00:08:08.960 --> 00:08:12.320
our knowledge of combinational
logic and sequential logic.

NOTE Confidence: 0.863675951957703

e86e351d-ff7b-4314-89a5-9b8190b940a3
00:08:13.570 --> 00:08:18.817
So the most simplest problems,
not only the simplest, but also the

NOTE Confidence: 0.863675951957703

5fce785e-c03b-4d99-a7ca-8cd5e12845c1
00:08:18.817 --> 00:08:23.110
I mean most essential problems
are calculating the distance:

NOTE Confidence: 0.863675951957703

699ff74c-93a7-479d-b1ae-ca921cd382e8
00:08:23.110 --> 00:08:29.311
height or length, as we said in
the first week of this course.

NOTE Confidence: 0.814444720745087

22e39e92-79b9-41b8-b593-ffc550df5805
00:08:30.510 --> 00:08:35.334
We said that in computer science,
there is a course or discipline

NOTE Confidence: 0.814444720745087

3d66d753-67e7-427b-a96d-6672878fb357
00:08:35.334 --> 00:08:39.354
called theory of automata or theory
of computation. In some schools, they

NOTE Confidence: 0.814444720745087

8ae60c7b-e3c3-470d-84b3-9c18d15e3a8f
00:08:39.354 --> 00:08:41.364
call this theory of computer

NOTE Confidence: 0.885829508304596

e1ba6fca-b312-4424-bddb-78977b46c4a5
00:08:41.364 --> 00:08:45.196
science, which basically
tries to prove mathematically

NOTE Confidence: 0.885829508304596

e7d7da28-a5dd-488d-ace9-12a0074df282
00:08:45.196 --> 00:08:49.794
that given a problem, is it
possible to solve that problem

NOTE Confidence: 0.885829508304596

fc5d061b-8ce4-468b-b665-1e70ebdf1c9c
00:08:49.794 --> 00:08:51.048
by computer systems?

NOTE Confidence: 0.861517369747162

50cce681-cbdb-4258-840c-d6936733d2ec
00:08:51.780 --> 00:08:57.072
By this we mean that is it
possible to take some finite

NOTE Confidence: 0.861517369747162

c61141fd-852d-423c-98fe-7f21d037ad46
00:08:57.072 --> 00:09:01.923
steps to accomplish or to
solve that problem? And we are

NOTE Confidence: 0.861517369747162

690d3aae-dd86-4d8f-9f51-a0697624414f
00:09:01.923 --> 00:09:06.774
building computers to take those
steps using some machines instead of through

NOTE Confidence: 0.915165305137634

0aa67b82-454f-405d-94d9-7aa625731027
00:09:06.774 --> 00:09:12.950
human beings. And in this course,
they prove there's just a very small

NOTE Confidence: 0.915165305137634

b53b00bf-72a8-42c5-819b-6f86aef18758
00:09:12.950 --> 00:09:15.160
portion of problems can be

NOTE Confidence: 0.90069043636322

2ee5f9e1-a6e7-4f10-82af-307bfb4e1052
00:09:15.160 --> 00:09:18.190
solved by computer systems.

NOTE Confidence: 0.800674378871918

d8391c3e-67f4-4513-811f-a9da69efa065
00:09:18.790 --> 00:09:22.750
So the whole of this course and next
course is gonna be about building

NOTE Confidence: 0.800674378871918

7276764d-6106-4e2f-9a7e-e71bffe64564
00:09:22.750 --> 00:09:26.710
such a system that can just
solve a very small portion of

NOTE Confidence: 0.800674378871918

b5975cb8-15f7-492d-99be-da363aef8831
00:09:26.710 --> 00:09:28.150
problems, not all problems.

NOTE Confidence: 0.90176522731781

f3bf6271-35cd-4469-998f-0c3a844ab7a7
00:09:28.920 --> 00:09:30.450
If we are

NOTE Confidence: 0.851428151130676

020e2e87-be13-4f15-ad59-4772965d2502
00:09:31.580 --> 00:09:36.536
given a problem, and we could prove
that we can solve that problem

NOTE Confidence: 0.851428151130676

534ab29d-b671-4c7b-91fe-730b026a0411
00:09:36.536 --> 00:09:41.079
by computer systems, then we
write programs for that. So what

NOTE Confidence: 0.851428151130676

a364115b-c52f-4e8b-ad0b-bd84df15505f
00:09:41.079 --> 00:09:46.448
you did in the lab assignments
was this: so you write some

NOTE Confidence: 0.851428151130676

8b7c1b9c-a1a5-4358-96ee-d7844842badd
00:09:46.448 --> 00:09:50.165
program by a programming
language, for instance C, C++,

NOTE Confidence: 0.851428151130676

08fac6c5-5881-4f7d-8400-9afc2e18049f
00:09:50.165 --> 00:09:54.295
Java or Python, or any other
programming languages. So these

NOTE Confidence: 0.851428151130676

c0ef633c-5439-47cb-a485-1364fcef9186
00:09:54.295 --> 00:09:55.534
languages for programming.

NOTE Confidence: 0.899545907974243

5ea645f8-0f51-45f3-9d8a-8b5044d2dccf
00:09:56.100 --> 00:10:00.160
And by programming, you are
trying to solve that problem.

NOTE Confidence: 0.899545907974243

69c8b867-d205-4c95-a5b7-55a806228e86
00:10:00.160 --> 00:10:01.378
But before that,

NOTE Confidence: 0.905915856361389

66007a2d-436c-43d7-afe8-f43fe3408c5a
00:10:01.930 --> 00:10:06.340
computer scientists already
proved that that problem can be

NOTE Confidence: 0.905915856361389

4c50434b-6c79-424f-a0b6-faee57e2833c
00:10:06.340 --> 00:10:08.300
solved by some programs.

NOTE Confidence: 0.831271767616272

c944b147-202a-4b18-a2db-844831c97312
00:10:09.100 --> 00:10:13.285
There are a lot of
problems. Actually, infinite

NOTE Confidence: 0.831271767616272

81c1839c-a232-45c8-a6a0-fd3459f9c7e1
00:10:13.285 --> 00:10:18.400
problems that scientists proved that
you cannot solve by

NOTE Confidence: 0.831271767616272

b7b56286-9e4e-4ac7-acbf-0ee3fb5fcfc4
00:10:18.400 --> 00:10:23.050
any programs. There's no program
that can solve that

NOTE Confidence: 0.800894439220428

55f5d5c8-858e-46b6-a406-4573e9c0d1c8
00:10:23.050 --> 00:10:28.328
problem. Uh, this is the course
of. I mean, this is the course

NOTE Confidence: 0.800894439220428

2630204f-46fb-448a-844c-d6f86fbaa143
00:10:28.328 --> 00:10:30.392
where you deal with

NOTE Confidence: 0.888041913509369

3d28bb68-9039-4d7d-811c-50d684b5f33c
00:10:30.392 --> 00:10:35.910
such problems. So imagine we can
solve the problem and we can

NOTE Confidence: 0.888041913509369

8d5cb7a9-2bc4-468e-b6eb-094dda231a4d
00:10:35.910 --> 00:10:40.674
write a program. But now, we want
to solve that problem by

NOTE Confidence: 0.888041913509369

0f3ba8cc-7a6a-497b-8c0b-744a801bed17
00:10:40.674 --> 00:10:44.644
computer systems. Any program
has two main parts: data and

NOTE Confidence: 0.871520698070526

434ab2fb-bd45-433b-874b-d69d91661953
00:10:44.644 --> 00:10:49.889
algorithms. So in the data,
we store the information.

NOTE Confidence: 0.881528258323669

84344b03-1a6f-451e-bea1-05c4716df596
00:10:50.520 --> 00:10:55.074
And then by the algorithm, we
analyze those information and we do

NOTE Confidence: 0.881528258323669

ce1ea71c-2c62-4146-8879-67a4a571aa70
00:10:55.074 --> 00:10:59.214
processing on those information.
And then finally, the result of

NOTE Confidence: 0.881528258323669

c0a0f9a4-e8f0-4d7c-8530-25bb78d81f9c
00:10:59.214 --> 00:11:03.354
the algorithm gonna be
represented as new data. So the

NOTE Confidence: 0.881528258323669

3370b0b2-4375-4e44-82d5-2eb8623d033a
00:11:03.354 --> 00:11:07.080
input information and the output
information of the

NOTE Confidence: 0.881528258323669

d565825e-62dc-4595-a278-7bcb3290e98c
00:11:07.080 --> 00:11:08.736
processing are both data.

NOTE Confidence: 0.870796918869019

4d021688-d5ac-48a8-8935-427dc077b1d6
00:11:10.030 --> 00:11:14.386
The algorithm is that part of
the program that does the steps,

NOTE Confidence: 0.870796918869019

d9bbeb7b-fda3-4c64-8d9c-175def405d21
00:11:14.386 --> 00:11:18.742
accessesing the human being or
to the computer system to determine what

NOTE Confidence: 0.870796918869019

46bd0e3e-ebff-4b88-85ca-9aa489f2266b
00:11:18.742 --> 00:11:21.283
action must be taken on top of

NOTE Confidence: 0.913306593894959

08d0d9a3-5549-4029-902a-d7e9afffbb9d
00:11:21.283 --> 00:11:24.940
the data. So.

NOTE Confidence: 0.891457200050354

48cb8db9-e72d-4805-b48d-3ed6c5eef0bd
00:11:25.820 --> 00:11:30.825
But we want to take those steps
and those processing on the data

NOTE Confidence: 0.891457200050354

07ccc101-9d46-4948-bf8e-dd2e584db126
00:11:30.825 --> 00:11:35.445
by machine. Or here's the main
task: we want to design a

NOTE Confidence: 0.815576255321503

42e72de1-842d-4b0e-985d-4f2f3f97842a
00:11:35.445 --> 00:11:40.060
computer system. We already
learn how to design a

NOTE Confidence: 0.815576255321503

d9a4a766-ada9-4f25-8b3e-83503ff9a05d
00:11:40.060 --> 00:11:41.900
combinational logic or

NOTE Confidence: 0.863448858261108

30479a65-992a-4dc0-965c-aebdf357858b
00:11:41.900 --> 00:11:45.340
combinational circuit to do
some additions or

NOTE Confidence: 0.863448858261108

78d57478-03c8-4947-8966-2a9885cd454d
00:11:45.340 --> 00:11:48.960
subtractions or any other operations, I
mean divisions. Then we said

NOTE Confidence: 0.863448858261108

9d72d087-a771-49e6-82a7-536cdbcefb86
00:11:48.960 --> 00:11:52.218
that we need to store
information. So we designed a

NOTE Confidence: 0.863448858261108

8a0786fb-0cf5-4327-81a9-248539c39927
00:11:52.218 --> 00:11:55.476
sequential logic to store
information and now we want

NOTE Confidence: 0.863448858261108

0008ac11-20f4-47d2-9964-3e88330174bf
00:11:55.476 --> 00:11:59.096
to put them together to
design a computer system. So

NOTE Confidence: 0.863448858261108

4b686b8c-0954-4ee5-8d44-fc4f1aa75879
00:11:59.096 --> 00:12:00.906
this is the main problem.

NOTE Confidence: 0.892278552055359

b639b4c3-7e3c-4212-b6f3-c2a6ed2894f1
00:12:02.460 --> 00:12:09.214
The first, 
one of the first actually. One

NOTE Confidence: 0.892278552055359

ed456f52-5847-407e-966f-134b6edc711a
00:12:09.214 --> 00:12:11.529
of the first persons that

NOTE Confidence: 0.900598645210266

2a32b833-4746-4d95-a986-506019038718
00:12:12.180 --> 00:12:18.450
proposed building a system
or a machine that does the

NOTE Confidence: 0.833949208259583

0c0bd9ef-80c9-4a1a-bc55-585b57b05101
00:12:18.450 --> 00:12:22.784
task for us to solve a problem
was John von Neumann.

NOTE Confidence: 0.874195277690887

f3399704-c8b3-422b-9919-29a9a210e593
00:12:23.800 --> 00:12:27.301
As you see here, he was a
mathematician, physicist,

NOTE Confidence: 0.874195277690887

3284e668-e4ea-405a-bcee-62b009e5c1b7
00:12:27.301 --> 00:12:30.413
computer scientist, and engineer.
As you can see,

NOTE Confidence: 0.790436387062073

7907b77e-be62-4a5d-8e99-54a0fbadccd5
00:12:30.980 --> 00:12:33.380
he was a

NOTE Confidence: 0.824647009372711

bb963e5b-949e-4a64-8ea1-25b63adbcbbd
00:12:34.000 --> 00:12:36.230
scientist in many fields.

NOTE Confidence: 0.841465592384338

2421a96b-a2af-4222-8b13-c360475a8bb7
00:12:36.750 --> 00:12:41.946
And one thing is that he came up with is
called polymath, meaning that

NOTE Confidence: 0.841465592384338

3dfb62e6-4768-436d-b683-8f9f2bc24887
00:12:41.946 --> 00:12:46.276
because of his interest on
application of the pure science,

NOTE Confidence: 0.841465592384338

c7705915-a43c-4260-9f45-96836c028ce2
00:12:46.276 --> 00:12:49.740
in his whole life, he

NOTE Confidence: 0.870362401008606

11335832-f866-4759-9d4f-2201cc09ae1d
00:12:49.740 --> 00:12:56.030
tried to put all the pure math
in mathematics or physics into

NOTE Confidence: 0.870362401008606

389ea436-1134-4865-83b0-77adab52d361
00:12:56.030 --> 00:13:00.940
applied sciences to do
practical things, so

NOTE Confidence: 0.870362401008606

27c88563-838a-46c9-b10c-dbcafb0353ac
00:13:00.940 --> 00:13:06.832
that's why he was an engineer. He
created a lot of inventions and

NOTE Confidence: 0.870362401008606

051ac479-d6ba-4211-9bae-dea3f8985c59
00:13:06.832 --> 00:13:10.269
contributed to mathematics,
physics, economy, computing and

NOTE Confidence: 0.870362401008606

216effa6-aecb-45e9-97fd-88f7d0067725
00:13:10.269 --> 00:13:17.143
statistics. So he was a kind of
genius. And also he did a lot of

NOTE Confidence: 0.870362401008606

43e4279f-3dd9-428c-af1f-c2602139098d
00:13:17.143 --> 00:13:21.071
contribution to many fields. In the
computing field he proposed

NOTE Confidence: 0.856899321079254

c02ed0d1-8609-4158-a6d6-474682c5ecd1
00:13:21.130 --> 00:13:24.020
an architecture for a computer

NOTE Confidence: 0.862292766571045

04ab8ff3-7645-46ea-893e-fc48aae7feda
00:13:24.020 --> 00:13:29.240
system. So for this task, I mean
designing a computer system, we

NOTE Confidence: 0.862292766571045

58b9c0e0-2da1-45e6-bbe2-7d2950503d8f
00:13:29.240 --> 00:13:33.827
want to follow his architecture
or his proposal, which

NOTE Confidence: 0.862292766571045

07706ebb-55d3-44e0-94ad-f4eee0dc2401
00:13:33.827 --> 00:13:39.248
is one of the simplest system
for computers. Nowadays, we have

NOTE Confidence: 0.862292766571045

97cd60fd-2a5b-431f-835a-4a67870748da
00:13:39.248 --> 00:13:42.167
more complex computer systems
based on different

NOTE Confidence: 0.862292766571045

45ac8ac6-27ba-4ca8-818a-702cb0d0c5a4
00:13:42.167 --> 00:13:47.171
architectures. But for the first one,
for this start, we want to start

NOTE Confidence: 0.862292766571045

9099a41c-f956-49b7-8fbb-12e2faff6d92
00:13:47.171 --> 00:13:50.924
with this most simplest one,
which is Von Neumann

NOTE Confidence: 0.888003647327423

03c22274-2115-4fb3-890f-2caf85b9ba10
00:13:50.924 --> 00:13:56.618
architecture. And here is the
architecture. So if you are

NOTE Confidence: 0.888003647327423

126f09d7-4899-405f-b171-8b250b70dfd2
00:13:56.618 --> 00:13:59.510
given a problem among all the

NOTE Confidence: 0.85749489068985

552ab474-61d9-4182-92a9-caae96707cc1
00:13:59.510 --> 00:14:05.230
problem sets. If you are given
a problem that is already proved that

NOTE Confidence: 0.85749489068985

1d89cdc6-8e67-464a-9401-61ce0bdb31d8
00:14:05.230 --> 00:14:09.410
it can be solve by programming or
by a computer system, we write a

NOTE Confidence: 0.85749489068985

b028410a-b85c-4e41-afeb-53fdbf736454
00:14:09.410 --> 00:14:12.450
program that has two parts:
data and algorithm.

NOTE Confidence: 0.837358117103577

b79628dd-9973-4392-ad52-20234a2587ea
00:14:14.200 --> 00:14:20.164
Von Newman says that we need a
memory unit to store the data

NOTE Confidence: 0.837358117103577

8bdcae29-ae9f-4c41-a84c-226d9087e8a2
00:14:20.164 --> 00:14:24.850
first of all. So basically when
you define some variable

NOTE Confidence: 0.837358117103577

69752482-fd59-43ac-8647-692541b6d686
00:14:24.850 --> 00:14:29.536
in C or C++ to store some
information, you are introducing

NOTE Confidence: 0.837358117103577

d2416ec1-927e-48f7-b28f-8864dc56567e
00:14:29.536 --> 00:14:35.074
an area to store some data in the
memory. So we need a memory unit

NOTE Confidence: 0.837358117103577

674b8a47-bb7b-42ba-8e5e-297c258ab4fe
00:14:35.074 --> 00:14:39.334
to install this data, for instance,
the variable A or variable B.

NOTE Confidence: 0.882694065570831

a3609d96-cf27-402c-85ec-590d4293280b
00:14:39.900 --> 00:14:44.856
And these are the inputs. Also,
you need to allocate some memory

NOTE Confidence: 0.882694065570831

91f51a75-1e00-4437-a87a-9011927c1b36
00:14:44.856 --> 00:14:47.334
or you have to store the

NOTE Confidence: 0.878262877464294

c37a8ca8-6f0b-4aa6-8b24-ff077ad57f40
00:14:47.334 --> 00:14:51.263
results in C. Whatever
you wanted to do on top

NOTE Confidence: 0.878262877464294

f1253b68-60c2-424d-bf86-790e9ebd0002
00:14:51.263 --> 00:14:55.102
of the A and B, you want to
store the result as C.

NOTE Confidence: 0.867518901824951

96461bb9-55ef-44b4-b980-d784d90df30e
00:14:56.380 --> 00:15:00.930
So you need memory to store
the input and output as the

NOTE Confidence: 0.90440845489502

3a537055-c39d-407a-bb23-42b955a5bb62
00:15:00.930 --> 00:15:05.850
data. Regarding the algorithm,
you need to know the steps that you have to

NOTE Confidence: 0.90440845489502

7da88995-0372-4bb8-80a0-7eec4eb2ebaf
00:15:05.850 --> 00:15:11.010
apply on the data in order to do
the calculation. For instance,

NOTE Confidence: 0.90440845489502

cf06da92-b630-41c4-a2d5-325ebc5c7d4e
00:15:11.010 --> 00:15:16.170
if you want to add 2
integer numbers, you have to

NOTE Confidence: 0.90440845489502

939cf447-2892-45a1-a610-b8bb0598b8c0
00:15:16.170 --> 00:15:20.470
write some statements or
instructions, so that part of the

NOTE Confidence: 0.90440845489502

3a77eef2-ef0e-4d64-a229-426bb4d9671c
00:15:20.470 --> 00:15:24.770
algorithm is called coding or
instructions. That part also must

NOTE Confidence: 0.90440845489502

38099ae9-ef65-4dcf-aeb5-27fff858c07a
00:15:24.770 --> 00:15:26.060
be stored somewhere.

NOTE Confidence: 0.881943345069885

aaeba5a3-40fc-479c-a324-282391125462
00:15:26.660 --> 00:15:30.720
That place is the memory, so we
have to not only store the data,

NOTE Confidence: 0.881943345069885

12762efd-59cf-40a4-a3ce-5261f0bd453c
00:15:30.720 --> 00:15:31.880
but also the instructions.

NOTE Confidence: 0.886667549610138

6931c2f2-7950-4c3a-9962-d30032bfbc10
00:15:33.000 --> 00:15:37.169
Also, when we store the
instruction or the code, we have

NOTE Confidence: 0.886667549610138

5421d26f-c70f-4edf-8cdc-3f6c8a575bc3
00:15:37.169 --> 00:15:41.717
to design another unit to do the
actual instruction or the actual

NOTE Confidence: 0.886667549610138

b9407522-6a76-4f47-83e8-4305615bd1cd
00:15:41.717 --> 00:15:47.023
code. So here, we said that we
wanted to do the addition on top

NOTE Confidence: 0.886667549610138

f70b566f-5e31-4cf8-b9c9-8acd45c3057c
00:15:47.023 --> 00:15:49.676
of A and B and store the result on

NOTE Confidence: 0.859798192977905

4a35f42b-ba96-4416-987b-7ed185a22001
00:15:49.676 --> 00:15:56.210
C. So this is the statement.
What unit

NOTE Confidence: 0.859798192977905

c8a88002-76f8-4cfb-ab1e-9423c368b16b
00:15:56.210 --> 00:16:00.305
wants to actually accomplish
this addition and store the

NOTE Confidence: 0.859798192977905

1b2af400-53bc-4196-97bf-e48a2e68b6ea
00:16:00.305 --> 00:16:04.400
result? We need another unit,
which is called processor,

NOTE Confidence: 0.917744636535645

178b1f8a-f2a8-4326-ba2a-d6a37ef7dfc4
00:16:04.950 --> 00:16:07.632
to do the actual statement or

NOTE Confidence: 0.85862272977829

3e6c8c9f-2a71-496b-b8b3-2bd534857a0a
00:16:07.632 --> 00:16:11.338
instruction. So algorithm.
One part is the instruction

NOTE Confidence: 0.85862272977829

fd3741fd-976f-42d7-b00d-5b7853b09ab4
00:16:11.338 --> 00:16:15.586
you have to store in memory.
One part is the processor to

NOTE Confidence: 0.85862272977829

e7baa7ff-f451-4052-9209-bc3b7604e9be
00:16:15.586 --> 00:16:17.002
do the actual instruction.

NOTE Confidence: 0.901866436004639

64677074-6b34-4677-80d6-e70af3e18f43
00:16:18.790 --> 00:16:24.150
And there must be some
communication road or

NOTE Confidence: 0.901866436004639

60318d10-a842-4a26-b569-f679707d2631
00:16:24.150 --> 00:16:28.170
communication platform between
the memory and processor.

NOTE Confidence: 0.824045538902283

57021154-6cfa-42c9-8408-edae2df8d364
00:16:28.880 --> 00:16:34.000
So processor needs to find out
what's the value of A,

NOTE Confidence: 0.839358568191528

be21cee2-8573-4ed3-8b68-1786903a0fc9
00:16:34.660 --> 00:16:39.964
what's the value of B, and then
do the addition. So this addition

NOTE Confidence: 0.839358568191528

67b7dfeb-20ff-4ce9-93cf-0770c0e2788e
00:16:39.964 --> 00:16:44.452
happens at the processor, but
before that processor, you must first

NOTE Confidence: 0.839358568191528

89a52327-38dd-48c6-9063-c61b9d2ece2c
00:16:44.452 --> 00:16:50.164
fetch the value of A here, fetch
the value of B here and then

NOTE Confidence: 0.839358568191528

afde0a30-5f18-4dfd-8b94-4ab642f6c09a
00:16:50.164 --> 00:16:53.428
apply the addition. After
applying the addition, the

NOTE Confidence: 0.839358568191528

11781e20-008e-4cb1-a0e5-96c1389cc244
00:16:53.428 --> 00:16:57.916
processor must bring back the
result to the memory location C.

NOTE Confidence: 0.906219959259033

7342c10b-f4cb-43d3-a793-06aa13dd0a15
00:16:58.590 --> 00:17:03.120
So for this communication, we
need a bus or communication

NOTE Confidence: 0.906219959259033

7ffdf13f-0d3c-4d7c-bc8b-b657c1c59467
00:17:03.120 --> 00:17:04.932
platform between processor and

NOTE Confidence: 0.863916456699371

ea3119fb-aa47-4344-87c0-3b70a2077e5d
00:17:04.932 --> 00:17:11.087
memory. As the names actually
implies, bus is the vehicle that

NOTE Confidence: 0.863916456699371

0ea26f06-6122-4d6b-9141-32e63dd03a81
00:17:11.087 --> 00:17:15.794
does the transportation between
two locations, so any processing

NOTE Confidence: 0.863916456699371

3370fb54-c40c-4f73-805c-142f7d486f06
00:17:15.794 --> 00:17:20.501
needs to have a transformation between
memory to the processing unit,

NOTE Confidence: 0.863916456699371

cfa82579-8b1e-401c-8df3-e58439c0ea30
00:17:20.501 --> 00:17:23.116
and then back to the result.

NOTE Confidence: 0.868357837200165

60f900a7-a7fb-4b6a-bb0a-72ee7480508c
00:17:24.250 --> 00:17:28.122
This is called the computer,
so this is the Von Neumann

NOTE Confidence: 0.868357837200165

84d9c98a-fab7-413f-ab6c-c21dce23f127
00:17:28.122 --> 00:17:31.642
architecture: a memory unit, a
processing unit, and a bus in

NOTE Confidence: 0.868357837200165

5e4d4830-6407-4e47-b261-0e8c6df723a6
00:17:31.642 --> 00:17:35.162
order to communicate with the
memory and process. This is a

NOTE Confidence: 0.868357837200165

e0e6e90d-9685-43a9-985f-fbf86dd91210
00:17:35.162 --> 00:17:37.274
computer system. You want to build
this.

NOTE Confidence: 0.884426355361938

1ecd55b3-c1bf-4117-aafb-5ef9c0bbe090
00:17:38.720 --> 00:17:43.184
So these are the principles I
mean in written words. So

NOTE Confidence: 0.884426355361938

cde8f150-3c15-4e8e-8d51-fa69a3780f03
00:17:43.184 --> 00:17:46.532
basically, the data and
instruction must be both

NOTE Confidence: 0.884426355361938

b9d92fbf-7138-4ff8-8ec1-0c6bf36e86ea
00:17:46.532 --> 00:17:50.624
stored in main memory
units. We need a built-in

NOTE Confidence: 0.884426355361938

c5a8c45d-83fb-4f99-8e12-568a135e053c
00:17:50.624 --> 00:17:51.740
memory unit.

NOTE Confidence: 0.89380806684494

55db4a58-7450-431a-bdbd-6d955ef5cb56
00:17:52.380 --> 00:17:57.489
The second is that the memory
unit must be designed in a way

NOTE Confidence: 0.89380806684494

ae073a3a-c2d0-4c5e-b7c0-8b99a9fa26ef
00:17:57.489 --> 00:18:01.812
that it can be addressable by
location, meaning that here, if

NOTE Confidence: 0.89380806684494

60ccfdee-27a4-412b-9c64-7f13fc2da218
00:18:01.812 --> 00:18:06.528
the processor wants to fetch the
value of A, the processor must

NOTE Confidence: 0.89380806684494

01b49969-90f4-4d27-a6df-d5e3e7df36b1
00:18:06.528 --> 00:18:11.244
be able to find the memory
location that has the value of one

NOTE Confidence: 0.89380806684494

7511346a-42ab-4460-9f97-ac697975e22b
00:18:11.244 --> 00:18:12.423
for this location.

NOTE Confidence: 0.880518019199371

2a503b03-56c1-4e82-a950-337a2e3f1750
00:18:13.120 --> 00:18:16.904
And then the processor needs
to find the location for the

NOTE Confidence: 0.880518019199371

e98b94cd-2bfa-4b81-a2b7-793bf0995f6e
00:18:16.904 --> 00:18:21.032
variable B. So we have to
design a memory unit that can

NOTE Confidence: 0.880518019199371

932c327b-9881-4a3b-a6fa-15141cb14db0
00:18:21.032 --> 00:18:24.816
be addressable in
order to help the processor

NOTE Confidence: 0.880518019199371

f6642de4-9a24-459b-b012-bfa549fa0879
00:18:24.816 --> 00:18:26.536
to find a memory location.

NOTE Confidence: 0.89977765083313

ccf8353f-11b5-45d9-9877-3a120243c036
00:18:27.820 --> 00:18:29.746
And the third principle is this.

NOTE Confidence: 0.889736235141754

15a39033-d98e-4eca-9a5c-a2840adb0de1
00:18:30.400 --> 00:18:34.584
We execute the statements
sequentially step by step.

NOTE Confidence: 0.865067899227142

b590b9be-749c-4601-b60f-081c6b96ab5a
00:18:35.350 --> 00:18:41.694
So if you think of it, designing
a computer system that does the

NOTE Confidence: 0.865067899227142

09144fa1-472f-414e-a1e9-bea271754c67
00:18:41.694 --> 00:18:46.086
statements or the operation in
parallel, that's not Von

NOTE Confidence: 0.865067899227142

b11b167d-6267-4781-a40a-362b718ffbb1
00:18:46.086 --> 00:18:49.990
Neumann architecture. That's
another architecture. If you

NOTE Confidence: 0.865067899227142

fef96ef4-2cb7-45a1-b97b-c45cb98be3bc
00:18:49.990 --> 00:18:55.358
want to build a architecture
or computer system that is able

NOTE Confidence: 0.865067899227142

7f71451d-ee5c-4404-ac02-977031967e24
00:18:55.358 --> 00:19:00.238
to do these statements in a
pipeline, that's not Von

NOTE Confidence: 0.865067899227142

fb96d672-fe87-4d87-888a-4b9f25b902af
00:19:00.238 --> 00:19:05.118
Neumann architecture. So in the
next course, you're gonna see

NOTE Confidence: 0.867303431034088

20f2f91e-7a86-4400-8b74-74472dda483d
00:19:05.118 --> 00:19:08.115
different architectures for
executing the statements, but

NOTE Confidence: 0.867303431034088

0c4143d9-bc03-46bc-a3f8-6d18c1acc421
00:19:08.115 --> 00:19:12.125
for now, the simplest
architecture is just step by

NOTE Confidence: 0.867303431034088

78ef5dba-70c0-4f3b-8341-a676a5bfa383
00:19:12.125 --> 00:19:14.531
step, one statement at a time.

NOTE Confidence: 0.758310079574585

5185c26b-b360-470c-9fa9-f251117f9dd1
00:19:17.510 --> 00:19:24.780
Plus, along with the computer, which
has a memory, processor, and bus,

NOTE Confidence: 0.910569190979004

59ba2408-ef8a-489f-af38-7bbaed6d02ba
00:19:24.780 --> 00:19:28.908
there are other peripheral
devices that helps the

NOTE Confidence: 0.907812476158142

516c4027-93c9-4137-a14b-1437bccdbb29
00:19:28.908 --> 00:19:34.076
computation. One of the main devices is
the input/output devices or I/O

NOTE Confidence: 0.908204615116119

f7a09cb8-0c8a-45ff-bef9-71125ceacb6b
00:19:34.076 --> 00:19:38.622
devices. So basically by the lab
assignments, you know already

NOTE Confidence: 0.908204615116119

e957222a-8c47-44e1-a2e5-ca19d840cd34
00:19:38.622 --> 00:19:44.194
that if you want the user to
input the data, so if the data

NOTE Confidence: 0.908204615116119

feed0cdb-4823-4e50-904c-c671e7060f5a
00:19:44.194 --> 00:19:49.368
is not already in your program
and you want the user input your

NOTE Confidence: 0.908204615116119

8111b634-000b-448b-abcb-fb55458f0f3b
00:19:49.368 --> 00:19:54.542
data, you have to make a way for
your computer to interact with

NOTE Confidence: 0.760781526565552

032cbbab-d935-40d6-8dde-9d749e2e6cb4
00:19:54.542 --> 00:19:59.670
the user. So when you write the
scanner for, uh, for inputting

NOTE Confidence: 0.760781526565552

7f9cc9be-4269-4fe8-bfe1-6d0903b8bc7a
00:19:59.670 --> 00:20:03.320
the value for A or inputting the
value for B,

NOTE Confidence: 0.850497841835022

c9246037-635a-43ca-950d-cfb053e01721
00:20:03.830 --> 00:20:08.523
you assume that there
is some I/O device, for instance a

NOTE Confidence: 0.850497841835022

554f06ae-4917-4db4-ba54-9cbcc9f2b93f
00:20:08.523 --> 00:20:12.855
keyboard or mouse, for the user
in order to interact with your

NOTE Confidence: 0.850497841835022

12ef06a0-da30-4e78-b09f-7006b76d20c6
00:20:12.855 --> 00:20:16.826
program. Also, when you do the
addition and you store the

NOTE Confidence: 0.850497841835022

4a932855-9ac8-4f45-a6b0-1e402fa060e6
00:20:16.826 --> 00:20:21.158
result and you want to show
the results of the user, you

NOTE Confidence: 0.850497841835022

a00f5054-57e8-4821-b0f4-fb462570409e
00:20:21.158 --> 00:20:25.490
have to think of a kind of
output device. For instance, the

NOTE Confidence: 0.850497841835022

224e7880-afbd-4030-803e-7c363bcce615
00:20:25.490 --> 00:20:29.100
monitor or printer. So printers
and monitors are those devices

NOTE Confidence: 0.850497841835022

c4f6c3bf-15d4-4e1a-961f-1d0cfb0b13ae
00:20:29.100 --> 00:20:34.154
that outputs the result to the
user. So the I/O devices is for

NOTE Confidence: 0.930443525314331

7f43fad1-48c4-4abf-98f5-81dc4e83a541
00:20:34.154 --> 00:20:35.769
the interaction with the user.

NOTE Confidence: 0.889929354190826

090b3840-aa39-40cf-a2da-05e0a2fedab0
00:20:36.990 --> 00:20:41.830
Also, you need to create another
bus to transfer the information

NOTE Confidence: 0.889929354190826

dfab240d-3341-43e8-8759-3b59dc7d4856
00:20:41.830 --> 00:20:45.350
between processor and memory to
the I/O devices.

NOTE Confidence: 0.879906356334686

ae6d5a11-99c6-41db-8d75-5a95f55d9350
00:20:45.920 --> 00:20:50.768
Also, if you run out of
electric power, you don't want

NOTE Confidence: 0.879906356334686

27a8bf95-8d61-4b19-b947-e44b5dfe2ed7
00:20:50.768 --> 00:20:55.212
to lose your processing or your
outputs. You wanna store it

NOTE Confidence: 0.879906356334686

6a66008d-5b8b-4f81-a70f-cb9ec7379b98
00:20:55.212 --> 00:20:58.040
forever or as long as I mean

NOTE Confidence: 0.869323074817657

b5aeb5ac-b6cf-4be8-b5b6-dfb68f878685
00:20:58.040 --> 00:21:03.684
you can. So there are some
devices that stores the

NOTE Confidence: 0.869323074817657

5f77f8cf-0e92-4100-bb4a-89b122e4d70f
00:21:03.684 --> 00:21:07.172
information without electric
power. For instance, if you

NOTE Confidence: 0.869323074817657

4c040be9-f963-45c0-a566-35e4d1cc5e22
00:21:07.172 --> 00:21:12.404
write your output in paper by a
printer, you are kind of making

NOTE Confidence: 0.869323074817657

6b53f348-67e6-416e-9959-1df3837344c5
00:21:12.404 --> 00:21:17.636
the data permanent, so you need
to add some devices such as a

NOTE Confidence: 0.906617522239685

55a21a97-e693-4731-bffd-38326f814bb8
00:21:17.636 --> 00:21:22.930
flash drive, a hard disk drive,
or other devices that can store

NOTE Confidence: 0.906617522239685

426442ac-7036-44ae-897b-49d405007195
00:21:22.930 --> 00:21:24.394
the information without

NOTE Confidence: 0.90605640411377

d004dbbb-ba7b-49c7-a218-6e71290f3acb
00:21:24.394 --> 00:21:29.037
electric power. For this one,
you have to

NOTE Confidence: 0.90605640411377

64d45c11-bbd0-4737-a7d5-3535090b8aa3
00:21:29.037 --> 00:21:32.034
create another bus to make a
transformation between the

NOTE Confidence: 0.90605640411377

5043c49a-44f6-4901-9022-a22c4aafc1fe
00:21:32.034 --> 00:21:33.366
computer and these devices.

NOTE Confidence: 0.798085570335388

736bcadb-f304-47ea-a3e5-fb60984f24ad
00:21:34.000 --> 00:21:38.400
So a computer plus I/O devices,
plus permanent storage is

NOTE Confidence: 0.798085570335388

28b936ba-be98-42d4-87d6-1fb2f5677dfe
00:21:38.400 --> 00:21:39.720
called a computer system.

NOTE Confidence: 0.906080663204193

16ec52f1-c6dd-49b6-9786-b6da6cfc20c8
00:21:40.770 --> 00:21:43.778
That's the difference between
computer and computer system.

NOTE Confidence: 0.835547745227814

43514a51-434e-410a-855f-ba8ac5bd3caa
00:21:44.750 --> 00:21:47.809
Today, in today's
architecture, they usually

NOTE Confidence: 0.835547745227814

9fc24fba-357c-4c9b-a15a-54d2bdf12aab
00:21:47.809 --> 00:21:51.305
considered the
permanent storage as an I/O

NOTE Confidence: 0.835547745227814

628326a5-25dd-4a5d-8bc4-a51bca2e51c4
00:21:51.305 --> 00:21:56.549
device. So if you have a flash
drive or hard disk drive in

NOTE Confidence: 0.835547745227814

f186882f-5100-4fee-83fb-49c3fde4e0c6
00:21:56.549 --> 00:22:01.356
order to store the information
forever, this is a kind of I/O.

NOTE Confidence: 0.835547745227814

faa55c6d-a07a-4349-bf92-edc711bce36d
00:22:01.356 --> 00:22:06.600
So you could simply say that a
computer with an I/O device and

NOTE Confidence: 0.835547745227814

8f31b05d-013d-41fe-a262-5f981eae646c
00:22:06.600 --> 00:22:10.533
including in the I/O devices,
a pernament storage, you

NOTE Confidence: 0.835547745227814

a967d01d-6e61-409a-a7db-0a8504379a96
00:22:10.533 --> 00:22:12.718
can call this a computer system.

NOTE Confidence: 0.808631658554077

63f9e10e-9838-4a4a-af56-b865812acc90
00:22:16.060 --> 00:22:20.860
Yes, correct Abdulwahhab, yes.
I mean the SSD, hard drives, or

NOTE Confidence: 0.808631658554077

a2861950-453f-4b2f-86ba-fd1112b0b12c
00:22:20.860 --> 00:22:24.860
the flash drives. All of the
hard disk drives. All are

NOTE Confidence: 0.808631658554077

6f26113b-61c7-4282-bbef-e4e76fd1bae7
00:22:24.860 --> 00:22:29.660
permanent storage and nowadays with
our technology, 

NOTE Confidence: 0.808631658554077

237b71ed-b370-457d-aaf9-f78c24786e75
00:22:29.660 --> 00:22:32.060
we can consider that an I/O device

NOTE Confidence: 0.863684833049774

b43d684e-98b2-41bf-9f0d-d11297d3c721
00:22:32.920 --> 00:22:36.250
because you can assume they are
are output devices, so you store

NOTE Confidence: 0.863684833049774

e9675f9f-bdd4-4a31-a3a2-0d2669475b0b
00:22:36.250 --> 00:22:39.913
the information or you can
read from them. So you can

NOTE Confidence: 0.863684833049774

a9108e7f-d2ff-4399-914f-c6bb042522f7
00:22:39.913 --> 00:22:43.909
assume that they are input, so
the storage can act as an

NOTE Confidence: 0.863684833049774

fa67cb90-e38b-4d67-a1a8-d8824b5413bc
00:22:43.909 --> 00:22:44.908
input or output device.

NOTE Confidence: 0.808731973171234

cd51f0bc-2eb7-45f9-ae25-e52b5a934057
00:22:46.470 --> 00:22:51.762
So in the C language, if you wanted
to store the

NOTE Confidence: 0.808731973171234

a6da434d-161b-4d90-a073-91e9dfcc6e97
00:22:51.762 --> 00:22:56.298
information in a file, you have
to use these commands: fprintf,

NOTE Confidence: 0.808731973171234

797cf084-7940-45af-94c8-b75129f3e57e
00:22:56.298 --> 00:23:01.212
fscanf, and etc to read from a file or to
print out to a file.

NOTE Confidence: 0.715488076210022

c022de82-3b50-4110-b1e5-c7b35c011279
00:23:01.760 --> 00:23:06.410
scanf and printf. scanf reads
input from keyboard.

NOTE Confidence: 0.702185928821564

125c3572-5cb0-4ff3-8cd8-9194cfcd61fb
00:23:07.060 --> 00:23:09.250
printf outputs to the monitor.

NOTE Confidence: 0.813120603561401

ec98976d-53d0-4a47-a465-a9882858cd88
00:23:09.770 --> 00:23:15.139
fprintf prints to the hard disk
drive or a file, whereever the

NOTE Confidence: 0.813120603561401

c1a43bc3-f60f-45c7-912c-6876b8539264
00:23:15.139 --> 00:23:17.617
file is. The scanf reads from

NOTE Confidence: 0.930310964584351

8a240d4a-f074-4bf7-b0d8-e5a6a2f52d34
00:23:17.617 --> 00:23:24.496
the storage. So this
is the final product.

NOTE Confidence: 0.884629189968109

77a6df89-bde0-47ff-b814-594a06891056
00:23:24.500 --> 00:23:29.996
We design our computer system
and we give it to the engineers.

NOTE Confidence: 0.884629189968109

645262d9-b3b0-4420-ac43-115bfdac8eaa
00:23:29.996 --> 00:23:33.202
For instance, electrical
engineers or computer engineers

NOTE Confidence: 0.884629189968109

4c0b9e06-385f-40ff-bd90-46fb836c7c2d
00:23:33.202 --> 00:23:39.156
and they build this for us. So
this is called the main board, which

NOTE Confidence: 0.884629189968109

96227732-430e-48b6-9a43-036b9283763c
00:23:39.156 --> 00:23:43.278
is basically the bus. Different
buses between different devices.

NOTE Confidence: 0.884629189968109

93f8d0f8-8843-4779-9e2b-a6ef8bf601b8
00:23:43.278 --> 00:23:47.858
In this main board, which is
basically from our perspective,

NOTE Confidence: 0.884629189968109

50f0849e-eb01-4c16-9481-ac57d949ae2d
00:23:47.858 --> 00:23:53.354
this is a bus or communication
platform. We have a place that

NOTE Confidence: 0.884629189968109

b2971293-269a-40e7-adba-4a77cf45841f
00:23:53.354 --> 00:23:55.186
we can attach the processor to.

NOTE Confidence: 0.870286583900452

cd9b0e8e-027f-47d2-8e0e-7531bf8d7a19
00:23:56.230 --> 00:23:59.684
We we have a place that we can
attach the memory units to.

NOTE Confidence: 0.869978189468384

1063aa8c-1e8d-4ac3-baa7-e62294242c1b
00:24:00.480 --> 00:24:04.089
And this main board provides a
communication between the

NOTE Confidence: 0.869978189468384

12c72742-8bfb-4627-a983-a9256bc70430
00:24:04.089 --> 00:24:05.693
processor and memory store.

NOTE Confidence: 0.862842857837677

67350ca9-204f-4ad6-8875-0e2cc6ab8905
00:24:07.000 --> 00:24:11.490
Also, this main board has a
power connection, meaning that it

NOTE Confidence: 0.862842857837677

eeda7637-c849-40cd-8144-bbf2d92267a1
00:24:11.490 --> 00:24:16.429
provides power, electrical power
to the whole system, and as you

NOTE Confidence: 0.862842857837677

992cf68a-853c-4635-af73-d38844285b24
00:24:16.429 --> 00:24:21.817
can see, there are some part of
the main board for communication

NOTE Confidence: 0.862842857837677

26151869-30fe-41d0-a264-951535c39119
00:24:21.817 --> 00:24:26.307
with I/O devices. These are for
keyboards, monitors, flash drives.

NOTE Confidence: 0.862842857837677

f4b9a46c-6659-47a6-aeb5-70b6a7a02e9c
00:24:26.307 --> 00:24:30.348
These are the communication with
for instance, network interfaces

NOTE Confidence: 0.862842857837677

c9ce51fa-79e2-49de-b3eb-66c435863401
00:24:30.348 --> 00:24:35.736
or with the monitor VGA on
graphic cards, and these are the

NOTE Confidence: 0.862842857837677

75ea6f99-eb36-4db4-a6cc-b551d6bb27f7
00:24:35.736 --> 00:24:37.083
communication ports for

NOTE Confidence: 0.812746405601501

dad1fd92-74a7-49ce-adc1-461d6445fc38
00:24:37.100 --> 00:24:40.284
determining where the storage is.
For instance, flash drives.

NOTE Confidence: 0.812746405601501

ab85c8f8-db16-40c2-b37a-f0bd8c0890c6
00:24:40.284 --> 00:24:43.866
Sorry, hard disk drives.
These are the SATA ports

NOTE Confidence: 0.812746405601501

7c3e3079-0add-4a33-9d73-ebf417a86827
00:24:43.866 --> 00:24:45.856
for the hard disk drives.

NOTE Confidence: 0.830131351947784

478cee04-7c2a-47e8-af87-1f37df670c17
00:24:46.980 --> 00:24:49.086
These are the PCI Express ports.

NOTE Confidence: 0.86371785402298

0562525a-7db2-482c-b5fc-ba27d0c3d86d
00:24:49.890 --> 00:24:54.786
So basically the main board is a
communication bus, and it has

NOTE Confidence: 0.86371785402298

f77a17bb-db1a-4b3c-a971-988166c2e25e
00:24:54.786 --> 00:24:57.234
some places to attach the units.

NOTE Confidence: 0.885147929191589

0bed06f3-6b5d-4ff6-ad1f-908efe4da875
00:24:58.060 --> 00:25:03.507
Today, we gonna build the memory
unit to be attached to the main

NOTE Confidence: 0.885147929191589

1ab276ae-c449-432c-9895-c9d85d8624ef
00:25:03.507 --> 00:25:08.535
board. Next lecture, we gonna
build CPU or the processor to be

NOTE Confidence: 0.885147929191589

ebb19ed7-a0f1-4fc5-a817-180d9691f138
00:25:08.535 --> 00:25:13.563
attached to this. In the next
course, you're gonna see how to

NOTE Confidence: 0.885147929191589

4d2b7dcc-06ae-4de0-82d1-4fc622ee3899
00:25:13.563 --> 00:25:15.239
build I/O devices.

NOTE Confidence: 0.903909802436829

0fe7336c-1c91-4959-9947-9e65fb71e291
00:25:17.950 --> 00:25:19.918
Any questions so far?

NOTE Confidence: 0.890480875968933

8ab56fbb-ec68-4f8b-8a4a-01457dc66809
00:25:24.260 --> 00:25:29.399
So our task today is
building the memory units of

NOTE Confidence: 0.890480875968933

2b0fbea8-fc0a-4a28-9df6-fac3cf5d99f5
00:25:29.399 --> 00:25:31.112
the computer system.

NOTE Confidence: 0.864637613296509

66fcf270-4b71-4b65-bd08-6dc92e311f9e
00:25:33.920 --> 00:25:37.380
Next lecture, we are gonna build
the processor unit of the

NOTE Confidence: 0.874236404895782

01d9ff25-17f9-4d9a-b669-170725574f45
00:25:37.380 --> 00:25:42.960
computer system. And then if you
continue this course to the next

NOTE Confidence: 0.874236404895782

066ad989-6759-4035-ba6c-d4348109f9c7
00:25:42.960 --> 00:25:45.522
semester, you're gonna build a more

NOTE Confidence: 0.822148323059082

2b0dee0d-3edf-4792-836b-1771b4bcaa86
00:25:45.522 --> 00:25:49.210
complex processor plus
I/O devices.

NOTE Confidence: 0.892152190208435

15f6c03f-ca4d-45e1-89fd-32c0e588513f
00:25:50.840 --> 00:25:54.748
Any questions so far?

NOTE Confidence: 0.84659206867218

7829a066-264e-414c-ac9a-1c8210679911
00:25:57.670 --> 00:26:04.755
Yes, but when we said build
them, as we said, we design them,

NOTE Confidence: 0.84659206867218

ced76eaa-d69a-473c-9d91-a179385bea58
00:26:04.755 --> 00:26:10.750
so we don't actually physically
build them. So let's go back this

NOTE Confidence: 0.84659206867218

2f02258d-3e1f-4da4-8e26-c4b434f60dea
00:26:10.750 --> 00:26:18.380
main board. So we just design it using
paper or by pen,

NOTE Confidence: 0.84659206867218

3bbc7232-38d9-430e-bc20-372cfe7a2dba
00:26:18.380 --> 00:26:25.465
like a sketch. Like I mean
the design of an apartment or a

NOTE Confidence: 0.890849351882935

4c67f32b-a292-4e69-abe0-3884d8ce2033
00:26:25.465 --> 00:26:29.970
building. But the actual
physical product gonna be

NOTE Confidence: 0.890849351882935

a38da569-e679-4c79-9eb1-26d9b5ad540e
00:26:29.970 --> 00:26:33.330
built by the engineers. For
instance, electrical

NOTE Confidence: 0.890849351882935

7df16e19-0a62-44fc-b331-df00e2bff1c7
00:26:33.330 --> 00:26:35.250
engineers or computer
engineers.

NOTE Confidence: 0.793772280216217

c657304b-ff56-4260-b9e8-cb7729a43d4d
00:26:36.390 --> 00:26:42.660
But by building, we mean
designing by sketch, yes.

NOTE Confidence: 0.891575932502747

525e8445-fe16-4365-8707-354a7a25fa14
00:26:43.830 --> 00:26:47.160
So let's start designing memory.

NOTE Confidence: 0.837620794773102

3c5cef8a-27b2-412f-9d37-91eff2117500
00:26:48.400 --> 00:26:53.218
No, no, no. Assembling
means attaching these

NOTE Confidence: 0.837620794773102

0f9db8cf-eda3-41c9-adb2-21b78065e317
00:26:53.218 --> 00:26:58.912
units to the main board. So I
believe there are some labs in

NOTE Confidence: 0.837620794773102

631f61df-b87d-4d30-b971-42b1a1eee9c5
00:26:58.912 --> 00:27:04.168
the school that teach
you how to assemble the units.

NOTE Confidence: 0.852278470993042

074ce64a-4d5a-495c-9167-641af7207305
00:27:04.810 --> 00:27:09.790
But here we want to design the
units, and then we give it to the

NOTE Confidence: 0.852278470993042

b18e857a-cc04-4eda-8ccb-c2589b2d13a0
00:27:09.790 --> 00:27:13.110
manufacturers, for instance. Oh,
one thing I mean, for instance,

NOTE Confidence: 0.852278470993042

5d241d22-5f56-414d-9022-0a0a4700feda
00:27:13.110 --> 00:27:16.762
there are two companies that
build the processors: Intel and

NOTE Confidence: 0.852278470993042

0bda9251-a81a-45ae-9a4d-86888ab06cda
00:27:16.762 --> 00:27:21.742
AMD. So we design and we give it to
Intel or AMD. They build the

NOTE Confidence: 0.852278470993042

fd4ea48a-06e4-46ed-a8b1-1e6d6392f426
00:27:21.742 --> 00:27:24.730
CPU or processors. Also there
are different companies that

NOTE Confidence: 0.852278470993042

7c69421a-2f77-484b-89a0-41749cebaead
00:27:24.730 --> 00:27:28.714
build the memories units. So we
designed the memory and 

NOTE Confidence: 0.852278470993042

75a91237-773a-434f-850b-9d5a49db7e04
00:27:28.714 --> 00:27:32.034
we give them to those
companies. They build the

NOTE Confidence: 0.890261232852936

97b76f43-6ce7-4dde-bdab-7554fa205f3f
00:27:32.034 --> 00:27:37.166
memories and you go to the market
and you buy this product, and

NOTE Confidence: 0.890261232852936

0828599f-8287-4c8c-932d-90771a6840f4
00:27:37.166 --> 00:27:41.798
then you attach it to the main
board. So this is called

NOTE Confidence: 0.878376960754395

c8da7aeb-9306-4a16-b53b-b5cad59781f9
00:27:41.798 --> 00:27:44.827
assembling. There are some
labs where they teach you. This

NOTE Confidence: 0.878376960754395

b8e1f1c5-0915-484f-8276-4d6474c7a4d9
00:27:44.827 --> 00:27:48.050
is a very easy task for a
computer science student, I mean

NOTE Confidence: 0.878376960754395

f2540cd6-b590-4eb2-acc5-577308533448
00:27:48.050 --> 00:27:49.222
to assemble a computer system.

NOTE Confidence: 0.849091112613678

6f596973-b0b4-4ca5-ad4e-8c26c7ce5464
00:27:51.310 --> 00:27:55.457
But this is a more complex
task, I mean designing the

NOTE Confidence: 0.849091112613678

72d86b70-cc99-417d-9e4a-0b8070933dee
00:27:55.457 --> 00:27:56.965
memory or designing the processor.

NOTE Confidence: 0.873805165290833

8fff8b34-7e4d-4fc4-80d8-7c8522dc3113
00:27:57.530 --> 00:28:01.646
So basically the goal is we
want to build some unit that

NOTE Confidence: 0.873805165290833

39555eff-76a6-476f-9092-f2b2a3cdb720
00:28:01.646 --> 00:28:06.105
stores data and code. So when
we need to store, we have

NOTE Confidence: 0.873805165290833

44d5e08e-c25f-4402-a6c3-181a2ca733cc
00:28:06.105 --> 00:28:07.820
to deal with flip flops.

NOTE Confidence: 0.926256060600281

458edae4-2097-44a4-b16c-2a13dc3fcc45
00:28:09.320 --> 00:28:10.528
One thing is that.

NOTE Confidence: 0.878152549266815

8a778e9e-827b-49c4-b0b9-c69cd1551689
00:28:11.560 --> 00:28:16.120
All the data or all types of
information we are dealing with

NOTE Confidence: 0.878152549266815

9679a69d-cd11-4394-a614-ce4849e0ea7d
00:28:16.120 --> 00:28:20.300
must be in one way or another,
represented by numbers. For

NOTE Confidence: 0.878152549266815

850a1e36-0adb-4f02-bcbb-d5278fd00976
00:28:20.300 --> 00:28:24.480
instance, if you wanna store or
analyze images, you have to

NOTE Confidence: 0.878152549266815

e3c67176-71bc-4feb-b9ce-49a7c542f6fd
00:28:24.480 --> 00:28:28.280
represent the image by numbers. If
you want to analyse audio

NOTE Confidence: 0.878152549266815

d5758b95-d7ae-486c-9eea-5e30320e6109
00:28:28.280 --> 00:28:32.460
signals, for instance, human
speech, you have to represent or

NOTE Confidence: 0.878152549266815

61db5747-eab1-45b8-85b9-d8cd96d2a6e8
00:28:32.460 --> 00:28:37.780
find a way to represent it by
numbers. As we said in the first

NOTE Confidence: 0.878152549266815

01c2b7e5-a745-43e0-9796-f503fe20f052
00:28:37.780 --> 00:28:39.300
lecture, any type of

NOTE Confidence: 0.845234513282776

3c86d5f0-f79c-4859-a957-55774ae4da77
00:28:39.300 --> 00:28:43.891
information: discrete or
continuous, you have to make it

NOTE Confidence: 0.845234513282776

13b16d0d-b32d-4934-8263-f1a8a7de0b6a
00:28:43.891 --> 00:28:45.487
discreet and represented by

NOTE Confidence: 0.905356645584106

d4c2e4fc-b91f-4412-bc27-460210d31aa3
00:28:45.487 --> 00:28:47.914
numbers. And because we are

NOTE Confidence: 0.751001954078674

84b4be23-e1bf-4212-9216-d0f8d560bccc
00:28:47.914 --> 00:28:53.160
building a computer system that
works based on binary systems, and

NOTE Confidence: 0.751001954078674

afa568b5-a555-4a01-ae63-2d53664e5356
00:28:53.160 --> 00:28:58.854
we said why. Why did we choose
the binary system? Why didn't

NOTE Confidence: 0.751001954078674

51100f9d-681a-43a8-9181-8e6c37733b77
00:28:58.854 --> 00:29:01.044
choose the octal system or

NOTE Confidence: 0.862147927284241

4e58fb9c-6b18-4f4a-a43c-aec7f512b8b7
00:29:01.044 --> 00:29:05.684
hexadecimal system? Because the
binary system is more robust

NOTE Confidence: 0.862147927284241

7cf756fa-f14e-4ec5-929a-3747cfef573b
00:29:05.684 --> 00:29:10.766
to the noise, so we have to then
convert the numbers in any

NOTE Confidence: 0.862147927284241

28e21d2f-16e9-4595-9c2a-a4b9fcb5d883
00:29:10.766 --> 00:29:12.614
numbering system to be in the binary

NOTE Confidence: 0.88219290971756

1691b369-383c-4de5-b15b-46d3f65a8118
00:29:12.614 --> 00:29:17.962
system. So if the number is in the
decimal system, it would be in

NOTE Confidence: 0.88219290971756

0c08660a-985a-46a1-934a-7d6f9317b4b8
00:29:17.962 --> 00:29:22.426
the range of minimum to maximum,
so you have to using the conversion

NOTE Confidence: 0.88219290971756

8ae2e55f-12dc-400f-8df0-536a8dfa453c
00:29:22.426 --> 00:29:26.518
algorithm we introduced, you
have to convert it to the binary

NOTE Confidence: 0.88219290971756

586cd036-41b2-4169-bcb6-6a3cb83c06e8
00:29:26.518 --> 00:29:30.610
system and then you have to
store the binary value. Even the

NOTE Confidence: 0.88219290971756

76a35886-f377-4127-a3a8-6a81c9b07f5a
00:29:30.610 --> 00:29:35.074
codes, even if you write a
statement, for instance, "C is

NOTE Confidence: 0.88219290971756

2f3a9d8f-8fa2-4327-b777-8dfc40c3edd7
00:29:35.074 --> 00:29:39.538
equal to A + B" is a textual
statement. You have to find a

NOTE Confidence: 0.88219290971756

0a522343-f1b5-4383-b887-59f0ac557d39
00:29:39.538 --> 00:29:43.630
way to represent your
instruction into a number and

NOTE Confidence: 0.88219290971756

85c9f2db-32e8-465b-8f3d-4a197e54d749
00:29:43.630 --> 00:29:47.350
then you have to convert that
number to binary system.

NOTE Confidence: 0.893102884292603

6e630cab-b722-4bae-92e8-cc91c71d9040
00:29:47.400 --> 00:29:52.020
Even your code must be stored
based on the binary digits.

NOTE Confidence: 0.873409271240234

9070c201-0166-4350-a5eb-953677ca2483
00:29:54.190 --> 00:29:59.806
And then if you find a way to
convert your numbers, whether

NOTE Confidence: 0.873409271240234

0f68229b-649a-4a79-b462-a84b76fa4dc3
00:29:59.806 --> 00:30:04.018
the number is representing an
image, whether the number is

NOTE Confidence: 0.873409271240234

f8ca49e6-77db-4778-943f-f30dadac2b27
00:30:04.018 --> 00:30:09.634
representing audio or I mean a
statement in C or C++ language,

NOTE Confidence: 0.873409271240234

034e5f30-77ad-4cdb-809e-31246d1051f7
00:30:09.634 --> 00:30:14.782
whatever the number is representing,
you have to convert it to the

NOTE Confidence: 0.873409271240234

acc92d45-61f9-4a93-9067-d05c27e581dc
00:30:14.782 --> 00:30:17.590
binary system. And by N flip

NOTE Confidence: 0.866379797458649

e57d532f-6b77-45d7-9408-90fc3dd63d9b
00:30:17.590 --> 00:30:23.153
flops, each flip flop can store 1
bit, so if you have N flip

NOTE Confidence: 0.866379797458649

3bb542ab-29a5-4adf-ac95-7ea9daf14418
00:30:23.153 --> 00:30:27.365
flops, you can store number within
the range between zero up until

NOTE Confidence: 0.866379797458649

35415a0b-4e70-4450-92ae-29fc5a27fb3e
00:30:27.365 --> 00:30:32.279
2 to the power of N. You already
knew that. If you are given just

NOTE Confidence: 0.866379797458649

9270723c-4ae1-47fc-a6be-00a398a3412c
00:30:32.279 --> 00:30:37.193
N is equal to 1, you can
represent it as 01. If N is two, you

NOTE Confidence: 0.866379797458649

ad7e6168-fec4-431b-97cf-a2d6d09a7063
00:30:37.193 --> 00:30:40.352
can represent any number between
zero up until 3.

NOTE Confidence: 0.922216415405273

6acbf83b-f2f6-418a-a6d6-2e355042235a
00:30:41.270 --> 00:30:43.376
(WRONG STATEMENT!)

NOTE Confidence: 0.895587503910065

80d70533-5614-452d-8f3a-074e1b600707
00:30:44.110 --> 00:30:49.230
Sorry, if N is 2, 2 to the power
of 2 minus 1. That's why this is

NOTE Confidence: 0.80439555644989

ce3e598c-d67a-496a-9c05-0f5c76a47bdb
00:30:49.230 --> 00:30:52.220
actually the

NOTE Confidence: 0.799922943115234

4ca6a647-220b-4f6b-ac48-5156a2146588
00:30:52.890 --> 00:30:55.066
closing range and opening

NOTE Confidence: 0.839045882225037

588fdf54-bdcf-4cc5-a1d2-a4e360576f1d
00:30:55.066 --> 00:31:00.182
range. So if you are giving three
bits, you're able to store up until 2 to

NOTE Confidence: 0.839045882225037

0ba12b45-6911-4873-8387-b3b92fa10f96
00:31:00.182 --> 00:31:01.358
the power of 8

NOTE Confidence: 0.795552551746368

5d12c755-fec1-4d61-87fd-088ed4c44440
00:31:02.090 --> 00:31:05.970
minus one, meaning that zero up
until seven and etc.

NOTE Confidence: 0.866673946380615

bd18af9d-35cc-4446-bbdb-61bfc7f1d0f1
00:31:08.670 --> 00:31:12.927
For instance, if you wanted to
store any number between

NOTE Confidence: 0.866673946380615

61924bce-dfee-41cb-bd7a-dbbf708bacb8
00:31:12.927 --> 00:31:16.023
the zero up until 2 to the power

NOTE Confidence: 0.871393144130707

3378844b-3699-43dc-adac-ef6a452c4ab6
00:31:16.023 --> 00:31:21.553
of 4 open range, meaning
including 15, but not including

NOTE Confidence: 0.871393144130707

122e146a-851a-47f4-a401-5587b2c1158b
00:31:21.553 --> 00:31:27.494
16. So in order to store any
number between zero up until 15,

NOTE Confidence: 0.871393144130707

c1f53687-100c-442a-965a-80958708a44e
00:31:27.494 --> 00:31:31.150
you need 4 flip flops or 4 bits.

NOTE Confidence: 0.860861420631409

ed311431-750b-4169-bf40-991d2c597b3f
00:31:32.300 --> 00:31:37.825
Then, you can use any type of
flip flops you already know. For

NOTE Confidence: 0.860861420631409

00b81d18-1bec-48fd-a321-c00714f1c4b1
00:31:37.825 --> 00:31:40.375
instance, D flip flop, T flip flop,

NOTE Confidence: 0.746606409549713

89453925-d0bb-408c-90e7-0ff41e1f5781
00:31:40.380 --> 00:31:42.950
RS or JK flip flop.

NOTE Confidence: 0.8547722697258

9af0393c-f82a-466e-a829-77df83ec30da
00:31:43.530 --> 00:31:48.934
The most simplest one is the D
flip flop. So if you stack 4 D

NOTE Confidence: 0.8547722697258

6a908011-1c17-4f3a-b479-548d9b1f951f
00:31:48.934 --> 00:31:53.952
flip flops, you are able to
store a four bit number and as

NOTE Confidence: 0.8547722697258

d64e93de-9fce-4ead-a38b-4f377d7969b0
00:31:53.952 --> 00:31:58.198
you can see here, all these
flip flops are synchronized by

NOTE Confidence: 0.8547722697258

c591bf29-0e59-47e8-b202-49ce95e504bb
00:31:58.198 --> 00:31:59.356
a single clock.

NOTE Confidence: 0.861998379230499

a1bd2afa-6974-49aa-a71b-078784fe3c25
00:32:00.490 --> 00:32:04.630
It means that they accept to
store a number

NOTE Confidence: 0.858486950397491

f7fdeb16-643a-4947-87fe-c427f003a85e
00:32:05.180 --> 00:32:07.200
at the first positive edge.

NOTE Confidence: 0.859588742256165

b14d1be2-1339-4930-85b5-8270886baef8
00:32:08.520 --> 00:32:13.588
So if I want to store the number
12 in decimal system, you have

NOTE Confidence: 0.859588742256165

5f204538-2119-460b-bb7f-67f62b78e0ad
00:32:13.588 --> 00:32:18.656
to find a way to convert it to
the binary system, and then for

NOTE Confidence: 0.859588742256165

999a12e4-424f-44c1-be5c-10f686876893
00:32:18.656 --> 00:32:23.362
each bit of this binary number
you have to store it. You have

NOTE Confidence: 0.859588742256165

f9cc1633-2eac-46d5-a1ab-1fd44a69e05a
00:32:23.362 --> 00:32:28.792
to attach it to the input of the
D flip flop, and at the first

NOTE Confidence: 0.859588742256165

dd1ee145-30c9-4478-8c60-5f9e53f197de
00:32:28.792 --> 00:32:32.050
positive edge, zero goes inside
the first D flip flop here.

NOTE Confidence: 0.82141500711441

76f7175d-53d4-401a-84ef-cd57f4c413af
00:32:32.680 --> 00:32:37.468
Again, as you can see, so each
bit is connected to 1 flip flop.

NOTE Confidence: 0.829587340354919

fc59d855-dac2-4f9a-a442-1d4f14c38b06
00:32:38.540 --> 00:32:42.544
The lower significant bit goes to
the first flip flop and then

NOTE Confidence: 0.829587340354919

76072364-833c-43b5-9d04-9f385cc053c8
00:32:42.544 --> 00:32:46.184
up until here. The higher
significant bit to the last

NOTE Confidence: 0.829587340354919

1edc1c04-54c1-4ca0-a0e6-c9a90cde6a16
00:32:46.184 --> 00:32:46.912
flip flop.

NOTE Confidence: 0.834176599979401

5dfae56a-3a11-48ac-b818-c92385a8fd82
00:32:49.070 --> 00:32:54.569
So any 4 bit number can be
stored with 4 D flip flops by

NOTE Confidence: 0.834176599979401

3eaff32e-59d4-4626-a0e0-95f8b697dd71
00:32:54.569 --> 00:32:59.222
attaching these wires for first
bit, second bit, third, and the

NOTE Confidence: 0.834176599979401

e5571b07-9ee0-41c8-92f0-1cce2aac5eaf
00:32:59.222 --> 00:33:02.183
last bit to the input of the

NOTE Confidence: 0.822307467460632

edb2a973-e64f-4aaa-9f37-03b5f77f4d4b
00:33:02.183 --> 00:33:07.990
flip flops. So
when you stack the D flip flop,

NOTE Confidence: 0.822307467460632

7253884f-e514-4ad4-996c-cdd1eeef5ef4
00:33:07.990 --> 00:33:11.410
in order to store the
information, this is called a

NOTE Confidence: 0.803828120231628

5aaef00c-2c20-433d-82b1-fafc978f7e8c
00:33:11.910 --> 00:33:18.215
register. So register is a stack
or a vector of flip flops in

NOTE Confidence: 0.803828120231628

eac83aca-db26-40c2-90a8-f365e06d5adc
00:33:18.215 --> 00:33:19.955
order to store information.

NOTE Confidence: 0.848102152347565

6571d201-300d-4fc5-bf78-6dae80114d38
00:33:21.900 --> 00:33:27.388
So here we have a 4 bit register.
If you stack N flip flops in

NOTE Confidence: 0.848102152347565

465c5a78-4d08-44ae-ab4b-e6877ec62b0d
00:33:27.388 --> 00:33:30.916
order to store information, it's
called a N bit register.

NOTE Confidence: 0.895751118659973

87ac3b80-f09a-4674-8c5c-5b9155493663
00:33:32.040 --> 00:33:37.080
But just by one register, you are
able to store 1 number.

NOTE Confidence: 0.869476497173309

7a50b5bc-3728-4117-a143-b61a941e321a
00:33:37.770 --> 00:33:42.678
What if you need to store 2
numbers? So you create another

NOTE Confidence: 0.869476497173309

adc58a47-cd07-4f06-8afa-c459bc3460ec
00:33:42.678 --> 00:33:47.995
register or another row of flip
flops, so the first row or the

NOTE Confidence: 0.869476497173309

44bac545-3b5c-4910-9dc4-c80b87c1a788
00:33:47.995 --> 00:33:52.085
first vector for one number,
the second row for the second

NOTE Confidence: 0.869476497173309

476c056e-a2ab-4c54-902a-532008682e07
00:33:52.085 --> 00:33:54.539
number. If you need to store

NOTE Confidence: 0.860868692398071

20b0c6d1-e1c1-45f8-99ec-f65a97ef57ea
00:33:54.539 --> 00:34:01.590
three numbers, so three
registers. Four numbers, four registers.

NOTE Confidence: 0.89642059803009

c505e01b-dd36-47b4-b6aa-1dc440374327
00:34:02.090 --> 00:34:06.590
So you can store one number in
the first vector, the second

NOTE Confidence: 0.89642059803009

1e13cf37-9aa0-4d3e-941f-d80755a68765
00:34:06.590 --> 00:34:11.090
number here. In the third vector, the
the third number goes here. So

NOTE Confidence: 0.89642059803009

f9af4aa7-3ca4-48be-8962-2fb51f14e3dc
00:34:11.090 --> 00:34:15.965
with this design, you are able to
store 4 numbers by four 4

NOTE Confidence: 0.836605191230774

9730cfb1-13eb-46d7-ab32-804e182c75af
00:34:15.965 --> 00:34:21.281
bit registers. This wiring that
attaches to the input of the

NOTE Confidence: 0.836605191230774

7d9bc3b5-8f7c-476b-b505-c0ef0da06754
00:34:21.281 --> 00:34:27.118
flip flops is called bus, and
because we are going to store 4

NOTE Confidence: 0.836605191230774

bf9e62b5-83b8-4fd3-8087-ed35823fd9cf
00:34:27.118 --> 00:34:31.608
bit numbers, these wires are
called 4 bit bus, meaning that

NOTE Confidence: 0.836605191230774

c7357280-cdf5-4c3e-a10e-de07ff67a870
00:34:31.608 --> 00:34:37.894
this is a bus that can carry
only four persons or a 4 bit value.

NOTE Confidence: 0.930176019668579

91c6da83-4c9d-4c96-a65c-0515ad4fb083
00:34:38.830 --> 00:34:42.078
But there is a problem
with this design.

NOTE Confidence: 0.862553358078003

0949b072-0bb0-401e-8f2b-c7653c36c7c5
00:34:43.420 --> 00:34:47.424
I claim that now with this
design, we can store 4

NOTE Confidence: 0.862553358078003

574f737b-056d-418d-9244-94953a5b2cbb
00:34:47.424 --> 00:34:51.792
numbers and each number can
be between zero up until 2 to

NOTE Confidence: 0.862553358078003

95044910-9a77-49e1-853e-c6ec464e971d
00:34:51.792 --> 00:34:56.888
the power of 4 minus 1, meaning
that up until 15. So I can

NOTE Confidence: 0.862553358078003

c11c1a46-82b2-49a6-901b-cceb76cc8204
00:34:56.888 --> 00:35:00.528
store 4 numbers. Each number
gonna be between zero up

NOTE Confidence: 0.862553358078003

7ebbf661-5e26-449f-b38e-7ce5bc1c8dfa
00:35:00.528 --> 00:35:04.168
until 15, but there is a
problem with this design.

NOTE Confidence: 0.862553358078003

33f465ff-ccd6-44f8-96f9-e6a6628df76b
00:35:04.168 --> 00:35:05.260
What's the problem?

NOTE Confidence: 0.889385282993317

730bd8ee-32fe-499e-a2f0-eefba41de46e
00:35:12.530 --> 00:35:14.100
So let's go back to here.

NOTE Confidence: 0.907481849193573

9a14801c-cea4-4f3d-a483-b446812bf9dd
00:35:14.850 --> 00:35:16.500
What's the problem with
this design?

NOTE Confidence: 0.862932026386261

9f42e504-028b-4273-b31a-995efba2b63c
00:35:18.010 --> 00:35:23.719
Correct, there is no output,
so we can store, but we

NOTE Confidence: 0.862932026386261

12f3b074-de2e-47b2-8a5f-802abbc964eb
00:35:23.719 --> 00:35:29.428
cannot read so far. So let's
start with the storing, and

NOTE Confidence: 0.862932026386261

be1a1448-14b9-4566-b2c4-a58ff859a15b
00:35:29.428 --> 00:35:34.099
we will discuss about the
reading or I mean,

NOTE Confidence: 0.862932026386261

e5559424-d043-40f5-9a9d-a2db07fc7194
00:35:34.099 --> 00:35:38.770
creating output from this
memory, but even in this

NOTE Confidence: 0.862932026386261

71346feb-9c9d-4a00-b39a-6beda2aad618
00:35:38.770 --> 00:35:43.960
storing step, there's a
problem with this storing.

NOTE Confidence: 0.915941298007965

20554db6-6abc-4f20-a22f-11e4a0261c7b
00:35:46.040 --> 00:35:47.320
As you can see here,

NOTE Confidence: 0.893750846385956

3d192439-f753-49f3-999c-25209d36c24f
00:35:48.190 --> 00:35:52.390
the wire for the first bit is
attached to the first column.

NOTE Confidence: 0.878062903881073

71640037-8891-4b87-8c69-fa05753d8b02
00:35:53.650 --> 00:35:59.470
The wire for the second bit is
attached to the second column.

NOTE Confidence: 0.858501851558685

58eb1a8a-3e23-449e-ab4d-dcfae8438949
00:36:00.140 --> 00:36:05.145
So basically because these wires
are attached to all flip flops

NOTE Confidence: 0.858501851558685

4203e0a1-e5d2-4617-96a9-ac6bfb41b01d
00:36:05.145 --> 00:36:10.605
in each column, when I load the
information in the bus. For

NOTE Confidence: 0.858501851558685

82325ba6-f9d9-4969-83f6-9b3bbb521375
00:36:10.605 --> 00:36:17.430
instance, if I put X here, Y
here, Z here, and W here, it goes

NOTE Confidence: 0.858501851558685

75daf087-58ae-4a50-bff5-9e8805767d95
00:36:17.430 --> 00:36:18.795
to all the

NOTE Confidence: 0.772621691226959

8b737b63-180c-40ce-bf52-c96b25631b01
00:36:19.570 --> 00:36:20.510
registers.

NOTE Confidence: 0.848422229290009

3739daab-e5c8-4370-8614-3c70fd8aa1ec
00:36:21.860 --> 00:36:25.156
Although we have four
registers, but because

NOTE Confidence: 0.848422229290009

4d057881-b73e-490b-9c0e-92c2a0edb36a
00:36:25.156 --> 00:36:28.864
the wires are
attached to all rows,

NOTE Confidence: 0.8663210272789

19d77677-80d7-4a48-b0ac-0f5871b67796
00:36:29.540 --> 00:36:33.740
we can store only one number.
One number comes here and it

NOTE Confidence: 0.8663210272789

87402476-1edf-42c5-8c61-b6fccac5ca4c
00:36:33.740 --> 00:36:35.140
goes to all rows.

NOTE Confidence: 0.90391731262207

9aa67939-ab19-4e80-97e8-d484eda098c2
00:36:36.130 --> 00:36:38.350
Although, we have four registers.

NOTE Confidence: 0.881003856658936

0ba32b0e-d950-464f-9673-57097a64021d
00:36:39.040 --> 00:36:44.584
So here is the problem. So only
one number goes to all

NOTE Confidence: 0.842776954174042

e5fb16f0-cab9-4672-b9fc-a6f526758efa
00:36:44.584 --> 00:36:47.716
registers. So there's no
difference between having four

NOTE Confidence: 0.842776954174042

7d81bbff-3ec4-40bc-b547-84b2fd729afb
00:36:47.716 --> 00:36:50.696
registers or one registers
because one number goes to all

NOTE Confidence: 0.932638645172119

0e08777d-1ba8-4f37-ac22-978e2309ce37
00:36:50.696 --> 00:36:52.760
of them. So.

NOTE Confidence: 0.902901291847229

268ddb34-daaf-4f17-9d00-646a1a835e78
00:36:53.490 --> 00:36:56.933
In order to solve this problem,
we have to say that

NOTE Confidence: 0.890705347061157

ef0e8a28-ddad-42ec-923a-26cf6762a518
00:36:57.590 --> 00:37:00.075
if I wanted to store 1 number,

NOTE Confidence: 0.892364740371704

5ed8ebf7-f164-4323-ab47-2d3c1b44eec9
00:37:00.740 --> 00:37:05.272
and we have 4
registers, you have to choose

NOTE Confidence: 0.892364740371704

d6dde374-710e-425e-8661-bacd39e146d9
00:37:05.272 --> 00:37:07.744
which register where you want to store

NOTE Confidence: 0.872531592845917

5f64567a-b799-4790-b660-d295acc1217c
00:37:07.744 --> 00:37:12.958
that number. You have four
registers. You can use only one

NOTE Confidence: 0.872531592845917

6d26c890-25e5-49f1-a5e9-e98a35836697
00:37:12.958 --> 00:37:17.902
of them to store 1 number,
instead of just using all the

NOTE Confidence: 0.869168519973755

b0931fa1-6dbd-40fa-a758-722278f2e9c5
00:37:17.902 --> 00:37:22.155
registers. So here's the task:
which registers? In order to

NOTE Confidence: 0.869168519973755

3c0dc1ee-6cba-4965-8b18-4850375bd94d
00:37:22.155 --> 00:37:26.060
select the registers, either you
can select a register by its

NOTE Confidence: 0.869168519973755

c9c094eb-819a-4580-9666-7078d0aba05a
00:37:26.060 --> 00:37:31.030
name. So you pick a name for
each vector, or each row of the

NOTE Confidence: 0.740018367767334

1b3f5c4b-77a7-47a9-ad80-338e5d23d551
00:37:31.030 --> 00:37:36.564
memory. Or for instance here. For the
first row, I select the name A.

NOTE Confidence: 0.740018367767334

aa1b77e5-5e5a-468b-95be-9a14154ff37a
00:37:36.564 --> 00:37:41.842
For the 2nd row, B. For the third row, C,
and for the last row, D, and whenever I want

NOTE Confidence: 0.740018367767334

9f61fdc9-b7dd-4c49-adf2-b42e68cf7edc
00:37:41.842 --> 00:37:45.989
to store the information, for
instance in C, I

NOTE Confidence: 0.753973066806793

cb401309-216c-4136-84f9-65c4a1a2e731
00:37:46.580 --> 00:37:51.440
tell the system, pick the
memory row C, and then store the

NOTE Confidence: 0.753973066806793

20db6caf-06b7-4729-b152-e1dfc1d7a5da
00:37:51.440 --> 00:37:53.870
information in this bus in the

NOTE Confidence: 0.825572490692139

10f291ae-9672-4acf-ae07-f10b590de119
00:37:53.870 --> 00:37:59.251
third row. Another better way is to
select the register by address. As

NOTE Confidence: 0.825572490692139

f7393b7f-6da6-46d2-ae97-1a74edb83100
00:37:59.251 --> 00:38:04.999
we said in the Von Neumann
architecture, we want to build a

NOTE Confidence: 0.825572490692139

229104fe-afeb-4830-9e1c-c435be3cbb52
00:38:04.999 --> 00:38:07.394
memory unit that can be

NOTE Confidence: 0.854026615619659

b967f9c3-73e0-43ac-80fd-7e02e6517c9a
00:38:07.394 --> 00:38:11.438
addressable. So the memory
location can be found by

NOTE Confidence: 0.872491478919983

d96bdeab-773d-4a6f-9abf-f7d8f62ae1d1
00:38:11.438 --> 00:38:16.880
address. By address meaning that
we assign a number to each

NOTE Confidence: 0.872491478919983

a3295597-ec0d-4288-8831-da85432fd4bf
00:38:16.880 --> 00:38:21.310
register. So for the first
register, 00. For the second

NOTE Confidence: 0.872491478919983

9332e56a-5e13-4b2c-8b32-785961b793b7
00:38:21.310 --> 00:38:27.512
one, 01. 10 and 11. Because we have
four registers, we need 2 bits to

NOTE Confidence: 0.872491478919983

9a00abc3-17f7-41dd-9471-0583b9920626
00:38:27.512 --> 00:38:29.284
select between four registers.

NOTE Confidence: 0.840721487998962

609ca5d5-909d-44f7-b20c-4d6a08100d79
00:38:29.850 --> 00:38:34.974
As you can see here. It is very
similar to assigning a Postal

NOTE Confidence: 0.840721487998962

2cac66a3-c8d5-4089-b0fb-aec798fc8a82
00:38:34.974 --> 00:38:40.083
code or numerical address to a
house. So in order to find 1

NOTE Confidence: 0.840721487998962

3eda462b-179c-416f-9b7b-297f7dffe546
00:38:40.083 --> 00:38:45.192
unique house in a city, you can
assign one unique number to that

NOTE Confidence: 0.840721487998962

d735b502-371d-4733-a599-85eb39cf9f5e
00:38:45.192 --> 00:38:49.515
house or a Postal code to that house
to find that place.

NOTE Confidence: 0.891444981098175

ede7f741-a2dc-4093-a6f9-48f372261a6f
00:38:50.050 --> 00:38:52.780
So this is very similar to that.

NOTE Confidence: 0.839382886886597

acde8704-c510-475f-837c-acdd648a9f49
00:38:54.750 --> 00:39:00.846
So these numbers are called
addresses for each row or each

NOTE Confidence: 0.839382886886597

6327fcf6-3a03-4acf-bc88-13ebb39f275e
00:39:00.846 --> 00:39:06.942
location of the memory, and the
one that carries the actual data

NOTE Confidence: 0.839382886886597

1b52c16b-2ef4-41ca-a1d7-2fa44ab033b9
00:39:06.942 --> 00:39:08.974
is called data bus.

NOTE Confidence: 0.864566683769226

7ee0216a-4854-4716-a2ff-c98a0c11b73d
00:39:09.630 --> 00:39:15.090
So these red wires are relating
to the actual data and these

NOTE Confidence: 0.864566683769226

bc8872f0-4cda-4350-be08-e4505d120efc
00:39:15.090 --> 00:39:16.910
are the addresses. So.

NOTE Confidence: 0.884753406047821

88a3750f-cc8b-488e-a6af-ab832b845358
00:39:17.830 --> 00:39:23.745
The next step is now that I have assigned
an address to each register or

NOTE Confidence: 0.884753406047821

210bb692-e45e-4ce3-9bc0-4168d2de85cb
00:39:23.745 --> 00:39:25.110
each memory location,

NOTE Confidence: 0.860980451107025

99850b4d-d026-46d2-bcbd-7bb51990a960
00:39:25.650 --> 00:39:30.720
how can I tell the system to
pick one of them? For instance,

NOTE Confidence: 0.860980451107025

8e923fcb-3c83-4d4c-a436-f112548a0ef7
00:39:30.720 --> 00:39:34.383
if I wanted to store the
information in this bus, the

NOTE Confidence: 0.881453454494476

6081a81c-a01b-4156-be50-d3e15912b376
00:39:34.383 --> 00:39:39.640
3rd row. How can I select
the 3rd row by its address

NOTE Confidence: 0.881453454494476

0d2945e5-21ad-402d-ac63-e5295505c98e
00:39:39.640 --> 00:39:41.208
among the other registers?

NOTE Confidence: 0.773719251155853

fbd46b37-80a9-4f19-ba1d-a4607208714a
00:39:42.700 --> 00:39:45.680
So Justin says using a MUX.

NOTE Confidence: 0.849996984004974

430e7dfe-89be-44b6-a8a4-11cb33dea098
00:39:46.360 --> 00:39:51.761
Very close, but let's see what
is a MUX. We already designed

NOTE Confidence: 0.849996984004974

1ff17041-b9f2-4ee9-8ebe-82bddb261803
00:39:51.761 --> 00:39:57.653
some combinational logic to select
one output among the N outputs,

NOTE Confidence: 0.849996984004974

94eff096-1b49-4a1e-9abb-4ccd365d5031
00:39:57.653 --> 00:39:59.617
only one of them.

NOTE Confidence: 0.826636791229248

d5467eb8-282b-49a5-a2ef-9440a2cf02d0
00:40:00.260 --> 00:40:04.316
So we built encoders, decoders,
multiplexers and demultiplexers.

NOTE Confidence: 0.826636791229248

9378b521-c258-4ed2-bd9f-96c66cfb777e
00:40:04.316 --> 00:40:10.907
So Justin says that we can use
MUX. MUX was a device that

NOTE Confidence: 0.826636791229248

f943a090-b8eb-412f-a4c8-0f5050e31acf
00:40:10.907 --> 00:40:16.991
selects one input out of N
inputs and attach that input to

NOTE Confidence: 0.826636791229248

c57c794a-fc56-482f-8ffd-bc81c6c45cb8
00:40:16.991 --> 00:40:18.512
the single output.

NOTE Confidence: 0.853721380233765

fa73438e-b899-43f3-89bb-801a92ed4920
00:40:19.830 --> 00:40:24.414
But here, we are not going to
select from the inputs and attach

NOTE Confidence: 0.853721380233765

26498def-73fe-47d0-a5ce-56155cbd2860
00:40:24.414 --> 00:40:26.324
it to the single output.

NOTE Confidence: 0.818994641304016

3fd0a1e3-9f82-4141-9efa-296e57ac39ab
00:40:27.680 --> 00:40:34.159
The task here is selecting one
output out of N outputs.

NOTE Confidence: 0.851320505142212

93816f77-2158-4f35-b12d-3102c983ab48
00:40:35.130 --> 00:40:40.626
So the the device we need is the
decoder, not the multiplexer.

NOTE Confidence: 0.863132894039154

345c8fb2-b693-4172-aacc-08cf395f130a
00:40:41.140 --> 00:40:45.617
So remember, what was the
decoder? The decoder was that we

NOTE Confidence: 0.863132894039154

30568750-bb38-43c5-a8c3-85fab5b64fe1
00:40:45.617 --> 00:40:47.652
just wanted to enable one

NOTE Confidence: 0.84146922826767

d043dc94-943a-48b6-8469-4eca8798b6a0
00:40:47.652 --> 00:40:53.466
output. One vector, you remember,
one output out of the N outputs.

NOTE Confidence: 0.84146922826767

c0e42b77-6a08-4d0f-97e1-6f41c3a24695
00:40:53.466 --> 00:40:58.874
Whenever we are given a task or
selection, we need a decoder. As

NOTE Confidence: 0.84146922826767

345b6036-36fa-49a1-a849-4687ab93ebbd
00:40:58.874 --> 00:41:03.034
we said in the combinational
logic when we introduced the

NOTE Confidence: 0.816116034984589

69bb844f-cd0a-433f-a562-aacf4ec0cd83
00:41:03.034 --> 00:41:09.590
decoders. So by a two bit numbers,
we can select among four items.

NOTE Confidence: 0.852975964546204

ed0ddf4c-3990-4de6-8565-79554c0bcf8d
00:41:10.780 --> 00:41:17.852
So we need a decoder that is 2 by
4, and those numbers that select

NOTE Confidence: 0.852975964546204

9cbae8a0-a3d6-4763-af6b-7ef7217d4be2
00:41:17.852 --> 00:41:21.660
one output in memory, we call

NOTE Confidence: 0.815297305583954

05588d93-ff15-40c3-8b56-084c6883314f
00:41:21.660 --> 00:41:27.078
them an address. So 2 bit address.
And those wires that selects

NOTE Confidence: 0.815297305583954

6331da6b-cf3b-4374-a5ee-1a0eb6cbae2b
00:41:27.078 --> 00:41:30.454
the memory location is called
address bus.

NOTE Confidence: 0.873788237571716

3a55ad72-2f2a-4952-884e-8a89d5ba04c6
00:41:31.710 --> 00:41:36.462
So those wires that carry the
information is called data bus.

NOTE Confidence: 0.823098421096802

516c190b-6bfc-4e5b-a6bb-1308509ebb88
00:41:37.090 --> 00:41:40.915
Those wires that carry the
address information is called

NOTE Confidence: 0.881707608699799

6a35942b-d8f3-4c94-aea4-94dfeedc4c28
00:41:40.915 --> 00:41:46.120
address bus. The address bus is
connected to the decoder in

NOTE Confidence: 0.881707608699799

5b8d7da2-a811-4c9d-a577-dd1d54f166b3
00:41:46.120 --> 00:41:47.640
order to select only one

NOTE Confidence: 0.880989909172058

171a9fca-083d-4451-a004-c86b847094f4
00:41:48.390 --> 00:41:52.911
register at a time and
the data carries the

NOTE Confidence: 0.908625960350037

9860d3ae-b95a-4738-a00c-330b2a876aa9
00:41:52.911 --> 00:41:55.030
information. So.

NOTE Confidence: 0.754859805107117

18777187-3ac4-4bd9-bf44-130026712b45
00:41:56.800 --> 00:42:01.860
Nicholas asked, is the decoder
what applies the hex address to

NOTE Confidence: 0.754859805107117

ab6b88cf-f44d-4b88-908d-c7becc5fa14c
00:42:01.860 --> 00:42:07.840
the memory? For now, we are
building a binary system, so any

NOTE Confidence: 0.754859805107117

453f89b4-d926-4c6c-aecb-ed1cfaba9663
00:42:07.840 --> 00:42:12.440
number is in the binary system.
So there's no hexadecimal

NOTE Confidence: 0.859621703624725

8f714718-bc71-4cd7-bd07-ab37b30d0d33
00:42:13.070 --> 00:42:18.320
numbering system. So there's no
base 16. All the numbers are in

NOTE Confidence: 0.859621703624725

5837e033-c890-4ed8-903a-ceb82255381d
00:42:18.320 --> 00:42:22.192
binary. The thing is, when you
represent the binary number or

NOTE Confidence: 0.859621703624725

8722b8bd-a113-4c0a-b24c-0c9b44e9c4b2
00:42:22.192 --> 00:42:25.712
binary address, because it
becomes very huge, we will see that

NOTE Confidence: 0.859621703624725

e6c180fc-6d3d-4019-91ff-e3c0d6c9f426
00:42:25.712 --> 00:42:29.936
you will represent it as a hex number,
but in the system, the actual

NOTE Confidence: 0.859621703624725

e2557da7-0a5f-4803-897b-f7433f033c2b
00:42:29.936 --> 00:42:31.696
system, they're all in binary.

NOTE Confidence: 0.922411501407623

958814a2-3f6a-4bb4-a128-3d57f91bd21f
00:42:32.540 --> 00:42:34.210
So.

NOTE Confidence: 0.86876904964447

93571e56-eef2-4732-ac8a-be8acf2b9ae9
00:42:35.700 --> 00:42:41.090
So far we could use the decoder
to select one row, but as you

NOTE Confidence: 0.86876904964447

eb0dfe20-8d57-4152-8c34-4af479e8fa72
00:42:41.090 --> 00:42:46.095
can see here, the output of the
decoder is still not attached

NOTE Confidence: 0.85799652338028

780e849f-96d3-4543-a320-00bff07b8e92
00:42:46.095 --> 00:42:48.650
to the memory units.

NOTE Confidence: 0.895881593227386

ba500d99-6f0a-4430-a078-eff871f483d1
00:42:49.530 --> 00:42:55.800
So still, we have to find a
way to kind of select one row

NOTE Confidence: 0.863308012485504

6a1afa74-08ec-4d4b-b24a-c7b2a0e655d1
00:42:56.380 --> 00:43:01.281
out of the other rows. So
imagine if you are given 00, we

NOTE Confidence: 0.863308012485504

1fa84ad0-bc30-44d6-964e-f54e06779c52
00:43:01.281 --> 00:43:06.182
want to enable this and all the
other outputs are zero, so the

NOTE Confidence: 0.863308012485504

998eee67-9fb5-4e50-9fac-5206dc8b35c1
00:43:06.182 --> 00:43:11.837
first one is 1. But when it is
1, how can I tell the system

NOTE Confidence: 0.863308012485504

9e5de5ed-7851-49dd-bd32-8a73fed7f3a0
00:43:11.837 --> 00:43:16.738
that only the first row of flip
flops gonna accept the input and

NOTE Confidence: 0.863308012485504

103db991-5f8e-42c2-9780-29868cb89bb0
00:43:16.738 --> 00:43:20.131
avoid or prevent all other rows
to accept the

NOTE Confidence: 0.809575378894806

ad7c2fcd-ae9d-4527-bae1-39c67f9b54ed
00:43:20.730 --> 00:43:25.130
data? Still the data buses are
attached to all the other rows.

NOTE Confidence: 0.92291796207428

bce078ca-356e-4d39-95df-212596dbe85c
00:43:26.010 --> 00:43:27.280
So.

NOTE Confidence: 0.908132970333099

538f8ee2-2c64-4e87-b919-92a8c57f7333
00:43:29.340 --> 00:43:33.214
You have to come up with the new
design for the Flip flop.

NOTE Confidence: 0.879086911678314

61d65f53-2f46-4c40-8c13-90816f4fc482
00:43:34.270 --> 00:43:39.132
Just tell the flip flop that if
you are selected then allow the

NOTE Confidence: 0.879086911678314

8d5fb4f8-b8a0-4cc4-92d3-f2019ef2a9dc
00:43:39.132 --> 00:43:43.620
data bus goes inside the flip
flop. If you are not selected

NOTE Confidence: 0.879086911678314

b1a0603d-04a0-480a-8ef9-3332050def8a
00:43:43.620 --> 00:43:48.108
ignore the input. So yeah we
have to although it is attached

NOTE Confidence: 0.879086911678314

bf33501a-49f6-4e1f-a31e-cb9502b9e242
00:43:48.108 --> 00:43:53.344
to Flip flop you have to say
that as long as you are selected

NOTE Confidence: 0.879086911678314

debf99d7-0504-465f-9243-92c54591e114
00:43:53.344 --> 00:43:57.832
you have to allow the input goes
to inside the flip flop.

NOTE Confidence: 0.879086911678314

2b83e97a-65b1-4944-b22d-b24fad6f6915
00:43:57.832 --> 00:44:00.076
Otherwise you have to ignore it.

NOTE Confidence: 0.855989038944244

167e275f-c5f4-4660-849f-1c72d1087c7d
00:44:01.050 --> 00:44:07.126
So we assume that let's fix the
flip flop so we have input data

NOTE Confidence: 0.855989038944244

0eb8fc91-47aa-4cfe-add1-8e1ba0179ec5
00:44:07.126 --> 00:44:12.334
bus. So here is the first
column. So the first bit goes

NOTE Confidence: 0.855989038944244

49b6b2d1-aca0-4228-8b4e-cd1ddf879b58
00:44:12.334 --> 00:44:17.542
attached to this flip flop and
this is the select from the

NOTE Confidence: 0.818984746932983

fa51d21a-0b8b-43e4-86e7-9e5c9336767d
00:44:17.542 --> 00:44:21.840
decoder. So the select from the
decoder comes here, and here is

NOTE Confidence: 0.818984746932983

2b18adbc-22f9-48dd-8dc8-b9bb43e02480
00:44:21.840 --> 00:44:24.101
the data bus. The first bit of

NOTE Confidence: 0.871807813644409

09c85b4d-3f75-4dbb-8ba8-e5d3ab9df1d4
00:44:24.101 --> 00:44:26.522
the data bus. And here is the

NOTE Confidence: 0.882694661617279

4794839a-8640-4343-a7a6-5fa0b0ebf024
00:44:26.522 --> 00:44:31.278
flip flop. We want to fix this
flip flop and want to tell the

NOTE Confidence: 0.882694661617279

d615755e-25c8-4f18-bbfe-b08c5cc5abf8
00:44:31.278 --> 00:44:33.301
system or the flip flop that if.

NOTE Confidence: 0.873655498027802

8d6ac806-f767-4352-ac6b-3ea375440624
00:44:34.190 --> 00:44:39.327
R0 I mean the register for the
first row is selected, meaning

NOTE Confidence: 0.873655498027802

59f8688c-3b6c-495a-bacc-323d8c97c94a
00:44:39.327 --> 00:44:41.662
that if this is 1.

NOTE Confidence: 0.855971455574036

4bc61b72-8b99-4642-816b-8f98ee50eccb
00:44:42.210 --> 00:44:45.426
Then allow I0 goes inside.

NOTE Confidence: 0.873982965946198

45ca7f8d-2b05-4046-8e5d-c7fb2570b58c
00:44:45.970 --> 00:44:50.073
or right, otherwise, as long as
the select is zero, it means

NOTE Confidence: 0.873982965946198

59f6f856-ff3c-4c76-b735-e74a947deb9a
00:44:50.073 --> 00:44:54.549
that you are not selected. Do
not allow I0 to go inside.

NOTE Confidence: 0.875097215175629

5af95204-0ae2-494f-bdb5-49bd83a7f0c1
00:44:57.480 --> 00:45:01.965
So in the D flip flop we said
that as long as the number goes

NOTE Confidence: 0.875097215175629

0508867e-2e59-48fd-a90b-af4cb27ae437
00:45:01.965 --> 00:45:05.254
to the input, it goes inside at
the first positive edge.

NOTE Confidence: 0.868525207042694

6a969409-1ea5-46ba-bd31-745a3cf2a2a8
00:45:06.190 --> 00:45:10.474
But here we want to ask
the D flip flop if you

NOTE Confidence: 0.868525207042694

bc3f266c-bdb8-4fa7-ac6f-6cf79cd94f46
00:45:10.474 --> 00:45:11.902
are not selected store.

NOTE Confidence: 0.839890956878662

ce0bcfbc-c681-4501-a296-5ea6547371ff
00:45:13.520 --> 00:45:17.708
The problem with the D flip
flop is that the D flip flop

NOTE Confidence: 0.839890956878662

2dfa9698-6205-47f3-993e-80fc72c45cf1
00:45:17.708 --> 00:45:21.547
doesn't have any store action.
You remember the only flip flops

NOTE Confidence: 0.839890956878662

2a91fbbc-f392-4cee-95d9-bb35086518f2
00:45:21.547 --> 00:45:26.084
that have the store action are
the Rs flip flop and the JK

NOTE Confidence: 0.79363352060318

9efd4a7e-8720-4d58-a341-32d80d550068
00:45:26.084 --> 00:45:32.668
flip-flop. D  flip flop
either set or reset or the T

NOTE Confidence: 0.79363352060318

264378b4-5356-411e-af66-c91ddb4bfb0d
00:45:32.668 --> 00:45:35.008
flip flop, Either stores or

NOTE Confidence: 0.665877640247345

e62a0cf7-3a08-499c-9a68-74a64f39413b
00:45:35.008 --> 00:45:40.795
compliment, But in T JK and
RS they have a store but for the D

NOTE Confidence: 0.665877640247345

9b771575-a57a-45e4-bbcf-b4c1313e17d5
00:45:40.795 --> 00:45:42.370
we don't have a store.

NOTE Confidence: 0.842831015586853

ddc6ef32-2a68-45b3-a416-de5f912b7502
00:45:43.460 --> 00:45:47.412
But it's easy to extend the D
flip flop to have their store

NOTE Confidence: 0.842831015586853

b8571489-bd35-4a71-8827-396e4ae1f4ad
00:45:47.412 --> 00:45:51.060
action, because as you remember
when we built the T flip flop,

NOTE Confidence: 0.842831015586853

c422897a-e213-49a4-87f7-e95c5fbe86fd
00:45:51.060 --> 00:45:53.188
we build it by D Flip flop.

NOTE Confidence: 0.824991285800934

e80f6e54-12f2-4777-a4d5-47aa97f9eaa6
00:45:53.910 --> 00:45:58.330
So we can come up with a D flip
flop that can store.

NOTE Confidence: 0.921693027019501

fed56122-5292-441f-a1c9-8af2fda15979
00:46:01.240 --> 00:46:03.300
One thing is this.

NOTE Confidence: 0.940419912338257

a54c49eb-8afb-4e00-bcf8-d49c8199145f
00:46:04.550 --> 00:46:05.978
You could say that.

NOTE Confidence: 0.869779050350189

9f6818a6-5d68-4ae5-a25c-3f9341908ff4
00:46:06.570 --> 00:46:11.845
If R0 is 0, meaning that
the flip flop is not selected.

NOTE Confidence: 0.869779050350189

c78287d1-3ab5-43aa-afc2-fe44d1f735ff
00:46:11.845 --> 00:46:14.050
We can make an and with Clock.

NOTE Confidence: 0.883933186531067

9327b3de-268e-4879-8dcc-fcb6aa5734a7
00:46:14.700 --> 00:46:17.668
As long as they select is 0.

NOTE Confidence: 0.870053350925446

de89bb87-3496-4f07-830b-458123ea7793
00:46:18.730 --> 00:46:23.590
And with the Clock makes the
Clock 0 even if you have

NOTE Confidence: 0.870053350925446

f9f3a2a3-f39c-4124-8d85-016978620475
00:46:23.590 --> 00:46:28.045
positive edges. Here, because of
this and you always create zero

NOTE Confidence: 0.870053350925446

a14e588f-7542-4591-8edd-3dbe63143b6c
00:46:28.045 --> 00:46:32.905
constant 0 here, there's no edge
here because the selection is 0.

NOTE Confidence: 0.869676351547241

4a17b997-8236-40f6-81c1-f2c70d6f3d92
00:46:33.700 --> 00:46:38.680
So as long as there is no edge
in the inside the flip flop you

NOTE Confidence: 0.869676351547241

fbdd7e9e-b99d-46ad-9b59-6a84074d5aec
00:46:38.680 --> 00:46:40.008
don't accept the input.

NOTE Confidence: 0.93693083524704

caf01812-bffc-45e1-8629-2cda17295028
00:46:40.570 --> 00:46:41.710
This is one way.

NOTE Confidence: 0.814776718616486

f57a697c-2cdb-4323-85f4-94fe7ff5926c
00:46:42.250 --> 00:46:45.135
To store, however, if R

NOTE Confidence: 0.853688895702362

589f88e3-dfd0-4dba-9d78-dd7b9c6a3c80
00:46:45.135 --> 00:46:50.760
becomes one. It comes here now.
It allows the Clock goes inside

NOTE Confidence: 0.853688895702362

2a8856f5-dfdb-49be-b726-98a0b9043cd4
00:46:50.760 --> 00:46:55.856
an at the first positive edge. I0
goes inside the D. This

NOTE Confidence: 0.853688895702362

aed32f3d-f9fc-4397-b550-c0cb72440923
00:46:55.856 --> 00:46:57.032
is one way.

NOTE Confidence: 0.893544137477875

3ca704fc-b1a6-4a38-80db-751f21031a14
00:46:58.750 --> 00:47:04.042
But one thing is that in the
design principle, they say that

NOTE Confidence: 0.893544137477875

a58290d9-5ad7-4121-aec8-14e8c47ccc4b
00:47:04.042 --> 00:47:05.806
never ever touch Clock.

NOTE Confidence: 0.915916204452515

0b7bb280-c7d1-45a7-96e1-99a94a1b4521
00:47:06.750 --> 00:47:11.667
So they say that you shouldn't
manipulate the Clock to the

NOTE Confidence: 0.915916204452515

d45e8e43-2b68-4d30-b610-3d5fd7271117
00:47:11.667 --> 00:47:13.455
elements of the system.

NOTE Confidence: 0.872246205806732

82b18362-ba81-40f2-be7d-35dba815cdff
00:47:14.040 --> 00:47:18.900
You can search about this, but
the main reason is that because

NOTE Confidence: 0.872246205806732

cde2f1a4-6721-4a5c-ba37-16a6511b0c5c
00:47:18.900 --> 00:47:23.760
all the units in a computer
system must be act as a

NOTE Confidence: 0.872246205806732

03b8f50c-25be-43b7-8325-0514e2f69242
00:47:23.760 --> 00:47:28.215
synchronized way kind of harmony
in a system. If you manipulate

NOTE Confidence: 0.872246205806732

0c9ec5bd-fbff-454e-a14b-a6860832515d
00:47:28.215 --> 00:47:33.075
or play with the Clock in some
specific unit, you are trying

NOTE Confidence: 0.872246205806732

cf589730-eb46-4c75-a67c-9a3a2fce1d2e
00:47:33.075 --> 00:47:35.910
to make that unit out of sync.

NOTE Confidence: 0.90185821056366

1818fd0c-cc4f-4d50-8a74-5fa824ad9953
00:47:36.490 --> 00:47:40.260
So that's not suggested, so
this design is possible, but

NOTE Confidence: 0.90185821056366

0f4c1b9f-19ae-4e9d-9f93-349f477192dd
00:47:40.260 --> 00:47:41.768
it is not suggested.

NOTE Confidence: 0.927755177021027

14c9f2b6-c7a6-446d-8714-ca2b8be56006
00:47:42.790 --> 00:47:44.610
Another way is this.

NOTE Confidence: 0.850938081741333

42f1295a-6a4d-4a66-a166-8f5742e9286c
00:47:45.270 --> 00:47:49.605
We know that the current value
of D can be go out of the main

NOTE Confidence: 0.850938081741333

5669c6a3-ba8d-43a4-9de3-f914d6351972
00:47:49.605 --> 00:47:51.339
output of the D flip flop.

NOTE Confidence: 0.887709021568298

b9002da0-f81f-4f70-9ee2-6714271706e7
00:47:52.240 --> 00:47:57.658
So we have the current value. We
have the input and we have to

NOTE Confidence: 0.887709021568298

c0771ec3-11d0-4ab1-bdf4-df58bc63647a
00:47:57.658 --> 00:47:59.206
decide which one goes.

NOTE Confidence: 0.855952560901642

a542d962-c725-4305-a981-a1a519d0df23
00:47:59.910 --> 00:48:06.230
To the input of the D flip flop
based on the R0. Again I I said.

NOTE Confidence: 0.85399854183197

98ee52ce-70d4-4681-85ca-5c97f87ffedf
00:48:06.900 --> 00:48:09.140
We have two inputs.

NOTE Confidence: 0.829871892929077

514b4bed-824a-4202-9544-0fe5170d5128
00:48:09.710 --> 00:48:12.860
And we want to select
one of them attached

NOTE Confidence: 0.829871892929077

e5bc8a6d-f4b2-4ce4-9ef3-1da33e8458fd
00:48:12.860 --> 00:48:14.610
to the D flip flop.

NOTE Confidence: 0.875295281410217

0888fd1f-5a6e-4057-a9a3-81496703dfb3
00:48:16.140 --> 00:48:21.450
So what combinational unit we
need to add here?

NOTE Confidence: 0.87410831451416

6ba9c69f-cd6b-4da3-8eac-4c21f13c5172
00:48:22.930 --> 00:48:26.470
Anybody of you?

NOTE Confidence: 0.78486692905426

2cd55031-1fdc-4b2f-b179-9d4082d2a8d7
00:48:30.390 --> 00:48:36.120
So here this is not a
selection task, so decoder

NOTE Confidence: 0.78486692905426

50de0f2a-3637-4082-b292-a8f0a6e3bc3e
00:48:36.120 --> 00:48:41.277
doesn't work. Decoder is
enabling one output or selecting

NOTE Confidence: 0.78486692905426

ad99f6e7-dc71-475c-a783-3d054ebe39cf
00:48:41.277 --> 00:48:44.715
one output out of the N

NOTE Confidence: 0.864766478538513

48a38ff5-ea5c-4a39-bbc2-6a9dd77aad8c
00:48:44.715 --> 00:48:50.020
outputs. But Here we are
selecting among inputs and

NOTE Confidence: 0.864766478538513

da144306-c7eb-4e18-96a8-2d6033f52da6
00:48:50.020 --> 00:48:54.420
attaching the inputs to the
single output. So the single output

NOTE Confidence: 0.864766478538513

bbfd01d3-46ec-42dd-bb09-b4cf0b236cf0
00:48:54.420 --> 00:48:55.620
it is here.

NOTE Confidence: 0.840826034545898

8458e173-4c45-4924-b3d9-0565a1803053
00:48:56.350 --> 00:48:58.138
How many inputs we have 2.

NOTE Confidence: 0.886311411857605

efb240d7-408b-4971-81d7-7c61552112c7
00:48:59.580 --> 00:49:00.780
What device we need?

NOTE Confidence: 0.917129337787628

8a97ff18-39ee-4806-9cd8-39b297efb316
00:49:09.290 --> 00:49:11.840
So do we.

NOTE Confidence: 0.789886116981506

415eb130-c69c-4feb-b439-552042aea2d6
00:49:15.690 --> 00:49:20.838
Exclusive or is against an and
The thing is exclusive or once

NOTE Confidence: 0.789886116981506

c8d56689-49f8-49ca-8a6a-862d6aa3afc1
00:49:20.838 --> 00:49:27.702
actually if on top of what if we
do exclusive or of I0 and Q.

NOTE Confidence: 0.906362533569336

2965c40f-35a0-494c-a727-64a391255594
00:49:28.410 --> 00:49:32.491
We are making a new value out of
these two inputs.

NOTE Confidence: 0.891733407974243

0182684a-ae7a-4d91-b90a-5349ee57432e
00:49:33.000 --> 00:49:38.026
But you are not trying to create
a new value or new operation on

NOTE Confidence: 0.891733407974243

391b4882-bde9-44a6-b5e4-4637f31e8d99
00:49:38.026 --> 00:49:41.975
these two. You want to just
simply attach one of them.

NOTE Confidence: 0.879054069519043

013c75f1-9822-485e-b8e6-6a2e7f010cd3
00:49:42.510 --> 00:49:43.718
To the single output.

NOTE Confidence: 0.818433105945587

458ae99b-a80e-421f-aba0-932df61fac53
00:49:46.980 --> 00:49:52.194
Actually, Justin already said
that MUX, you know MUX was a

NOTE Confidence: 0.818433105945587

56d0ce4a-c142-4d5c-be47-c32373ac55c4
00:49:52.194 --> 00:49:54.564
device that is designed to

NOTE Confidence: 0.805517077445984

a85d0a81-f558-4471-8a95-d5d10ea06c83
00:49:54.564 --> 00:50:00.522
select. One input out of an
input an attach it to single

NOTE Confidence: 0.87033998966217

28e3ef7b-3c55-4e21-b302-a8104692f9a9
00:50:00.522 --> 00:50:06.324
output. So here we have two
inputs. We want to select one of

NOTE Confidence: 0.87033998966217

dd9faf05-cf2f-4180-a6a9-1051b99d8a5e
00:50:06.324 --> 00:50:10.788
them to be attached to this
single output. So here is the

NOTE Confidence: 0.87033998966217

0701b200-4441-4e24-93e8-9d9158183b73
00:50:10.788 --> 00:50:13.764
MUX. So by the MUX 2 by 1.

NOTE Confidence: 0.854752540588379

16a3e000-b3a8-446a-9169-ea1a749c34fc
00:50:14.590 --> 00:50:21.324
We have two inputs, I/O and the
current state of the flip flop.

NOTE Confidence: 0.887788355350494

d8766318-d5d3-4c22-8a6b-2afcec788b7b
00:50:22.360 --> 00:50:23.886
And we want to select one of

NOTE Confidence: 0.830982565879822

3ebf5655-b211-465b-b48c-004c9b9313c2
00:50:23.886 --> 00:50:28.781
them. So in the MUX we have
switch inputs and this switch

NOTE Confidence: 0.830982565879822

ddda63e1-8122-4064-b27c-2ce8dbd9ff7b
00:50:28.781 --> 00:50:33.233
input can be attached to this
select input. So if select is 0.

NOTE Confidence: 0.831640601158142

4fc465fa-4d0d-4b10-b718-555c02c3983d
00:50:33.930 --> 00:50:39.522
Comes here zero. Attached. The
first input of the MUX, which is

NOTE Confidence: 0.831640601158142

8de0a336-9910-46af-8b94-6cf16fcac721
00:50:39.522 --> 00:50:45.580
the current state. So this gonna
be attached here and the Q goes

NOTE Confidence: 0.831640601158142

05c6bb5c-a37d-473f-8e6c-431949f21447
00:50:45.580 --> 00:50:50.240
inside the D so Q back to the.
D it is storing.

NOTE Confidence: 0.86483359336853

458274af-6436-4f40-a948-d964dd48bcd4
00:50:51.040 --> 00:50:53.380
However, if R is 1.

NOTE Confidence: 0.84705114364624

6a9da3bc-94bd-4f16-b99c-b4829879ce32
00:50:53.940 --> 00:50:59.364
It comes here and one attached
the second input to the single

NOTE Confidence: 0.84705114364624

0f8c5e3a-1b3a-4b52-8962-518b7ae5f8cc
00:50:59.364 --> 00:51:02.076
output, so I/O goes to the.

NOTE Confidence: 0.824612021446228

f4ed0f88-c56a-4915-a367-6ea1d664c9c6
00:51:02.690 --> 00:51:03.370
Flip flop

NOTE Confidence: 0.908427238464355

d65e2499-e2d0-4aee-9183-18b40201e9ef
00:51:05.070 --> 00:51:08.130
So if we

NOTE Confidence: 0.877731204032898

b4d3b21e-6f98-4ef4-b609-ee2f843b2581
00:51:08.130 --> 00:51:14.066
replace. Not replacing actually.
If we add the two by one MUX

NOTE Confidence: 0.877731204032898

2cd69805-d05a-44ab-8465-72f6486e37d4
00:51:14.066 --> 00:51:18.818
in before the input of all the
flip flops in our memory.

NOTE Confidence: 0.870930969715118

b07bd911-b495-4590-85b6-7704eb098ca0
00:51:20.080 --> 00:51:26.299
We can support the store
for each flip flop.

NOTE Confidence: 0.894752860069275

fee822a0-b0fd-4879-9f7e-945e475aba6b
00:51:27.270 --> 00:51:33.726
So if. I
want to store the information in

NOTE Confidence: 0.894752860069275

80e9804c-68e2-4a3c-a293-34d905c4fd15
00:51:33.726 --> 00:51:35.638
the data bus 0101.

NOTE Confidence: 0.85794198513031

5aa458a2-238b-46d5-95e2-a30af6f35fa4
00:51:36.440 --> 00:51:41.335
In the third memory location,
here's the address of the third

NOTE Confidence: 0.85794198513031

530cb0f3-57a2-4aeb-9d11-b64c9a8786b9
00:51:41.335 --> 00:51:42.670
memory location 10.

NOTE Confidence: 0.867289483547211

db3f50bb-2168-4f36-8e11-830f1cc96fb1
00:51:43.590 --> 00:51:48.110
The address information goes to
the decoder, 10 enables the

NOTE Confidence: 0.867289483547211

5559260f-890d-40a7-a82d-632104558bbf
00:51:48.110 --> 00:51:52.178
third output and all the other
outputs are zero.

NOTE Confidence: 0.861832797527313

5f8162ef-1e2e-4fe8-aa54-ff8aaefcebbd
00:51:53.180 --> 00:51:58.916
And then. The output of the
decoder is attached to these

NOTE Confidence: 0.861832797527313

e7c9824f-9b18-4e26-add2-a6525d6efc31
00:51:58.916 --> 00:52:01.280
select input of all the MUX.

NOTE Confidence: 0.928960144519806

c21bdbfe-4b2a-4302-ac99-c4d65ba74da5
00:52:02.190 --> 00:52:03.678
Because this is 1.

NOTE Confidence: 0.851383745670319

0de64e00-f8fa-46e0-909f-c034c934ed8d
00:52:04.380 --> 00:52:09.900
So in the MUX, when it becomes
one for the MUX 2 by 1, the

NOTE Confidence: 0.851383745670319

44810096-4baa-44fc-b8ef-ae47c89384f9
00:52:09.900 --> 00:52:11.740
second input gonna be selected.

NOTE Confidence: 0.83439838886261

e2cf6e71-aed9-47d9-a986-94dba8174d71
00:52:12.430 --> 00:52:18.205
So. The input attached to the D
flip flop as you can see here

NOTE Confidence: 0.83439838886261

46d0e6d1-ea99-488a-afa1-e476764d7b5d
00:52:18.205 --> 00:52:19.210
and the inputs.

NOTE Confidence: 0.84606921672821

7273934f-b104-4a71-a128-933f4c4f2f84
00:52:19.810 --> 00:52:24.067
Goes inside zero goes. Here
one goes here. Zero goes here

NOTE Confidence: 0.84606921672821

36d4ed21-5d85-4142-a08b-6c94485a87f4
00:52:24.067 --> 00:52:27.550
and one goes here at the
first positive edge.

NOTE Confidence: 0.893028676509857

7ef75248-217a-43f7-8979-bd10474143df
00:52:30.770 --> 00:52:33.902
This value doesn't go to other

NOTE Confidence: 0.880393922328949

f378b410-af50-4cc3-b6b7-a18fc2a86a80
00:52:33.902 --> 00:52:38.000
flip flops. For instance, for
the first register.

NOTE Confidence: 0.807470381259918

5bd78028-92d7-4a61-ac47-c932e57058aa
00:52:38.880 --> 00:52:43.269
Becaused by this address, the
first output of the decoder is

NOTE Confidence: 0.807470381259918

dad5fd3b-d3d2-4feb-8d22-02ed9eebad0c
00:52:43.269 --> 00:52:47.259
00, is attached to the MUX of
the first register.

NOTE Confidence: 0.854407072067261

e086fa94-58ea-469e-b648-3b9e1670f5c8
00:52:47.820 --> 00:52:52.320
and 10 is attached the MUX the
first input gonna be attached to

NOTE Confidence: 0.854407072067261

4012aaff-a6e0-4593-b238-259ae7badb0a
00:52:52.320 --> 00:52:56.820
single output of the MUX and
the first input comes from the

NOTE Confidence: 0.854407072067261

96059e20-e679-483c-8005-cd6005dc8bac
00:52:56.820 --> 00:52:58.695
output of the flip flop.

NOTE Confidence: 0.913756668567657

24b29b79-ec85-4e43-951e-35fa4647a013
00:52:59.390 --> 00:53:03.380
And so this number doesn't go
inside the first register.

NOTE Confidence: 0.802938163280487

18a45b14-8454-4a5b-846a-1631d9944753
00:53:04.810 --> 00:53:10.257
The output of each flip flop
goes inside the 1st, so it means

NOTE Confidence: 0.802938163280487

1f0e43e0-03bc-40c7-aeaf-52802d4b530d
00:53:10.257 --> 00:53:14.028
that the first register gonna
store its previous value.

NOTE Confidence: 0.887071549892426

974f1220-84db-4aee-aaf2-9976632338b7
00:53:15.050 --> 00:53:19.076
The same is for the second
register. Also for the last

NOTE Confidence: 0.810003876686096

0c27dd3d-f710-4ef4-be68-2b221247a00a
00:53:19.076 --> 00:53:22.182
register. They all the register

NOTE Confidence: 0.871229469776154

7f51532f-0de7-4f2c-a641-7cf3f4697f6d
00:53:22.182 --> 00:53:28.120
stores. The only registered that
accept the input is the this

NOTE Confidence: 0.871229469776154

45459d05-b21b-420a-a160-4fc32f099701
00:53:28.120 --> 00:53:30.104
register, which has one.

NOTE Confidence: 0.832757294178009

f72082c4-3ee6-46d6-a760-a921e8b24456
00:53:30.760 --> 00:53:35.130
And allows the input based
on the marks goes inside

NOTE Confidence: 0.832757294178009

c22d9afc-7f23-45ef-ab79-683519476c51
00:53:35.130 --> 00:53:36.441
the flip flop.

NOTE Confidence: 0.862255334854126

11ca098c-33a1-41f9-92ae-7694276748fc
00:53:39.560 --> 00:53:46.308
So by this way, by adding MUX
to the input of the flip flops.

NOTE Confidence: 0.795822560787201

528deee3-47b7-4077-85b4-2bf59b3c1e61
00:53:47.020 --> 00:53:52.246
And adding the decoder to select
one row out of N row by a

NOTE Confidence: 0.795822560787201

c00b4fa9-7763-4df4-8670-6a494ec7681b
00:53:52.246 --> 00:53:57.070
decoder we build a memory unit
. So here is my question.

NOTE Confidence: 0.933534204959869

2cdb4f83-c469-48b8-ad6a-cccbdb2cbe27
00:53:57.630 --> 00:53:58.668
If I have.

NOTE Confidence: 0.674699246883392

c4fe8962-3c98-45f9-afa7-908f1b588d65
00:53:59.460 --> 00:54:06.676
N wires or N Bit Databus,
meaning that I can store n

NOTE Confidence: 0.674699246883392

3e9a2142-24f3-40a5-a45e-73aa3ad4c78a
00:54:06.676 --> 00:54:07.988
bit information.

NOTE Confidence: 0.752595186233521

b54795b7-7afd-45a2-b9da-38081e96142b
00:54:09.130 --> 00:54:13.066
An if I have N bit wires or M

NOTE Confidence: 0.815693795681

95ecd3a0-4cb1-4756-be4d-8206b967a720
00:54:13.066 --> 00:54:16.468
wires here. In the address bus.

NOTE Confidence: 0.886852443218231

d713e825-84e2-4579-bf83-87159f95a10e
00:54:17.210 --> 00:54:20.840
What would be the final size of
my memory measure?

NOTE Confidence: 0.857223272323608

c195dfd4-4793-4819-b5fe-ad32f5a8fb81
00:54:23.870 --> 00:54:25.478
Anybody of you?

NOTE Confidence: 0.571273386478424

7b4d1af9-e25f-4111-8e25-06aec4291f7b
00:54:29.930 --> 00:54:35.708
Noniko says
that N by M.

NOTE Confidence: 0.781600773334503

2493da9b-ed36-446a-ab88-b0b34d5604e7
00:54:37.640 --> 00:54:41.584
Meaning that this matrix
let's practice this matrix.

NOTE Confidence: 0.781600773334503

7423764e-0bcc-4af0-ba59-f664a67e4441
00:54:41.584 --> 00:54:47.007
This is a four speed data
Bus, 2 bit address bus.

NOTE Confidence: 0.947919189929962

61ca673b-134d-40bf-8649-1d5dda2f2b98
00:54:48.150 --> 00:54:48.980
Remember.

NOTE Confidence: 0.806805372238159

3424f068-a5a3-4352-b79a-5010ce1002d1
00:54:50.990 --> 00:54:54.434
the number of Flip flop in each

NOTE Confidence: 0.830408871173859

ac3d43f2-98cb-4a01-931e-06d0302d6e77
00:54:54.434 --> 00:55:00.384
row. Depends on the number of
wires in the databus. So if you

NOTE Confidence: 0.830408871173859

7310a6e5-8ed4-4151-81a4-cc4078f7f810
00:55:00.384 --> 00:55:06.336
have 4 bit data bus you have it
in each row we gonna have 4 flip

NOTE Confidence: 0.830408871173859

8e489b35-0bcf-4b28-9f4a-f4f0c54896ca
00:55:06.336 --> 00:55:10.056
flops because these gonna store
4 bit number. So each row is

NOTE Confidence: 0.830408871173859

f43e2501-9676-4ecf-8ada-c3bd845ed524
00:55:10.056 --> 00:55:12.288
gonna have 4 bit flip flop.

NOTE Confidence: 0.843236207962036

91275b70-288f-4faf-b053-de3e3f0f0da3
00:55:14.640 --> 00:55:20.165
However, in the address bus, if
I have two bits address, we can

NOTE Confidence: 0.843236207962036

852df826-93e8-4499-b079-142caccf144b
00:55:20.165 --> 00:55:24.840
address 2 to the power of two
rows, so four rows.

NOTE Confidence: 0.895017445087433

a04d2158-0864-4ad7-806a-971ac538e2af
00:55:26.130 --> 00:55:30.090
If I increase 2 to M is gonna be 2
to the power of.

NOTE Confidence: 0.822000563144684

fb84e4db-471a-45eb-81bf-d7fb90326586
00:55:30.680 --> 00:55:33.650
M correct Jake yes correct?

NOTE Confidence: 0.850907921791077

54f0975c-9643-4207-9cd9-e5f85fa8a886
00:55:34.170 --> 00:55:40.050
So if I have M bit address, it
goes to the decorder M by two to

NOTE Confidence: 0.850907921791077

1895dc62-46b3-45c8-a89c-0df47fe31929
00:55:40.050 --> 00:55:41.618
the power of M.

NOTE Confidence: 0.860579371452332

9da54462-837a-47cf-b33a-57ff2652d703
00:55:42.730 --> 00:55:47.590
Number of rows in each row. I
can store n bit value.

NOTE Confidence: 0.860937595367432

d1ae789f-31fe-4f74-a2f0-7753af65e58b
00:55:48.920 --> 00:55:54.905
So in total I'm going to have
two to the power of M rows in

NOTE Confidence: 0.860937595367432

886e25d8-e15c-420c-a219-968c1d071df8
00:55:54.905 --> 00:55:56.900
its row n bit number.

NOTE Confidence: 0.844100058078766

9058ca96-b315-4ab7-a4fa-f5457d33f69f
00:55:57.410 --> 00:56:01.874
So the data bus determines the
number of flip flops in each row

NOTE Confidence: 0.844100058078766

95a5ae99-f0a6-481d-8387-42729ea70e56
00:56:01.874 --> 00:56:05.966
and the number of rows is
determined by the number of

NOTE Confidence: 0.844100058078766

592d1246-a877-4229-b632-38852236cec9
00:56:05.966 --> 00:56:11.546
address bits ,address bits If
it is M, we can select 2 to the

NOTE Confidence: 0.844100058078766

df919fa1-945e-412e-8b9a-e5c33eae9940
00:56:11.546 --> 00:56:13.034
power of M different rows.

NOTE Confidence: 0.699831485748291

e2e15719-b3b7-4272-bd6d-fbae8e5a3556
00:56:15.660 --> 00:56:18.932
Usually the number of,

NOTE Confidence: 0.752804160118103

662b4f48-cae9-45c1-bdc3-35fc6e2d3b77
00:56:18.932 --> 00:56:26.683
uh? Wires in the data
bus and the number of wires in

NOTE Confidence: 0.752804160118103

6bb35b5b-ebf2-41ee-b704-1e032f73f195
00:56:26.683 --> 00:56:29.498
the address bus is fixed.

NOTE Confidence: 0.837639629840851

d39ae968-c768-49bf-9604-bdcd8c4b826a
00:56:31.110 --> 00:56:35.598
So it's not dynamic. So
basically when we build the bus

NOTE Confidence: 0.837639629840851

6a7ecffe-dcd0-48ae-a8d1-e4b7b751894d
00:56:35.598 --> 00:56:40.902
bus was the main board. When we
build the bus with fixed the

NOTE Confidence: 0.837639629840851

0ef79d18-39b7-44bf-b7b0-25a0089d48cf
00:56:40.902 --> 00:56:45.798
data bus an address bus. So N and M
is usually fixed. However we

NOTE Confidence: 0.837639629840851

fcb01d66-4b91-432a-a744-4e8aba6eff13
00:56:45.798 --> 00:56:51.510
this size of the memory unit's
gonna be at Max 2 to the power

NOTE Confidence: 0.837639629840851

d895e9f7-5ebf-4beb-9a13-fbf992dc605f
00:56:51.510 --> 00:56:54.774
of M. Each row going to have n

NOTE Confidence: 0.827918827533722

79e2edcb-72aa-487c-b056-a641b6e74599
00:56:54.774 --> 00:57:00.812
bit value. So the memory the
size of the memory module can be

NOTE Confidence: 0.827918827533722

0b003a23-3f52-4477-8d8e-c4e1d9f7cb3a
00:57:00.812 --> 00:57:04.610
dynamic. Up until this maximum
number number of rows.

NOTE Confidence: 0.791458904743195

f6f5e912-c96c-4417-8d04-5d6e119813f3
00:57:05.140 --> 00:57:08.137
Could be less, but the
address bus and data bus

NOTE Confidence: 0.791458904743195

b165f734-8e3f-456a-a2be-de4807a24092
00:57:08.137 --> 00:57:09.469
number wires are fixed.

NOTE Confidence: 0.864949524402618

be2dd161-4cef-4443-a5f6-94f93c617be1
00:57:11.570 --> 00:57:15.170
Currently I mean now it is
technology. If you go to the

NOTE Confidence: 0.864949524402618

28188dd3-2635-4323-a657-a69a522f07ea
00:57:15.170 --> 00:57:18.470
market and buy a computer
system, this is the just the

NOTE Confidence: 0.742139518260956

b14b8eee-9008-4a7f-bbd2-8035973d195a
00:57:18.470 --> 00:57:24.390
most common one. Uh, they have
60 bit data bus, meaning that

NOTE Confidence: 0.742139518260956

c6daca97-3062-447a-a903-490e35c2d66e
00:57:24.390 --> 00:57:27.390
the data bus has 64 wires.

NOTE Confidence: 0.899118065834045

57ff0334-6084-439e-ad83-7859397f9f64
00:57:28.340 --> 00:57:31.350
It means that you can store
the information within the

NOTE Confidence: 0.899118065834045

525b993b-19d9-4dfd-ac50-59445c462f66
00:57:31.350 --> 00:57:34.360
range zero up until 2 to the
power of 64.

NOTE Confidence: 0.840351223945618

27898aae-af0a-4039-90b5-7a8e85a9f9dc
00:57:35.550 --> 00:57:38.960
If you wanted to store
this information in the C

NOTE Confidence: 0.840351223945618

c2d6343c-1f92-409f-9b46-c48e6ef5e261
00:57:38.960 --> 00:57:42.370
or C++ language, you have
to define the variable as

NOTE Confidence: 0.840351223945618

70b60d8f-25d2-42a3-b5ea-a936df328b30
00:57:42.370 --> 00:57:43.393
long unsigned integer.

NOTE Confidence: 0.88154262304306

d5d24e68-c140-4ed6-ba2d-a2491fcc94fd
00:57:45.880 --> 00:57:49.830
How how about this sign
integer? So we already says

NOTE Confidence: 0.88154262304306

1184aaaf-f753-426f-bdd9-d449903434dd
00:57:49.830 --> 00:57:53.385
that if you want to store
the negative numbers.

NOTE Confidence: 0.825518608093262

15f0867d-0e26-4e33-a70d-6d6366abe7c5
00:57:54.890 --> 00:58:00.456
Uh. In Two's complement, what
would be the range?

NOTE Confidence: 0.866615772247314

6f4cd391-e85e-4bf7-999f-fcf88f0214dc
00:58:01.320 --> 00:58:02.910
Any of you can remember?

NOTE Confidence: 0.872257113456726

b820d265-55a6-479b-816a-da6e721aecee
00:58:03.470 --> 00:58:07.705
If the whole range of numbers
we can represent in positive

NOTE Confidence: 0.872257113456726

bbc38f43-8ccb-473b-8bc9-d95f825e29e3
00:58:07.705 --> 00:58:13.095
numbers are zero up until 2 to
the power of 64, you said that

NOTE Confidence: 0.872257113456726

5501c5da-e64e-414e-9044-5ffffa6b5d8e
00:58:13.095 --> 00:58:17.330
in twos complement we have to
divide into two range, positive

NOTE Confidence: 0.872257113456726

6e21a771-477e-4e18-8fe4-285670c30205
00:58:17.330 --> 00:58:20.795
and negative for the negative
range. Although we represented

NOTE Confidence: 0.872257113456726

68bcccbf-13dd-4f71-ba0d-7b57e4f4591a
00:58:20.795 --> 00:58:24.645
as positive numbers, but we
interpret them as the negative

NOTE Confidence: 0.872257113456726

e2e736ee-0950-4231-8b3b-0b613c28b6ba
00:58:24.645 --> 00:58:28.880
numbers. So what would be the
range of positive numbers and

NOTE Confidence: 0.872257113456726

0071e756-60a9-4977-8918-c175c85212d3
00:58:28.880 --> 00:58:29.650
negative numbers?

NOTE Confidence: 0.922133982181549

4097ccbb-fbf4-46d2-a78c-01ae57ad703c
00:58:31.370 --> 00:58:33.960
So at home you can go back.

NOTE Confidence: 0.870298624038696

02965cdd-2568-43fb-9a02-25277f473c69
00:58:34.490 --> 00:58:36.415
And review the Two's complement

NOTE Confidence: 0.861276924610138

e463cdd4-589b-4cf9-a3c0-4a0482a173c2
00:58:36.415 --> 00:58:41.426
system. There we said that if
you are given N positions now,

NOTE Confidence: 0.861276924610138

23e60905-4249-454e-9061-126d7583d18a
00:58:41.426 --> 00:58:43.206
we know that the positions.

NOTE Confidence: 0.890166044235229

b5471855-36df-4c47-9e8a-a483fc31b8a5
00:58:43.840 --> 00:58:49.678
Are the wires in the data bus so
you are given 64 bit position,

NOTE Confidence: 0.890166044235229

e120720a-d95a-4dac-af3f-63bd68a27437
00:58:49.678 --> 00:58:54.265
So what would be the range of
this negative and positive

NOTE Confidence: 0.859342336654663

f2624ce0-b88d-48d1-be68-fe7c3f1d6a4b
00:58:54.265 --> 00:58:59.560
numbers? For the data bus,
the current systems have 64 bit,

NOTE Confidence: 0.859342336654663

027f3f3d-ec14-495b-9f71-9ab67b6d39fc
00:58:59.560 --> 00:59:04.114
meaning that you can allocate or
you can find or select.

NOTE Confidence: 0.877039194107056

380727b0-95a5-46dd-bfd8-9cb7e5293dc3
00:59:04.740 --> 00:59:11.148
Among two to the power of 64
memory locations, this is huge.

NOTE Confidence: 0.864697158336639

cdca90e0-0c9b-4345-9292-af781eb39fcf
00:59:12.190 --> 00:59:15.562
Memory size. Just see how huge

NOTE Confidence: 0.899417459964752

1209f6b0-21f1-4a82-87ac-4e2f5c183fc2
00:59:15.562 --> 00:59:22.289
it is. If you want to be
to buy this maximum memory unit

NOTE Confidence: 0.883276998996735

07fea89d-7998-4bb7-9f01-7c48389c7f1c
00:59:22.289 --> 00:59:27.826
You must be more than rich
not only rich, more than rich,

NOTE Confidence: 0.883276998996735

34b2cff6-85e4-47ea-a540-b17078553020
00:59:27.826 --> 00:59:32.182
and even if you are rich, you
don't. Usually your program or

NOTE Confidence: 0.883276998996735

6cff32ef-3085-490b-ba72-ae9b0bacac4c
00:59:32.182 --> 00:59:35.812
your problem doesn't need that.
That amount of memory units.

NOTE Confidence: 0.902301371097565

d59a83b2-2960-491a-8d0d-ae5bb116b45e
00:59:36.780 --> 00:59:38.812
Because I'm in 2 to the Power 64

NOTE Confidence: 0.789393365383148

788791b4-af83-4d81-8c46-38478fc28dfc
00:59:38.812 --> 00:59:42.004
is this. 2 to the power of 10 it

NOTE Confidence: 0.742257356643677

9bff835e-9c3a-405c-89ea-c04d0c5d83ee
00:59:42.004 --> 00:59:46.376
is kilo. Multiply by two to power 10.
These become mega.

NOTE Confidence: 0.769252300262451

9621c8dc-f422-44dc-a93f-4e3c9a0a8ae2
00:59:46.880 --> 00:59:51.508
And then two power 10 Giga,
another 2 to the power of 10

NOTE Confidence: 0.769252300262451

74280547-ad6e-4954-bebe-3564dd8aec5b
00:59:51.508 --> 00:59:55.424
Pata and then another 2 to the
power of 10 EXA.

NOTE Confidence: 0.929451107978821

83462ef2-3dca-46d9-84b5-663de13cec16
00:59:56.610 --> 00:59:57.590
And then.

NOTE Confidence: 0.861910760402679

28ba909d-28c6-44d8-894c-27185ad29716
00:59:59.090 --> 01:00:05.870
2 to the Power 64 Another power
of four. 2 to the power of four.

NOTE Confidence: 0.861910760402679

7cace04f-6025-4762-86a4-f7adf416545c
01:00:05.870 --> 01:00:10.842
It means that this is 16 exa
memory location. Each location

NOTE Confidence: 0.861910760402679

2cfdd19e-8bb7-4f12-9796-7f7b67198bc7
01:00:10.842 --> 01:00:12.198
have 60 bit.

NOTE Confidence: 0.777737975120544

bf486366-cf18-4a90-8646-6c5b0dd4f2ae
01:00:13.090 --> 01:00:19.516
This is a huge amount of memory,
so this is the maximum, but, uh.

NOTE Confidence: 0.830618321895599

071ffad8-1fc6-4032-9cfd-43b2170819f5
01:00:20.390 --> 01:00:25.486
You must be. I mean, you might
not be rich. You can afford just

NOTE Confidence: 0.830618321895599

50b56da1-5009-45e5-a0c7-473245d87d67
01:00:25.486 --> 01:00:27.670
very less, not amount of memory

NOTE Confidence: 0.85742974281311

7178f6ca-e23c-4b44-8851-4fd64aa07be0
01:00:27.670 --> 01:00:35.046
unit. So if you go
to the market you can find is

NOTE Confidence: 0.85742974281311

06ff518b-b304-40db-862e-c0e2251f3d26
01:00:35.046 --> 01:00:36.684
16 Gigabit GB.

NOTE Confidence: 0.910827279090881

1cba2073-47cb-454d-a8c4-17e81ea9d847
01:00:36.690 --> 01:00:39.450
Memory module for $81.00.

NOTE Confidence: 0.834211826324463

b0171270-e89f-4b76-b7e6-c3f99cacd319
01:00:40.040 --> 01:00:45.486
And 16 gigabytes means 16 gig
means that 16 by 2 to the power

NOTE Confidence: 0.834211826324463

3e7d9e9a-e44f-46fa-8ca6-486e756d0722
01:00:45.486 --> 01:00:51.321
of 10 Mega and Mega means 2 to
the power of K. Kilo and kilo

NOTE Confidence: 0.834211826324463

1ec15225-79d9-4eb1-a82e-243d885e0fe3
01:00:51.321 --> 01:00:56.378
means 2 to the power of 10
units. So in total you're gonna

NOTE Confidence: 0.834211826324463

75da269d-e62b-40fe-846d-ac13e76e2155
01:00:56.378 --> 01:00:59.490
have 16 two to the power of 30

NOTE Confidence: 0.909562826156616

115237f7-d9af-4f7f-afed-13ec144097b7
01:00:59.490 --> 01:01:04.830
memory locations. This is a huge
number. You can calculate this

NOTE Confidence: 0.909562826156616

24468216-9a3e-4d84-8b16-854a2e5ac5ec
01:01:04.830 --> 01:01:06.430
number just for $80.

NOTE Confidence: 0.902948498725891

928bf7d5-5e40-4494-9c49-039475c9e858
01:01:08.710 --> 01:01:13.767
And if you want to calculate the
number of flip flops you need.

NOTE Confidence: 0.862027823925018

1399c98d-d1fb-4645-8d7b-e23745ff09cd
01:01:14.400 --> 01:01:16.458
These are the number of rows.

NOTE Confidence: 0.886394798755646

8730764f-5e45-4f1f-9259-3aca2f8a7412
01:01:17.200 --> 01:01:20.560
In each row you gonna have 64

NOTE Confidence: 0.851726114749908

f0dfba29-6d71-4b6e-8f10-0aa0527dd40e
01:01:20.560 --> 01:01:22.420
bits. Flip flop

NOTE Confidence: 0.913306832313538

59d68f2d-e31e-4e35-916d-52da3b6be607
01:01:22.950 --> 01:01:28.914
So you have to multiply this
number by another 64, so 64 is 2

NOTE Confidence: 0.913306832313538

2235cf3d-0883-493a-ba53-a0c4008b80de
01:01:28.914 --> 01:01:31.044
to the power of 6.

NOTE Confidence: 0.859944045543671

5e2dc166-c460-4585-a8bf-62a5c2bd256d
01:01:31.700 --> 01:01:37.280
And 16 is to the power of four.
In total you gonna have two to

NOTE Confidence: 0.859944045543671

3c8726a2-46c3-4606-ba54-5ac4f1e14382
01:01:37.280 --> 01:01:39.512
the power of four D flip

NOTE Confidence: 0.904253125190735

1adf7ac3-0f69-4d7a-9234-495112598c70
01:01:39.512 --> 01:01:45.340
flops. for  $80. Remember
this this is the 16

NOTE Confidence: 0.904253125190735

465b969a-8876-4f80-8344-03333b4a1cbf
01:01:45.340 --> 01:01:48.700
gigabyte module that the
engineers built for us.

NOTE Confidence: 0.857978403568268

202ae185-5cec-4a89-b551-d356c4a244a8
01:01:49.870 --> 01:01:56.320
And this you can buy this that
has 2 to the power of 4 D flip

NOTE Confidence: 0.857978403568268

99839686-8368-4b13-850d-4faa6307c155
01:01:56.320 --> 01:02:00.620
flops for $80.00. You remember
the this is the memory

NOTE Confidence: 0.857978403568268

c4c04efb-24fc-4c7f-b6cf-08b55bb71256
01:02:00.620 --> 01:02:04.490
we designed here? It only has how
many flip flops.

NOTE Confidence: 0.873406410217285

572107d2-57cc-4ebe-b76b-907993e76cd3
01:02:05.420 --> 01:02:11.641
4. Multiply by 2 to the power
of 2 minutes means that only 16

NOTE Confidence: 0.873406410217285

c5509df9-f5bf-48d4-bf3e-d69d081b660f
01:02:11.641 --> 01:02:13.109
flip flops, only 16.

NOTE Confidence: 0.844741940498352

ad0b3628-3451-4bd2-b16b-5c7f36dce14b
01:02:14.540 --> 01:02:21.132
However. Now it is you can
buy 2 to the power of 4 D flip

NOTE Confidence: 0.844741940498352

dba646b1-40aa-4916-a02c-39e1bbc2418d
01:02:21.132 --> 01:02:22.224
flops for $80.

NOTE Confidence: 0.924743831157684

7d709309-9dd8-4699-96ea-b26e208e8f88
01:02:25.010 --> 01:02:30.802
Ann This is the one moment that
I like to show you that.

NOTE Confidence: 0.894995748996735

b80a62dd-50f4-4f42-b12b-34f86278a7f4
01:02:31.820 --> 01:02:33.400
This is the human progress.

NOTE Confidence: 0.897379755973816

dbd84eda-3297-4433-be8f-c71a58b2965a
01:02:33.920 --> 01:02:39.360
In 1958, Nineteen 59 we
could build only one flip

NOTE Confidence: 0.897379755973816

2283ad5f-aef3-4905-bdb0-5e857a9baf81
01:02:39.360 --> 01:02:40.992
flop this size.

NOTE Confidence: 0.900663375854492

fc22b744-5ac2-4650-9ffd-e64ebfd97cf4
01:02:42.180 --> 01:02:44.508
Just the size of the finger.

NOTE Confidence: 0.906513094902039

95a253ce-dc89-4362-bab0-ed8168e24376
01:02:46.130 --> 01:02:52.416
Now it is after just less than
60 years, just less than half a

NOTE Confidence: 0.906513094902039

bb9cb377-2e16-4860-990d-b5a626534bdd
01:02:52.416 --> 01:02:56.457
almost half a century, just 50
years in 2012.

NOTE Confidence: 0.914030611515045

2e7d93e1-cb50-420c-897a-eac8559379e1
01:02:57.200 --> 01:03:00.362
We could build a memory unit

NOTE Confidence: 0.736296355724335

79780543-a9be-449a-a6c5-88ce574b1e13
01:03:00.362 --> 01:03:06.490
that has. 2 to the power 40
flip flops the same size.

NOTE Confidence: 0.862615704536438

8ce39190-daa0-4b39-b62a-ecb2f31f215c
01:03:09.190 --> 01:03:12.810
And within just 50-60 years.

NOTE Confidence: 0.889287531375885

1caeef0e-939d-40d1-880d-bdf990fe75fa
01:03:13.620 --> 01:03:17.952
And this is the human progress,
and this is the true prediction

NOTE Confidence: 0.889287531375885

ff1bd6e0-c971-4caa-8219-e36d9fd26fa3
01:03:17.952 --> 01:03:21.562
of the Stanley Kubrick in this
his in his movie.

NOTE Confidence: 0.841402530670166

722746e4-f3b7-47dc-8378-dce5f1e692f2
01:03:22.530 --> 01:03:26.259
Ann from Bone to the technology
correctly we have. It took

NOTE Confidence: 0.841402530670166

7c7a91ed-de82-4412-9193-bec038515cb2
01:03:26.259 --> 01:03:29.649
years. I mean more than I mean
million, I mean.

NOTE Confidence: 0.849800705909729

4da29483-7627-45cb-ac01-58bce9049a6b
01:03:30.540 --> 01:03:33.370
Not million yes yeah 100,000

NOTE Confidence: 0.885396301746368

c737e95f-93d6-487b-9917-37886e1d4098
01:03:33.370 --> 01:03:39.650
years. But within 50 years, 50
years, just 5 0 years.

NOTE Confidence: 0.849271297454834

1f67bfd9-8708-48ee-970a-14de70e68853
01:03:40.590 --> 01:03:46.057
We could build this technology
so building a spaceship, I mean,

NOTE Confidence: 0.849271297454834

cb93928f-da62-470b-be12-48458ce2cdb2
01:03:46.057 --> 01:03:51.027
or spacecraft would be just in
20 or 30 years.

NOTE Confidence: 0.870801270008087

e85c0977-b6b2-418f-aa80-f35ba0bb6c40
01:03:53.240 --> 01:03:58.840
Just by I mean, imagine this is
the trip that we took from just

NOTE Confidence: 0.870801270008087

1cf5b1ec-b9b0-4ae9-88f5-16d5cb4c9176
01:03:58.840 --> 01:04:04.040
an and gate or gate or exclusive
or gate. Just a simple small

NOTE Confidence: 0.870801270008087

849420b8-4530-4f4f-a913-5284c86917e5
01:04:04.040 --> 01:04:06.040
gate up until building this

NOTE Confidence: 0.84380304813385

b3c896ea-f1b8-4a83-86c5-a79c36005c77
01:04:06.040 --> 01:04:09.897
memory module. Flip flops
that can store this amount

NOTE Confidence: 0.84380304813385

ededa8f2-a76c-4160-865f-91004ba71886
01:04:09.897 --> 01:04:10.559
of information.

NOTE Confidence: 0.900173127651215

c12e51ed-8289-4786-82dd-474db33cddc4
01:04:12.900 --> 01:04:14.886
Just within 50 or 60 years.

NOTE Confidence: 0.862651646137238

4140a857-675d-46f2-b0ac-26652c664473
01:04:16.320 --> 01:04:21.684
So now that we have a memory
module that can store the

NOTE Confidence: 0.862651646137238

99ed74e3-9534-4c11-8b18-d60b27ea8d3e
01:04:21.684 --> 01:04:26.601
information in the data bus by
selecting one of the memory

NOTE Confidence: 0.862651646137238

d7b4cb4c-a568-43b3-ab7a-219666a1a4ca
01:04:26.601 --> 01:04:30.624
units by an address bus, the
next task is.

NOTE Confidence: 0.85701847076416

574b2126-71e1-4d20-864e-b0ce1d9cc677
01:04:31.270 --> 01:04:35.850
A reading of that memory
location, so we store. After

NOTE Confidence: 0.85701847076416

a9c2e2c3-16ce-40d7-bc5b-ca1bbd7001a3
01:04:35.850 --> 01:04:40.888
restoring we want to read, so
sometimes we are not only

NOTE Confidence: 0.85701847076416

c81de844-2af0-420b-ade7-7676b1c0c2b5
01:04:40.888 --> 01:04:46.384
storing, we want to read. So for
reading we need another bus

NOTE Confidence: 0.85701847076416

0333941d-06c4-4dbf-bb5b-f9ea23598201
01:04:46.384 --> 01:04:48.674
which is only for reading.

NOTE Confidence: 0.895128309726715

57745a21-ddfc-42e4-8429-1a7e9291bd1f
01:04:49.950 --> 01:04:56.073
So imagine now I want to read
the value in the third register.

NOTE Confidence: 0.895799875259399

6e07c927-5b49-4d53-a28a-fdcc56bcaca0
01:04:58.090 --> 01:04:59.890
So one way would be this.

NOTE Confidence: 0.822778761386871

2d3fa9d5-3708-4aa8-a92c-3098ded13555
01:05:00.440 --> 01:05:05.393
The output of each flip flop the
green line gonna be the output

NOTE Confidence: 0.822778761386871

1c13bb88-5f0b-43ad-a4e0-aa1c6d36f389
01:05:05.393 --> 01:05:06.917
of each flip flop.

NOTE Confidence: 0.89841228723526

d5573f46-e9e1-414f-b604-00dfd0c1d0f6
01:05:07.790 --> 01:05:11.120
So if I select the third

NOTE Confidence: 0.935155153274536

c63ca858-8b51-4e39-8e82-85fc7234bb56
01:05:11.120 --> 01:05:13.550
register. I can.

NOTE Confidence: 0.868773639202118

a822428c-acc1-4c17-81de-3c4e8d829dd3
01:05:14.210 --> 01:05:19.694
Attach the output of the flip
flops in the third register to

NOTE Confidence: 0.868773639202118

1aa5101d-3e65-466d-be4a-24233379a3ae
01:05:19.694 --> 01:05:22.436
the output data bus and select

NOTE Confidence: 0.906329929828644

c7cca2a3-e11d-47a8-b3c0-66ea53dc2ebe
01:05:22.436 --> 01:05:28.312
from them. So again, for other
flip flops for the second

NOTE Confidence: 0.835890650749207

80b4196f-3936-451c-abb1-9ac6d4be5e15
01:05:28.312 --> 01:05:33.534
register. I can attach the
output of the flip flops in the

NOTE Confidence: 0.835890650749207

a0443143-72d0-4f34-a4b7-ceb507813064
01:05:33.534 --> 01:05:36.526
second register. Today data bus
for the output.

NOTE Confidence: 0.851677536964417

e06b3a1f-84b9-4769-b7b7-94d9378c553f
01:05:37.340 --> 01:05:43.990
The same for the other ones. So
each row gonna have its link to

NOTE Confidence: 0.851677536964417

8dfbd999-81d6-4d9e-a6e2-f9d8282668ab
01:05:43.990 --> 01:05:50.165
the output database Data
bus. So we have four rows, so we

NOTE Confidence: 0.851677536964417

46651044-0584-4375-938e-3ed15d0e4af5
01:05:50.165 --> 01:05:55.390
have to select between 4 inputs
and attach the four inputs.

NOTE Confidence: 0.900387763977051

9a23e171-8dd1-41c0-9297-a352e69c88ec
01:05:56.110 --> 01:06:00.127
One at a time only one of
the inputs to the single output?

NOTE Confidence: 0.805108964443207

abbe6d7a-1b1f-4094-9d8b-600591866ef9
01:06:00.830 --> 01:06:06.901
So this is selecting one input
out of many inputs an attach it

NOTE Confidence: 0.805108964443207

d00769d2-4328-4195-a1ac-517c5d4e0d7d
01:06:06.901 --> 01:06:12.972
to the single output. So again
we need a MUX because we have

NOTE Confidence: 0.805108964443207

79cd9e9f-6868-4436-a040-5809d75e55fb
01:06:12.972 --> 01:06:19.043
four inputs for four registers
in the. Here we need 2 sorry, 4

NOTE Confidence: 0.805108964443207

ce4d157c-ffba-4deb-b5ae-339a2b6c477d
01:06:19.043 --> 01:06:25.581
by 1 MUX. This is a mistake.
So 4 by 1  MUX, meaning

NOTE Confidence: 0.805108964443207

6db148f4-c5ba-4f10-9a44-ed11f6761491
01:06:25.581 --> 01:06:30.718
that selecting among four inputs
and attaching one input to the

NOTE Confidence: 0.870510280132294

16fdefde-7a2d-4b6f-a17e-d8c6b9286d5e
01:06:30.718 --> 01:06:37.322
output bus. So the same
address information can goes to

NOTE Confidence: 0.748150229454041

8c3e8b54-df13-4bb3-aeab-531a510b673c
01:06:37.322 --> 01:06:41.018
the select. Inputs of the MUX.

NOTE Confidence: 0.891754746437073

b75b4d91-06af-4cc1-9138-ab1377c36ab9
01:06:41.770 --> 01:06:43.480
So if I for instance.

NOTE Confidence: 0.902010679244995

fb80efa9-4469-49b7-99a5-45d3ae3eb654
01:06:44.320 --> 01:06:50.224
If I want to just read the value
of the third register.

NOTE Confidence: 0.911347985267639

3663ee01-84ca-44ed-9ccf-5c231f074ab0
01:06:51.250 --> 01:06:53.690
I put the address information

NOTE Confidence: 0.843065142631531

ad5411a8-817e-4db4-9d01-4ac609685b4d
01:06:53.690 --> 01:06:59.656
10. So the 1 zero in the
decoder selects for storing, but

NOTE Confidence: 0.843065142631531

3f982d3e-7f8d-4156-b045-5afe7f88b120
01:06:59.656 --> 01:07:05.064
here we don't want to store, so
the same value goes to the

NOTE Confidence: 0.843065142631531

51d1aa19-2151-4594-af64-7660687a8337
01:07:05.064 --> 01:07:07.144
select input of the MUX.

NOTE Confidence: 0.838499069213867

f70795a4-b496-4e30-8a3b-27c46bf6ef5f
01:07:07.740 --> 01:07:13.525
Out of the four inputs, the 10
only selects the third input of

NOTE Confidence: 0.838499069213867

4beecab0-41a2-423d-bbf3-be66f84441b6
01:07:13.525 --> 01:07:16.640
the MUX and attach that to the

NOTE Confidence: 0.847246110439301

0c8cfb40-d6d5-40bf-9d59-d51c9015615b
01:07:16.640 --> 01:07:22.991
output. It means that the value
of the third row of the role is

NOTE Confidence: 0.847246110439301

26a82a26-a743-4d1d-85ea-fd827207a4a6
01:07:22.991 --> 01:07:28.282
flip flops in the 3rd row gonna
be attached to the output bus.

NOTE Confidence: 0.922544896602631

394f8f46-8427-47d0-9441-9f2914159fe4
01:07:29.790 --> 01:07:30.830
As you can see here.

NOTE Confidence: 0.798542201519012

0a6a1c2b-f214-4321-a89c-76c688e1f140
01:07:33.290 --> 01:07:37.811
All the other outputs from the
other rows, although they are

NOTE Confidence: 0.798542201519012

2af96835-921a-402e-b4dd-b01454ac8abc
01:07:37.811 --> 01:07:43.565
attached to the MUX, but they
don't find a way to go to the

NOTE Confidence: 0.798542201519012

268bd57f-b306-4a6b-bcbb-7d905ccb07d6
01:07:43.565 --> 01:07:46.853
output bus because the MUX
doesn't select them.

NOTE Confidence: 0.845838010311127

51eac1cf-ce7e-49e9-a3b8-97c681336ed1
01:07:47.960 --> 01:07:51.403
So the same address goes
to the MUX in order to

NOTE Confidence: 0.845838010311127

266af2db-8cc9-4ea5-8923-888e9a7edce0
01:07:51.403 --> 01:07:54.533
select one attached to
the data bus for the output.

NOTE Confidence: 0.865395784378052

7f3a6b9b-1784-42be-a95a-23deb7ca2bcd
01:07:55.850 --> 01:07:59.770
This design has a problem.
Anybody can say what's the

NOTE Confidence: 0.865395784378052

d67682e5-fa3c-439c-af24-ac63a5389039
01:07:59.770 --> 01:08:00.162
problem?

NOTE Confidence: 0.920713365077972

2728d334-6f8c-4c08-8e08-958c5645e56c
01:08:06.920 --> 01:08:10.406
Remember, you know we use the

NOTE Confidence: 0.888858199119568

ba96ed4c-ae12-48eb-83d2-61e3fc6c9ecc
01:08:10.406 --> 01:08:15.490
address. Information for
selecting and attaching to

NOTE Confidence: 0.888858199119568

f2789c3d-860e-4f2b-a9b4-529f6fd67e0a
01:08:15.490 --> 01:08:16.810
the output.

NOTE Confidence: 0.869699597358704

9e4da43b-04e1-47cb-a728-1326a293583a
01:08:17.980 --> 01:08:22.140
So the problem is that as long
as we don't have a positive

NOTE Confidence: 0.869699597358704

6bc82d45-fb74-4447-a9ed-f5db1b1abb0a
01:08:22.140 --> 01:08:25.340
edge, the output of the
registers goes to the output

NOTE Confidence: 0.852947235107422

119d51cf-7ad9-4cdf-a76d-4554384a2586
01:08:25.340 --> 01:08:32.061
bus. However, if the first
positive edge comes, the input

NOTE Confidence: 0.7892165184021

9308a370-8373-405e-9384-f24659011c64
01:08:32.061 --> 01:08:39.160
goes inside. So not only
we write, but also we read at

NOTE Confidence: 0.7892165184021

9af0be32-cb07-4046-ab3c-ef1e41e9dcd1
01:08:39.160 --> 01:08:40.654
the first positive.

NOTE Confidence: 0.88257247209549

e9d95af1-5d71-4e54-ba39-aad5de8d66c7
01:08:41.320 --> 01:08:45.030
So the read and write action
gonna be simultaneously so

NOTE Confidence: 0.88257247209549

a405c7fb-578a-4ac0-b617-83c87396a4ac
01:08:45.030 --> 01:08:49.482
this is not desirable because
at that time we we don't know

NOTE Confidence: 0.88257247209549

8dbeb5ba-6698-48c5-a7e0-07f009d760db
01:08:49.482 --> 01:08:53.563
we are reading the new value
or we are reading the

NOTE Confidence: 0.88257247209549

b185c758-ebcb-465c-a5de-7add79db3100
01:08:53.563 --> 01:08:58.015
previous value. So we have to
come up with a design that

NOTE Confidence: 0.88257247209549

16f53aa2-496c-4e5e-bf39-aa8d3874c321
01:08:58.015 --> 01:09:02.096
the task of reading and the
task of writing must be

NOTE Confidence: 0.88257247209549

72ea0334-af03-4011-be7d-39347063e4bf
01:09:02.096 --> 01:09:06.919
mutual. I mean at the time we
just do one of them either

NOTE Confidence: 0.88257247209549

5bde4a3a-63d1-4342-bda3-2ec64fb2752f
01:09:06.919 --> 01:09:08.032
read or write.

NOTE Confidence: 0.879806637763977

773ed177-721f-4005-b0f9-491dd5a06702
01:09:10.270 --> 01:09:15.210
So this is the problem at the
first positive edge, or we do

NOTE Confidence: 0.879806637763977

0dbfbec0-e48e-40b6-9407-d09e98ccd8f0
01:09:15.210 --> 01:09:18.630
both writing and reading and we
don't want that.

NOTE Confidence: 0.846399664878845

5726a6f8-20b9-4961-a05f-ee9dab24bd80
01:09:19.220 --> 01:09:22.370
Another alternative
designer is this.

NOTE Confidence: 0.810584664344788

46e18551-af2f-42ec-b76d-aeaad5617585
01:09:23.590 --> 01:09:28.933
This is the flip flop that
we fixed in order to just a

NOTE Confidence: 0.810584664344788

e237ab15-e9e3-47bf-8361-82e726c4abb6
01:09:28.933 --> 01:09:30.166
store or right.

NOTE Confidence: 0.753218412399292

70a569f4-8cf6-4712-9fe7-29f61fe53cf8
01:09:31.240 --> 01:09:34.019
Now we want to revise the flip

NOTE Confidence: 0.874554097652435

7afa61cc-2c06-4a0c-a18a-0cb5b60277f7
01:09:34.019 --> 01:09:38.276
flop. Buy a control signal. We
want to say that.

NOTE Confidence: 0.938616991043091

b8bad0cd-2064-41e5-a34c-38fab93a012a
01:09:38.780 --> 01:09:40.308
If it is selected.

NOTE Confidence: 0.890444099903107

c0425622-8094-462d-8bf6-fc5caf10c8d4
01:09:40.990 --> 01:09:44.446
Sorry if it is not selected, the
flip flop is not selected.

NOTE Confidence: 0.856314301490784

67bf27c1-e7dd-4f75-be45-ba07185fb613
01:09:45.070 --> 01:09:49.190
Whether we do really alright
doesn't matter, it keeps the

NOTE Confidence: 0.856314301490784

5861e330-3147-49fc-a679-c1a5ebbbc984
01:09:49.190 --> 01:09:50.014
previous value.

NOTE Confidence: 0.942977368831635

746e5766-0528-4af0-b658-e966c976004b
01:09:52.260 --> 01:09:54.180
So if it is not selected.

NOTE Confidence: 0.875319957733154

83598a14-597d-4b0b-8e67-510186f35209
01:09:55.690 --> 01:10:00.812
We keep it so select those here
0 so the previous value goes

NOTE Confidence: 0.859805226325989

10294893-90ec-4a8a-8ce8-7ec528bcadf2
01:10:00.812 --> 01:10:05.010
inside. And in the output we
don't wanna output the current

NOTE Confidence: 0.859805226325989

09c0e479-92aa-403d-9f39-51ba93218a4c
01:10:05.010 --> 01:10:08.970
value because this is not
selected. So we make an and as

NOTE Confidence: 0.859805226325989

259bb5db-a3bd-462e-bd62-2cc5bb8c95cc
01:10:08.970 --> 01:10:13.260
long as zero. It comes to this
and the output gonna be always

NOTE Confidence: 0.885020136833191

bfedb84e-2e08-4786-b737-a82d124d5494
01:10:13.260 --> 01:10:18.015
0. So this way if the flip
flop is not selected, the

NOTE Confidence: 0.885020136833191

a9172e5f-7dd8-43f9-93d2-a0e733c6c29b
01:10:18.015 --> 01:10:20.695
output is always zero. The
input is storing.

NOTE Confidence: 0.881404936313629

9ea89e3f-439e-4ecd-b86d-77059ad79e59
01:10:22.200 --> 01:10:26.736
However, if S is 1, meaning
that the flip flop is selected,

NOTE Confidence: 0.881404936313629

486c20b8-a965-4248-9d70-afcf645f29da
01:10:26.736 --> 01:10:32.406
then next is whether we want to
read or write. If C is zero, we

NOTE Confidence: 0.881404936313629

e5d55789-0207-4c3b-82c6-08cc135beb14
01:10:32.406 --> 01:10:36.564
want to read. If C is one we
want to write.

NOTE Confidence: 0.907302975654602

dfc0eba4-b23e-4851-b66e-09d674715bed
01:10:37.320 --> 01:10:39.276
So let's do the reading task.

NOTE Confidence: 0.89368063211441

a111aa13-e7f2-426d-9988-b82bea4ba759
01:10:39.960 --> 01:10:42.081
If you select the flip flop to

NOTE Confidence: 0.879308223724365

532f3f27-4dfc-482c-a35a-cc40f6392e88
01:10:42.081 --> 01:10:47.818
read. So we basically do this C
zero. It becomes one comes here.

NOTE Confidence: 0.879308223724365

0db8e7b4-f267-493c-b1ae-3d3367453209
01:10:47.818 --> 01:10:52.726
So it means that the output is
whatever inside the flip flop.

NOTE Confidence: 0.469072937965393

01f8ff64-a87f-4963-b98b-28b020fb9df8
01:10:53.330 --> 01:10:56.030
Select Read.

NOTE Confidence: 0.73451155424118

48af1b3a-e2e7-40a1-b5e8-b363ceac535c
01:10:56.940 --> 01:11:00.170
Output. The Qt goes to output.

NOTE Confidence: 0.878431141376495

08c23e81-cd48-4892-a8ef-4e85784d6a40
01:11:01.910 --> 01:11:07.981
And in the inside here inside
this is 00. Comes here with the

NOTE Confidence: 0.878431141376495

d11291bf-1aeb-4b31-9cd1-91b752808601
01:11:07.981 --> 01:11:12.651
select zero and one becomes zero
is still be reserved.

NOTE Confidence: 0.865474700927734

9d74d21b-cf55-4369-a573-ff5d29da9b67
01:11:13.200 --> 01:11:17.670
Or store? We don't want to
allow the input goes inside the,

NOTE Confidence: 0.865474700927734

b861a5c8-1c96-4cf1-ae77-b866be660876
01:11:17.670 --> 01:11:19.791
so we don't write, we just read.

NOTE Confidence: 0.883058071136475

6863c85b-7025-4bea-b4c6-a82248ca07e0
01:11:20.560 --> 01:11:23.850
However, if select is 1.

NOTE Confidence: 0.827792167663574

36fd129f-4317-4097-bdfe-c0516757041d
01:11:24.940 --> 01:11:29.967
Right, the control become one it
because writing one, so this

NOTE Confidence: 0.827792167663574

4a04174f-105c-4899-b701-93097ce9358c
01:11:29.967 --> 01:11:35.451
becomes zero comes here 0 the
output makes becomes 0, so we

NOTE Confidence: 0.827792167663574

cee8d4df-86f5-48fb-aef2-e26199b500f7
01:11:35.451 --> 01:11:40.021
don't read. However, this one
comes here. Select comes here.

NOTE Confidence: 0.827792167663574

e9e2cfb6-ded6-4ee5-83db-186e9133fc98
01:11:40.021 --> 01:11:45.048
The MUX cannot be selected as
gonna select this second input

NOTE Confidence: 0.827792167663574

c3141dd7-bdb4-4971-80a5-81c40ab55e1b
01:11:45.048 --> 01:11:46.419
which is the.

NOTE Confidence: 0.809992492198944

62f13a48-6e85-4e1f-9af8-eccce58adf02
01:11:47.300 --> 01:11:50.744
I go to inside the flip flop.

NOTE Confidence: 0.887652397155762

a850e95c-f2f4-4e27-a25d-cc1aa90e1784
01:11:51.730 --> 01:11:55.335
So by the control signal we can.

NOTE Confidence: 0.850702702999115

0d3a5eea-a7cc-4658-98a7-c4fdb438b8b8
01:11:55.880 --> 01:11:59.246
Select either reading the
Flip flop or writing the

NOTE Confidence: 0.850702702999115

0cfbe18d-2abd-4cc6-ac33-41b2ad5a1518
01:11:59.246 --> 01:12:02.238
flip flop. Whenever we
select the flip flop.

NOTE Confidence: 0.89451277256012

4766c7f1-6670-4056-87f9-a82036583717
01:12:04.210 --> 01:12:09.370
So this design is a alternative
design at the flip Flop level.

NOTE Confidence: 0.853417694568634

e6633228-6ccb-47c2-81cb-1ab8ccbc1408
01:12:09.900 --> 01:12:13.988
We have select input control
signal an output.

NOTE Confidence: 0.821652710437775

a4b4a7cb-0dbb-4fba-989d-d3536d8fff22
01:12:15.740 --> 01:12:19.448
We call this instead of Flip
Flop memory cell.

NOTE Confidence: 0.899203598499298

886732e9-a5cc-4397-9740-6365cbd9848b
01:12:19.990 --> 01:12:25.489
Because this is the flip flop
that is able to read, write and

NOTE Confidence: 0.899203598499298

5f93682e-0d4c-45ec-891d-072da81a543d
01:12:25.489 --> 01:12:26.758
to be selected.

NOTE Confidence: 0.801146686077118

8201b7b8-2d3b-4032-9017-8045c9301488
01:12:27.300 --> 01:12:31.057
And if you replace all these D
flip flop with this memory cell.

NOTE Confidence: 0.882566213607788

3bdabfd0-f0fd-4edd-8a6d-87be26883337
01:12:31.770 --> 01:12:35.354
We can by the decoder we can

NOTE Confidence: 0.890372812747955

33d840c9-42d3-4e63-b299-7ce387278d9b
01:12:35.354 --> 01:12:39.957
select. By the control signal,
we can say that we are reading

NOTE Confidence: 0.890372812747955

612a1a5c-a3ed-4efe-889a-44ba6217b4df
01:12:39.957 --> 01:12:41.542
or writing the flip flop.

NOTE Confidence: 0.923456251621246

c2d943b5-1ea8-4fe6-9846-17d843a76447
01:12:42.430 --> 01:12:43.170
And.

NOTE Confidence: 0.87297534942627

55b253ae-ee99-4168-9c58-14c1069f55bb
01:12:44.570 --> 01:12:50.630
Input bus. Connect to all the
flip flops and if selected and

NOTE Confidence: 0.87297534942627

70b889ce-9858-4557-93eb-999da4c2d4ca
01:12:50.630 --> 01:12:55.052
then the control is 1, meaning
that writing that that register

NOTE Confidence: 0.87297534942627

30c7db28-0ace-417e-9b0a-e2bfd5440f5d
01:12:55.052 --> 01:12:59.876
if selected and the control is
0, meaning that reading when you

NOTE Confidence: 0.664028942584991

b93bb6ac-fef7-49c2-a660-9584750e484f
01:12:59.876 --> 01:13:03.240
read. For instance, are

NOTE Confidence: 0.832606792449951

7fe837c6-a213-4192-87f3-6b2690fd5045
01:13:03.240 --> 01:13:08.170
the. 3rd Register when you read
meaning that you are selecting

NOTE Confidence: 0.832606792449951

a618e91f-0d16-4552-bfe3-f534f299808c
01:13:08.170 --> 01:13:10.258
that the selection here is 1.

NOTE Confidence: 0.879890084266663

301adbb0-fc9d-4588-a853-c73c42e3f970
01:13:11.440 --> 01:13:13.510
The control is 0, meaning that

NOTE Confidence: 0.805178821086884

b533477d-67da-4546-a1ae-0923c231b86e
01:13:13.510 --> 01:13:17.767
reading. All the outputs gonna
be Qt here.

NOTE Confidence: 0.87918221950531

b1cdc752-7681-436c-b601-7a55d950cf71
01:13:18.330 --> 01:13:23.465
And the output of other flip
flops are zero, so 000. But the

NOTE Confidence: 0.87918221950531

2d8f1760-6b57-4974-bf91-f203c18c169a
01:13:23.465 --> 01:13:25.440
only one is this one.

NOTE Confidence: 0.849277079105377

44abce9b-2c95-4ce4-9439-add6a388a1bb
01:13:26.250 --> 01:13:31.530
making OR. The OR gate only
depends on the output of the

NOTE Confidence: 0.863288342952728

abf6c709-f252-4a9d-a433-82849878168c
01:13:31.530 --> 01:13:32.890
Qt. Here.

NOTE Confidence: 0.851432204246521

5ad0ac09-b43a-4bd4-80e0-9d8c7f1200be
01:13:34.810 --> 01:13:37.989
So all the output of the
flip flops for all their

NOTE Confidence: 0.851432204246521

49d26eed-348d-4d3e-bd24-57aee6f6d1b7
01:13:37.989 --> 01:13:40.590
items or rows gonna be
OR with each other.

NOTE Confidence: 0.911479771137238

a7f2b65a-4d59-4b0d-a531-cf3a37f241c6
01:13:43.170 --> 01:13:46.360
And one thing here is that I
didn't show the Clock.

NOTE Confidence: 0.827374935150146

8fa84f84-3830-451d-8796-39a2ca3f0b4f
01:13:46.880 --> 01:13:51.768
Because it makes the wiring a
lot of. I mean, uh, I mean

NOTE Confidence: 0.827374935150146

7c37b0e7-8954-4079-9f5f-1872e8ad683c
01:13:51.768 --> 01:13:55.904
messy. But imagine the clocks
are attached to all the flip

NOTE Confidence: 0.827374935150146

d439dab6-35ac-4d6c-8839-dca16be84bcb
01:13:55.904 --> 01:14:00.792
flops, so we don't use. We don't
show the clocks an wires anymore

NOTE Confidence: 0.827374935150146

c8d4fc9b-3917-475f-85d0-56b6e1955b2a
01:14:00.792 --> 01:14:04.552
because we assume this is
connected to all the units.

NOTE Confidence: 0.933782041072845

b490e40b-cf05-4852-90af-df6b788cc8c4
01:14:05.190 --> 01:14:06.549
So the control.

NOTE Confidence: 0.73526394367218

81109e4f-86be-43bc-8070-66d73dd46add
01:14:07.260 --> 01:14:09.990
Signal input bus address bus.

NOTE Confidence: 0.870101630687714

1321745c-0932-4654-87c8-b7331df874ae
01:14:10.820 --> 01:14:15.230
This is called for the
control. You only need one

NOTE Confidence: 0.870101630687714

d05b497d-fa9f-45b2-9cce-5c4af56d32d0
01:14:15.230 --> 01:14:20.081
wire just to read right? So
this is called control bus.

NOTE Confidence: 0.899963796138763

eb4e014e-a7f2-456c-81bc-21f71591ba1c
01:14:22.190 --> 01:14:26.376
So here is another example where
we want to write. We make the

NOTE Confidence: 0.889968693256378

801c7ec2-c335-4f7c-a1ab-bf080e9745b5
01:14:26.376 --> 01:14:31.348
control one. And we select the
third register this time.

NOTE Confidence: 0.625251293182373

b82c023a-0d28-4be4-819d-13c8106c6abc
01:14:32.020 --> 01:14:34.308
Inside the memory cell.

NOTE Confidence: 0.871687591075897

a164aba7-7a02-4631-843f-0480a20005d7
01:14:35.030 --> 01:14:39.470
The input gonna go inside the
flip flop and the output gonna

NOTE Confidence: 0.871687591075897

2a70c34e-3122-44c4-9989-4121986a4abb
01:14:39.470 --> 01:14:44.650
be 0. So zero goes here and all
the output. Bus is always 0.

NOTE Confidence: 0.833006501197815

d84943bb-9ee9-4268-a80b-1144bc4035f1
01:14:47.610 --> 01:14:54.539
So in total we have data bus
for writing. We have data bus

NOTE Confidence: 0.785623133182526

ce5f8c3d-9ffb-4200-9231-1a9db11facdc
01:14:54.539 --> 01:14:59.070
for reading. m bit other spots
to selecting a memory location

NOTE Confidence: 0.785623133182526

e5efb676-b8db-4cc9-9546-e0bb9971dd37
01:14:59.070 --> 01:15:03.750
and K bit control Bus here. The
cables does only one read or

NOTE Confidence: 0.785623133182526

0020eef6-7ecb-45ad-8419-75f34e6cbfd7
01:15:03.750 --> 01:15:08.070
write, but it might be more than
that for the control bus.

NOTE Confidence: 0.888631403446198

439c2a0e-f377-42f1-9708-d75a2b5a58d4
01:15:11.030 --> 01:15:15.138
One question you could ask is
that is it possible to use the

NOTE Confidence: 0.888631403446198

9af4bb09-cf37-45a0-8482-bff4e28b61e3
01:15:15.138 --> 01:15:18.930
same input bus for the output
bus? Think about that. It is

NOTE Confidence: 0.888631403446198

be6861bd-3364-417f-b438-d683948704b8
01:15:18.930 --> 01:15:20.826
possible to use the same bus.

NOTE Confidence: 0.900013148784637

14954f43-8a81-4ff1-a4ac-95a2ae7e5407
01:15:21.670 --> 01:15:23.330
For writing or reading.

NOTE Confidence: 0.871946096420288

1410e7db-1a13-4214-9664-5ea0ce87388b
01:15:24.470 --> 01:15:28.230
It's very easy to design one
single wiring for both

NOTE Confidence: 0.871946096420288

ed37d02f-4242-4258-9d65-cb746c9097f1
01:15:28.230 --> 01:15:29.358
writing and reading.

NOTE Confidence: 0.901944100856781

9bcfdb1f-df7e-47d9-b20d-fe78b6509f09
01:15:30.410 --> 01:15:33.630
And another thing is that.

NOTE Confidence: 0.896531820297241

600a73d9-1d43-457f-abdf-b1dca1fffedc
01:15:34.330 --> 01:15:39.118
What's the access time for
selecting one memory location?

NOTE Confidence: 0.829404711723328

f8740429-7bfc-48f5-ace7-5f20f7ea4856
01:15:40.710 --> 01:15:45.702
So read about that. But The
thing is, uh, because of the

NOTE Confidence: 0.829404711723328

e7ebdd6f-bbb8-4548-95dd-6cfd4a6831cf
01:15:45.702 --> 01:15:50.278
decoder at anytime. If you
provide the value to the decoder

NOTE Confidence: 0.829404711723328

67d8c4b9-cb2f-4e9c-a3ac-f9016ac1c161
01:15:50.278 --> 01:15:54.022
by some propagation deley, we
can select one row.

NOTE Confidence: 0.865882098674774

66a46a5a-d97f-4532-a58f-850539abfc4b
01:15:54.660 --> 01:15:59.704
Whether it is the first row or
the last row, always same time

NOTE Confidence: 0.865882098674774

45ca290d-8f4c-4131-9efc-2701103ab0c3
01:15:59.704 --> 01:16:03.972
have? I mean takes, that's why
we call them random access

NOTE Confidence: 0.865882098674774

9335916f-4abe-412f-8943-2f75984af8ff
01:16:03.972 --> 01:16:08.240
memory. Random Access memory is
the memory that the location can

NOTE Confidence: 0.865882098674774

de01bd84-698b-4664-9ff2-a20483850047
01:16:08.240 --> 01:16:11.732
be selected regardless of the
location of this collection.

NOTE Confidence: 0.865882098674774

1a952228-3138-4c07-bf6d-a8c34992d419
01:16:11.732 --> 01:16:13.672
Whether we are selecting the

NOTE Confidence: 0.834176123142242

97e8de10-f9f8-4b85-b800-0994e4396e2d
01:16:13.672 --> 01:16:18.379
first location. Or the last
location always same time.

NOTE Confidence: 0.921297192573547

ab6619b3-dbda-4517-ab7b-c5da75c720d5
01:16:18.900 --> 01:16:20.440
That's why we call this.

NOTE Confidence: 0.785336077213287

a1e6274d-12de-4af2-8c3c-619f849aa91a
01:16:21.620 --> 01:16:25.548
Random access memory. So
any memory location fixed.

NOTE Confidence: 0.785336077213287

d031fcdc-5aa3-413b-a750-fbfc76802f1c
01:16:25.548 --> 01:16:26.530
delta T.

NOTE Confidence: 0.851302862167358

84cd7f12-d369-468a-94e0-4e8205183c41
01:16:27.550 --> 01:16:31.033
Regardless of the location, the
sequential access actually is

NOTE Confidence: 0.851302862167358

e901ec1c-87b8-4105-bcac-c6de58c40723
01:16:31.033 --> 01:16:34.516
not this way because the
sequential access meaning that

NOTE Confidence: 0.851302862167358

f1537d0a-cc7f-4ff0-b009-3d6ff665f271
01:16:34.516 --> 01:16:38.773
if you access the closest
location takes less time Farther

NOTE Confidence: 0.851302862167358

2af5c49e-8488-4a9d-b79d-41d18de7ce03
01:16:38.773 --> 01:16:42.256
location, takes more time, but
the memory unit we designed

NOTE Confidence: 0.851302862167358

5399d1f1-06d3-443a-b226-e717ca53be6d
01:16:42.256 --> 01:16:44.578
because it depends on the only

NOTE Confidence: 0.858865797519684

8aa52ecc-8c4f-496f-aeef-52d24635035e
01:16:44.578 --> 01:16:49.646
decoder. Whatever the location
of the memory always fixed

NOTE Confidence: 0.858865797519684

70f8927e-36cb-43f5-ad2b-8b13fb76ee7e
01:16:49.646 --> 01:16:51.167
amount of time.

NOTE Confidence: 0.921196162700653

51bf0f3a-a1e6-44e0-9a77-3b2495578f22
01:16:53.170 --> 01:16:56.590
So we could build the

NOTE Confidence: 0.861689925193787

d0b5e1f8-d8d7-4b5e-aff8-999db509b041
01:16:56.590 --> 01:16:58.860
memory unit. We designed the

NOTE Confidence: 0.772796332836151

3e266528-cd2d-4e50-9ee2-fee977e28486
01:16:58.860 --> 01:17:02.858
memory unit. The next step up.

NOTE Confidence: 0.893994450569153

e3c46061-fd05-4a80-93a9-b861cc183676
01:17:03.460 --> 01:17:07.919
The next task is building the
CPU, but one thing I wanted to

NOTE Confidence: 0.932087182998657

23023d72-b4ae-48ec-bddb-278362b75248
01:17:07.919 --> 01:17:10.985
say that. If you build a memory

NOTE Confidence: 0.8223797082901

117157b6-b742-4260-8332-2b979e9bc668
01:17:10.985 --> 01:17:17.060
unit. Which is random access
again, but remove the write bus.

NOTE Confidence: 0.8223797082901

b1762f97-0769-48e0-b5e3-9a82a08d41aa
01:17:17.060 --> 01:17:22.758
Remove any write pass. We just
read about that memory is

NOTE Confidence: 0.8223797082901

e2551810-55db-4e87-9fe3-d78ffc3f70c0
01:17:22.758 --> 01:17:27.420
called. We call this read only
memory or ROM.

NOTE Confidence: 0.811402857303619

08343eb9-6795-4589-9e43-ad5347c4d809
01:17:28.330 --> 01:17:33.058
So usually the memory units are
RAM, meaning that we can write

NOTE Confidence: 0.811402857303619

9fcb57f5-9a35-4e63-b812-c10901d726b7
01:17:33.058 --> 01:17:37.786
and read based on the random
access to each row. However, if

NOTE Confidence: 0.811402857303619

434385a3-8a21-4909-81a4-e99fc1bfe55d
01:17:37.786 --> 01:17:42.120
you remove the write bus, we
just allow the reading it's

NOTE Confidence: 0.811402857303619

add7f6fe-3730-4964-852a-781836644989
01:17:42.120 --> 01:17:44.090
called ROM read only memory.

NOTE Confidence: 0.847446084022522

6b8a3c28-22ef-4355-b9c2-8086bdd1baab
01:17:44.820 --> 01:17:48.310
So read only memory is still
random access memory, but

NOTE Confidence: 0.847446084022522

ab9da439-ee28-4ebd-b9ef-7cdca3285d3e
01:17:48.310 --> 01:17:49.706
without the writing Bus.

NOTE Confidence: 0.759437799453735

b8e62f4f-c5ab-445b-b2e6-7c7c85b3766b
01:17:52.330 --> 01:17:58.370
And. This is the ROM,
so same design without the

NOTE Confidence: 0.759437799453735

cbd08c0d-5bfa-42a8-91d6-30370b852559
01:17:58.370 --> 01:17:59.330
writing bus.

NOTE Confidence: 0.828292310237885

48cb84b1-3d8c-4da4-bf58-b8daf4577b1d
01:18:01.680 --> 01:18:04.980
So next lecture we gonna design

NOTE Confidence: 0.775154888629913

335d6764-2bcb-4ae4-b2cc-e8e83c62e0fc
01:18:04.980 --> 01:18:08.320
processor. An see how the

NOTE Confidence: 0.762133061885834

83dc206b-5222-4573-a017-5d326de8e77f
01:18:08.320 --> 01:18:13.290
processor used. Output data bus
input data bus to read and write

NOTE Confidence: 0.762133061885834

f3f6074a-277c-4158-b694-acc3f2037665
01:18:13.290 --> 01:18:14.970
from memory, and do the

NOTE Confidence: 0.851895451545715

5fe4a4b0-e10b-48e3-869f-b392871b5665
01:18:14.970 --> 01:18:21.160
calculation. So you have 3
minutes after 9;50, so I'm done

NOTE Confidence: 0.851895451545715

3dad9e01-a2b9-426b-8047-3f241420ec7d
01:18:21.160 --> 01:18:26.990
with today's lecture. So in
today's lecture we could build a

NOTE Confidence: 0.88172858953476

53265b1c-33bd-458d-8c70-c20403009fd5
01:18:26.990 --> 01:18:32.880
memory. And then we can access
each location to store the

NOTE Confidence: 0.842410922050476

7caa00d4-6770-40d7-af10-f85d6482f176
01:18:32.880 --> 01:18:35.968
information. The memory unit
design is a random access

NOTE Confidence: 0.842410922050476

42464834-6538-4a81-b516-3fb5504347bb
01:18:35.968 --> 01:18:38.576
memory, meaning that the
selecting the memory location

NOTE Confidence: 0.842410922050476

60f43aa5-45e6-4b1e-a932-7167754c5be1
01:18:38.576 --> 01:18:40.206
doesn't matter where the memory

NOTE Confidence: 0.853254616260529

c0884974-d887-478d-86d0-b701420ea971
01:18:40.206 --> 01:18:44.966
location is. And we have ROM,
meaning that the memory

NOTE Confidence: 0.853254616260529

f4ed534f-71ec-4374-8d49-501c7f78eb73
01:18:44.966 --> 01:18:49.286
location, memory units that have
a random access ability, but.

NOTE Confidence: 0.852607429027557

cc4d0e97-93e9-471f-930d-cda9d169582b
01:18:49.820 --> 01:18:53.612
We don't have right bus for
that, only we read before that

NOTE Confidence: 0.852607429027557

dc3a4c5a-7b8c-4485-b621-7d4d39ea0f50
01:18:53.612 --> 01:18:55.508
we use them for static data.

NOTE Confidence: 0.828335106372833

90de3207-d47b-4cab-8583-1e708c8bea44
01:18:57.460 --> 01:19:02.620
So yes,  designing
the memory in, it's gonna be in

NOTE Confidence: 0.828335106372833

46eb4034-fe5b-45cc-9f48-ae5ceb3c87f5
01:19:02.620 --> 01:19:07.780
the exam. All the lectures for
this week's gonna be in the

NOTE Confidence: 0.872453570365906

fc01143d-e96a-4a87-ad48-3024a2187da6
01:19:07.780 --> 01:19:11.645
exam. Yes. When it says

NOTE Confidence: 0.794598639011383

cf28e3ca-e255-4c2f-bb7c-e2e09114b0d2
01:19:11.645 --> 01:19:16.170
here. Uh, one question would be
this. How can you use?

NOTE Confidence: 0.86643385887146

e436773a-785a-4222-9869-7b6d903548cc
01:19:16.850 --> 01:19:18.458
Put me back here.

NOTE Confidence: 0.841931760311127

9110af48-d45d-4a63-bbca-1fbea614198d
01:19:19.350 --> 01:19:24.706
How can we design a system that
reuse the same bus for writing

NOTE Confidence: 0.841931760311127

f8340826-d030-4d43-83c8-c33bf5fe58dd
01:19:24.706 --> 01:19:26.766
and reading? It's very simple.

NOTE Confidence: 0.858186483383179

9c8d76aa-aa49-4e61-996c-681b6ac4e26c
01:19:27.630 --> 01:19:32.436
Is on the combination logic
based on the multiplexers?

NOTE Confidence: 0.887811303138733

bccc974c-4ba5-4f3f-9d0b-4595b64e0930
01:19:32.440 --> 01:19:37.150
You can design the one single
bus for accomplishing two

NOTE Confidence: 0.889347016811371

fb4a13ed-0116-4ce0-97aa-e14bc7baf705
01:19:37.150 --> 01:19:43.230
different tasks. Giving us
an exam review.

NOTE Confidence: 0.859137117862701

e501abb1-b6fd-4375-a427-61c8f858ecb6
01:19:45.180 --> 01:19:50.510
You mean exam review review
after the i mean for your

NOTE Confidence: 0.859137117862701

3be43e88-c89a-49e7-b6ed-3d3945992310
01:19:50.510 --> 01:19:53.708
marking or practicing the
exam questions?

NOTE Confidence: 0.412113189697266

6c23dfa1-acf0-4aa2-a900-c0131ae16797
01:19:55.740 --> 01:20:00.120
I'm
not,

NOTE Confidence: 0.412113189697266

5c87e5b6-aab6-4331-bb0e-428216a57200
01:20:00.120 --> 01:20:02.310
uh.

NOTE Confidence: 0.108163088560104

16c7dea3-bd56-4df2-8607-4c55b21f5927
01:20:03.440 --> 01:20:04.470
Line.

NOTE Confidence: 0.819199919700623

2b12c2d1-cc33-48e6-b84e-80f1a0d67fd9
01:20:06.240 --> 01:20:11.700
Oh, uh, at the end of this week
at the end of this week,

NOTE Confidence: 0.819199919700623

795d3382-9495-4e2b-8a59-e01f48b0771a
01:20:11.700 --> 01:20:16.380
actually, I give you the topics
we're gonna cover in the final

NOTE Confidence: 0.799403786659241

ffb11b6a-002f-4673-9ab1-466170fb12d4
01:20:16.380 --> 01:20:22.272
exam. And I try to create a
mocking exam to practice on the

NOTE Confidence: 0.799403786659241

6c322e3a-7b94-40d0-b87f-aab7140cb723
01:20:22.272 --> 01:20:27.024
format of exam, but the topic
we're going to cover in the

NOTE Confidence: 0.799403786659241

4f667f4b-bb39-40a0-804a-cc3f77845562
01:20:27.024 --> 01:20:31.776
final exam. I'll give you, uh,
in the in an announcement also

NOTE Confidence: 0.799403786659241

6e90a1f3-d7d3-4604-90ef-eb42e7101ada
01:20:31.776 --> 01:20:36.132
in the blackboard for sure. At
the end of this week.

NOTE Confidence: 0.833915174007416

c7b42c1c-d125-41e2-b606-2e1ab64d608c
01:20:38.530 --> 01:20:41.938
After we could design A
processor, very simple

NOTE Confidence: 0.833915174007416

d52194c0-7efe-41a7-954e-23d8de60ca24
01:20:41.938 --> 01:20:47.050
processor, we know what would be
the topics of the final exam.

NOTE Confidence: 0.874702572822571

5357bffd-a85c-4e0f-ba0a-2ba73f531a21
01:20:47.740 --> 01:20:50.449
Any other questions?

NOTE Confidence: 0.839070677757263

8f62414f-bf10-42f7-aae2-c060a07d2da6
01:20:51.620 --> 01:20:57.533
Quartz crystal controlled the
Clock speed in all computer

NOTE Confidence: 0.785809695720673

89b978b9-2662-4618-bcc9-d765d92ed47a
01:20:57.533 --> 01:21:03.540
systems. Uh is its speed control
with the voltage running through

NOTE Confidence: 0.785809695720673

ec950c75-1a36-4adc-85ac-668ee05bad30
01:21:03.540 --> 01:21:09.756
this system 01 thing about the I
mean the speed on the Clock. As

NOTE Confidence: 0.785809695720673

199e7f5e-898a-40e4-a46b-525b1b9dacac
01:21:09.756 --> 01:21:15.528
long as this course matters is
that the Clock is just, I mean

NOTE Confidence: 0.785809695720673

c484ce74-cb58-4337-b52a-21db9fe768d2
01:21:15.528 --> 01:21:19.968
it chain of as zero and one
pulse is OK.

NOTE Confidence: 0.891148209571838

94ba18d0-6fcc-4e1c-80b2-b1fb34dec04e
01:21:19.990 --> 01:21:24.380
How we generate the pulse is
it's an engineering principle,

NOTE Confidence: 0.891148209571838

a903ba29-af85-4361-9d7b-f8bb3f218b68
01:21:24.380 --> 01:21:29.648
so basically I don't have enough
knowledge for that, so I don't

NOTE Confidence: 0.891148209571838

60f48a85-87f0-46d0-9ce0-f657a46fe28b
01:21:29.648 --> 01:21:31.404
know how can we.

NOTE Confidence: 0.828660726547241

daf8c443-39cb-41df-89f6-704bf20282ce
01:21:31.940 --> 01:21:35.944
How can we generate that fast
number of pulses within a

NOTE Confidence: 0.828660726547241

0e0ddb02-3b63-4d65-9400-da71c28369bf
01:21:35.944 --> 01:21:39.220
second? You know, for instance,
for the current CPUs.

NOTE Confidence: 0.746848940849304

7b4e66e3-6d6b-45e8-9793-1595ae1d9061
01:21:39.840 --> 01:21:43.608
They have a for instance

NOTE Confidence: 0.707303643226624

761cdbf6-27b1-4345-995a-858939cce73d
01:21:43.608 --> 01:21:47.310
3. Megahertz, meaning that

NOTE Confidence: 0.769793689250946

2576e989-7898-4206-97dd-04b489c36e73
01:21:47.310 --> 01:21:54.444
sorry. 2.1 GHz
so it basically 2

NOTE Confidence: 0.769793689250946

e6d437fb-859f-496e-b9a8-03bb497163e1
01:21:54.444 --> 01:21:58.240
GHz, meaning that 2000

NOTE Confidence: 0.786230623722076

e3a02c45-0076-4e77-8ec5-a1e6085737ef
01:21:58.240 --> 01:22:04.450
Mega. Pulse per second. This
huge amount of pulse within a

NOTE Confidence: 0.786230623722076

f1503488-5934-4898-ac34-38809434fb91
01:22:04.450 --> 01:22:09.658
second, uh, I don't know. How
can they generate? I don't have

NOTE Confidence: 0.786230623722076

e09b23a2-9054-4cb9-b95d-bb445a8e9eda
01:22:09.658 --> 01:22:14.866
enough, but this is a kind of
engineering thing you have to.

NOTE Confidence: 0.847180902957916

4d298ba5-d6c4-4ca2-933b-99f02ef84d19
01:22:15.560 --> 01:22:19.240
Go to computer engineering,
electrical engineering, how they

NOTE Confidence: 0.847180902957916

a3a1e4c2-fcd7-4dc6-9157-5c59961ff6b2
01:22:19.240 --> 01:22:23.840
physically build a system that
generate that amount of pulses.

NOTE Confidence: 0.899486422538757

c80b1247-89cd-4a7a-a4c1-555d023bd0f6
01:22:24.840 --> 01:22:30.180
So I cannot answer this question
that what's the physical

NOTE Confidence: 0.823386013507843

d091f45b-6be5-4b8a-91af-a7e24298028b
01:22:30.180 --> 01:22:36.338
structure? But about the
second question is speed.

NOTE Confidence: 0.786711692810059

91fc3dfc-b3f6-4c0f-b569-1aa68a66391c
01:22:37.000 --> 01:22:41.032
Voltage running through the
system, or actually if you're

NOTE Confidence: 0.786711692810059

85eb9bf9-ffed-4876-a911-afeb031ca064
01:22:41.032 --> 01:22:45.960
talking about the the voltage is
always the same. So basically,

NOTE Confidence: 0.786711692810059

acde7786-940e-4eb5-bf39-748c8cc20b43
01:22:45.960 --> 01:22:51.784
if a voltage is positive, five
as we show, if the level of

NOTE Confidence: 0.786711692810059

7238f239-b459-4e2a-93c6-375d1a07b11c
01:22:51.784 --> 01:22:56.264
voltage is more than for
instance 3 point, something up

NOTE Confidence: 0.786711692810059

ea3c8afb-2ac7-42df-acad-a314e2c2a57f
01:22:56.264 --> 01:23:02.536
until five. We consider that as
one. If it is less than that, we

NOTE Confidence: 0.886323094367981

6ca3125f-3504-484c-8dd0-dc0b114d8164
01:23:02.536 --> 01:23:09.000
consider 0. How I think what
you are telling is that.

NOTE Confidence: 0.872137069702148

9dce5138-0ba4-419f-a5cb-3905f9c71ce3
01:23:09.530 --> 01:23:15.908
The power. Definitely the system
that needs to create that amount

NOTE Confidence: 0.872137069702148

525fcd58-88bd-4aa9-b4c4-cd7a6ce9dd9e
01:23:15.908 --> 01:23:22.304
of pulse need a huge amount of
power and power. Depends on the

NOTE Confidence: 0.832968473434448

c96907df-9415-4695-a7e2-e16ae796cc82
01:23:22.304 --> 01:23:28.050
watt. For this system, so you
need huge amount of power,

NOTE Confidence: 0.832968473434448

f4ac250c-97ef-404d-a4aa-3122967fb672
01:23:28.050 --> 01:23:32.800
meaning that current instead of
voltage voltage is the same.

NOTE Confidence: 0.9238041639328

b3e9d3aa-e634-45fb-b74f-87c5748859ce
01:23:33.840 --> 01:23:34.980
Positive 5.

NOTE Confidence: 0.0504277646541595

a85c181e-a2e9-445d-a6e4-4102d0d5d856
01:23:39.470 --> 01:23:40.590
Uh.

NOTE Confidence: 0.807369291782379

60176046-c571-4659-9481-4b1ab84eefd1
01:23:42.110 --> 01:23:48.014
Justin says Crystal Oscillation
is wavelength divided by period.

NOTE Confidence: 0.0552480816841125

c85ee2a9-b33b-4d32-a5e3-1280bc1d9c45
01:23:49.070 --> 01:23:50.190
Uh.

NOTE Confidence: 0.738132953643799

5756af27-0e27-471b-9584-f828e1bc6766
01:23:51.540 --> 01:23:56.930
So honestly, I don't have a, I
mean that knowledge so.

NOTE Confidence: 0.648416697978973

aa14bfe6-64e9-45cd-8966-4ab7833ff5e9
01:23:57.570 --> 01:23:59.880
You can even ask, uh?

NOTE Confidence: 0.815558075904846

7271f67e-c6f6-454a-b823-83387a3eb842
01:24:00.510 --> 01:24:04.507
Electrical engineers and
computer engineers. About this.

NOTE Confidence: 0.815558075904846

93d224d9-fd39-4ba2-a3b9-e4f69d820050
01:24:04.507 --> 01:24:10.788
So I mean, in the computer
science we are dealing with

NOTE Confidence: 0.815558075904846

19fbd56c-abb8-40ca-8169-1a0e2d40e3ab
01:24:10.788 --> 01:24:17.069
design, so we don't for us pulse
or just chain of 01.

NOTE Confidence: 0.939841985702515

f1a0ce6a-7ecd-49ae-9789-7492c5258fe8
01:24:21.490 --> 01:24:22.580
Thank you.

NOTE Confidence: 0.76883852481842

e50f9b21-485d-4db6-911b-35c33b9c387d
01:24:23.610 --> 01:24:28.191
Usually I mean, uh and
personally, I always was

NOTE Confidence: 0.0620637238025665

97788b8b-28dd-4af4-b6e7-1e92e12cdadf
01:24:28.191 --> 01:24:31.240
interested in. Uh.

NOTE Confidence: 0.869496166706085

8d8f8f30-e6f6-4051-947f-b90d4e397ccd
01:24:31.820 --> 01:24:37.441
Design tasks, but I never, I
mean go deep into the

NOTE Confidence: 0.678279161453247

4badf674-28c3-4cd2-8eaf-6f9c12c56d11
01:24:37.441 --> 01:24:42.760
engineering tasks. One reason is
that if you are involved, it is

NOTE Confidence: 0.678279161453247

c4b0eae5-9196-4da7-9789-f39b3b138e95
01:24:42.760 --> 01:24:44.590
good to know some, uh.

NOTE Confidence: 0.870418548583984

d8da3f0c-1823-4627-8e0c-7d3a0d7091d6
01:24:45.690 --> 01:24:50.387
Engineering I mean field because
it helps with the better design.

NOTE Confidence: 0.896897435188293

fb11166c-9a18-4eaf-9dae-5f712409cbdb
01:24:51.140 --> 01:24:54.870
But I never had the chance
to study those concepts,

NOTE Confidence: 0.896897435188293

e21e1607-77c5-4b1c-936a-471b1bf0c4db
01:24:54.870 --> 01:24:57.854
but definitely I mean,
it's an interesting thing,

NOTE Confidence: 0.896897435188293

91d899e2-3257-4c19-b326-8794a997508b
01:24:57.854 --> 01:24:59.346
because let's back here.

NOTE Confidence: 0.867034137248993

3592c44a-ad11-429d-ab11-9858fad9be11
01:25:01.010 --> 01:25:06.095
I mean engineering that huge
amount of flip flops.

NOTE Confidence: 0.892351806163788

645c57a1-415a-4ea0-a22a-169384da62e7
01:25:06.600 --> 01:25:11.402
Even if you write it in a paper,
you cannot put all amounts of

NOTE Confidence: 0.892351806163788

35223229-19cd-432c-8f4a-b1ba48608746
01:25:11.402 --> 01:25:15.518
flip flops in a paper but just a
pen in this small.

NOTE Confidence: 0.850287199020386

f216a3c1-be1e-4abe-919d-156a0c526a6e
01:25:16.390 --> 01:25:21.440
I think it's a very I mean
high tech engineering

NOTE Confidence: 0.850287199020386

551d88a0-fc0f-4ddc-8f29-83783fc79e24
01:25:21.440 --> 01:25:21.945
technology.

NOTE Confidence: 0.887166857719421

b750dbfe-819a-4f92-8345-57b3be8e7978
01:25:23.130 --> 01:25:24.348
It's interesting, yes.

NOTE Confidence: 0.890051007270813

0bbffaa4-a6fb-4ac2-b948-574802d783be
01:25:28.070 --> 01:25:32.165
You too have a great day, so
I'm going to be in the

NOTE Confidence: 0.890051007270813

3624a3e4-e579-477c-a626-f65cf03b94bf
01:25:32.165 --> 01:25:35.630
office, so if you have any
question I can take this

NOTE Confidence: 0.890051007270813

abaf3466-3648-46a0-a5cf-ae3da2b7b61c
01:25:35.630 --> 01:25:37.205
question in the Office hour.

NOTE Confidence: 0.792217254638672

f4856c72-31fb-465c-b66a-81e5d3983126
01:25:38.950 --> 01:25:43.721
Yes, definitely it's a sci-fi.
Yes. It's as I said, I mean.

NOTE Confidence: 0.869401335716248

2f1fc51c-169f-40c1-b2c5-93a24f21e881
01:25:44.280 --> 01:25:50.994
Uh. Again, whenever I see this
movie, I mean I saw the Space

NOTE Confidence: 0.869401335716248

6a0a3f72-128e-41b3-9c93-d29f6ce717f1
01:25:50.994 --> 01:25:52.546
Odyssey multiple times.

NOTE Confidence: 0.607779681682587

0888bf60-8563-414f-8eb5-bdc86fd52941
01:25:53.170 --> 01:25:56.358
And yeah, it's huge.

NOTE Confidence: 0.831538259983063

77ddbf1b-f110-4114-ae1c-fdcdf53bdd39
01:25:57.280 --> 01:26:02.240
Sci-fi, yes. Have
a great day guys.

