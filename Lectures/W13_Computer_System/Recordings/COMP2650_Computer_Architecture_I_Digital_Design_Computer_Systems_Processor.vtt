WEBVTT

NOTE duration:"01:26:43.8210000"

NOTE language:en-us

NOTE Confidence: 0.74355227

0e28117d-fc35-4d7c-974a-0decd2db4d3f
00:00:21.870 --> 00:00:24.270
So let's start up.

NOTE Confidence: 0.7893902

c8c38914-083a-4fac-acea-374964371631
00:00:26.260 --> 00:00:29.960
We only have 9 students

NOTE Confidence: 0.8672436

5d6be302-68db-47eb-a8b8-508c9ae5d674
00:00:29.960 --> 00:00:36.390
each. Students in the class and
in my list I have around 120 or.

NOTE Confidence: 0.9278834

06cd4c18-24b8-47ff-af4a-b7e8d69e1055
00:00:37.260 --> 00:00:43.024
130 students so I hope
all the other students are

NOTE Confidence: 0.9278834

3857f904-fbfb-4cb1-8e95-58cefc57bb02
00:00:43.024 --> 00:00:43.760
doing great.

NOTE Confidence: 0.8928581

c12d495b-88ee-4b71-96b1-151b079ed910
00:00:45.430 --> 00:00:49.126
So today is our last
lecture and this

NOTE Confidence: 0.8928581

5151b4d5-6e3b-46be-a15e-53efa121923a
00:00:49.126 --> 00:00:51.898
semester, but this
course is not.

NOTE Confidence: 0.74703944

73a8fa91-71b3-4b53-bab6-060f9b0ef1d6
00:00:53.050 --> 00:00:59.806
Ended here as we said, uh, we
started the kind of digital

NOTE Confidence: 0.7146701

c65c3442-91b5-4aef-be43-44d11d95a0d6
00:00:59.806 --> 00:01:05.710
Odyssey. Uh, from a numbering
system we borrowed the name from

NOTE Confidence: 0.7146701

2999d50f-2974-4926-8c66-540954c952d9
00:01:05.710 --> 00:01:08.075
this brilliant movie by Stanley

NOTE Confidence: 0.8631932

da31b8e3-4b99-4ac4-9ce6-d647fb1422ae
00:01:08.075 --> 00:01:14.560
Kubrick. A 2001 is Space
Odyssey, I hope. I mean, I

NOTE Confidence: 0.8631932

9b6975c3-a840-416e-95fe-c0157121241c
00:01:14.560 --> 00:01:21.028
highly suggest you to watch this
movie. Definitely worth it so an

NOTE Confidence: 0.8631932

fd08dc2d-db01-4d9a-869b-712ac205894c
00:01:21.028 --> 00:01:28.035
you understand. I mean, what is?
What is an Odyssey and what is

NOTE Confidence: 0.8631932

f8a0f3bd-2689-46d1-b104-b367d96ec1a0
00:01:28.035 --> 00:01:31.808
the history behind human
technology progress? The

NOTE Confidence: 0.8631932

a99b346f-87dc-4734-b709-6095874c3da7
00:01:31.808 --> 00:01:34.503
technology progress by the human

NOTE Confidence: 0.8665341

b0342cb8-f3eb-4a52-99b7-58707106a213
00:01:34.503 --> 00:01:41.704
species so. I mean like this.
We said that the progress we did

NOTE Confidence: 0.8665341

536ddfd0-8837-4eb1-855e-6ff7ab89b7a3
00:01:41.704 --> 00:01:43.640
so far was like.

NOTE Confidence: 0.82553697

1f97a3df-4baa-4c26-a8c2-d61627857179
00:01:44.400 --> 00:01:50.460
Building a, I mean a spaceship
with spacecraft by just very I

NOTE Confidence: 0.82553697

7c056f0e-e4d6-499b-9288-c46ce3ebe0a6
00:01:50.460 --> 00:01:55.005
mean primitive tools or
primitive objects such as a

NOTE Confidence: 0.82553697

2b4553cd-2995-4389-b307-290d6cf463ad
00:01:55.005 --> 00:02:00.560
bone of an animal. So let's
see, for instance, we start

NOTE Confidence: 0.82553697

c0db3607-4076-4419-86a0-e387462ffded
00:02:00.560 --> 00:02:02.580
with the numbering system.

NOTE Confidence: 0.7677537

c0f7e49c-2fda-4afc-9027-c48ff12d5743
00:02:03.970 --> 00:02:09.745
Uh, we said that any type of
information must be represented

NOTE Confidence: 0.7677537

e2f80355-03bf-47b7-981f-27d78d89eba3
00:02:09.745 --> 00:02:15.520
by numbers, and we can convert
any number to binary numbers.

NOTE Confidence: 0.7677537

b5821de1-fde6-45fd-a1d0-787cb8fdbb51
00:02:15.520 --> 00:02:19.195
Then we device we design some I.

NOTE Confidence: 0.82259375

1910c194-2c48-4587-836c-6d5a7c4c1b82
00:02:19.900 --> 00:02:24.660
 kind of units that can do
arithmetic calculations or

NOTE Confidence: 0.82259375

5cb81fcd-a0ad-430f-a713-6245e0fb5474
00:02:24.660 --> 00:02:29.896
processing on top of these
binary numbers such as and or

NOTE Confidence: 0.82259375

5bc76817-556f-4dfd-920d-55a7b5d1bf4f
00:02:29.896 --> 00:02:36.084
Xor etc. And then we put them
together in order to come up

NOTE Confidence: 0.82259375

af68c2c1-3563-40ac-aee6-07f02bb3187a
00:02:36.084 --> 00:02:40.844
with some units that do larger
calculations or more complex

NOTE Confidence: 0.82259375

2d08f79f-519d-4789-8f51-2f1aa404511b
00:02:40.844 --> 00:02:42.748
calculations such as addition.

NOTE Confidence: 0.87119937

3ecaea94-9dd2-4e23-ae0e-f97ae2eca381
00:02:43.330 --> 00:02:47.524
Multiplication or subtraction
etc. And after that we figured

NOTE Confidence: 0.87119937

d1046062-c419-452b-97bf-f01814b45fa3
00:02:47.524 --> 00:02:52.650
out we need to. Sometimes we
need to store some intermediate

NOTE Confidence: 0.87119937

7300e341-ddef-4309-a3ab-776fba5b224a
00:02:52.650 --> 00:02:57.310
results. We have to store
something formation. So we said

NOTE Confidence: 0.87119937

19214c51-0bf8-4f64-a780-50ba851da43e
00:02:57.310 --> 00:03:02.436
let's build some units at the
store. Information by the idea

NOTE Confidence: 0.87119937

cf7e1b31-cf06-4364-9417-acda1a5597a0
00:03:02.436 --> 00:03:07.096
of feedback or repeating the
value. So we design different

NOTE Confidence: 0.87119937

8b9e8ba7-4e87-4cb9-9637-0e62c004ffbc
00:03:07.096 --> 00:03:12.688
flip flops, working with the
Clock and then we put all these

NOTE Confidence: 0.87119937

be1fd386-1fad-4244-adb9-b9c4c3bf0ea7
00:03:12.688 --> 00:03:14.552
flip flop together too.

NOTE Confidence: 0.87736684

4d067d83-8864-4009-b657-f7f17817c6f2
00:03:14.620 --> 00:03:18.987
Build a Larger units such as
counters, counter up, counter

NOTE Confidence: 0.87736684

3dc3cabb-9f98-44e7-8996-315ecdef2da0
00:03:18.987 --> 00:03:24.148
down and now or I mean in the
last week. I mean previous

NOTE Confidence: 0.87736684

8d410742-aa5d-4b98-a003-9fbc34c6bfc0
00:03:24.148 --> 00:03:28.912
lecture and today we said that
let's put all these together and

NOTE Confidence: 0.87736684

6a99817e-909d-46d4-b76b-d8a359dcc5fc
00:03:28.912 --> 00:03:33.676
build a computer system to do
any type of calculation on the

NOTE Confidence: 0.87736684

8214aa82-66f1-46d0-b5e0-48e3626f27ca
00:03:33.676 --> 00:03:38.440
any type of information. If you
are given image so we can

NOTE Confidence: 0.87736684

b4adfe70-c97e-4128-99a7-714582f6acee
00:03:38.440 --> 00:03:42.807
convert the image to binary
numbers and then do some image

NOTE Confidence: 0.87736684

c91baf66-abdc-49df-aa63-3c59c29ad32f
00:03:42.807 --> 00:03:44.395
processing tasks such as.

NOTE Confidence: 0.7507187

d341938d-2bca-425d-9cee-dfee7d2362e0
00:03:45.040 --> 00:03:48.720
I just detecting the edges
course such as making a

NOTE Confidence: 0.7507187

40a62e25-cba1-400a-9d25-458ea5d4b26a
00:03:48.720 --> 00:03:52.032
color image to black and
white image and etc.

NOTE Confidence: 0.82147324

db5e2e72-cde4-480e-8269-d657577725e8
00:03:53.830 --> 00:04:00.330
Uh. So we start building
a computer. This is the main

NOTE Confidence: 0.82147324

ea1aaebb-c5cf-4433-856b-9791772b2d87
00:04:00.330 --> 00:04:05.478
problem in main design problem
in this course, but this this

NOTE Confidence: 0.82147324

a9e9fb72-a24c-439a-acb5-50a130846be8
00:04:05.478 --> 00:04:10.626
Odyssey doesn't end today. I
if you wanted to continue this

NOTE Confidence: 0.82147324

55c70a5b-d37b-4a55-a676-b7dd5952c4d6
00:04:10.626 --> 00:04:14.838
Odyssey or journey, you have
to take the computer

NOTE Confidence: 0.82147324

4592dd08-2862-48e8-ade4-489921e60a07
00:04:14.838 --> 00:04:19.518
architecture two in the next
semester. To fully, I mean

NOTE Confidence: 0.82147324

a55672e3-6356-4312-b352-8d79e47c2279
00:04:19.518 --> 00:04:22.794
design A complex or
sophisticated computer system.

NOTE Confidence: 0.890348

1302bf38-7daa-4d65-abf6-940499e92f12
00:04:24.460 --> 00:04:29.575
So this is the design problem we
introduced last lecture design,

NOTE Confidence: 0.890348

8a910424-c473-421d-909c-cff6f9a41eb0
00:04:29.575 --> 00:04:35.155
a computer system, and we said
that we took a very simple

NOTE Confidence: 0.890348

c04ee19f-11df-43c0-9b62-22fbdcbe068b
00:04:35.155 --> 00:04:36.550
design proposed by.

NOTE Confidence: 0.85778683

12390300-e2b4-4bb5-bc59-add79090ba5a
00:04:37.190 --> 00:04:42.380
John von Neumann, which is
basically says that any type of

NOTE Confidence: 0.85778683

4f922744-ce35-4744-a9a9-002d5d2c893e
00:04:42.380 --> 00:04:47.570
problem which is already proved
to be solvable or approachable

NOTE Confidence: 0.85778683

86682f2a-99b2-4224-90cc-5ddd79fc6fd5
00:04:47.570 --> 00:04:53.798
by computer system, has two main
part data and algorithm for the

NOTE Confidence: 0.85778683

6d6f5f1b-abee-4729-beab-f4e79c2a826d
00:04:53.798 --> 00:05:00.545
data we need a unit to store
the data, either input data or

NOTE Confidence: 0.85778683

5c7f5c0e-1b5e-4336-8c3b-6f2ce621dee2
00:05:00.545 --> 00:05:06.254
the output data which is the
result of the processing. Also

NOTE Confidence: 0.89914143

5ae0e06d-db1a-438f-9b53-81523be377e1
00:05:06.254 --> 00:05:10.257
we need. A memory part of a
memory to store the

NOTE Confidence: 0.89914143

9ebed364-4821-437d-8bb3-6292407a1406
00:05:10.257 --> 00:05:13.387
instruction. Because we have
to tell the computer what to

NOTE Confidence: 0.89914143

b1ca7c31-8126-4637-abdb-76030870b06f
00:05:13.387 --> 00:05:17.769
do or what process do you have
to do on top of the input

NOTE Confidence: 0.89914143

344f9410-3312-4e5e-93b1-180378af82c8
00:05:17.769 --> 00:05:19.960
information in order to
generate the output

NOTE Confidence: 0.89914143

215bd3ed-2144-45fd-9663-ae52b29d53da
00:05:19.960 --> 00:05:20.273
information.

NOTE Confidence: 0.85002905

b7b772e1-0af0-41a3-83b8-ab629a84c222
00:05:21.340 --> 00:05:27.824
And, uh. We need a
processor. As the name says in

NOTE Confidence: 0.85002905

ab21d1a2-3673-42a8-953e-157090a3516d
00:05:27.824 --> 00:05:31.472
unit that process the
information by applying the

NOTE Confidence: 0.85002905

ffec8d9b-2aee-4d60-8e43-2b6bbd54812d
00:05:31.472 --> 00:05:35.576
instructions. So basically the
processor is the unit that

NOTE Confidence: 0.85002905

e6ecbc3f-05d2-4b1a-b87c-e14009f023a6
00:05:35.576 --> 00:05:39.680
execute the instructions and
there must be some communication

NOTE Confidence: 0.85002905

4390e815-735c-4806-93f8-bc8e62999517
00:05:39.680 --> 00:05:44.696
platform which we call this bus
in order to transfer the

NOTE Confidence: 0.85002905

5834dff7-06c6-4dba-a5b4-1d583133027c
00:05:44.696 --> 00:05:48.800
information from memory to
processor an from processor back

NOTE Confidence: 0.85002905

48867634-47aa-470c-b8c8-5fdfe42598e4
00:05:48.800 --> 00:05:53.816
to memory. We said that we have
two type of bus.

NOTE Confidence: 0.7842439

c4f28880-6fc1-46a2-9d42-826b3119abf9
00:05:53.910 --> 00:05:58.717
Data Bus, which is uh for the
reading or writing the

NOTE Confidence: 0.7842439

e42f15d4-8a84-46ff-9152-05a3f1637994
00:05:58.717 --> 00:06:02.650
information. Also we need
another bus called address bus

NOTE Confidence: 0.7842439

2c025377-8391-46ad-bfe8-415fdab7b209
00:06:02.650 --> 00:06:03.961
which is basically.

NOTE Confidence: 0.8719191

ebe7ee4c-bd3c-447b-94f9-09e010fce7e5
00:06:05.500 --> 00:06:09.779
Allows to select only one
location of the memory in order

NOTE Confidence: 0.8719191

7703b366-8c18-4a18-a168-4c71b544a0c7
00:06:09.779 --> 00:06:14.836
to read or to read that
location, or to write into that

NOTE Confidence: 0.86021465

9b67064e-dc9f-4bc1-9a27-b5edd59022c2
00:06:14.836 --> 00:06:18.418
location. So basically the
processor used the other space

NOTE Confidence: 0.86021465

892539ea-ac9a-47dd-8ce4-bc81a9be4517
00:06:18.418 --> 00:06:21.970
to select one specific location
of the memory to read or write.

NOTE Confidence: 0.8852095

4e2ce600-9c64-4542-bcdb-f2436d4aabba
00:06:23.740 --> 00:06:26.668
So as you can see here in this

NOTE Confidence: 0.8956199

67d7eb2c-6b7c-4bf7-aae1-69a0c59bb53d
00:06:26.668 --> 00:06:32.420
figure processor. Not only is
able to read the data, also can

NOTE Confidence: 0.8956199

5886f118-4d14-49b3-aed6-c18093af2833
00:06:32.420 --> 00:06:36.680
read the instructions and to
execute the instructions on top

NOTE Confidence: 0.8956199

1f366054-7b04-4b76-804f-7acf1a9a482d
00:06:36.680 --> 00:06:37.958
of the data.

NOTE Confidence: 0.8490925

9cdaeed3-049d-41bc-9347-f542f1b77d8e
00:06:40.240 --> 00:06:43.936
And these are the three main
principles of the von Neumann

NOTE Confidence: 0.8490925

c997cfd3-74d5-44c2-a512-8d39ba8f7b64
00:06:43.936 --> 00:06:47.296
architecture, the data and
instruction must be both in main

NOTE Confidence: 0.85025525

f079d019-1c54-47e9-94d3-b4c8dbde4017
00:06:47.296 --> 00:06:52.016
memory. We designed this last
lecture. We said that the

NOTE Confidence: 0.85025525

f950b30c-28e7-4bcc-8286-fbcb7d9c8304
00:06:52.016 --> 00:06:56.156
memory we designed, it has
the random access. That's why

NOTE Confidence: 0.85025525

450fd2b0-d61e-4f62-b5aa-29749bd4b8e6
00:06:56.156 --> 00:06:59.882
we can call this random
access memory or RAM.

NOTE Confidence: 0.87781495

63600d10-afa3-4d1d-baf8-f476208d5bcf
00:07:01.610 --> 00:07:05.910
Also, the second principle is
that the memory location or

NOTE Confidence: 0.87781495

fed67fe7-8339-4753-951f-01515ca81db3
00:07:05.910 --> 00:07:10.640
the RAM must be addressable by
location, meaning that we have

NOTE Confidence: 0.87781495

3435732d-834b-40b4-9def-2b71557d29ce
00:07:10.640 --> 00:07:16.230
to be able to select one row
of the memory module in order

NOTE Confidence: 0.87781495

d283fc6f-b8d8-4db8-86d7-b8d0f194ad34
00:07:16.230 --> 00:07:19.670
to read from or write into
that location.

NOTE Confidence: 0.80227757

4465762c-130c-4896-a361-169dac0dd2ac
00:07:20.960 --> 00:07:24.938
We introduce decoder attached
to address bus and the

NOTE Confidence: 0.80227757

9f369f5f-0857-48ec-aee3-96cf08d2350e
00:07:24.938 --> 00:07:29.800
decoder. If the decoder input
is N bit, meaning that n

NOTE Confidence: 0.80227757

b723cf0d-1bc7-4b2d-bda8-e77436e072c7
00:07:29.800 --> 00:07:35.988
wires for the address plus we
can select 2 to the power of N

NOTE Confidence: 0.80227757

cc7ff787-beda-42b4-82e4-5164a00093eb
00:07:35.988 --> 00:07:39.966
different location of the
memory and the third principle

NOTE Confidence: 0.80227757

a886859b-f516-49d4-9bed-b6810a887b44
00:07:39.966 --> 00:07:44.386
which we gonna work with that
today is that the

NOTE Confidence: 0.80227757

ef94975a-e3fd-45dd-90a3-f825e42be5bb
00:07:44.386 --> 00:07:44.828
instructions.

NOTE Confidence: 0.8147513

969a7cee-d380-46cc-991a-99519e916cae
00:07:45.890 --> 00:07:49.738
I should be executed
sequentially, meaning that the

NOTE Confidence: 0.8147513

bc1ac384-fca4-4058-b43c-297f90d64be5
00:07:49.738 --> 00:07:55.029
instructions in memory gonna be
fetched by the processor to be

NOTE Confidence: 0.7895878

3f0337c2-75f8-41e4-8d10-51314b8fbf21
00:07:55.029 --> 00:08:00.734
executed. Step by Step 1 by 1
by 1 after each other.

NOTE Confidence: 0.86682427

753d19a0-0469-491d-8389-0160039375f3
00:08:02.930 --> 00:08:06.674
There might be some other
architectures that does the

NOTE Confidence: 0.86682427

478d39da-c272-4974-90be-60adf86cad49
00:08:06.674 --> 00:08:10.002
executed execution in
parallel or in pipeline, so

NOTE Confidence: 0.86682427

6bf4f6db-92f1-4b2c-aa53-2464d91db7c0
00:08:10.002 --> 00:08:13.330
those are not based on the
fundamental architecture.

NOTE Confidence: 0.88618535

36978fbb-33ed-4c40-afa4-1768fda04f75
00:08:15.640 --> 00:08:20.090
And. We did, based on this
principle, we can build the

NOTE Confidence: 0.88618535

b341bd9f-3633-490a-b04a-9d97af484dc4
00:08:20.090 --> 00:08:23.258
computer, but we said that the
computer system is much more

NOTE Confidence: 0.88618535

90d89372-f822-4f63-abb8-5afc58c6fd7d
00:08:23.258 --> 00:08:26.426
than the computer. A computer
system is a computer that is

NOTE Confidence: 0.88618535

c69c0589-6e01-45b2-94d8-acdd3fa92649
00:08:26.426 --> 00:08:28.154
able to interact with the user.

NOTE Confidence: 0.775105

fea15b70-2af2-4721-b6b7-f97355084b69
00:08:28.740 --> 00:08:30.189
Through IO devices.

NOTE Confidence: 0.913486

e058c1cf-ab7f-465c-9d26-2d9f035b4c0c
00:08:30.910 --> 00:08:34.806
Also is able to store
permanently the information.

NOTE Confidence: 0.8264459

56e6f4da-eb30-4f03-a9a3-b4c4738be759
00:08:35.480 --> 00:08:39.500
Either the code permanently or
the input or output data.

NOTE Confidence: 0.8355322

131ce70b-2a31-4c6a-969d-53d295200600
00:08:40.240 --> 00:08:44.380
So a computer plus the IO
devices and the permanent

NOTE Confidence: 0.8355322

e19096e1-35ae-4b48-81cc-df34a42b3e6d
00:08:44.380 --> 00:08:48.106
decisions called can be the
system to in today's

NOTE Confidence: 0.8355322

00e7ff15-4fcc-4eda-a43a-e25a53b6af70
00:08:48.106 --> 00:08:51.832
architecture, because the
permanent storage is a type of.

NOTE Confidence: 0.8355322

3a681ba7-a797-4f0d-b235-fc88d85be6fb
00:08:51.832 --> 00:08:56.800
I mean you can write your
information into or you can read

NOTE Confidence: 0.8355322

039c4fd8-ff85-4d29-afb3-0392e3e26c76
00:08:56.800 --> 00:09:00.940
the information from, so the
permanent storage is become a

NOTE Confidence: 0.8355322

c2edc27c-0135-4f24-a78c-3fb0549f7e9a
00:09:00.940 --> 00:09:05.494
member of the IO devices. So in
today's architecture when you

NOTE Confidence: 0.8355322

7565cd91-8a50-4437-b2eb-25682cf5dfea
00:09:05.494 --> 00:09:09.634
say IO devices input output
devices, not only the monitor

NOTE Confidence: 0.8355322

b8e6a821-09e7-4d3e-a84c-22af52395d08
00:09:09.634 --> 00:09:10.876
which is the.

NOTE Confidence: 0.8605307

d0095fb2-97e1-4cdf-af7c-0f47ecf5f26b
00:09:10.990 --> 00:09:14.266
Output device or the
keyboard which is the input

NOTE Confidence: 0.8605307

b4a99264-9e50-49c8-b447-240a0bf2b314
00:09:14.266 --> 00:09:17.906
device. Also the hard disk
drives or flash drives are

NOTE Confidence: 0.8605307

9ebf979c-3749-4e85-9d2c-89b427030bb8
00:09:17.906 --> 00:09:19.362
all called IO devices.

NOTE Confidence: 0.8322748

dc0121f0-5d08-49d8-bdee-c168829e00be
00:09:21.740 --> 00:09:26.602
So then we start designing
memory units by using a decoder

NOTE Confidence: 0.8322748

88ffd237-6965-495e-b5a4-17aa6c8f46f9
00:09:26.602 --> 00:09:32.790
and creating a matrix of memory.
So each row of the matrix is a

NOTE Confidence: 0.8322748

d21b39c7-8ff1-4e83-9b4c-c79d69a706ea
00:09:32.790 --> 00:09:38.094
stack of some type of flip
flops. We use D flip flops.

NOTE Confidence: 0.8550491

4951eab0-e151-4a63-9b97-a99c6a1ef8b0
00:09:38.750 --> 00:09:43.690
And each row is 1 location of
the memory. So we created many

NOTE Confidence: 0.8550491

244eeb11-16df-436a-956b-56fd442c3d28
00:09:43.690 --> 00:09:44.830
rows of the.

NOTE Confidence: 0.8364184

cbfcb3d9-294c-488b-bbe5-9b3f6b8cf438
00:09:46.450 --> 00:09:51.820
Flip flops. Each row we call
that register, so we stack these

NOTE Confidence: 0.8364184

10ca18a1-a5b0-4649-be80-081d23864d11
00:09:51.820 --> 00:09:54.100
register in order to build the

NOTE Confidence: 0.8723506

2c06a739-996f-40b3-9eec-95218fb74fb2
00:09:54.100 --> 00:09:59.958
memory. Module. So today's task
is to build a processor.

NOTE Confidence: 0.8662156

af79c7ec-d045-4a9f-8149-a9e656f6a228
00:10:00.900 --> 00:10:05.294
One thing I have to tell you is
that building a processor is

NOTE Confidence: 0.8662156

85a68ed8-0393-4fc0-ad46-081d94aa8565
00:10:05.294 --> 00:10:08.674
much more sophisticated than the
building the memory store memory

NOTE Confidence: 0.8662156

9eb6d76a-b6e9-42e8-955e-e62fee4404a1
00:10:08.674 --> 00:10:10.702
unit there, and the reason is

NOTE Confidence: 0.7894934

86f7e081-aa75-426c-87b3-e608fabba614
00:10:10.702 --> 00:10:16.515
that. Uh, uh, the goal of
building processor is to

NOTE Confidence: 0.7894934

28ff6e9e-3717-45fc-9cee-4d8b97759117
00:10:16.515 --> 00:10:20.190
execute instructions, so
there there might be

NOTE Confidence: 0.7894934

692f6b8b-403c-4511-b35d-bb2f8627b3e0
00:10:20.190 --> 00:10:24.390
different instructions, so
the processor must be able

NOTE Confidence: 0.7894934

2e2c6fdd-7752-4138-91f4-070c2b4d91a7
00:10:24.390 --> 00:10:24.915
to.

NOTE Confidence: 0.8925729

898648b1-358a-4c5d-979d-ffcca9272030
00:10:26.230 --> 00:10:31.198
Execute a lot of instructions so
the task in building process is

NOTE Confidence: 0.8925729

96258c12-bb01-43a9-b82d-d984ead1421c
00:10:31.198 --> 00:10:35.752
much more difficult than memory
because the only task in memory

NOTE Confidence: 0.8925729

d42540df-b217-43f1-8c77-63aafff0cdbb
00:10:35.752 --> 00:10:40.306
unit is that just to store the
information and the information

NOTE Confidence: 0.8925729

3392fe73-cb93-44ba-8bb4-9d7e88d28f01
00:10:40.306 --> 00:10:44.446
we store in the memory. It
doesn't matter. This information

NOTE Confidence: 0.8925729

1aa24409-1074-487d-913f-209eed20a92d
00:10:44.446 --> 00:10:49.000
is the image audio, or it's the
instruction as long as.

NOTE Confidence: 0.8387229

9ae1c125-4c36-473c-a3cd-b9b1a87d40db
00:10:50.840 --> 00:10:55.493
We are dealing with the binary
system. All those type of

NOTE Confidence: 0.8387229

6a6e0c32-adf9-41fb-9dfe-c4691883c5c3
00:10:55.493 --> 00:11:00.569
information are just a stream
of zero and one and we just

NOTE Confidence: 0.8387229

38bf8c3e-e39c-446e-bb10-6c630736083b
00:11:00.569 --> 00:11:05.645
can install them by using flip
flops in memory. So there is

NOTE Confidence: 0.8387229

9afee5ab-f56f-4b6f-be90-7328d5096383
00:11:05.645 --> 00:11:09.875
no specific task for memory.
Just storing the memory the

NOTE Confidence: 0.8387229

53e0ca46-d5f8-455b-8728-0b88052802a8
00:11:09.875 --> 00:11:13.682
information in binary digits
but for the processor there

NOTE Confidence: 0.8387229

39ed9cff-698c-4374-9c35-d0e93363c774
00:11:13.682 --> 00:11:18.335
are lots of tasks to do, so
today's lecture gonna just

NOTE Confidence: 0.8387229

d9c6b9ff-ac41-4ecb-b1a2-becd22edac70
00:11:18.335 --> 00:11:20.027
start this design process.

NOTE Confidence: 0.83835065

53965b26-3086-4878-a627-13fb0a3c4652
00:11:21.400 --> 00:11:23.518
Or the design steps for building

NOTE Confidence: 0.86013967

84118423-d18d-4f95-92c3-62a8c67596f3
00:11:23.518 --> 00:11:28.741
a processor. But next semester,
if you take the course computer

NOTE Confidence: 0.86013967

51e3ac8e-56a6-4cc1-a23a-8dd702835f7e
00:11:28.741 --> 00:11:32.173
architecture 2, the whole
semester is about building

NOTE Confidence: 0.85898495

a68532a0-9407-4d57-b291-33f67a42019f
00:11:32.173 --> 00:11:37.840
processor. So you won't expect
me to just build a processor,

NOTE Confidence: 0.85898495

e1b32687-158a-40b0-a6f2-0365eb1dfc4d
00:11:37.840 --> 00:11:42.746
but just one session the whole
next semester in the course.

NOTE Confidence: 0.85898495

b3d677db-0a14-4056-8bdd-54966ad424ff
00:11:42.746 --> 00:11:47.206
Computer Architecture two, you gonna
build just one single processor.

NOTE Confidence: 0.8975633

d85d6efc-5c5c-49f7-aeee-a6387423377e
00:11:48.260 --> 00:11:53.485
So that's a long another journey
for building a computer system.

NOTE Confidence: 0.91576535

9be37c2b-0cb2-443d-9f40-2bd92574b508
00:11:54.170 --> 00:11:57.320
So today we just wanted
to start this process.

NOTE Confidence: 0.8815086

360687bf-2ce2-4b38-8812-12cbed7d4a7d
00:11:58.820 --> 00:12:04.078
So here is the problem from the
designer computer system. The

NOTE Confidence: 0.8815086

07e2496f-9339-4d78-9104-504943652a01
00:12:04.078 --> 00:12:08.380
next step after designing the
memory is designing the

NOTE Confidence: 0.8815086

b4464c92-1470-4aec-87f8-88ca79961fcc
00:12:08.380 --> 00:12:10.770
processor to do the calculation.

NOTE Confidence: 0.8352726

37eeb195-9c46-4376-b9a1-965ee1385794
00:12:12.670 --> 00:12:16.910
Large memory when we say
calculation we say that the

NOTE Confidence: 0.8352726

ef24c954-6d98-4127-b0db-e468afd058ad
00:12:16.910 --> 00:12:21.574
calculation or execution of the
instruction on data and by data.

NOTE Confidence: 0.8352726

b4b4b9ef-52f1-466e-ad86-95975f4dd256
00:12:21.574 --> 00:12:23.694
As I said we mean.

NOTE Confidence: 0.854369

f75f2def-8363-4572-bc9c-789e52eefa44
00:12:24.480 --> 00:12:27.864
Numbers any type of data
must be represented with

NOTE Confidence: 0.854369

025755f5-3334-47d0-92f7-ca63b02d702f
00:12:27.864 --> 00:12:31.248
discrete units or discrete
numbers, and because of that

NOTE Confidence: 0.854369

061776e1-10f8-44be-821d-54ebc6b848ce
00:12:31.248 --> 00:12:35.008
we are going to build a
binary system. All the

NOTE Confidence: 0.854369

f1899a89-d8cf-4801-afa2-39beca759532
00:12:35.008 --> 00:12:38.768
numbers must be converted to
binary digits or stream of

NOTE Confidence: 0.854369

fe1e3dcc-211f-4788-83b2-7c738919e3b0
00:12:38.768 --> 00:12:39.896
zero and one.

NOTE Confidence: 0.892413

86df1542-58fb-4701-aab5-8f68612c83f6
00:12:42.680 --> 00:12:47.487
So here is the goal. We want to
build a unit.

NOTE Confidence: 0.89118165

b33dadfa-90ad-4dbc-bb9e-03792c746d04
00:12:48.170 --> 00:12:53.232
Call processor. In order to
execute our instructions. So

NOTE Confidence: 0.89118165

130940b0-e569-41d7-bcff-4dddaa4c6139
00:12:53.232 --> 00:12:56.640
basically we instruct the
processor what to do.

NOTE Confidence: 0.87765545

f047208c-87bb-49d8-94cc-5a8dec96c21d
00:12:57.200 --> 00:12:59.120
By writing some instructions.

NOTE Confidence: 0.8703363

65fa08ee-33f9-4c1b-b1d1-9d6d30297aa8
00:13:00.130 --> 00:13:03.700
This set of these instructions
the way we put the instructions

NOTE Confidence: 0.8703363

61d85e35-574e-4413-a45f-63763f0c1b87
00:13:03.700 --> 00:13:07.984
on top of each other is called
the program. So basically what

NOTE Confidence: 0.8703363

a88d95f7-4eb9-4d9e-9b35-87ae9b245bed
00:13:07.984 --> 00:13:12.625
you did in the lab assignments,
write a C or C program there,

NOTE Confidence: 0.8703363

9098d548-e981-48db-9ab1-28caf6b5bed1
00:13:12.625 --> 00:13:15.838
all just you're telling the
processor what to do.

NOTE Confidence: 0.88816327

2f1dbb5d-b49f-4818-a880-69c92d614a61
00:13:16.460 --> 00:13:20.761
So that's why we call them
program and the processor the

NOTE Confidence: 0.88816327

357e911d-e76a-4ccd-a1ef-a166bce4df05
00:13:20.761 --> 00:13:25.844
task of processor is to fetch is
each instruction of us which is

NOTE Confidence: 0.88816327

5e5b646e-8987-4d30-83d5-92698c30d664
00:13:25.844 --> 00:13:27.799
already stored in the memory.

NOTE Confidence: 0.89673537

2dcc8636-602c-4657-9ef1-d7511645471f
00:13:28.440 --> 00:13:29.460
To execute them.

NOTE Confidence: 0.8869146

04bc6918-6c2e-42bd-b149-e1027b8097ae
00:13:30.960 --> 00:13:34.899
So this is the goal of the the
main task of the processor.

NOTE Confidence: 0.9018468

889dbb90-d03d-4348-a392-10a36b8c16b8
00:13:38.220 --> 00:13:40.160
Up so.

NOTE Confidence: 0.78827864

0015101d-ab56-4101-aa1d-a5d718d0b499
00:13:41.770 --> 00:13:42.950
Here is the start.

NOTE Confidence: 0.68158007

5437d7ab-44f2-4b30-8127-7ea122e291eb
00:13:44.090 --> 00:13:49.931
Although the we want to build a
processor that executes our

NOTE Confidence: 0.68158007

ec00e9e1-e79e-4a6f-a2af-59b0fcb9fc07
00:13:49.931 --> 00:13:52.586
instruction, but The thing is,

NOTE Confidence: 0.922108

a3f0329c-1aad-4db3-84c4-04671d91530d
00:13:52.586 --> 00:13:59.436
uh. Not all processors
are able to accomplish or

NOTE Confidence: 0.922108

ccafc1b6-3068-4f5c-bb7b-7ab54da62d22
00:13:59.436 --> 00:14:02.284
execute any type of

NOTE Confidence: 0.87700963

3e788a6c-ca76-4b0b-b096-2ead0af7cd61
00:14:02.284 --> 00:14:07.300
instructions. So based on the
design of the processor, you

NOTE Confidence: 0.87700963

ce94ca12-8922-438b-87dc-893897bcc807
00:14:07.300 --> 00:14:10.810
might design a very simple
processor that only does

NOTE Confidence: 0.81125844

651a515e-9f6c-44bf-9961-162ec247181f
00:14:10.810 --> 00:14:15.398
addition. And because a 
because. All your instructions

NOTE Confidence: 0.81125844

8e984c86-81a5-4f17-a8df-deed48fbcd2f
00:14:15.398 --> 00:14:18.275
in your programs are just
doing addition.

NOTE Confidence: 0.9056996

f41c8b8d-1eec-4ffe-954d-6651182c3284
00:14:20.210 --> 00:14:24.086
For instance, if you want to
build a specific processor for a

NOTE Confidence: 0.9056996

efc3bfb7-01c7-4d8e-baaa-f263c2fbf767
00:14:24.086 --> 00:14:27.316
specific task that the only
algorithm you need is the

NOTE Confidence: 0.85196394

3d758eb6-e4f8-431b-b5a3-04073761a7cd
00:14:27.316 --> 00:14:31.344
addition. So you won't design
A processor that does

NOTE Confidence: 0.85196394

c825c31a-180f-4493-85d2-5eb684f44c9d
00:14:31.344 --> 00:14:35.174
subtraction because it's not.
There's no usage for that for

NOTE Confidence: 0.85196394

9ea58aec-2374-43ad-b0db-1febece2f8fa
00:14:35.174 --> 00:14:35.940
your application.

NOTE Confidence: 0.87636876

0b824fb0-5f3a-49d5-8cc1-32a441649cda
00:14:37.970 --> 00:14:42.964
However, sometimes you need to
build a processor that does any

NOTE Confidence: 0.87636876

a2ca3b11-ff14-4b5b-b561-0ad82cce6f0f
00:14:42.964 --> 00:14:46.596
type of instructions such as
addition or subtraction,

NOTE Confidence: 0.87636876

1f6c65c5-fe90-4ca2-8d8b-15c373a8c290
00:14:46.596 --> 00:14:51.136
division, etc. So building a
processor depends on your need

NOTE Confidence: 0.87636876

342e1882-452f-4ceb-8f87-0cd7b5b87dfe
00:14:51.136 --> 00:14:57.038
on on what application you are
going to use your process. I can

NOTE Confidence: 0.87636876

b0b17068-d1dc-4fd6-87d3-8b2f6b50f5cd
00:14:57.038 --> 00:15:00.670
give you some example, for
instance in today's.

NOTE Confidence: 0.82277644

781dc178-a758-4b57-a403-2c7fc1618193
00:15:03.990 --> 00:15:11.863
Technology. For instance, if you
buy a utensil from for your 

NOTE Confidence: 0.82277644

8df13e37-12af-486f-ad1c-fde41e1059ad
00:15:11.863 --> 00:15:17.493
kitchen, for instance, in
microwave or a fridge, or a

NOTE Confidence: 0.82277644

63e7fe16-498b-4d2a-897e-cbbb275c0075
00:15:17.493 --> 00:15:21.997
laundry machine, all these
devices has processors. For

NOTE Confidence: 0.82277644

e30f3f85-c505-4de4-ba65-39e534436de8
00:15:21.997 --> 00:15:27.627
instance, if you insert your I
mean card to a.

NOTE Confidence: 0.87656707

94bacbcf-46e1-410b-9ff8-04a7bc3fab14
00:15:28.300 --> 00:15:33.690
Uh. ATM machine so there is a
processor behind that ATM

NOTE Confidence: 0.87656707

46113888-bd35-4f4c-831c-d5d92bd56e5c
00:15:33.690 --> 00:15:37.164
machine to process the
information for. Since your user

NOTE Confidence: 0.87656707

9cf036ee-fa9a-4fd7-a039-b755068962f3
00:15:37.164 --> 00:15:41.796
password in the car and the
money you entered in order to

NOTE Confidence: 0.87656707

3e3b707b-86b7-408d-9351-d070025baefb
00:15:41.796 --> 00:15:44.884
subtract the money from your
account and etc.

NOTE Confidence: 0.85762584

70d626e2-4191-464f-98df-d7b413655295
00:15:45.470 --> 00:15:49.848
Or when you use a laundry
machine, for instance, if you

NOTE Confidence: 0.85762584

bf15c51e-cda1-4cb4-9459-c09cc7692986
00:15:49.848 --> 00:15:54.226
put your MasterCard into the I
mean laundry machine and you

NOTE Confidence: 0.85762584

572a9dae-c6f5-4c54-9fb5-670fb18ecc9d
00:15:54.226 --> 00:15:58.206
select some bottom from the
laundry machine to select for

NOTE Confidence: 0.85762584

3f57a47e-4d77-47f8-9a41-b7df1bb6cfad
00:15:58.206 --> 00:16:02.584
instance. I don't know the the
minutes that the laundry machine

NOTE Confidence: 0.85762584

9968e7fe-ff9f-4939-ac03-af63ce6fce1c
00:16:02.584 --> 00:16:06.564
works. There is a processor
behind that machine that does

NOTE Confidence: 0.85762584

0de9c432-4d98-41a3-a3fe-a6ec0b062315
00:16:06.564 --> 00:16:11.340
these tasks for you. So or in
the microwave machine, when you

NOTE Confidence: 0.85762584

35637bd2-4641-4955-a368-f2908368cbe0
00:16:11.340 --> 00:16:16.116
put the time for the microwave
in order to cook your meal.

NOTE Confidence: 0.8827634

88cef829-248d-4db3-a182-ba26272b1fa6
00:16:16.680 --> 00:16:21.839
There's a processor there that
counts the time for you. So

NOTE Confidence: 0.8827634

e531ad43-38d6-4e7a-bb2c-58dcee08ff8e
00:16:21.839 --> 00:16:26.998
based on your machine or your
application you want to build,

NOTE Confidence: 0.8827634

3fbd0c97-dcb9-4367-971f-b4a9b3357325
00:16:26.998 --> 00:16:30.281
the processor has limited
instruction to execute.

NOTE Confidence: 0.9310287

dfda6765-44cb-4941-bfd9-69658432e0f9
00:16:30.920 --> 00:16:31.820
However.

NOTE Confidence: 0.90711915

42380f36-7e0f-4ab5-a286-56754f8bc512
00:16:33.120 --> 00:16:37.234
The difference for the computer
system is that when you your

NOTE Confidence: 0.90711915

9898ccae-23ee-430d-9ff9-c7c56ec71d6b
00:16:37.234 --> 00:16:41.722
goal is to build a computer
system, it means that you want

NOTE Confidence: 0.90711915

d48f3452-eae3-43fa-9d99-a84d5a64e1c8
00:16:41.722 --> 00:16:46.210
to build a general purpose
system that can that is able to

NOTE Confidence: 0.90711915

e35db9d4-0c29-4c83-9a61-f17db26a0f72
00:16:46.210 --> 00:16:48.080
do any type of applications.

NOTE Confidence: 0.87954736

283857e5-6240-4922-a438-9f8621db90e2
00:16:48.890 --> 00:16:52.265
So again, designing a processor
depends on your application.

NOTE Confidence: 0.87954736

360b8185-3152-4c3a-ac4c-3f635aec84c8
00:16:52.265 --> 00:16:56.765
Either your goal is to design A
general purpose machine or a

NOTE Confidence: 0.87954736

f3478b75-2c0e-4ba4-8e92-ef0293e786b9
00:16:56.765 --> 00:16:57.890
specific purpose machine.

NOTE Confidence: 0.8485716

1a55d309-df56-4405-9b27-db789aa8781b
00:16:58.610 --> 00:17:04.470
Based on your goal, the
instructions that is able to

NOTE Confidence: 0.8485716

9e40f80d-34bd-4c15-9122-705474dfa139
00:17:04.470 --> 00:17:08.572
that the processor can
execute is limited.

NOTE Confidence: 0.875073

4ca2a7d3-6dfe-4959-8b27-b783eb94c3c5
00:17:10.810 --> 00:17:17.058
The set of all instructions,
that is that a processor can

NOTE Confidence: 0.875073

2f86dfda-354a-4a54-8545-65166cc09bcb
00:17:17.058 --> 00:17:22.170
execute or can accomplish to
finish the instructions is

NOTE Confidence: 0.875073

882a567a-29ff-4405-815e-43736bc4eb5b
00:17:22.170 --> 00:17:23.874
called instruction set.

NOTE Confidence: 0.87971216

c43a000b-e667-46b5-9577-f6178882eb71
00:17:26.580 --> 00:17:31.788
If you want to see what are the
instructions, set of the

NOTE Confidence: 0.87971216

64912fef-f385-45fc-9b85-4c44427f2661
00:17:31.788 --> 00:17:35.694
processor, the manufacture of a
processor release, a document

NOTE Confidence: 0.87971216

642e0c99-13ef-412d-957d-b64f6070566b
00:17:35.694 --> 00:17:37.864
which is called a instruction

NOTE Confidence: 0.8170588

96b85b67-1a64-4bdc-a817-8fae9d0b11e1
00:17:37.864 --> 00:17:43.677
set reference. For instance,
if you buy a core a for instance

NOTE Confidence: 0.8170588

4160850a-7f2d-4d60-b73d-df10268ca1c0
00:17:43.677 --> 00:17:48.993
core i9 from Intel Company
based on the family of 64

NOTE Confidence: 0.8170588

8a682043-7884-4aeb-b21d-db5dc16da92a
00:17:48.993 --> 00:17:54.309
intel 64. If you click on this
link, you can browse the

NOTE Confidence: 0.8170588

46eca005-f60a-4698-ad05-9aba55e89854
00:17:54.309 --> 00:17:58.739
instruction set or you see
what type of instruction this

NOTE Confidence: 0.8170588

aad5a38f-4413-49f1-aa36-241a38d0efd4
00:17:58.739 --> 00:18:01.397
processor can actually do for
you.

NOTE Confidence: 0.9029038

d2e3a565-c941-4669-8afa-ce52da7bb01f
00:18:05.720 --> 00:18:11.968
And the way you can put the
instructions in the instruction

NOTE Confidence: 0.9029038

0187032c-62cc-4494-ac93-852ddac481e3
00:18:11.968 --> 00:18:19.352
set of a processor in order to
do some algorithm or do some

NOTE Confidence: 0.9029038

9e4dfd66-4a7a-47b3-851d-061e89989f8a
00:18:19.352 --> 00:18:21.624
processing is called assembly.

NOTE Confidence: 0.89016193

0f8b6cb3-ed78-44b0-bbf8-5ed448a8acc1
00:18:22.760 --> 00:18:28.290
So. Basically, for instance, if
you know that there is an

NOTE Confidence: 0.89016193

972f3395-299a-475d-bf77-06682aab1015
00:18:28.290 --> 00:18:32.430
instruction in the processor
that can does the addition and

NOTE Confidence: 0.89016193

da7128ea-ce75-467b-a120-1fc985732733
00:18:32.430 --> 00:18:37.812
you have to figure out what is
the code for that addition and

NOTE Confidence: 0.89016193

b30dac4e-5f12-4125-b05d-b8838da80b87
00:18:37.812 --> 00:18:39.882
use that code for doing

NOTE Confidence: 0.86691177

3e67604c-f4fd-448c-ba6a-006488fd24b5
00:18:39.882 --> 00:18:44.430
addition. If you want to do
another addition after the first

NOTE Confidence: 0.86691177

769e4a77-9633-4cfc-a594-876aae8eb1e4
00:18:44.430 --> 00:18:48.510
addition, you have to use the
same code for that addition and

NOTE Confidence: 0.86691177

69aed64a-6175-4dab-bc0d-94a79b9c7309
00:18:48.510 --> 00:18:52.930
then after that if you wanted to
do subtraction, use the code for

NOTE Confidence: 0.86691177

93b3901d-743b-4b61-96ce-82cac5e37974
00:18:52.930 --> 00:18:56.330
that subtraction, which is all
these codes or all these

NOTE Confidence: 0.86691177

de7faa17-9e37-41b6-8339-4b5e05780bbe
00:18:56.330 --> 00:18:59.050
instructions are in the
instruction set of the

NOTE Confidence: 0.8762787

b67c98ac-6561-46ce-ac0a-a152a07d44ef
00:18:59.050 --> 00:19:03.444
processor. If you stack all
these instructions to write

NOTE Confidence: 0.8762787

2883633a-3a04-499f-a2e6-0c2c2b6dd64c
00:19:03.444 --> 00:19:08.520
a program or to do a more
complex task, this is called

NOTE Confidence: 0.8762787

efdaa7bb-6bf9-48bf-b8e8-5d09035a6def
00:19:08.520 --> 00:19:12.750
assembly and the way you are
using the instruction is

NOTE Confidence: 0.8762787

5d2c2f43-ba8a-4b0b-9400-1f830d3e8b08
00:19:12.750 --> 00:19:14.019
called assembly language.

NOTE Confidence: 0.9201507

99e0a9a5-0237-4abc-bbfc-567ff2e51e8d
00:19:16.210 --> 00:19:17.030
So.

NOTE Confidence: 0.90120417

29e0a7c4-8f98-4058-9693-0355f0608fde
00:19:18.950 --> 00:19:24.868
The processors based on the
instruction set or the number of

NOTE Confidence: 0.90120417

25bf76cb-2825-4f34-91be-b1ba5ddccb02
00:19:24.868 --> 00:19:30.248
instructions in the instruction
set can be categorized into two

NOTE Confidence: 0.90120417

025e194f-26f9-4211-a4f6-ad20d37c753e
00:19:30.248 --> 00:19:32.400
different type of processors,

NOTE Confidence: 0.86627144

ac344a3e-3ab8-47ae-b9d7-792a2ccf420c
00:19:32.400 --> 00:19:37.190
either RISC. Or reduced
instruction set computers and

NOTE Confidence: 0.86627144

826ed002-367b-402d-b391-c32e1a754121
00:19:37.190 --> 00:19:39.565
the assembly language for the

NOTE Confidence: 0.583832

d4c23d62-c842-448f-ab79-74a4e5799c71
00:19:39.565 --> 00:19:42.510
RISC processors. Or CISC.

NOTE Confidence: 0.9124649

df8f550d-aca1-42a9-b28f-d92f4fa756df
00:19:43.320 --> 00:19:46.204
Meaning that the complex
instruction set computers.

NOTE Confidence: 0.9065977

1e11825f-52e5-455c-ac3a-d0ea1847c3df
00:19:48.280 --> 00:19:52.231
The RISC computers are those
computers that the processor

NOTE Confidence: 0.9065977

82c907fc-0f1c-40fe-ad75-794cd4e95903
00:19:52.231 --> 00:19:56.621
only have very small number of
instruction sets, so the

NOTE Confidence: 0.9065977

3c870d03-b9da-4a45-a5c4-2f846f382e60
00:19:56.621 --> 00:19:58.377
assembly language is very

NOTE Confidence: 0.8615287

ab5a9ba2-22ef-431d-b92f-0b486f5d89ea
00:19:58.377 --> 00:20:00.110
limited. But the.

NOTE Confidence: 0.887391

cfaea043-40af-4b6b-bff4-107c672cc170
00:20:00.190 --> 00:20:04.566
Thing is, there are these
instructions are highly

NOTE Confidence: 0.887391

9bd7e5ba-65f4-494d-bab2-0cf36ba8cd08
00:20:04.566 --> 00:20:09.489
optimized and you can do those
instructions very fast.

NOTE Confidence: 0.92579144

f4752e5f-5b2d-4752-ae43-8606f1e6c163
00:20:10.300 --> 00:20:13.594
For instance, if you want to
build a microwave.

NOTE Confidence: 0.8581471

569f1128-3c78-4e79-828d-1b5701a3fe7b
00:20:14.530 --> 00:20:18.770
The processor you need is only a
countdown processor, meaning

NOTE Confidence: 0.8581471

b243e8d8-7e73-460b-b491-2b9096320bee
00:20:18.770 --> 00:20:23.858
that you just need a sequential
logic with, for instance N bit

NOTE Confidence: 0.8581471

fcc5285c-fd1b-4e62-9e74-f7b88f192dc9
00:20:23.858 --> 00:20:28.522
flip flip flop just to do
countdown from a specific time

NOTE Confidence: 0.8581471

fd6be19a-b75f-419c-b813-425aace78283
00:20:28.522 --> 00:20:34.458
up until zero and then you end
up with zero. So there is no

NOTE Confidence: 0.88697565

b44fdea7-5c73-4f0c-bf3d-b8cacb8182d5
00:20:34.458 --> 00:20:39.488
other calculation. So you
can build a processor

NOTE Confidence: 0.88697565

3517393a-0c2f-4c3f-b51b-7bc37347a09e
00:20:39.488 --> 00:20:44.780
that is highly optimized
to do only counting down.

NOTE Confidence: 0.85866326

2cd505f0-0446-4b55-b064-ef0602f4bcbd
00:20:47.280 --> 00:20:52.675
But your processor
is only is able to do only. I

NOTE Confidence: 0.85866326

419bf68a-5b5e-4db9-a3f7-64c1d6e040e9
00:20:52.675 --> 00:20:53.920
mean counting down.

NOTE Confidence: 0.853921

284bbd5b-86a8-4d0f-8350-bfe785386ce3
00:20:55.310 --> 00:21:01.050
However, if you want to build a
processor that do a lot of other

NOTE Confidence: 0.853921

c6c6698d-01ea-4de3-8b6c-0ccbafd45898
00:21:01.050 --> 00:21:04.330
instructions such as division
cap, I mean, subtraction,

NOTE Confidence: 0.853921

10e7ddc3-9b52-4d4d-b406-10da4399e97a
00:21:04.330 --> 00:21:08.020
addition, kind of a general
purpose processor, you your

NOTE Confidence: 0.853921

8146afc4-0fe9-44ce-b102-d3df59d464f8
00:21:08.020 --> 00:21:12.530
instruction set gonna be very
large. I mean a lot of

NOTE Confidence: 0.853921

de6e4efd-1e46-491b-bfe4-f85b74616d39
00:21:12.530 --> 00:21:15.810
instructions, for instance not
only integer calculation but also

NOTE Confidence: 0.853921

39355186-fd49-4e9a-b573-da5b75203cc8
00:21:15.810 --> 00:21:17.450
of floating point calculation.

NOTE Confidence: 0.839952

f5ffc59a-2b91-493a-b7a2-d107cf80456e
00:21:18.540 --> 00:21:22.970
But the I mean there's a
tradeoff. You introduce more

NOTE Confidence: 0.839952

03fb1a1c-adf2-47b1-97f6-31f14a29b40b
00:21:22.970 --> 00:21:26.514
instruction, it increase the
capability of your processor,

NOTE Confidence: 0.839952

856b7a88-dbe8-42f2-b41a-788ffb24fbb1
00:21:26.514 --> 00:21:32.273
but at the same time you don't
have the chance to optimize the

NOTE Confidence: 0.839952

7d02c81b-e7ac-403b-81d5-850b9bb6934f
00:21:32.273 --> 00:21:36.260
instructions because you don't
know what type of the

NOTE Confidence: 0.839952

2010152a-68bc-4839-b4ab-fc2d327304c1
00:21:36.260 --> 00:21:40.690
calculation the user gonna ask
from your processor. So you

NOTE Confidence: 0.839952

7708178b-19bf-4d7c-80e9-960696d80ed4
00:21:40.690 --> 00:21:45.563
cannot say that I want. I will
optimize the instruction for

NOTE Confidence: 0.839952

49dbf974-f74b-4b2e-9902-67fd0cb104c4
00:21:45.563 --> 00:21:47.335
integer, because you might.

NOTE Confidence: 0.84379715

da3bf840-bfb6-46bb-9fbb-c46ed127dd5b
00:21:48.590 --> 00:21:51.526
A user might use the
floating point calculation

NOTE Confidence: 0.84379715

b8dfde2d-79dc-4163-bc1a-97e118c7d743
00:21:51.526 --> 00:21:52.627
from the process.

NOTE Confidence: 0.8930753

1347285d-6d52-45bf-9f8b-358ffdea3575
00:21:53.910 --> 00:21:59.029
So. You have more instruction,
but all those instructions are

NOTE Confidence: 0.8930753

7f51036a-ef09-4ad8-b769-b696c56648e0
00:21:59.029 --> 00:22:00.262
not highly optimized.

NOTE Confidence: 0.81101704

3574d17e-6ecf-40d2-8069-ae9815051cf3
00:22:01.360 --> 00:22:04.890
By highly optimized I mean
speed of the execution of

NOTE Confidence: 0.81101704

bd95f68c-6923-46a6-b61e-19e51b6c8648
00:22:04.890 --> 00:22:05.596
those instructions.

NOTE Confidence: 0.82869166

ea9019f4-8bb7-467a-9074-379b3134fc2e
00:22:07.080 --> 00:22:12.456
An immediate example is this. So
far we haven't discussed or we

NOTE Confidence: 0.82869166

528d6e28-111f-4994-b9be-4130bba5bd96
00:22:12.456 --> 00:22:16.936
haven't designed any units to do
calculation on floating point,

NOTE Confidence: 0.82869166

4df2c28d-5c8f-437f-8593-45a6d0524544
00:22:16.936 --> 00:22:21.864
although in numbering system
chapter we set up how to convert

NOTE Confidence: 0.82869166

fa7dd909-7aff-4704-bda7-0a73582eff4e
00:22:21.864 --> 00:22:26.344
a fraction number into binary
numbers. But after that chapter

NOTE Confidence: 0.82869166

892c7320-5167-47ed-8fe5-91cf14c9b865
00:22:26.344 --> 00:22:30.824
we haven't decided. I mean
discuss or design any, for

NOTE Confidence: 0.82869166

de1685c0-146a-40ab-9986-edb5e9a60e24
00:22:30.824 --> 00:22:34.856
instance adders for floating
point numbers or we haven't

NOTE Confidence: 0.82869166

7c094b81-2d9e-488d-a826-29a1f6027bf8
00:22:34.856 --> 00:22:36.648
designed any multipliers for

NOTE Confidence: 0.84506744

517fab78-a602-4f8c-b3d7-fe4a7419a1a0
00:22:36.648 --> 00:22:40.973
floating point. Numbers, so
this is a whole different

NOTE Confidence: 0.84506744

76db74b4-14e9-481f-88ce-5f1e0c0a5d55
00:22:40.973 --> 00:22:44.924
story, and in the next
semester in the computer

NOTE Confidence: 0.84506744

47571991-793c-487e-871a-23c0eca4f47d
00:22:44.924 --> 00:22:48.875
architecture two, you would
design some digital units to

NOTE Confidence: 0.84506744

756052ed-1ea8-4f9c-8750-74dfd2f9885d
00:22:48.875 --> 00:22:51.070
do calculation of Floating
Points.

NOTE Confidence: 0.81104654

20404a0a-e406-4a97-b931-72877782d8e2
00:22:53.920 --> 00:22:58.840
If you go to market nowadays
to buy a very general pair,

NOTE Confidence: 0.81104654

3f5d6839-7c0a-461a-ad56-2bb46d10d475
00:22:58.840 --> 00:23:02.530
I mean a normal processor,
for instance from Intel

NOTE Confidence: 0.81104654

bb28f1fa-2e27-4f82-8a1d-0b6a3a8f1f27
00:23:02.530 --> 00:23:04.580
Company or from AMD Company.

NOTE Confidence: 0.85211146

27db98ea-c99b-43f1-be51-03d93789689c
00:23:06.590 --> 00:23:10.246
Usually these processes are
general purpose processors and

NOTE Confidence: 0.85211146

c7f26304-b1b3-4d93-bb8f-ea0d44911f2c
00:23:10.246 --> 00:23:15.730
they are in the Category of CISC
processors and the number of

NOTE Confidence: 0.85211146

c5614478-4385-47a7-825f-997397e56b4e
00:23:15.730 --> 00:23:20.300
instruction sets are around 900-one
thousand. So basically, if there

NOTE Confidence: 0.85211146

059838ff-ddd5-4094-92aa-9cf67f3ed59c
00:23:20.300 --> 00:23:24.870
are 1000 different instructions
that you can ask this processor

NOTE Confidence: 0.85211146

b1d4dbec-c60d-4290-8b78-1c385afd0559
00:23:24.870 --> 00:23:27.155
to, I mean to do.

NOTE Confidence: 0.92456734

9288648f-2b21-4bc9-a042-06aa37c5301d
00:23:27.940 --> 00:23:29.218
I put this.

NOTE Confidence: 0.8821344

00968321-1268-4602-81a6-05de354293c9
00:23:30.000 --> 00:23:34.050
Elements here this character
here around this number because

NOTE Confidence: 0.8821344

719e3f7d-1968-4f5c-82df-df7e52f3143a
00:23:34.050 --> 00:23:35.400
there is no.

NOTE Confidence: 0.84213895

9aed4b0c-9a65-46c6-835e-d6ec287761d0
00:23:36.500 --> 00:23:40.550
A standard convention in
counting the instructions. So if

NOTE Confidence: 0.84213895

730317b9-ac9c-4a25-8ef3-c99ee7097c37
00:23:40.550 --> 00:23:45.500
you're interested, you can read
this blog post in this block,

NOTE Confidence: 0.84213895

0bf048ab-4028-489e-9e63-5cce1bd81746
00:23:45.500 --> 00:23:50.000
but it explains what are the
difficulties in counting the

NOTE Confidence: 0.84213895

9556cbc0-9823-46ab-9754-d649afe94d13
00:23:50.000 --> 00:23:51.350
number of instructions.

NOTE Confidence: 0.7875103

8f29c39b-9f67-46fd-8d4d-bed7b2e82b88
00:23:52.160 --> 00:23:58.322
But I mean, in general, uh, we
can say that for the CISC

NOTE Confidence: 0.7875103

ec60d9ad-f583-467b-b1cc-8624d1d21be6
00:23:58.322 --> 00:24:01.640
processor, and nowadays
technology by these two

NOTE Confidence: 0.7875103

03fdf103-910b-4974-891d-adad35947bcc
00:24:01.640 --> 00:24:05.906
companies there are around
1000 instruction to do, for

NOTE Confidence: 0.7875103

aa47a574-20dd-41ab-86e7-b5a13d5c6e95
00:24:05.906 --> 00:24:08.750
instance integer addition,
floating point addition,

NOTE Confidence: 0.7875103

2d4eb674-6b29-4fdd-aeaa-555105611b4d
00:24:08.750 --> 00:24:11.594
integer subtraction, floating
point subtraction, and

NOTE Confidence: 0.7875103

4d1b5986-fa73-416e-92be-46384d8e580b
00:24:11.594 --> 00:24:12.068
etc.

NOTE Confidence: 0.8154523

469afc73-3db8-4dc6-8183-142b82819a40
00:24:15.450 --> 00:24:16.898
Any questions so far?

NOTE Confidence: 0.92300874

79f8420b-076b-4fb9-81eb-4ac1980c65b2
00:24:22.230 --> 00:24:23.180
No questions.

NOTE Confidence: 0.9011797

529d63ca-0647-41f0-8437-167882141a5a
00:24:24.730 --> 00:24:25.330
So.

NOTE Confidence: 0.54649776

89aee7ef-efdc-440f-863d-fcc51e38e3f0
00:24:27.730 --> 00:24:29.470
Basically, uh.

NOTE Confidence: 0.86997133

f8021b4b-e0c3-4068-88aa-a748810d1036
00:24:30.690 --> 00:24:37.648
So far in the lab assignments,
you use the C or C++ program to

NOTE Confidence: 0.86997133

2061bff7-69f2-4915-8a70-90d1519ebc22
00:24:37.648 --> 00:24:41.127
write a programming language
throughout your programs.

NOTE Confidence: 0.8719222

409edec8-e1ad-40ac-a926-dad684452394
00:24:42.130 --> 00:24:47.018
So what is the assembly language
and what is the? I mean these

NOTE Confidence: 0.88823956

840f52ad-efe0-4b04-a308-4d5edb5cfa04
00:24:47.018 --> 00:24:49.376
binary streams? This story is

NOTE Confidence: 0.9007413

16b9cc4f-58c7-44a0-8970-b147250a3eea
00:24:49.376 --> 00:24:55.160
this. The thing is, you can
write your instruction and ask

NOTE Confidence: 0.9007413

9deac8e3-065b-4339-afeb-3e3274cfa3ac
00:24:55.160 --> 00:24:57.570
the processor to do your.

NOTE Confidence: 0.8401711

de4416ec-aecf-40c1-8273-3e9a4e3e9f68
00:24:59.930 --> 00:25:02.270
Task to do your instructions.

NOTE Confidence: 0.91208994

0b2acd6c-ed9a-4ab7-9ce0-ee75e690537f
00:25:03.520 --> 00:25:10.428
Based on. The familiarity
of the human beings with the

NOTE Confidence: 0.91208994

49ad06c9-1c15-4f80-ab5f-37013bcec7f1
00:25:10.428 --> 00:25:11.550
instructions or.

NOTE Confidence: 0.86503917

5313ffc9-69b7-49bb-bf2d-f64c6bd2f3ae
00:25:13.220 --> 00:25:17.450
Which which is I mean, based on
the relation relationship

NOTE Confidence: 0.86503917

8484f4f2-5100-4e6f-8896-0f018a94e9ad
00:25:17.450 --> 00:25:19.142
between the human natural

NOTE Confidence: 0.91129935

4a130c3f-40ff-44b1-a803-0378089cd746
00:25:19.142 --> 00:25:25.100
language. Or you can just
write your program in the

NOTE Confidence: 0.91129935

fdb00fe0-4ef0-4fe4-a84d-80a170961cff
00:25:25.100 --> 00:25:26.740
language of logic circuits.

NOTE Confidence: 0.869559

4fbd6927-b8bf-4e72-90a8-7ecf0e6bf420
00:25:27.330 --> 00:25:29.490
Basically, the binary digit 01.

NOTE Confidence: 0.84540796

e5990a86-45b5-4f59-8240-f4dbcfa3a1a0
00:25:31.280 --> 00:25:36.176
So for instance there are
some. I mean the way you are

NOTE Confidence: 0.84540796

8c2b48b5-7164-4b04-b700-0ead97944b18
00:25:36.176 --> 00:25:40.256
close to the natural language
processor and there are some

NOTE Confidence: 0.84540796

24bd1211-679d-4efa-8f8a-d88df760c334
00:25:40.256 --> 00:25:43.928
pros to that because when you
write your program, it's

NOTE Confidence: 0.84540796

2897d33f-d026-4fd7-b46a-ab2a82555d67
00:25:43.928 --> 00:25:48.008
easier for you to do the
coding or programming because

NOTE Confidence: 0.84540796

bd426a97-a49c-4481-9be0-0943c1c168d2
00:25:48.008 --> 00:25:52.088
it's very closely natural
language and you can write the

NOTE Confidence: 0.84540796

bb8bd12a-1ed3-43cd-a527-1c1b3dfcbe00
00:25:52.088 --> 00:25:55.760
program easy. However, the
processor is going gonna be

NOTE Confidence: 0.84540796

59ca43cf-2a2c-4b80-bc50-db812266a92e
00:25:55.760 --> 00:26:00.248
built by logic circuits that
can only do processing on the

NOTE Confidence: 0.84540796

04d1c13a-9e11-479d-b864-3252e88ea2ce
00:26:00.248 --> 00:26:01.472
stream of bits.

NOTE Confidence: 0.5089026

5b06bcb0-728a-4b5f-82d7-e4961b851939
00:26:02.760 --> 00:26:05.060
So based on this, uh.

NOTE Confidence: 0.807178

94d6b4cb-c02c-4ef4-9bdc-6b95ac3d546d
00:26:05.670 --> 00:26:10.070
from the natural language to
stream at 01.

NOTE Confidence: 0.90819836

59908740-c008-44ca-8937-1dad1de1c1bc
00:26:10.660 --> 00:26:14.314
The programming languages
that you are you are able

NOTE Confidence: 0.90819836

83585bbd-8d41-4fca-8155-2a92f1faca6c
00:26:14.314 --> 00:26:17.968
to use can be categorized
into four different groups.

NOTE Confidence: 0.8406688

5abb8147-591d-4a41-bcc6-08d8e2b9ac58
00:26:19.850 --> 00:26:23.261
Either your programming language
is of type, high level

NOTE Confidence: 0.87816787

cd307e7f-f3e6-4507-9667-77961db694ad
00:26:23.261 --> 00:26:27.708
programming language. Basically
the we can call them imperative

NOTE Confidence: 0.87816787

d990e8c5-dcf7-4b2d-a02f-356d31719da5
00:26:27.708 --> 00:26:32.482
languages. In these languages.
The only thing you write in your

NOTE Confidence: 0.87816787

48ce60c4-45d3-48e9-b6ff-72545e44a8d9
00:26:32.482 --> 00:26:35.086
program is just say what you

NOTE Confidence: 0.8397429

1ddba9b8-3dfe-43ee-ae89-49a4e7fd5f8a
00:26:35.086 --> 00:26:40.960
want. And you don't care about
how the processor gonna execute

NOTE Confidence: 0.8397429

3273509d-ff34-4765-a1b9-3347a4eda873
00:26:40.960 --> 00:26:43.780
and gonna give you what you

NOTE Confidence: 0.8028751

4270bf25-4563-42a5-ab36-b377ee2bb2d5
00:26:43.780 --> 00:26:48.369
need. for instance, there's a
course in computer science

NOTE Confidence: 0.8028751

c81a9e73-5f3d-48cc-9a25-c88ad12d5e1a
00:26:48.369 --> 00:26:49.323
called Database.

NOTE Confidence: 0.720869

9eb17394-6bae-4b20-bca5-070203bcdeeb
00:26:50.450 --> 00:26:55.754
Uh, in that course you gonna
learn a new language called SQL.

NOTE Confidence: 0.85011876

dfe5ae1d-83b3-426e-8f69-2e4c621ca909
00:26:56.620 --> 00:27:01.432
SQL is a language that you can
write the programs by such

NOTE Confidence: 0.85011876

c60b7637-3297-4260-a094-ec8a0008a1c6
00:27:01.432 --> 00:27:04.640
instructions such as Select
Store from a student.

NOTE Confidence: 0.9123832

343ad555-c640-4acd-8f11-be6682f39a5d
00:27:05.670 --> 00:27:10.356
So. You don't I? I assume that
you don't know the SQL

NOTE Confidence: 0.9123832

7f4aac7c-2dc6-465f-b973-2c1ab2d64f7f
00:27:10.356 --> 00:27:13.516
language, but if you see this
instruction in this language,

NOTE Confidence: 0.880161

912d22ef-da15-46cf-875a-2ca9c8370993
00:27:13.516 --> 00:27:18.630
can you? Explain or can you
assume what's the purpose of

NOTE Confidence: 0.880161

e658f327-e114-4739-8b33-fa5d7d61c46e
00:27:18.630 --> 00:27:19.410
this instruction?

NOTE Confidence: 0.8934317

1eb02533-eaf2-4f20-a211-00bf684f27ff
00:27:20.850 --> 00:27:24.724
Any of you, I mean can can you
explain this instruction for me?

NOTE Confidence: 0.92148614

4ecbbbbf-5213-474e-9ba4-e87b7bfed10b
00:27:25.390 --> 00:27:28.610
Even if you don't
know this language.

NOTE Confidence: 0.8928854

c891d0d5-2f82-4892-a0f3-11c97a443508
00:27:34.140 --> 00:27:35.659
Any of you in the chat box?

NOTE Confidence: 0.9268047

3095dbfd-1425-4ce8-b653-b54a0316cab9
00:27:39.210 --> 00:27:40.480
Correct, yes.

NOTE Confidence: 0.8933882

29c79486-6225-44bd-86e6-c04f4d2bc3dd
00:27:41.730 --> 00:27:46.134
Exactly, you see I mean, even if
you don't know this SQL

NOTE Confidence: 0.8933882

7d8a4c50-9713-491f-8ac1-e46e83f48c9e
00:27:46.134 --> 00:27:49.437
language, you can simply
understand what's the purpose of

NOTE Confidence: 0.8933882

a52174fd-a869-4504-b3e0-d1e2e0654c42
00:27:49.437 --> 00:27:53.107
this instruction. Basically, it
says that give me all the

NOTE Confidence: 0.8933882

54e40a7a-2752-44ef-be8e-fa80d9edb569
00:27:53.107 --> 00:27:54.575
information about the students.

NOTE Confidence: 0.8072691

8c9ee323-2483-42c3-9ce0-c0d72c79278f
00:27:55.210 --> 00:27:58.470
A Store means only information
students is the information of

NOTE Confidence: 0.8072691

8c28052c-60a6-41d3-abb0-dcb3f3a79d38
00:27:58.470 --> 00:28:02.056
the students, so, give me or select
all the information from the

NOTE Confidence: 0.8072691

3c8ee35b-2118-4a8d-bf4c-27876ca32c33
00:28:02.056 --> 00:28:04.990
students and retrieve it and
show it to me.

NOTE Confidence: 0.8838132

e969cc83-5020-43a0-863e-209d7d9339a4
00:28:06.300 --> 00:28:09.423
So you see that the
instruction in this program

NOTE Confidence: 0.8838132

435d82fd-fdba-4b47-8610-7cdee67229ac
00:28:09.423 --> 00:28:12.199
language is highly close to
human natural language.

NOTE Confidence: 0.85641724

b42ee8e3-c7d5-4f90-afd8-2b4ab3d97e41
00:28:13.510 --> 00:28:17.430
The second category is the
middle level or declarative. All

NOTE Confidence: 0.85641724

db23c096-32bd-4580-987a-c342f07efde4
00:28:17.430 --> 00:28:22.134
this C, C++, Java, Python. These
are in this category, and The

NOTE Confidence: 0.85641724

d3a31601-ba72-42b5-8160-7794882d765a
00:28:22.134 --> 00:28:27.230
thing is in these languages not
only use say what you need, but

NOTE Confidence: 0.85641724

15e87a5d-76f3-4c45-b8fe-9c61b2f52c91
00:28:27.230 --> 00:28:32.326
also you have to say how are we?
The processor must accomplish in

NOTE Confidence: 0.85641724

f7667713-55db-4b8a-939c-0e809d96bbce
00:28:32.326 --> 00:28:35.070
order to give you what you need.

NOTE Confidence: 0.8818142

8f373cbd-adba-4cfb-9c4d-fb8967904e2d
00:28:35.880 --> 00:28:39.785
So basically, if your need is
just a increment number and

NOTE Confidence: 0.8818142

19c36709-f449-42ad-b78c-52438170cfa3
00:28:39.785 --> 00:28:44.045
number by one, you have to tell
the system or the processor

NOTE Confidence: 0.8818142

fa9969ae-e027-42f9-9b28-d697fe6ea5c5
00:28:44.045 --> 00:28:47.595
first of all allocate one
location for your variable and

NOTE Confidence: 0.8818142

d492174b-c929-4124-ad0f-18873eb3e779
00:28:47.595 --> 00:28:51.855
initialize it with one. So you
are telling the process of what

NOTE Confidence: 0.86850584

af001794-c0ef-441f-84b8-353db1b9495b
00:28:51.855 --> 00:28:56.561
to do. So you have to
describe how and then you

NOTE Confidence: 0.86850584

2cd597f7-380e-4044-8956-6c324c5b068e
00:28:56.561 --> 00:29:00.151
tell the processor add that
value with one and then

NOTE Confidence: 0.86850584

e268f4c4-1768-4c9d-a5b9-997827f97351
00:29:00.151 --> 00:29:01.946
assign it back to one.

NOTE Confidence: 0.93188727

45826ee7-237d-4029-a270-c5cd59793c2e
00:29:03.100 --> 00:29:05.038
So this is what you want.

NOTE Confidence: 0.862058

1d001e8c-c0a1-431f-b996-f7805f33c271
00:29:05.980 --> 00:29:08.910
Addition, but you tell the
processor. First of all, what

NOTE Confidence: 0.862058

70da038f-23ad-455c-b86a-af93b128bf2b
00:29:08.910 --> 00:29:10.961
you do and then second what you

NOTE Confidence: 0.90434706

db9529e9-ede7-44ce-9d41-5cc51a27f1d3
00:29:10.961 --> 00:29:16.022
do next. So not only you say
what you need, but also you say

NOTE Confidence: 0.90434706

b4a5de5e-21a9-4823-a2a7-b96319c185d9
00:29:16.022 --> 00:29:18.982
how to accomplish in order to
see what you need.

NOTE Confidence: 0.84972566

a804b832-99b0-4332-8e8a-7ca62c8141d8
00:29:20.110 --> 00:29:23.233
All the programming languages
when you heard other programming

NOTE Confidence: 0.84972566

0155e3bc-2e00-4a1d-a5a5-ade2eac9b864
00:29:23.233 --> 00:29:26.703
language by default, you assume
that this is a declarative

NOTE Confidence: 0.84972566

7fec838d-3076-40b4-9cb9-81bce2597620
00:29:26.703 --> 00:29:28.438
language in the middle level.

NOTE Confidence: 0.89564586

7a742cff-e4cb-4498-a090-162d9d31f08c
00:29:30.540 --> 00:29:34.800
But you might the next category
is the Assembly language

NOTE Confidence: 0.89564586

0a9b8947-c23e-4e71-9292-3c7f4a0520e8
00:29:34.800 --> 00:29:39.912
assembly language. As I said, is
the language that is proposed by

NOTE Confidence: 0.89564586

51cc9401-08d7-47ed-b6c9-f8b5237842af
00:29:39.912 --> 00:29:41.616
the manufacturers of the

NOTE Confidence: 0.88189524

b232ea04-dd6f-43e1-bd29-8aac1a3536b1
00:29:41.616 --> 00:29:46.534
processors. The processor when
you build when for instance the

NOTE Confidence: 0.88189524

24508ba3-98ab-49e7-990d-fce16eb51a74
00:29:46.534 --> 00:29:51.220
Inter Company built a processor
is really the document in that

NOTE Confidence: 0.88189524

6b399531-3b9b-4b1b-a778-671180bda137
00:29:51.220 --> 00:29:55.480
document. They said that we
support for instance about 1000

NOTE Confidence: 0.88189524

cf82e0b1-3c53-4110-acdc-77c600e32114
00:29:55.480 --> 00:30:00.166
instructions and these are the
instructions and in the way we.

NOTE Confidence: 0.8766257

f730399a-2c78-4927-91e0-8b9cf6694e61
00:30:01.770 --> 00:30:06.466
Converting instructions to
binary digits are this way.

NOTE Confidence: 0.82762164

8abb5b08-c103-429a-a203-48683fc1cafa
00:30:07.370 --> 00:30:12.690
So, and usually the assembly
languages are. These are the

NOTE Confidence: 0.82762164

9310f92f-3ac3-4bfa-9b21-9a15754d4441
00:30:12.690 --> 00:30:14.818
instructions we call these

NOTE Confidence: 0.88702196

ec2265db-49a5-48ff-9b04-8fc3dcbc50b4
00:30:14.818 --> 00:30:21.084
mnemonic. So for instance, if
you want to assign a number to

NOTE Confidence: 0.88702196

19967e79-bb18-4207-b4f5-4ad0effa4992
00:30:21.084 --> 00:30:25.524
a variable in assembly language
of a processor, basically this

NOTE Confidence: 0.88702196

e42a33c3-adea-4fea-b0c9-7ff047147410
00:30:25.524 --> 00:30:31.740
is the way. So move MOV or inc.
Meaning that just add by one.

NOTE Confidence: 0.88702196

53fbb1a4-6015-4dc7-8f2c-cb2f959753b2
00:30:31.740 --> 00:30:35.292
So these are the instructions
in assembly language.

NOTE Confidence: 0.8827065

f073bade-608f-4f59-a098-3075c517b9c3
00:30:36.900 --> 00:30:42.598
And the final language is the
language of binary codes or

NOTE Confidence: 0.8827065

24d7b882-dc4f-4846-bb08-db458cfc9d57
00:30:42.598 --> 00:30:46.224
binary digits, which is
called machine language.

NOTE Confidence: 0.89343965

74fbe707-46f9-455b-827f-43b11c0e2870
00:30:47.330 --> 00:30:53.395
So. The only language that
the processor understands is the

NOTE Confidence: 0.89343965

dbb8478b-8127-47e4-af5c-5eb66eb98187
00:30:53.395 --> 00:30:55.870
machine language or the digital

NOTE Confidence: 0.8940824

7e0360c5-76ee-4ae6-89c9-c0b9ba5dace3
00:30:55.870 --> 00:31:01.072
01. Because he said that in
order to run a program or

NOTE Confidence: 0.8940824

d5685ef9-54bc-4b78-82a3-71c3848e9511
00:31:01.072 --> 00:31:04.834
execute the program, the program
must be reside in memory and

NOTE Confidence: 0.8940824

aec65c81-c014-4b15-ae4e-a57d13d77555
00:31:04.834 --> 00:31:08.254
memory is only able to store
information in binary numbers.

NOTE Confidence: 0.8770399

719544f6-b838-43c7-9950-cd550986801f
00:31:08.880 --> 00:31:12.208
So all our instructions. So
let's back to.

NOTE Confidence: 0.53447473

90ed9350-7704-483d-b4a6-719e0b0ee5c9
00:31:13.080 --> 00:31:14.130
previous slide.

NOTE Confidence: 0.7118744

c0406482-292f-44a1-8db9-ed3ba2a1b252
00:31:15.360 --> 00:31:18.048
Here all our instructions.

NOTE Confidence: 0.8489446

873bbb52-6283-4c4f-bceb-2a399299e413
00:31:19.020 --> 00:31:23.370
Any format either in high level
language, middle level language

NOTE Confidence: 0.8489446

e7675964-7740-4424-86e6-44950e6776e5
00:31:23.370 --> 00:31:28.590
or even in the assembly language
must become very true zero, and

NOTE Confidence: 0.8489446

ba767156-a2e3-40c1-aaf9-f4464be9c410
00:31:28.590 --> 00:31:31.200
ones because they are in memory.

NOTE Confidence: 0.873759

8d85726a-dadc-441e-8180-43f687d19466
00:31:32.240 --> 00:31:36.160
So the only language processor
can understand is.

NOTE Confidence: 0.88652337

3b726dae-ea63-48dc-a5e2-9471dee775ba
00:31:37.150 --> 00:31:39.769
Machine language, which is
basically a stream of 01.

NOTE Confidence: 0.91826916

4e4b4a06-1c51-43b4-8cb1-7dd84a502f19
00:31:41.100 --> 00:31:42.348
So you would ask.

NOTE Confidence: 0.8862362

76f88561-6de6-4281-b202-5043ae0e9ed1
00:31:43.200 --> 00:31:48.096
in C language we write this
program what you say that the

NOTE Confidence: 0.8862362

f7901010-de3e-424c-a904-7f1fdac7ac82
00:31:48.096 --> 00:31:50.136
processor is only understand 01?

NOTE Confidence: 0.90598077

333378bc-bbaf-40f1-94b0-02bf0633a36d
00:31:50.740 --> 00:31:53.870
So who does this translation?

NOTE Confidence: 0.8748733

36283b26-a5ea-4997-922d-f22d37ccae57
00:31:55.140 --> 00:32:00.000
For instance, I'm speaking in
SQL language. You say your

NOTE Confidence: 0.8748733

a276af29-32df-4426-8787-94e03c037fe2
00:32:00.000 --> 00:32:04.374
processor only understand 01. So
who does this translation?

NOTE Confidence: 0.8589771

fff6f08f-9d4e-4b11-8b3e-9db28ff0cdb2
00:32:05.940 --> 00:32:09.890
So the translation is done by
compilers or interpreters, as

NOTE Confidence: 0.8589771

31dcaeb8-71d7-4f14-9466-a4621ef94be2
00:32:09.890 --> 00:32:11.470
the name actually says.

NOTE Confidence: 0.8965991

ebe3025d-ed20-47f1-96dc-e35f4d309af9
00:32:12.660 --> 00:32:17.929
By any language other than
the machine language or 01 if

NOTE Confidence: 0.8965991

d17855c3-6342-44ef-bba3-179bb46824f9
00:32:17.929 --> 00:32:23.198
you use those languages, you
have to find a compiler or

NOTE Confidence: 0.8965991

f42b5174-cf22-433e-85e9-78cb524b68a7
00:32:23.198 --> 00:32:27.030
interpreter to translate your
program into binary digits.

NOTE Confidence: 0.899785

aa48fd48-9494-4600-9105-05bea80f7080
00:32:28.960 --> 00:32:34.140
So. If you decide to do coding
in machine language, basically

NOTE Confidence: 0.899785

fd10f524-9aef-4a23-858a-175d43cf2344
00:32:34.140 --> 00:32:38.507
you just start putting some
zeros and ones. For instance, if

NOTE Confidence: 0.899785

f1e210f0-71fc-4a3c-9c88-2592b61598d3
00:32:38.507 --> 00:32:43.668
you want to create a variable A
and then put one through that,

NOTE Confidence: 0.899785

9b7646af-cf15-42b3-9ef1-af633f4b241e
00:32:43.668 --> 00:32:46.050
you can start with this 00010.

NOTE Confidence: 0.91810775

61874958-5677-49e5-b1d8-f9503ee04d8b
00:32:46.980 --> 00:32:50.970
It is very fast because you
don't need any compiler

NOTE Confidence: 0.91810775

bf26dee6-b830-40ff-9f6a-8a592532fd9d
00:32:50.970 --> 00:32:54.960
interpreter, but it is very
difficult to understand if you

NOTE Confidence: 0.91810775

ff73c01f-8f14-49b2-87ee-2bcb8c3d9ef4
00:32:54.960 --> 00:32:56.955
give this program to your

NOTE Confidence: 0.8519689

e1515a52-92df-4296-93ac-6efc2ae46a36
00:32:56.955 --> 00:33:00.228
friend. Your friend cannot
understand your program.

NOTE Confidence: 0.8519689

101d6548-d77a-4170-a7e5-12ffed1d603d
00:33:00.228 --> 00:33:03.252
What's this? I mean, these
streams of 011.

NOTE Confidence: 0.877259

6263b2f4-8ed1-4df9-8223-a191a531822f
00:33:04.530 --> 00:33:09.626
So because of this, you may say
that. So let's do program in a

NOTE Confidence: 0.877259

d131698c-2a11-45a1-b7bf-dc6d2315dc25
00:33:09.626 --> 00:33:13.266
better language is close to
human natural language. In order

NOTE Confidence: 0.877259

5ae6450f-7eba-452e-8aec-48895f87a2e2
00:33:13.266 --> 00:33:17.270
to understand the program or
debug the program. Or I mean,

NOTE Confidence: 0.877259

db5d5f75-ca95-422b-96cc-30e1336d49e3
00:33:17.270 --> 00:33:21.274
make it I mean understand but
human beings. But instead you

NOTE Confidence: 0.877259

e97dd835-ccbb-44d5-9c41-5856251cc1e6
00:33:21.274 --> 00:33:24.550
need some compilers or
interpreters to convert it back

NOTE Confidence: 0.877259

b49ddbe8-66c1-4565-bc30-ec49c984eb26
00:33:24.550 --> 00:33:25.642
to stream of 01.

NOTE Confidence: 0.90229136

d3c92f24-563d-4ad0-9989-b3ee4a1a9d14
00:33:29.920 --> 00:33:30.760
So.

NOTE Confidence: 0.8530316

ed3985d0-ecad-45fb-acbd-fad8d415ec0d
00:33:31.880 --> 00:33:37.590
Let's see. If I do come I
mean programming in a language

NOTE Confidence: 0.8530316

04901c54-f08d-4f69-91b8-5e0721278273
00:33:37.590 --> 00:33:42.210
that is close to him and natural
language for instance with C++.

NOTE Confidence: 0.89594656

c4e15c77-f410-4e5f-9ef9-265b11a272b7
00:33:42.920 --> 00:33:48.068
How I can convert or I can
translate the program into

NOTE Confidence: 0.89594656

e46ffd41-5b48-4dbe-834f-04000279a643
00:33:48.068 --> 00:33:49.472
zero and ones?

NOTE Confidence: 0.8399493

524eb307-4fb7-4e40-9bab-487f457c6e53
00:33:50.510 --> 00:33:54.659
Bye compilers. So I just wanted
to share my.

NOTE Confidence: 0.78241247

ab22c421-a32d-43c5-b7c6-0e56fd358de5
00:33:56.190 --> 00:33:57.050
Eclipse.

NOTE Confidence: 0.91315126

dd92d078-0881-4706-9dae-7850e6cda2e4
00:34:03.160 --> 00:34:03.880
So.

NOTE Confidence: 0.89053136

27b54d9d-6ffc-4376-bf1c-99ca8bb46ad4
00:34:05.190 --> 00:34:11.781
Here is the I mean very simple
program which I wrote in Eclipse

NOTE Confidence: 0.89053136

81adb5ae-4613-4c04-9a63-f581d3b613e2
00:34:11.781 --> 00:34:17.865
in C language. This is the most
simplest program in C language.

NOTE Confidence: 0.89053136

4ebfedee-4b12-4c08-81cf-5c6e970aee2f
00:34:17.865 --> 00:34:19.893
So basically two variables.

NOTE Confidence: 0.61568767

dbfbdd19-6af9-4793-97f3-e4b59f926eaa
00:34:20.840 --> 00:34:22.580
Of type integer.

NOTE Confidence: 0.85668373

ac67b381-f487-40fe-b5cb-96159bedc4c7
00:34:23.160 --> 00:34:28.965
A is equal to 1, B is equal to
two and then I allocate another

NOTE Confidence: 0.85668373

f54946da-dc66-46b7-94e5-b02ca13264df
00:34:28.965 --> 00:34:34.383
variable C in order to store the
result. A+B goes to c. So this

NOTE Confidence: 0.85668373

06ba023b-40ae-43b0-b563-50a0777d6cb2
00:34:34.383 --> 00:34:36.705
is only basic addition of two

NOTE Confidence: 0.8547934

a0cbb89a-fee3-4c14-963b-706218c65dda
00:34:36.705 --> 00:34:42.640
integer numbers. I write this in
a C language, but I'm saying

NOTE Confidence: 0.8547934

5d1be8c6-01a1-4d89-9fbf-692edca9beaa
00:34:42.640 --> 00:34:47.304
that my computer right now is a
processor that only understands

NOTE Confidence: 0.8547934

8c999408-8901-4277-b8f6-1196256bba22
00:34:47.304 --> 00:34:48.576
zero and one.

NOTE Confidence: 0.8803976

4c70f11b-b3af-47d2-980c-f6f35bf9a307
00:34:49.430 --> 00:34:54.655
So who does this translation?
This translation is the is done

NOTE Confidence: 0.8803976

b3c3689a-6b95-44de-b87e-db7b299ba9ed
00:34:54.655 --> 00:34:59.405
by the compiler of the C
language which is translating

NOTE Confidence: 0.8803976

159c49dd-8558-4dc8-b135-dd035a55fe7a
00:34:59.405 --> 00:35:05.105
the this program into 0 ones in
my computer. So when you.

NOTE Confidence: 0.920042

7b83238f-6c4b-4d2c-ad7e-9832424aefba
00:35:07.730 --> 00:35:09.458
Click on your program.

NOTE Confidence: 0.91887206

7414359f-6fdd-43f0-9812-0f3c1f9ded71
00:35:10.110 --> 00:35:13.070
And then you say that I'm
going to build that.

NOTE Confidence: 0.9250725

d2dba2ff-8217-4448-9069-26f4609fe943
00:35:21.080 --> 00:35:23.270
You see that let's go here.

NOTE Confidence: 0.8565164

95e489a2-0d3b-4abb-a16f-3586a18a806d
00:35:24.570 --> 00:35:27.818
You see that it says
invoking C compiler.

NOTE Confidence: 0.9094199

7999ae72-e6b2-447f-aae7-81a487038f9f
00:35:29.790 --> 00:35:34.278
This is another program that
does the translation from a C

NOTE Confidence: 0.9094199

1302eab8-b39e-48bc-a580-95c56c617233
00:35:34.278 --> 00:35:36.318
program to zero and ones.

NOTE Confidence: 0.88210404

2c427ad1-d35a-4e14-9576-284cdda7a16a
00:35:36.930 --> 00:35:40.062
And finally it creates in new

NOTE Confidence: 0.92052937

f9832ce9-d268-4e09-b1eb-4e9c55119e79
00:35:40.062 --> 00:35:43.211
file. by this extension

NOTE Confidence: 0.87996453

5f0ace4b-db89-4bc8-9a4c-e416bc8139b2
00:35:43.211 --> 00:35:48.140
executable? This is totally
another file, so this is my code

NOTE Confidence: 0.87996453

f0ef1b84-c5f5-483b-bee0-08ea23287930
00:35:48.140 --> 00:35:49.256
file in C.

NOTE Confidence: 0.910386

8451dcaf-1697-4466-93da-504955d91a10
00:35:50.040 --> 00:35:53.020
And this is another file, so
let's open this file.

NOTE Confidence: 0.7842437

7e3fa05d-1636-4ceb-891c-2cafd78720bc
00:35:58.910 --> 00:36:01.750
I'm going to open my.

NOTE Confidence: 0.049167987

6b56ecde-eb84-43c3-aba3-0f08055af355
00:36:04.880 --> 00:36:05.760
Um?

NOTE Confidence: 0.72547305

c8eee971-eed6-45cb-982a-dee821e567cd
00:36:09.050 --> 00:36:10.240
Eclipse.

NOTE Confidence: 0.59682405

8647084d-f7cc-4568-8f3f-ecc80555fa6b
00:36:12.990 --> 00:36:14.778
So let's see, uh?

NOTE Confidence: 0.88670814

f88482f5-cd55-4eb9-9981-c77708853a6e
00:36:17.350 --> 00:36:19.126
So this is my code file.

NOTE Confidence: 0.8585871

373753aa-e725-4b96-b0ac-901cf4ecbbdb
00:36:19.970 --> 00:36:24.180
Which I wrote in C language,
when the compiler actually

NOTE Confidence: 0.8585871

4d77fd06-a411-4123-8671-5dfcb023638e
00:36:24.180 --> 00:36:26.706
invokes by Eclipse, it
translated into.

NOTE Confidence: 0.92179346

dd67f05e-9173-4740-82db-f843fd89adf4
00:36:27.830 --> 00:36:31.792
This file. So you can
right click on the file

NOTE Confidence: 0.92179346

eb4f2a15-85f8-4b72-82b7-b86b0b35c89d
00:36:31.792 --> 00:36:33.008
and then open it.

NOTE Confidence: 0.909622

f20ec3a1-a8c4-448f-9d66-6a8ef94fef9c
00:36:36.120 --> 00:36:38.690
So let's bring this here.

NOTE Confidence: 0.8795246

2e3382fc-071e-4dbc-8dd9-82b1e312a025
00:36:41.640 --> 00:36:47.178
So you see, the content of this
new file is are some characters

NOTE Confidence: 0.8795246

8e675d95-8bfc-4555-bb05-b4dc97b73fd5
00:36:47.178 --> 00:36:51.864
or something that is not. I mean
you cannot understand these

NOTE Confidence: 0.8795246

508fddb9-7904-481e-8aed-f7d1cb78c628
00:36:51.864 --> 00:36:56.976
characters because The thing is
this is a binary file an all

NOTE Confidence: 0.8795246

c1e80e03-6443-4b8f-9feb-15a6af636bf6
00:36:56.976 --> 00:36:59.106
these information are zero and

NOTE Confidence: 0.8168546

779c27a6-733f-4ffe-9451-fc8d11fb4ec1
00:36:59.106 --> 00:37:03.282
ones. You thought that? I mean
this is h, but no, this is

NOTE Confidence: 0.8473353

6c532104-b1ac-474f-8adb-0425e234c2c8
00:37:03.282 --> 00:37:07.317
. Can you see my
screen? I'll call let me

NOTE Confidence: 0.8473353

5a407d91-765a-4149-af4d-ebc231b662aa
00:37:07.317 --> 00:37:07.903
zoom that.

NOTE Confidence: 0.8793344

6dd0e343-39eb-42ba-93d9-0dd991fdb470
00:37:10.240 --> 00:37:14.920
So you might say that this is a
character or this is the

NOTE Confidence: 0.8793344

62da2ce0-8ab0-422b-aa66-087ab451fb8a
00:37:14.920 --> 00:37:18.880
character, but this is not a
character. This is a binary

NOTE Confidence: 0.8793344

b1bb8baa-c1c9-435e-b8fb-596a4e574093
00:37:18.880 --> 00:37:22.840
number, which in this program
in this editor it thinks that

NOTE Confidence: 0.8793344

a52a7f70-34ec-4947-8122-b4947166c5d5
00:37:22.840 --> 00:37:27.160
it is H character. It just
think that. But this is truly

NOTE Confidence: 0.8793344

64b8d17c-ee2f-4d51-b355-6d3675bda937
00:37:27.160 --> 00:37:31.840
not h character, it is a
zero and ones so you see that

NOTE Confidence: 0.8793344

e308e288-6101-40c0-9784-a6b0db512bb4
00:37:31.840 --> 00:37:36.160
this is the zero and one's
stream stream of zero and one

NOTE Confidence: 0.8793344

50cb9f57-250e-4bec-bb4f-f3e98a65d3b4
00:37:36.160 --> 00:37:38.680
of your code. This is the
translation.

NOTE Confidence: 0.8755497

bc77de20-b05a-4e2b-84a4-76f18e34fb20
00:37:39.820 --> 00:37:45.244
The processor in my computer is
able to run this, not this

NOTE Confidence: 0.8755497

598df91c-d77d-428b-a1be-954c12b37988
00:37:45.244 --> 00:37:46.600
program, not the.

NOTE Confidence: 0.85139054

86f414ab-6cd0-44dc-8d51-9183131c65ad
00:37:47.710 --> 00:37:49.680
Let me not this program.

NOTE Confidence: 0.86948305

27ebc52f-8409-4c4d-98f0-0a055af11b3e
00:37:53.310 --> 00:37:57.482
The processor is not able to run
this. The process is able to run

NOTE Confidence: 0.90872186

7f29befe-98fd-4998-808f-3a357742230a
00:37:57.482 --> 00:38:01.384
disk. And this translation is
done by compilers.

NOTE Confidence: 0.9185545

fdf126da-9b55-486f-8027-91a57bd2aac5
00:38:02.270 --> 00:38:04.250
So let's back to my program.

NOTE Confidence: 0.8770505

487e8681-4ff4-4c79-9126-2cd7e27f38a3
00:38:07.680 --> 00:38:10.992
So now that the
translation is done, I

NOTE Confidence: 0.8770505

441f214b-2a42-441c-b396-eadff2da4c4a
00:38:10.992 --> 00:38:14.718
just I put it at
breaking point here just

NOTE Confidence: 0.8770505

a8be81ed-0d89-4011-b90b-609b17eb5b2b
00:38:14.718 --> 00:38:15.960
to show you.

NOTE Confidence: 0.8607008

b67ddf80-ccb1-4654-8c31-774a1e6fe079
00:38:17.600 --> 00:38:21.690
What is the exact zeros and ones
for each instruction?

NOTE Confidence: 0.7343646

74205990-4215-4016-8897-827a4c17c322
00:38:29.270 --> 00:38:33.820
All correct out, nice, nice
question Noniko. I'll answer your

NOTE Confidence: 0.7343646

f130dbcf-5338-4588-bf53-e19157667b71
00:38:33.820 --> 00:38:38.825
question so let's see for now.
Here I'll answer your question.

NOTE Confidence: 0.7343646

90125725-3467-4c13-b4a1-36c26a8b3360
00:38:38.825 --> 00:38:40.645
That's a good question.

NOTE Confidence: 0.8649113

04aae24e-09ab-4f85-b4a9-e17f4d69ca88
00:38:41.750 --> 00:38:48.960
So here is my program, an here
in the eclipse if you see this

NOTE Confidence: 0.6922706

e6fb96bd-3b02-4eef-bc5f-4bb35ba29657
00:38:48.960 --> 00:38:53.180
assembly. This  assembly. I
mean Nonico. I mean, pay

NOTE Confidence: 0.84999526

3d0170d5-3620-4486-b603-c961cf31c637
00:38:53.180 --> 00:38:56.814
attention here. Assembly
language this assembly. So this

NOTE Confidence: 0.84999526

72af8ea5-a381-4f0f-bb36-2927409679f5
00:38:56.814 --> 00:39:00.540
is the reverse procedure.
Actually it converts back to

NOTE Confidence: 0.84999526

064dfe89-56ce-4a27-8d79-fc1ccb7accaa
00:39:00.540 --> 00:39:04.680
zero and ones to your
instructions so assembly is from

NOTE Confidence: 0.84999526

d92993da-f2ae-40e6-aaae-d22377a431d1
00:39:04.680 --> 00:39:09.234
your program to the 0 ones. This
assembly is the reverse

NOTE Confidence: 0.84999526

ef5b2526-30a5-4fba-872c-06252f351ccf
00:39:09.234 --> 00:39:13.788
procedure from zero ones back to
your instruction. So if you

NOTE Confidence: 0.84999526

584c1f90-8aca-4fdc-9fba-1fb4c08af8fa
00:39:13.788 --> 00:39:15.444
click the view this assembly.

NOTE Confidence: 0.85770476

94ae525c-9429-46fa-a165-7930d30689c6
00:39:16.440 --> 00:39:18.156
In the right side of Eclipse.

NOTE Confidence: 0.93059504

fdee38dc-79f9-4b07-9fdf-2e171412fa2c
00:39:20.440 --> 00:39:23.578
You see how this
translation happened?

NOTE Confidence: 0.90152466

9ba7ef0e-087a-4a48-a7a9-00b1120753fd
00:39:26.340 --> 00:39:30.894
So basically you see, the
program may start from here so

NOTE Confidence: 0.90152466

b6b478da-878a-4ef7-b16d-2493d5570dec
00:39:30.894 --> 00:39:34.620
we don't discuss these three
commands up until here.

NOTE Confidence: 0.8590567

4ca2b721-d14c-47cf-b59c-9203baac73b8
00:39:35.380 --> 00:39:39.856
This is basically the first one,
meaning that what is the entry

NOTE Confidence: 0.8590567

f6b9e43a-c95d-41e2-bba2-0239980c96c5
00:39:39.856 --> 00:39:44.332
point and how to call it main
function? Because main is a

NOTE Confidence: 0.8590567

38a27b8e-99a8-4a0a-802f-ee1c561e9107
00:39:44.332 --> 00:39:47.689
function, but this one, the
first instruction. The first

NOTE Confidence: 0.8590567

f5b9190b-b6d3-41f4-9dca-9f3bbc3817f3
00:39:47.689 --> 00:39:48.808
instruction is here.

NOTE Confidence: 0.886623

6f897002-b3e1-4718-b7f3-70db8c8389c0
00:39:49.820 --> 00:39:53.768
It says that the value one. This
is the binary value one.

NOTE Confidence: 0.85401905

3e89f6fc-c36f-47f7-9a04-bfea63f1dacf
00:39:54.430 --> 00:39:58.676
Goes to a memory location and
this is the memory location.

NOTE Confidence: 0.9290643

0ebafd70-a84f-4040-afd3-4844c738f1d2
00:40:01.580 --> 00:40:03.640
And this is the assembly.

NOTE Confidence: 0.8624705

e6faf322-57a3-4f7a-a06a-f57303b8aff5
00:40:04.350 --> 00:40:06.840
Language which is
translated. to binary

NOTE Confidence: 0.8624705

8fceadd0-4824-4fe5-a31d-d347b4e38ed2
00:40:06.840 --> 00:40:09.330
digit. This is the binary
digits.

NOTE Confidence: 0.861289

78b03cea-8fa6-49d7-9549-79b55eaa37c0
00:40:10.680 --> 00:40:15.792
000100 open till here. Although
we because this is a long stream

NOTE Confidence: 0.861289

9b68dbc5-3682-4a82-9ed4-e812f5e8d102
00:40:15.792 --> 00:40:21.330
of zeros and ones. As we said in
the lab assignments, instead of

NOTE Confidence: 0.861289

1c485cc3-4636-44e5-af62-3b8d1272c8ae
00:40:21.330 --> 00:40:26.442
just putting a lot of zeros and
ones, we can reduce the

NOTE Confidence: 0.861289

3af7d5e5-188c-49bf-96fb-897e56c8d22a
00:40:26.442 --> 00:40:27.720
presentation by hexadecimal.

NOTE Confidence: 0.87472284

10463f32-3eb8-41eb-b3e1-d928a0bbcaca
00:40:28.350 --> 00:40:32.717
So in fact this is a binary
representation. But in order

NOTE Confidence: 0.87472284

4eeaa300-9de5-497b-9437-aa51c1bdc8e5
00:40:32.717 --> 00:40:37.084
to show it in a short way, we
use the hexadecimal

NOTE Confidence: 0.87472284

f07b1869-6418-4b8c-87bc-6eecb3c05392
00:40:37.084 --> 00:40:40.657
representation. So this is
the hands of the decimal

NOTE Confidence: 0.87472284

564dff72-61d2-44b3-9a4f-305ab977e9a6
00:40:40.657 --> 00:40:42.245
representation of the binary.

NOTE Confidence: 0.89458925

d838fb94-de68-426c-9e33-37dca24f0935
00:40:43.990 --> 00:40:48.486
Translation of your first
instruction in C language.

NOTE Confidence: 0.92722404

a39e47e5-b24c-4871-832d-c7228f76a9df
00:40:50.260 --> 00:40:52.240
Let's go to the second language.

NOTE Confidence: 0.8549639

4a3ac56e-84ac-43e1-a809-4e4620168ed1
00:40:53.290 --> 00:40:56.314
The second line of the second
instruction, the second

NOTE Confidence: 0.8549639

990e4979-e141-4394-9dcc-14c83555a10c
00:40:56.314 --> 00:40:57.658
instruction is int P2.

NOTE Confidence: 0.88798046

d9b82083-8bd1-454a-b31b-e3def345954b
00:40:58.400 --> 00:41:02.520
This translated to assembly
language like this move.

NOTE Confidence: 0.8663036

f3047f91-c11c-43c1-a0f1-17676a2b00dc
00:41:03.530 --> 00:41:08.704
The value 2 to the memory
location 8. So if you look up

NOTE Confidence: 0.8663036

84fee767-112e-4b9e-b482-a2da8c81401e
00:41:08.704 --> 00:41:13.082
the memory location 8 you would
see the value two there.

NOTE Confidence: 0.91385746

35c911b3-cb5e-44de-8408-31ed06cb8258
00:41:14.870 --> 00:41:18.674
So you can go to that location
by entering the address here.

NOTE Confidence: 0.8486724

78c40c32-7359-45f6-bb6a-b6705be441fa
00:41:19.650 --> 00:41:24.474
And the translation of assembly
language to the binary 0 ones is

NOTE Confidence: 0.8486724

adb8b3fd-a494-418d-ac7f-a93af92cfacb
00:41:24.474 --> 00:41:26.886
here. This is the binary number.

NOTE Confidence: 0.8012227

16b63af7-1678-4f8a-8400-0a7394a26062
00:41:29.670 --> 00:41:34.415
Up until C, so this is the
memory location for C, and here

NOTE Confidence: 0.8012227

6a3cfb5d-d020-467a-92b9-ecf1ebbd62b7
00:41:34.415 --> 00:41:38.065
is the addition, so the addition
comes these two commands.

NOTE Confidence: 0.87660563

5873c969-4190-47c1-aac3-b7d25e22443b
00:41:39.130 --> 00:41:44.201
It first does the addition and
then stores the result in

NOTE Confidence: 0.87660563

0e168909-71ea-4b5a-a7e4-a6087cdc7815
00:41:44.201 --> 00:41:46.506
another location in the memory.

NOTE Confidence: 0.8299581

cdee858e-b7e2-4a3d-a45e-9592975ebaa6
00:41:47.840 --> 00:41:52.390
So addition the result gonna go
here and then it goes to the

NOTE Confidence: 0.8299581

45a77040-2efc-4af4-a830-ca8cf86b9f6d
00:41:52.390 --> 00:41:56.940
memory location at this. This C
is the C in hexadecimal which is

NOTE Confidence: 0.8299581

24f5e90a-a5d9-43b3-b823-fb6dbdf67027
00:41:56.940 --> 00:42:00.440
equal to what number is C
character in hexadecimal is

NOTE Confidence: 0.8299581

4dc859db-47f8-49fd-b038-d6f365075752
00:42:00.440 --> 00:42:01.840
equal to what number?

NOTE Confidence: 0.8205257

2a6541c8-4e35-4351-8d23-4698dddd364a
00:42:04.040 --> 00:42:04.988
Anybody of you?

NOTE Confidence: 0.87594944

d793e53e-d46d-43ba-8378-d64fae776be9
00:42:08.350 --> 00:42:12.494
In hexadecimal 12. Yes this
is the 12 so you see that. I

NOTE Confidence: 0.87594944

a63dcc8b-1fc9-4060-84a3-b113d61d4525
00:42:12.494 --> 00:42:15.861
mean, even in the eclipse it
says that it is equal to 12.

NOTE Confidence: 0.8887822

b308ae35-66ad-4233-8fe9-81c82b1d123c
00:42:16.510 --> 00:42:20.290
So the memory location 12 gonna
be the result.

NOTE Confidence: 0.86019415

f957a7e1-163a-4165-b93b-5102d59a1e0a
00:42:22.590 --> 00:42:26.140
And return, so for the return.
These are the instructions

NOTE Confidence: 0.86019415

20d543ae-bb02-40ad-b5f3-feaecc224fe2
00:42:26.140 --> 00:42:30.755
that we we are not going to
discuss. So you see that why

NOTE Confidence: 0.86019415

cd8099f4-016a-42d8-b22c-77a563670bae
00:42:30.755 --> 00:42:33.950
this assembly you can
translate back from the 

NOTE Confidence: 0.86019415

28872850-8e3c-4a3b-8b96-bcef8113260e
00:42:33.950 --> 00:42:36.790
from the binary translation
back to your instruction.

NOTE Confidence: 0.9123931

d19acc74-b2ef-47ea-aea7-0cb2fa42868c
00:42:37.950 --> 00:42:42.189
So if I stop my program
and I put.

NOTE Confidence: 0.88359696

dd7de867-5e07-4f10-8a66-fcb6374fc5ed
00:42:43.690 --> 00:42:46.288
For instance, I changed my code.

NOTE Confidence: 0.9030161

3985be76-e346-46b8-ba37-79cf6fb11825
00:42:47.840 --> 00:42:49.079
Just do this.

NOTE Confidence: 0.8890186

501bfb5f-82b3-4c19-a7f4-06e4d1917794
00:42:53.960 --> 00:42:55.370
1 + 2.

NOTE Confidence: 0.8737488

bad80ff6-93fa-4dc2-9b8b-2bcd7d0da679
00:42:57.040 --> 00:42:58.588
And then build it.

NOTE Confidence: 0.8916241

7d467fec-bbb6-4e39-8f6c-b51b35e36c66
00:43:02.670 --> 00:43:05.484
Translate to zero
and then debug it.

NOTE Confidence: 0.8843811

633c92b0-ea1f-4b05-894c-66c249e9448d
00:43:07.180 --> 00:43:09.740
Just to see the disassembly.

NOTE Confidence: 0.896742

92524cc6-b19a-477a-b9d1-8f6d0ecf8a29
00:43:11.700 --> 00:43:15.790
So you see that my program
becomes very short. Just

NOTE Confidence: 0.89180547

0464c301-804c-4c4c-a8a4-c0373d9288be
00:43:16.590 --> 00:43:20.100
two lines and this is the
translation to the assembly

NOTE Confidence: 0.89180547

6b698e70-edb2-4e9e-8d31-759f6552a0d9
00:43:20.100 --> 00:43:22.908
language and this is the
translation from assembly

NOTE Confidence: 0.89180547

3a1898dc-8366-4352-8dd9-04779fc5e6f7
00:43:22.908 --> 00:43:24.312
language to binary numbers.

NOTE Confidence: 0.93144506

67b0de46-46f8-426a-b4e4-6179ebccdbb8
00:43:31.890 --> 00:43:33.420
OK, so.

NOTE Confidence: 0.89291424

7ced8831-907c-4533-b960-5533a32dde4d
00:43:35.170 --> 00:43:37.598
Let's go back to the

NOTE Confidence: 0.68591696

b43dba5b-bee4-4f33-aa92-0bd1fdba1c08
00:43:38.310 --> 00:43:39.440
slides.

NOTE Confidence: 0.90625334

4f482f0a-f957-4c7e-9be0-173a98ac103c
00:43:51.320 --> 00:43:52.000
So.

NOTE Confidence: 0.8699613

fd5c91f9-725a-45bd-89cf-30b062cb4e99
00:43:56.880 --> 00:44:02.956
Here I just explained it. So
the next thing is, so all this

NOTE Confidence: 0.8699613

85d5cda5-d095-4962-84f5-9b7c3f0d9d83
00:44:02.956 --> 00:44:07.296
stuff is just before designing a
processor because we need to

NOTE Confidence: 0.8699613

796c68c1-8494-469a-8060-829d1f98b8c2
00:44:07.296 --> 00:44:12.504
know what is the
program and what's the language

NOTE Confidence: 0.8699613

e395fba6-d19a-4ad2-8f96-ddf9f39592b3
00:44:12.504 --> 00:44:13.806
of the processor.

NOTE Confidence: 0.8658647

f61e3ca7-5af8-4b34-9ce1-5156d6175d96
00:44:14.860 --> 00:44:19.230
Uh, there's another thing called
process. What is a process? When

NOTE Confidence: 0.8658647

312f942c-ce7f-46c2-b034-a4a1790fc032
00:44:19.230 --> 00:44:25.348
you write a program and it is
already in the file and it is

NOTE Confidence: 0.8658647

9bb8bf8d-eabb-42c2-98f4-d99554a31580
00:44:25.348 --> 00:44:29.718
not ready for running by the
processor, it's called a program.

NOTE Confidence: 0.8890913

3f9f23f7-a200-4e24-8a8a-8429635ce940
00:44:30.380 --> 00:44:32.588
Basically, a program is a
dead body.

NOTE Confidence: 0.83327603

f482f045-1335-4268-8be8-116c76e7ec0b
00:44:34.410 --> 00:44:37.350
And it is stored in some
permanent place, for instance

NOTE Confidence: 0.83327603

60342947-0e6e-4a1d-8e0b-13f8b591a3a1
00:44:37.350 --> 00:44:41.466
in hard disk or in paper, as I
showed you in just a file.

NOTE Confidence: 0.9311955

9f2d26ae-f4af-4975-8344-6f3759e96304
00:44:42.830 --> 00:44:43.710
However.

NOTE Confidence: 0.8940159

55a8f566-ec39-4844-8c01-bc5346f8748a
00:44:45.490 --> 00:44:50.443
If you double click on your
program or if you decide

NOTE Confidence: 0.8940159

6ef4b736-d12e-48c6-ad7f-4cfb290a8be3
00:44:50.443 --> 00:44:55.015
to run your program, as long as
your program resides on memory,

NOTE Confidence: 0.8853624

33df64ae-5de1-41cb-b684-35b770832c01
00:44:56.060 --> 00:44:57.990
it becomes a live body.

NOTE Confidence: 0.9072196

8861901d-c5de-4d15-9b8c-e619c1e77ebe
00:44:58.700 --> 00:45:00.930
And we called this program a

NOTE Confidence: 0.90989625

9928fdb3-2406-4c0f-bc24-1667106e433f
00:45:00.930 --> 00:45:06.258
process. So if the program goes
to memory and is ready to be

NOTE Confidence: 0.90989625

dd3178c6-4475-4a31-b23b-09c672444fc8
00:45:06.258 --> 00:45:07.770
executed, it is called a process.

NOTE Confidence: 0.9041384

5999c0cf-0f08-49cb-8211-70b0f810ad8e
00:45:09.540 --> 00:45:12.236
So that's the difference between
program and process.

NOTE Confidence: 0.80669516

86a4f4eb-95f1-4884-961d-22cbf250d256
00:45:13.250 --> 00:45:18.073
So, and here is the life cycle
of a program. At first program

NOTE Confidence: 0.80669516

4649af04-eb10-498f-817d-2d36bd8ee4cf
00:45:18.073 --> 00:45:19.928
is residing in the permanent

NOTE Confidence: 0.88502485

3c0556a8-7915-4b32-8fe0-c9380ccfeb02
00:45:19.928 --> 00:45:24.940
storage. Either in C language or
in assembly language, or even

NOTE Confidence: 0.88502485

cf101352-1fc2-41f6-88d0-a199ef36a31b
00:45:24.940 --> 00:45:28.990
translated into binary
digits in an executable file as I

NOTE Confidence: 0.88502485

90da0999-fe78-4e1d-b9ff-5db2f82b75e0
00:45:28.990 --> 00:45:33.040
showed you in my computer. So
let's back to my computer.

NOTE Confidence: 0.8742418

685ce1d8-ee5c-4df7-b94c-efded57f3f09
00:45:33.850 --> 00:45:37.530
Here this is the binary
translation, and it's already in

NOTE Confidence: 0.8742418

22cd38b2-93c5-4095-a7b2-522da8d0ebf0
00:45:37.530 --> 00:45:41.578
an executable file. It's not runnable right
now. However, if I double click

NOTE Confidence: 0.8990072

af7424bb-e1e6-4551-8601-b56ba82e39ab
00:45:41.578 --> 00:45:47.692
on that, it goes to memory and we
just finish it. So if you run

NOTE Confidence: 0.8990072

0438682b-bbaf-4045-a62b-a2815316027d
00:45:47.692 --> 00:45:50.008
that, it goes to memory to be

NOTE Confidence: 0.8671962

210e73db-140a-4ff7-a1bb-464a20d92266
00:45:50.940 --> 00:45:54.396
ready to be processed
by the processor, and then

NOTE Confidence: 0.8671962

956cd54a-c73b-4239-a1d8-c85b69cb4982
00:45:54.396 --> 00:45:55.692
it's called a process.

NOTE Confidence: 0.8780951

1b7e5fe1-662d-4e49-aa74-564ae941229e
00:45:56.880 --> 00:46:01.584
So if a program goes to the process
state, it is always in the

NOTE Confidence: 0.8780951

6af71cae-6e3b-4e20-955f-8e23fb5757cf
00:46:01.584 --> 00:46:03.600
language of machine or zero ands

NOTE Confidence: 0.8997959

00549a3e-e0e4-4520-9c1c-d65bfb8839c7
00:46:03.600 --> 00:46:08.340
ones. However, when it is in
the format of a program, it might

NOTE Confidence: 0.8997959

ac82d1fe-39db-4b64-964b-9a7c763fd317
00:46:08.340 --> 00:46:12.500
be in the C language, or it
might be in the binary language.

NOTE Confidence: 0.8999912

718338e9-a530-425f-ae75-fc68465446d5
00:46:14.790 --> 00:46:17.614
Here is the difference between
compilers and interpreters.

NOTE Confidence: 0.89392483

50a3d768-88bc-411e-be19-abb1adb844cc
00:46:18.360 --> 00:46:22.910
There are some languages that
use compilers for the

NOTE Confidence: 0.89392483

65d83281-887c-440e-8c07-4cf5c231466c
00:46:22.910 --> 00:46:24.730
translation, meaning that before

NOTE Confidence: 0.8232257

01ab542e-1071-4b4b-b9bd-da46c46d1bea
00:46:24.730 --> 00:46:28.960
running, it converts your
program into 0s and ones.

NOTE Confidence: 0.8806234

de2b7d44-dfd5-4849-8077-c231ccbd0e49
00:46:30.170 --> 00:46:35.480
So before going to memory, it
does run for you as in the C or

NOTE Confidence: 0.800721

256d8810-f2d5-40b6-be3f-5232578f2aaa
00:46:35.480 --> 00:46:40.460
C++ language. However,
interpreters, for instance, for

NOTE Confidence: 0.800721

2db6ed02-924e-46c1-89bf-4590bd7f493b
00:46:40.460 --> 00:46:43.740
languages such as Python or

NOTE Confidence: 0.8583174

1f5c2ebd-b566-4eac-a740-6ce9310e70dc
00:46:43.740 --> 00:46:48.770
QBasic, the language is not
using compilers. The language

NOTE Confidence: 0.8583174

6d2857d2-0598-4dec-b873-d592a1c008d7
00:46:48.770 --> 00:46:53.070
says that I'm not converting
your program into 0s and ones

NOTE Confidence: 0.8583174

cf0d1349-6c21-4c4c-9573-407ae48f05df
00:46:53.070 --> 00:46:54.790
permanently in a file.

NOTE Confidence: 0.87871146

a6564cc5-c1ae-4350-8058-2bef684a6d85
00:46:55.400 --> 00:47:01.220
Whenever you need to run
your program, I will

NOTE Confidence: 0.87871146

9427fb02-ec27-4d8a-86a4-d658698a9b98
00:47:01.220 --> 00:47:05.585
translate your program on the
fly before

NOTE Confidence: 0.87871146

624447ac-4c0b-4a9a-b49b-a1ed8fc388d9
00:47:05.585 --> 00:47:07.525
transferring to the memory.

NOTE Confidence: 0.8753234

8b995579-8d10-4242-83c8-e4b4d309d6c5
00:47:08.730 --> 00:47:13.284
So at the runtime, they do the
translation between your program

NOTE Confidence: 0.8753234

2aadf45c-007a-485c-99c6-e1cc288aee2f
00:47:13.284 --> 00:47:14.940
and the binary language

NOTE Confidence: 0.88679916

c2bcf4c7-05e4-4be5-848b-8804537773af
00:47:16.050 --> 00:47:19.749
or the machine language. So
which one is faster?

NOTE Confidence: 0.8681268

351f0b00-610e-4f0c-99c7-e9c7c0cdf15c
00:47:21.750 --> 00:47:22.698
Anybody of you?

NOTE Confidence: 0.85102963

bd4e1711-5f32-4391-be7f-9929838e4f67
00:47:32.820 --> 00:47:34.948
Marco says interpreters.

NOTE Confidence: 0.90367657

100dc559-8a1e-4b95-858c-410a8d9fb1bc
00:47:36.250 --> 00:47:37.170
Anybody else?

NOTE Confidence: 0.8649769

9306cdf9-02b1-4125-865c-a7d61bfb05e2
00:47:43.090 --> 00:47:48.255
The thing is, compilers are
faster and the reason is

NOTE Confidence: 0.87272096

bd3f1a3c-045b-4209-8eb3-d60110e05caf
00:47:48.960 --> 00:47:53.556
you just compile your program
one time, and when you do that,

NOTE Confidence: 0.87272096

472a2218-5bbc-45f0-8c2e-3f52575d024e
00:47:53.556 --> 00:47:58.152
it's already in binary format. So
whenever you want to run your

NOTE Confidence: 0.87272096

868cbc74-f8f9-4c9d-8f88-2200832f5b5c
00:47:58.152 --> 00:48:01.982
program, you run by
double clicking your program.

NOTE Confidence: 0.906073

0428197c-ca91-4044-a050-1719352061f3
00:48:03.440 --> 00:48:06.116
So let's go back to my program.

NOTE Confidence: 0.88377094

4dbad2cc-1fb7-468a-9221-8edf0d18947c
00:48:07.390 --> 00:48:10.260
So, let me open the shell first.

NOTE Confidence: 0.88433135

28841de4-88eb-469f-9911-470eee54822f
00:48:17.760 --> 00:48:22.440
So if I run my program here,
it's already in binary language,

NOTE Confidence: 0.88433135

bb0ce7d1-f957-4343-9042-37809ef5a9ba
00:48:22.440 --> 00:48:24.240
so I just run it.

NOTE Confidence: 0.8915721

85af6f85-bc83-4f65-8a0d-7b0807ebbe78
00:48:25.500 --> 00:48:29.207
Because it's already in binary
language, there is no need to

NOTE Confidence: 0.8915721

1c4437b0-a672-4eae-8859-9ab09e3faafe
00:48:29.207 --> 00:48:32.577
invoke the compiler again to do
the translation, it's already

NOTE Confidence: 0.88446414

9effe487-a1d8-4d44-94f9-a5ffe57ccdae
00:48:32.577 --> 00:48:37.620
translated. So when you want
to run the program, you just

NOTE Confidence: 0.88446414

bac1b270-2b6b-45ae-ab6d-d8a0a5db3827
00:48:37.620 --> 00:48:40.483
simply call the binary
translation format

NOTE Confidence: 0.88446414

2b69a7e4-8560-403c-9f41-56c1dcdffc52
00:48:40.483 --> 00:48:41.710
of your program.

NOTE Confidence: 0.8997121

dff6e20a-3850-4d91-a948-dadaf9afb059
00:48:42.920 --> 00:48:49.090
However, in Python language
or in any language that uses

NOTE Confidence: 0.8997121

94764584-5eeb-4237-9008-52e24ac90638
00:48:49.090 --> 00:48:50.324
the interpreters,

NOTE Confidence: 0.8747388

2169be5f-1bdd-413a-91a3-db182b35352a
00:48:52.260 --> 00:48:57.624
it's slower and the reason is
they do the translation when you

NOTE Confidence: 0.8747388

fe156118-f782-49d0-8c3e-adf6385dafdc
00:48:57.624 --> 00:49:02.988
run your program. So it is the
translation that is the one task

NOTE Confidence: 0.8747388

ad50d6bf-4c78-4c6f-8d64-ee526023d530
00:49:02.988 --> 00:49:05.670
before the execution of your I

NOTE Confidence: 0.8691125

52b21288-11bf-42b9-b132-0b24d697e846
00:49:05.670 --> 00:49:11.500
mean instructions. So the running
of these type of programs are

NOTE Confidence: 0.8691125

639983b5-be2f-4d14-911c-e7e0f65042a1
00:49:11.500 --> 00:49:16.684
a little bit slower because at
the runtime, they

NOTE Confidence: 0.8691125

c608ea49-8f10-4382-8ef2-7ad799764571
00:49:16.684 --> 00:49:21.436
have to first do the translation
and then run your instructions.

NOTE Confidence: 0.82978857

2fe6715b-c1d8-43a3-92f3-d1a4c4f236fd
00:49:22.040 --> 00:49:26.924
So that's why the interpreters
are a little bit

NOTE Confidence: 0.82978857

3df76c3c-f56e-4556-b007-68dd8e6b7e7c
00:49:26.924 --> 00:49:30.587
slower than the compilers, but
interpreters have some benefits.

NOTE Confidence: 0.88596493

48297de8-e0b6-4cd9-854a-02b7099256b4
00:49:31.400 --> 00:49:36.197
One benefit is that it
provides you some flexibility,

NOTE Confidence: 0.88596493

b86d8567-16a3-4123-94ea-4230546e4384
00:49:36.197 --> 00:49:41.527
and there is a course in
computer science schools that is

NOTE Confidence: 0.88596493

fa55f25e-5e6b-4acb-993c-f222879d60bf
00:49:41.527 --> 00:49:45.791
called Programming Languages.
In that course you will

NOTE Confidence: 0.88596493

f31bc60d-62d2-4b14-8da5-19fdcbffaedb
00:49:45.791 --> 00:49:50.055
understand what's the benefit
of using interpreters or

NOTE Confidence: 0.88596493

b2a8d67d-5c20-4fba-9a41-5005c47b3a18
00:49:50.055 --> 00:49:53.786
what's the benefit of using
the compilers.

NOTE Confidence: 0.8606635

65ad80f1-7889-410e-8c5a-c5d8fa6e76b8
00:49:55.250 --> 00:49:59.358
This is a specific course for that,
but here I just wanted to

NOTE Confidence: 0.8463265

624e1349-c2bb-4f20-8819-b52e67eabd41
00:49:59.358 --> 00:50:01.750
I mean give you a brief
explanation.

NOTE Confidence: 0.8607454

eda91efd-6c16-4d51-aba2-86fd3f39847e
00:50:03.490 --> 00:50:08.286
Regardless of the type of the
translators, the only

NOTE Confidence: 0.8607454

532c0a00-0841-47ee-a261-951832d14634
00:50:08.286 --> 00:50:13.082
thing important for us is that
the program must be translated

NOTE Confidence: 0.8607454

dd2b5146-998d-4ead-8337-16a4aa9bbbb0
00:50:13.082 --> 00:50:17.442
to 0s and ones, and the processor only
understands 0s and ones.

NOTE Confidence: 0.92608196

0c9d7600-3e5a-41b6-bfa0-53610c372d39
00:50:19.560 --> 00:50:20.250
So.

NOTE Confidence: 0.8680129

e97cad56-8499-42ef-aa9e-3b557003d4b3
00:50:21.650 --> 00:50:26.170
How do the translators actually
do the translation? The most

NOTE Confidence: 0.8680129

91d0a2bb-2118-4e24-b232-6f5040b100ed
00:50:26.170 --> 00:50:28.430
simplest version is gonna be look

NOTE Confidence: 0.7855783

56ee181e-644a-4fc5-950d-d35e776432f5
00:50:28.430 --> 00:50:33.588
up table. Whenever, for
instance, your compiler

NOTE Confidence: 0.7855783

9aeeeb01-da1b-4c35-ad9c-d26fd4dc12d1
00:50:33.588 --> 00:50:39.068
sees an addition, it just maps to
a binary stream.

NOTE Confidence: 0.889291

f4f1e90d-a934-4e99-a882-b37419ce1d28
00:50:40.010 --> 00:50:45.694
For instance, if it says that A+B
equal to C, it says that the

NOTE Confidence: 0.889291

5aec696d-4c60-4cb3-8ed2-f37c4603e3f8
00:50:45.694 --> 00:50:47.724
code for addition is 000.

NOTE Confidence: 0.85828876

1a4407db-e816-439b-833a-a2857237942b
00:50:48.350 --> 00:50:54.174
The first 4 digits is for A. The
1st four. Sorry, the

NOTE Confidence: 0.85828876

ec2e5e07-6176-47d9-9065-a78419fbaf7e
00:50:54.174 --> 00:50:56.414
memory address for the A.

NOTE Confidence: 0.8930304

01fa89df-9c41-4be1-ac7d-e0e6d7b7f764
00:50:57.080 --> 00:51:00.900
The second 4 digits is the memory
address for B.

NOTE Confidence: 0.82095015

24e36081-fd1a-49aa-ad04-63bbd065a1a4
00:51:01.590 --> 00:51:05.230
And for the third memory address.
These are the binary variables.

NOTE Confidence: 0.82095015

46c048a2-774b-4a5a-9626-d82dc6ebf387
00:51:05.230 --> 00:51:09.598
These are the memory adresses, 0s and 1s.
This the memory address for C.

NOTE Confidence: 0.8618028

65b5762e-1bdd-430a-a7c6-85958afc7e71
00:51:10.480 --> 00:51:16.002
For the subtraction, different
code. For division and etc. So for

NOTE Confidence: 0.8618028

29a18b58-61aa-4a83-8f7a-4bf690072ad2
00:51:16.002 --> 00:51:20.018
any action or for any instruction,
we have different binary codes.

NOTE Confidence: 0.89274585

da3ac058-a1da-4162-8343-54dd69e9a72a
00:51:21.770 --> 00:51:25.514
This is a very simplified
version, so all the compilers

NOTE Confidence: 0.89274585

cb09c619-51d3-4c20-9c92-bd40f3128b13
00:51:25.514 --> 00:51:29.674
or interpreters can use this
look up table, which is

NOTE Confidence: 0.89274585

eeba2ca6-bb59-4bc5-94d4-9e88cfef4a22
00:51:29.674 --> 00:51:33.834
provided by the manufacture
of the processor in order to

NOTE Confidence: 0.89274585

f75c03d8-5a16-47d7-a313-e3fc347abfb6
00:51:33.834 --> 00:51:37.578
do this translation from your
instruction to the binary

NOTE Confidence: 0.89274585

9c5da139-55ca-45fe-8e79-edbc03907e21
00:51:37.578 --> 00:51:37.994
digits.

NOTE Confidence: 0.9001521

d5b5eb4b-6abf-49bc-95db-ccba71b21b35
00:51:39.690 --> 00:51:45.267
And now that we know that the
translation happens for your

NOTE Confidence: 0.9001521

3f84970d-c539-44d1-ad74-fc5ec2c01626
00:51:45.267 --> 00:51:50.337
program in binary, now we can
start designing the processor.

NOTE Confidence: 0.8791457

47b90dff-4e29-46d5-aec3-d0b51a0c38a7
00:51:51.350 --> 00:51:52.790
Again, this is important.

NOTE Confidence: 0.9096177

545d2d96-b36b-458b-adf6-10d7c24bc003
00:51:53.570 --> 00:51:56.090
All the processors only
understand machine language,

NOTE Confidence: 0.9096177

39eeedc0-2c39-4267-bd66-a67763dece1b
00:51:56.090 --> 00:51:57.530
which is the 0s and 1s.

NOTE Confidence: 0.84917325

21e68355-6bfd-41d6-8983-814e63116269
00:52:00.380 --> 00:52:05.036
So now we want to design a
processor and in today's lecture, I

NOTE Confidence: 0.84917325

de5cd61d-6598-4a63-a04c-561323ca51d5
00:52:05.036 --> 00:52:08.916
just put an example for
designing a processor

NOTE Confidence: 0.84917325

c1ea7410-d7bc-437f-a597-e89fc51486e9
00:52:08.916 --> 00:52:13.960
that can do addition. So you can
think about that to do more

NOTE Confidence: 0.8926801

8c66a8aa-d7db-4a2f-933c-11d9114b8cb2
00:52:16.600 --> 00:52:17.300
instructions.

NOTE Confidence: 0.8606517

e9574130-3d1d-4601-8fe3-e19d987d0f6e
00:52:18.430 --> 00:52:22.357
So for addition, this is the
code for addition, adding the

NOTE Confidence: 0.8606517

ba405445-1806-42d2-8e55-f7e907b08eb0
00:52:22.357 --> 00:52:25.927
memory location of this with this
memory location and then putting the

NOTE Confidence: 0.8606517

f48734be-c0cd-48e1-8d73-450703c71fb1
00:52:25.927 --> 00:52:29.140
result in this memory location.
This is in binary.

NOTE Confidence: 0.9073887

17563e24-71e2-4321-8c68-b0acbf398d59
00:52:30.340 --> 00:52:34.461
And these are the steps that a
processor must do to do that.

NOTE Confidence: 0.82718307

862cceab-f7d7-41ef-8995-8556cdbb7feb
00:52:35.710 --> 00:52:39.340
So what's the first step:
fetching the first operand of

NOTE Confidence: 0.82718307

2bce2c71-bc31-4329-90ac-1d60dc67ece1
00:52:39.340 --> 00:52:42.970
the addition from memory at
what location? At this location.

NOTE Confidence: 0.8890999

5395e319-e8f0-42fe-841e-1582091c9a80
00:52:45.540 --> 00:52:49.400
Then, we store it somewhere
inside the processor.

NOTE Confidence: 0.8304205

f1790767-f994-40e6-9ac0-1d1fead875a3
00:52:50.140 --> 00:52:51.660
We store it in

NOTE Confidence: 0.85085106

d86c741d-1ef0-451c-ae5d-c0a0c5934a33
00:52:52.570 --> 00:52:54.850
a register called AX.

NOTE Confidence: 0.83554083

02ffe0b9-f879-4081-b9bd-f28c6950a218
00:52:55.720 --> 00:52:59.700
Then, we finish the second operand
from memory at this address,

NOTE Confidence: 0.887498

3edfb9f2-bd8a-456b-a54b-2b2f4607c7b1
00:53:01.260 --> 00:53:05.530
bring it inside the processor
and put it somewhere, somewhere

NOTE Confidence: 0.887498

4ecc2524-9f3e-43f9-a7c4-dcdbae473d8a
00:53:05.530 --> 00:53:09.373
else. For instance BX, another
location or another register,

NOTE Confidence: 0.887498

4e591635-fac9-4813-b388-42819fdd8c7a
00:53:09.373 --> 00:53:14.070
so you see that the processor
has its own memory locations,

NOTE Confidence: 0.887498

ea5fb808-c4fd-4b12-9142-c454729065c8
00:53:14.070 --> 00:53:18.340
but when you mention a memory
location inside the processor,

NOTE Confidence: 0.887498

1e13fd4d-14ac-4a30-ae55-89b578a357cf
00:53:18.340 --> 00:53:20.048
we call them registers.

NOTE Confidence: 0.8283643

43dba894-d660-4254-85ee-0519b9de8cce
00:53:21.770 --> 00:53:26.104
And then you use n-bit
adder. We already designed the

NOTE Confidence: 0.8283643

eb1627db-6945-4ec1-918a-1b200b4c25ae
00:53:26.104 --> 00:53:30.832
n-bit adder, you use the n-bit
adder inside the processor to do

NOTE Confidence: 0.8283643

c0f862ff-e648-4e07-9277-cd7ba02c2558
00:53:30.832 --> 00:53:33.196
the addition of the A&B inside

NOTE Confidence: 0.89416283

5f4759ad-e1d7-4001-9680-ec678c452da1
00:53:33.196 --> 00:53:36.460
the processor. We put the
result somewhere else.

NOTE Confidence: 0.8997442

93cc5a4f-7470-4eb0-9bd4-8ba1e618a36e
00:53:37.560 --> 00:53:42.147
And then push back the results
from inside the processor

NOTE Confidence: 0.8997442

ad860d05-9ece-4910-91b3-5c15421f6efa
00:53:42.147 --> 00:53:44.649
into a memory location at this

NOTE Confidence: 0.86177886

48a32484-6a6a-461c-895f-ed117fff5590
00:53:44.649 --> 00:53:47.845
address. These are the
tasks that the processor

NOTE Confidence: 0.86177886

fc3a9afc-415e-475c-be8a-73ffec40e45c
00:53:47.845 --> 00:53:50.995
must do. So let's design
a processor to do this.

NOTE Confidence: 0.9153381

32bcb90b-6160-4b2a-a23d-555746c23c2e
00:53:54.140 --> 00:53:56.696
So these are the important
parts of the tasks.

NOTE Confidence: 0.8828627

805a3ce9-4b9d-4117-bb6d-79152467db62
00:53:59.040 --> 00:54:03.684
So this is the process that
we're going to, I mean design.

NOTE Confidence: 0.8828627

1379ffa7-8c37-41f0-813c-878f3fc39feb
00:54:03.684 --> 00:54:07.941
So basically it has a small
range of registers, very similar

NOTE Confidence: 0.8828627

b2f0018c-1c86-43be-870e-ea2ebf6d3952
00:54:07.941 --> 00:54:11.424
to memory locations, but a very
small amount of them

NOTE Confidence: 0.83479774

21c59e7e-8120-413f-b6e0-726cf87ae745
00:54:12.300 --> 00:54:16.116
to store the information we
fetch from the memory.

NOTE Confidence: 0.8705455

058577b9-2a0d-4a11-87ca-0e24edfeca16
00:54:16.740 --> 00:54:20.520
And then store the information that
we want to write back to memory.

NOTE Confidence: 0.85045075

b9997f4c-b149-4a86-a9ab-3532839405e1
00:54:21.520 --> 00:54:25.854
It has an internal data bus in
order to communicate within the

NOTE Confidence: 0.85045075

53b3f2d6-2b38-4627-8604-4c2a97190b6c
00:54:25.854 --> 00:54:30.188
registers. Also, it has an internal
control bus, so the bus inside

NOTE Confidence: 0.85045075

1f76f230-53e0-46c4-8a59-974fa2a2d7cb
00:54:30.188 --> 00:54:34.128
the CPU is different from the
buses in communication with

NOTE Confidence: 0.85045075

737af08e-b2b0-47e8-b9f2-22b9878292cb
00:54:34.128 --> 00:54:38.068
memory. These buses are external
and these buses are internal.

NOTE Confidence: 0.90490055

9f3684d0-c7d9-470f-9dcf-05d9fa5488de
00:54:39.380 --> 00:54:42.710
There is a unit that does the
arithmetic and logical

NOTE Confidence: 0.8295226

d74303a2-cbd8-4c8e-b2da-c20c8fd31d7c
00:54:42.710 --> 00:54:48.383
operation. There is a control
unit that

NOTE Confidence: 0.8295226

5d7a32fc-8cee-427e-8614-930e338baf3c
00:54:48.383 --> 00:54:53.253
produces the signals to
control the behavior of the

NOTE Confidence: 0.8295226

98f53ea6-3a40-4ffe-9ff0-7d66830b8f48
00:54:53.253 --> 00:54:56.662
registers and arithmetic inside
the CPU processor.

NOTE Confidence: 0.88744557

cdaa03bd-35b9-41e1-9979-570211946e94
00:54:57.520 --> 00:55:01.560
Also, there is another Clock,
which is internal to the

NOTE Confidence: 0.88744557

1ba2da88-1305-4dca-abb9-4e3b743b9b17
00:55:01.560 --> 00:55:06.004
processor for internal usage. So
this Clock is

NOTE Confidence: 0.88744557

4d83cc67-023b-4c76-9559-7d5b09eb82f8
00:55:06.004 --> 00:55:10.044
different from the Clock
outside the processor to

NOTE Confidence: 0.88744557

bd300768-2ecf-4695-a409-b2b56ee776f1
00:55:10.044 --> 00:55:12.872
communicate with the processor and
with the memory.

NOTE Confidence: 0.86321217

156a0b27-509e-435d-afa9-b821f0cc445e
00:55:14.070 --> 00:55:18.570
So the processor has its
own control system. Buses

NOTE Confidence: 0.86321217

2aaf86f3-ade6-49fc-b8db-6685b0d1c51f
00:55:18.570 --> 00:55:19.470
and clocks.

NOTE Confidence: 0.763683

d3f1ab12-f44d-4860-a48d-13cd188d33d9
00:55:22.300 --> 00:55:28.050
So. Uh, you'll see that the
designing a CPU or designing

NOTE Confidence: 0.763683

c42b7e97-38ca-4441-b37e-70030ad393e7
00:55:28.050 --> 00:55:33.030
a processor is very similar to
designing a city, and these are

NOTE Confidence: 0.763683

9ff2723d-7434-4cb4-92c5-fd7e4b8d07e1
00:55:33.030 --> 00:55:38.010
the streets. Some streets are
one way, some buses are one way,

NOTE Confidence: 0.763683

67abf13b-b5e3-4d26-9d29-19e350854aa4
00:55:38.010 --> 00:55:40.085
some buses are two ways.

NOTE Confidence: 0.8834428

8d2c13f0-7c14-46f9-a575-9f47c1d72a4d
00:55:41.060 --> 00:55:46.299
There are some bridges and there
are some policing. I mean you need

NOTE Confidence: 0.8834428

72691d99-d6b9-4a36-9264-10faffd7e1ea
00:55:46.299 --> 00:55:50.732
a control unit to control the
behavior of the different units

NOTE Confidence: 0.8834428

daf2a396-8ac9-4d45-90c3-749670edca96
00:55:50.732 --> 00:55:52.747
of the processor and etc.

NOTE Confidence: 0.8543225

1c576da5-f059-4403-b5ab-8fef5afc4326
00:55:54.580 --> 00:55:58.135
And all this city is contained in the
size of this.

NOTE Confidence: 0.91297007

9b4f6d7c-9902-4626-9654-39d11c26faba
00:55:59.930 --> 00:56:03.954
Again, you see the human
progress in technology.

NOTE Confidence: 0.77013797

e9524399-9b22-453f-a168-282da2b1810b
00:56:05.360 --> 00:56:11.360
All of this huge city is the
size of this chip.

NOTE Confidence: 0.89375323

c1b3c16c-83bc-422b-9a18-6cc1b67fd9c2
00:56:14.010 --> 00:56:17.574
So the first part of any
processors are registers.

NOTE Confidence: 0.8583103

a21ac6b9-6b63-4784-bbfd-f7f272eb7b24
00:56:18.200 --> 00:56:22.941
What are the registers and
what's the use of the registers?

NOTE Confidence: 0.8583103

3d19dd58-1076-4980-a0ae-8a83fa342b79
00:56:22.941 --> 00:56:27.682
The thing is, in processors, the
registers have a specific

NOTE Confidence: 0.8674225

05ce842a-1145-471f-8ee5-aaf4142b9f4d
00:56:29.350 --> 00:56:34.534
I mean goal or have a specific
design purpose, so they're

NOTE Confidence: 0.8674225

5d861628-ee2b-4f2c-8a01-1e70196722ae
00:56:34.534 --> 00:56:38.854
not just memory registers or
memory locations where you can

NOTE Confidence: 0.8674225

a39caf31-6785-4a2a-bc75-91e511e6571a
00:56:38.854 --> 00:56:42.742
store any type of information
such as your instructions

NOTE Confidence: 0.8674225

d36d9876-e96b-4003-b698-ca001d08f209
00:56:42.742 --> 00:56:47.494
or your value in the variables,
etc. The memory location, they

NOTE Confidence: 0.8674225

fe9f0430-f68c-4c82-84ff-7fa7a77f43a1
00:56:47.494 --> 00:56:53.110
are ready to store any type of
information as long as they are

NOTE Confidence: 0.8674225

97222bd0-7ae6-4b77-b7e9-023775a92be9
00:56:53.110 --> 00:56:57.862
in binary, but the registers
inside the processor, there is a

NOTE Confidence: 0.8674225

0e625353-d2f7-45dc-a0aa-4443cb18d1c5
00:56:57.862 --> 00:56:59.590
purpose for these registers.

NOTE Confidence: 0.8445846

c380c552-2659-4734-9210-98c578577508
00:57:00.100 --> 00:57:03.960
So you cannot store any type
of information in these

NOTE Confidence: 0.8445846

c7f7220a-f569-4629-86a0-8bf608591707
00:57:03.960 --> 00:57:07.434
registers, so we're is gonna
explain what are the these

NOTE Confidence: 0.8445846

dcb9cb91-f66e-491c-a3d7-f2311f6cf559
00:57:07.434 --> 00:57:09.750
registers and what are the
purposes.

NOTE Confidence: 0.8199472

e67617ec-8bf6-43f0-a5e0-1ce590abd329
00:57:11.920 --> 00:57:14.860
The first register is called

NOTE Confidence: 0.8672851

6b34f0bb-57c3-4761-8fd4-407b5d6cdb05
00:57:14.860 --> 00:57:18.930
instruction pointer. Also, it's
called program counter

NOTE Confidence: 0.8672851

c809638e-60b5-4ed7-b38c-7f4f4e315f06
00:57:18.930 --> 00:57:21.180
instruction at this register or

NOTE Confidence: 0.8566277

c00158c2-037f-41d2-930e-b1ebd72cf694
00:57:21.180 --> 00:57:25.648
instruction counter. Basically
it's a register or a stack

NOTE Confidence: 0.8566277

6e4e855c-0980-4644-bfca-07e692f6496d
00:57:25.648 --> 00:57:28.245
of flip flops. A vector of flip

NOTE Confidence: 0.85516584

ba0711cb-4fea-49e4-8238-69adf79dc84a
00:57:28.245 --> 00:57:32.981
flops, either D flip flops or
other type of flip flops, but

NOTE Confidence: 0.85516584

2a204cd9-97ea-444b-a4ac-49c72e4ffd89
00:57:32.981 --> 00:57:37.073
the name actually gives you the
hint about the purpose of this

NOTE Confidence: 0.8765021

674da473-a625-44fa-823b-61c310ba3328
00:57:37.073 --> 00:57:39.360
register. This register

NOTE Confidence: 0.85114384

4609360d-2413-4414-aa9b-744582d0d36d
00:57:40.060 --> 00:57:45.910
should only store the address
of the next instruction that

NOTE Confidence: 0.85114384

88077b9d-ba39-4ed7-b146-89cc5300c9e7
00:57:45.910 --> 00:57:51.175
we are gonna fetch from memory in
the next iteration.

NOTE Confidence: 0.8760765

c6256264-245d-482c-9c60-1081ccd51fab
00:57:53.070 --> 00:57:58.841
So. This is the purpose of this
and pay attention, the address,

NOTE Confidence: 0.8760765

62e356f9-ab6a-49bc-a130-78ea7984a5df
00:57:58.841 --> 00:58:02.851
not the instruction itself. The
address of the instruction and

NOTE Confidence: 0.8760765

5a6aeba0-77c0-4653-9ae8-5d87c0222e3f
00:58:02.851 --> 00:58:06.460
the address of the next instruction,
not the current instruction.

NOTE Confidence: 0.86713535

e0d60120-085a-4657-8bcf-aa03f996270d
00:58:07.920 --> 00:58:12.186
The current instruction is
already inside the processor and

NOTE Confidence: 0.86713535

7b0dfc61-3f72-4beb-8215-29d417e8a805
00:58:12.186 --> 00:58:16.926
already is executing, but
this pointer only directs to

NOTE Confidence: 0.86713535

35263cb4-6791-4a91-8227-6d9164fde00f
00:58:16.926 --> 00:58:18.348
the next instruction.

NOTE Confidence: 0.9040363

97cb176d-9bea-4e3f-a949-a209990f5399
00:58:20.870 --> 00:58:25.307
So it's sometimes called
counter and a question is

NOTE Confidence: 0.9040363

82866319-659d-44d4-822c-3b261b137915
00:58:25.307 --> 00:58:29.251
why is the instruction pointer
sometimes called counter?

NOTE Confidence: 0.8848446

7269d6df-9213-4894-9658-3d96c0ae3f0c
00:58:30.280 --> 00:58:31.888
Anybody of you can answer this?

NOTE Confidence: 0.81254244

71e6c1b3-a367-4434-b2e5-bbb570807cc2
00:58:34.930 --> 00:58:38.045
Why this register is of
type counter?

NOTE Confidence: 0.846341

c95de40c-b3db-410f-b849-58a0ae30e807
00:58:42.330 --> 00:58:48.246
All the flip flops in this
register act like a counter. We

NOTE Confidence: 0.846341

4cb8b354-8660-4972-97ad-60a4ab466f15
00:58:48.246 --> 00:58:52.683
already designed a counter, so
why is the instruction pointer

NOTE Confidence: 0.846341

5785267c-7ead-4f4b-999e-f9ee6856a98a
00:58:52.683 --> 00:58:54.162
inside the processor

NOTE Confidence: 0.80896896

0377489b-cc9d-4ce4-bd57-bf1461888caf
00:58:55.090 --> 00:58:56.438
is of type counter?

NOTE Confidence: 0.880189

68667c68-a84f-4071-9793-e967c84f325c
00:58:57.060 --> 00:58:57.909
Anybody have you?

NOTE Confidence: 0.8673596

2bc86fd3-9f6e-409f-8683-076e73b65d65
00:59:01.200 --> 00:59:05.930
Correct Marco, yes, because this
is a register that stores

NOTE Confidence: 0.8673596

8235867f-136e-4ff2-b924-c9f412903882
00:59:05.930 --> 00:59:08.080
the address of the instructions.

NOTE Confidence: 0.87371176

cc391dc3-1db4-42c7-b6e6-20757ed84de5
00:59:08.840 --> 00:59:14.462
And, in order to be fetched from
memory, imagine these are the

NOTE Confidence: 0.87371176

6403aade-566d-4db9-86e4-40a2475f0971
00:59:14.462 --> 00:59:17.666
high level instruction that is
translated to binary numbers,

NOTE Confidence: 0.87371176

22366a12-8b51-4c08-8c4d-ac089dd52631
00:59:17.666 --> 00:59:21.226
and these are the addresses of the
instructions in memory.

NOTE Confidence: 0.8865787

2ff2ce5e-5c66-4008-b48f-98ab3a08774a
00:59:22.640 --> 00:59:24.626
We said that this on the

NOTE Confidence: 0.8683253

2606c76d-5c6f-4715-a8f1-54e343bb7f77
00:59:25.380 --> 00:59:29.284
Von Neumann architecture, the
instructions are to be executed

NOTE Confidence: 0.8683253

609207a6-d63c-4731-9f23-22c19650a7fb
00:59:29.284 --> 00:59:34.652
sequentially. So the next is gonna
be the next address and then

NOTE Confidence: 0.8683253

bb3579e7-6579-4425-b16c-645224de6833
00:59:34.652 --> 00:59:41.484
next and etc. So the address as
you can see, is incremented by 1

NOTE Confidence: 0.8683253

752f653c-ec0a-4d75-99c4-ecc9b059977c
00:59:41.484 --> 00:59:43.436
unit at each time.

NOTE Confidence: 0.8878047

0476b177-392e-4f53-9498-979d965a300a
00:59:44.460 --> 00:59:49.036
So that's why the instruction
pointer register is of

NOTE Confidence: 0.8878047

2d416f57-97c1-42d8-b8ff-eedb5f7ae0dd
00:59:49.036 --> 00:59:54.444
type or is designed as a counter
because the next is gonna be just

NOTE Confidence: 0.8878047

0e5fb0e6-976f-475f-947e-c195c4f36583
00:59:54.444 --> 00:59:56.940
adding one unit to that address.

NOTE Confidence: 0.9306165

6e68c775-76b6-4755-a9cd-e331219afba9
00:59:57.690 --> 00:59:59.690
That's why we call that

NOTE Confidence: 0.6943817

cf5fa6c5-0b22-41c0-a5be-836f06ed3ef6
00:59:59.690 --> 01:00:03.380
instruction a counter or
program counter.

NOTE Confidence: 0.82850116

587d283a-f9fb-4148-850e-f01c269bafb5
01:00:07.550 --> 01:00:13.439
The next thing is you could ask, so
one thing is that we already

NOTE Confidence: 0.82850116

fecd85e5-bc5d-485a-bbe4-5cbfc7bf0f75
01:00:13.439 --> 01:00:18.422
designed the three bit counter
which we could count from

NOTE Confidence: 0.82850116

3fc7dc85-d3d3-4be3-ac02-b70deff8b8d2
01:00:18.422 --> 01:00:24.311
zero to three, meaning that with a
three bit counter we can have a

NOTE Confidence: 0.82850116

0bdd8a44-0286-4410-a507-ea0c7de3e423
01:00:24.311 --> 01:00:26.123
program with (SHOULD BE 4 INSTRUCTIONS!)

NOTE Confidence: 0.838811

abb507df-6261-4250-917e-dfd149c7dcc6
01:00:26.990 --> 01:00:28.698
with four instructions, sorry.

NOTE Confidence: 0.8738943

aef1b23d-4919-4bbb-821a-1bc8defc2a7e
01:00:30.280 --> 01:00:34.530
If I say that the
instruction pointer of my

NOTE Confidence: 0.8738943

55ab54c7-d23e-4ee5-82ad-350506691cfc
01:00:34.530 --> 01:00:37.930
processor is N units,
what is N

NOTE Confidence: 0.87041503

f7a1da5b-5d67-446b-be85-44375274b446
01:00:39.540 --> 01:00:44.083
if I already knew the
number of wires for the

NOTE Confidence: 0.87041503

017f864b-8c8f-4525-966f-6732e353a31c
01:00:44.083 --> 01:00:44.909
address bus?

NOTE Confidence: 0.9083853

416e922b-c74d-45ce-b03f-b3e0cddca2a9
01:00:46.170 --> 01:00:47.328
The answer is that

NOTE Confidence: 0.865273

fe57b6fb-64dc-4b43-827f-aca72d5cca93
01:00:48.120 --> 01:00:52.100
the instruction pointer is gonna
have to store the memory address

NOTE Confidence: 0.865273

45668646-1366-49f6-b24f-698dcb62c244
01:00:52.100 --> 01:00:56.478
because this is the address of
the instruction and the memory

NOTE Confidence: 0.865273

19b3057d-1a0c-4f6a-a34f-595e3971743b
01:00:56.478 --> 01:01:00.060
address depends on the size of
the address bus.

NOTE Confidence: 0.8430481

716903c7-28c8-4eab-9c66-f2fe34d5c398
01:01:00.700 --> 01:01:04.715
So the address bus is gonna have
the memory address, always the

NOTE Confidence: 0.8430481

90d6df0e-beb3-4d14-8035-157f3dc12c9b
01:01:04.715 --> 01:01:08.365
memory address of the
instructions, so the IP or the

NOTE Confidence: 0.8430481

a344d257-2050-451a-a880-92ef3c1d91f5
01:01:08.365 --> 01:01:12.015
instruction pointer register
is gonna be the same size of the

NOTE Confidence: 0.8430481

75b89db4-7ea6-4be6-bb85-dc7f1e5ef841
01:01:12.015 --> 01:01:17.490
address bus. So if the address
bus is 4 bit, the IP is gonna be

NOTE Confidence: 0.87756467

3754e9a4-4577-41fe-b71c-622046820564
01:01:17.490 --> 01:01:22.960
4. We already said that
current computer systems has 64

NOTE Confidence: 0.87756467

81e3fd57-4116-4c1c-98b0-e6ad592902d4
01:01:22.960 --> 01:01:26.576
address buses, so the
instruction pointer for the

NOTE Confidence: 0.87756467

bee335b1-ae04-45af-a202-ff5ce0c7db76
01:01:26.576 --> 01:01:27.932
processor is 64

NOTE Confidence: 0.33749133

d1fc930e-47d1-47fe-a974-a042612dcc0a
bits.

NOTE Confidence: 0.86953413

319560d4-2639-4383-b9ac-907a67e43269
01:01:32.490 --> 01:01:37.180
So you could ask where is the
current instruction? The

NOTE Confidence: 0.86953413

6d3e0ade-ce06-4635-a139-abc8783d391d
01:01:37.180 --> 01:01:40.463
current instruction is in
another register called

NOTE Confidence: 0.86953413

cfb7038a-2c51-4a3a-a61d-7329f83c114a
01:01:40.463 --> 01:01:45.153
instruction register: IR or IX.
Usually when you say register,

NOTE Confidence: 0.86953413

2efcd428-6644-4271-b669-941b8479dd9a
01:01:45.153 --> 01:01:51.250
you could just use an acronym
called X. So IX or instruction

NOTE Confidence: 0.84455895

91a3b46f-4517-4405-a4a5-922ab8baab32
01:01:51.250 --> 01:01:57.101
register. The current instruction,
which is already fetched by the

NOTE Confidence: 0.84455895

bf13fdc6-83a3-45ca-8c05-94d6b8472669
01:01:57.101 --> 01:01:59.057
processor, is inside this

NOTE Confidence: 0.8485104

a5e4979d-7e86-47eb-9671-8def7ffa7e35
01:02:00.020 --> 01:02:01.709
register, the instruction register.

NOTE Confidence: 0.89110297

90640782-e2f7-4fe3-884d-51edb397f265
01:02:02.840 --> 01:02:05.720
So let's have an example.

NOTE Confidence: 0.8413554

554de3fd-e011-49f3-8eee-617b2bf77875
01:02:07.020 --> 01:02:11.710
Imagine currently we are running
or we are executing this

NOTE Confidence: 0.83591086

d9c2613e-ac2a-4892-a540-407f1f5c1e18
01:02:13.190 --> 01:02:14.610
instruction by the processor.

NOTE Confidence: 0.9249686

e8cc97ba-af98-463b-b265-8e40746c6c90
01:02:15.240 --> 01:02:20.802
So this instruction is already
in the instruction register,

NOTE Confidence: 0.8998743

81fcacb7-50ff-4acb-9fb6-0e4e726ae17c
01:02:22.470 --> 01:02:24.890
and the instruction pointer

NOTE Confidence: 0.8705662

3eeb4629-f520-439f-8cbf-b03ba3df44d9
01:02:25.710 --> 01:02:29.270
Points to the next instruction.
This is the next instruction.

NOTE Confidence: 0.93449086

9ffeeb21-03f6-496e-ae69-e33fa8696f48
01:02:32.130 --> 01:02:32.750
OK.

NOTE Confidence: 0.87576383

f62e227d-beaf-40af-aaf8-153f8f479228
01:02:35.030 --> 01:02:41.110
So now if we finished
this instruction,

NOTE Confidence: 0.89737844

89041c5e-b7f4-4025-bc19-a9d9f78e1bfe
01:02:41.770 --> 01:02:47.545
I mean, we will see how we can
do that as soon as we finish

NOTE Confidence: 0.89737844

ee13c47a-d118-40fc-a68a-22bd99ac05d7
01:02:47.545 --> 01:02:51.395
this instruction, we have to
fetch the next instruction. So

NOTE Confidence: 0.89737844

a3d67429-f1f5-4ac9-8849-2ad64b7126da
01:02:51.395 --> 01:02:52.935
what are the steps?

NOTE Confidence: 0.8282267

df7039f6-2f2a-46f8-802a-70d145691cd9
01:02:53.490 --> 01:02:58.242
The first step is the next, the
address of the next instruction

NOTE Confidence: 0.8282267

e4b67cb1-3151-4667-a229-2790e38e1bbc
01:02:58.242 --> 01:03:04.722
is in the IP register, so
we have to load the address bus

NOTE Confidence: 0.8282267

9baa8df7-578d-48e2-9eea-e2f2022a5b58
01:03:04.722 --> 01:03:06.882
with the value of the IP

NOTE Confidence: 0.8680974

a8440b56-d9a6-425c-9991-989bc4947e7d
01:03:07.900 --> 01:03:10.100
register, the instruction
pointer register.

NOTE Confidence: 0.8645124

edfb42a9-71bb-40f9-9c59-c011c68b8515
01:03:12.900 --> 01:03:14.790
So it goes to the address bus.

NOTE Confidence: 0.9017324

eb10ebf6-a4fb-4e59-a212-3849fdc7b300
01:03:15.360 --> 01:03:19.728
Then you have to tell the memory
that we are going to read the

NOTE Confidence: 0.9017324

ce3e8cf1-f0e7-4c2b-b5ff-11a9f1f45e61
01:03:19.728 --> 01:03:23.784
value in this address. So, we
have to put the value zero in

NOTE Confidence: 0.9017324

49c87cf2-8d09-459a-9c95-209c5c3aaf0a
01:03:23.784 --> 01:03:28.152
the control bus. We already said
that in order to read, we have to

NOTE Confidence: 0.9017324

46f8bb4a-80ad-4ba8-afe7-3105dda3f5c5
01:03:28.152 --> 01:03:30.024
set the control bus to 0

NOTE Confidence: 0.91066426

62d272cc-10d8-471a-9ed6-d0c2933f65ed
01:03:31.550 --> 01:03:32.690
to read from memory.

NOTE Confidence: 0.9038891

26a83c15-87e9-4b9d-908b-0e283c814805
01:03:33.290 --> 01:03:36.485
And then, the value of that

NOTE Confidence: 0.7454761

a419446c-0ce5-4f17-9781-0e57f21b5dab
01:03:36.485 --> 01:03:41.790
address is gonna load. This
is the value is gonna be loaded to

NOTE Confidence: 0.7454761

e6567502-f9ac-4f14-a5eb-eb016357a8c3
01:03:41.790 --> 01:03:42.960
the data bus.

NOTE Confidence: 0.87465143

aaa84650-aa67-4035-9568-1e110f2cd5d3
01:03:44.940 --> 01:03:49.812
So the value of this address
is going to be read. This is the

NOTE Confidence: 0.87465143

393d1bfc-7542-48c1-962a-15c434b74d2a
01:03:49.812 --> 01:03:51.900
value that goes to the data bus.

NOTE Confidence: 0.8916304

3cc34c7b-0ebd-47ae-b1d6-0e4625f6deb8
01:03:52.950 --> 01:03:57.030
And then finally we have to read
the value of the data bus,

NOTE Confidence: 0.88000697

4085591f-e997-49e8-8ffe-893b03d13de3
01:03:58.100 --> 01:04:02.044
and put it into the
instruction register, so

NOTE Confidence: 0.88000697

44d38b2b-e9d6-4fac-9379-d27bb970ece8
01:04:02.044 --> 01:04:03.030
instruction pointer.

NOTE Confidence: 0.89520794

e1b85ee3-d400-432c-b682-281289a98b55
01:04:04.070 --> 01:04:07.702
Here, the actual instruction
loaded to the instruction

NOTE Confidence: 0.89520794

76901b34-dab8-4724-87fe-0bcf19a02906
01:04:07.702 --> 01:04:12.242
register, and this is the
instruction here. And now, the

NOTE Confidence: 0.89520794

3ba9bbb0-28aa-4cf9-89b5-7186908feeaa
01:04:12.242 --> 01:04:15.874
instruction is in the processor
ready to execute.

NOTE Confidence: 0.8670187

db0fdbf6-2318-4e99-afcd-78bf62fa27e9
01:04:16.450 --> 01:04:22.555
The final task is to increment the
instruction pointer to point to

NOTE Confidence: 0.8670187

fa694ec8-c144-48f1-a5a3-158911ae1a2a
01:04:22.555 --> 01:04:24.220
the next instruction.

NOTE Confidence: 0.76732194

6e8089e7-37ea-4d83-9d0e-87a1b2d05a48
01:04:26.380 --> 01:04:30.529
This is called a fetch
instruction, so any instruction

NOTE Confidence: 0.76732194

3fd8d130-3878-4e75-a975-dd98d3f78413
01:04:30.529 --> 01:04:34.678
must be fetched from memory by
these four steps.

NOTE Confidence: 0.7809069

68bc69a6-3f30-48bc-86fd-836df2127d33
01:04:35.510 --> 01:04:40.020
Load the address from IP. Load
the control box for reading.

NOTE Confidence: 0.7809069

6f76e9cc-fc10-4354-a63c-cf8216af24c1
01:04:40.020 --> 01:04:44.530
Read the instruction in the data
bus and load it to the

NOTE Confidence: 0.7809069

3ad971f3-247d-4373-88ca-2de4b51d5822
01:04:44.530 --> 01:04:46.990
instruction register. And
increment the IP.

NOTE Confidence: 0.9015642

5933c32b-5640-4c50-920a-6aea6ed323e3
01:04:49.070 --> 01:04:52.854
So my question is that what
is the size of the instruction

NOTE Confidence: 0.9015642

60811677-faee-4c33-9498-77ff9b782b02
01:04:52.854 --> 01:04:53.198
register?

NOTE Confidence: 0.8880894

ec06e350-d9aa-40a4-b5b8-7b2a1e89bc76
01:04:54.210 --> 01:04:58.354
This register actually
is gonna have the value of

NOTE Confidence: 0.8880894

c0f2b9e6-977b-4884-8220-9d1d6ab4d676
01:04:58.354 --> 01:05:01.462
instructions or the binary
representation or

NOTE Confidence: 0.8880894

7353821f-915d-4d03-9f8c-dd6cdacf3ce7
01:05:01.462 --> 01:05:05.088
translation of the
instruction. What is the

NOTE Confidence: 0.8880894

b74f8a15-d979-4273-aa28-85234184affb
01:05:05.088 --> 01:05:07.160
size of this register?

NOTE Confidence: 0.85551584

a537ea99-4592-4e27-aab7-780da2390518
01:05:08.480 --> 01:05:09.389
Anybody of you?

NOTE Confidence: 0.90859514

ee3d088b-681a-4a5c-92c6-feaa985352de
01:05:12.830 --> 01:05:14.895
So in our example, we said that

NOTE Confidence: 0.918049

b79ebdf2-b20d-4457-af6c-c7b6bb0194f9
01:05:14.895 --> 01:05:17.500
for instance, this instruction

NOTE Confidence: 0.8301991

812e11f3-91f9-45ea-a91b-e7f70504bbbe
01:05:18.520 --> 01:05:21.922
goes to the instruction
register. So what's the size?

NOTE Confidence: 0.75550777

935815f7-7076-4018-ab89-af43f405885c
01:05:22.980 --> 01:05:25.779
The size depends on what
bus, the data bus,

NOTE Confidence: 0.75550777

1dd8599f-baa1-4aab-85b4-4782d38668cd
01:05:25.779 --> 01:05:27.334
address bus or control bus.

NOTE Confidence: 0.91781425

b9572c73-a6ae-4afc-ab8f-dd8f6b3e470b
01:05:35.540 --> 01:05:36.240
Anybody?

NOTE Confidence: 0.9141515

243e18f8-ec46-4f98-b28c-3321cb326a76
01:05:39.170 --> 01:05:41.018
So let's go back to our example.

NOTE Confidence: 0.9070178

b757ae57-73e6-4cb5-a38e-dd96d0ff29a8
01:05:42.820 --> 01:05:45.440
You see here that the
value of the memory. This

NOTE Confidence: 0.9070178

e0a536fa-6564-4b9d-a008-e3b6b7c8c57e
01:05:45.440 --> 01:05:48.060
is the address that we're
going to read from.

NOTE Confidence: 0.8660312

c2bb6d97-b2b4-4623-b69c-0123f387d5ca
01:05:49.800 --> 01:05:53.980
Correct, yes, yes Marco, the
value of the memory location

NOTE Confidence: 0.8660312

f9c790b4-56c5-42a9-b0f4-289043c902bd
01:05:53.980 --> 01:05:58.996
is going to be
loaded into data bus. So it

NOTE Confidence: 0.8660312

ae77d963-3b7a-4f76-8691-b90cf5dc6cd5
01:05:58.996 --> 01:06:04.430
depends on the data bus size. So
because the data bus has the

NOTE Confidence: 0.8660312

e49c476e-e4ed-4b3a-9ba9-5c83d484f42b
01:06:04.430 --> 01:06:09.864
actual value of the memory,
it goes and the data is gonna

NOTE Confidence: 0.8660312

4633930c-2caf-444a-a08e-bbeb77cef08b
01:06:09.864 --> 01:06:14.462
be loaded to the instruction
register. So this size of the

NOTE Confidence: 0.8660312

144018f8-c95a-4d9e-a50f-41290fc4fd10
01:06:14.462 --> 01:06:18.224
instruction register is the same
as the data bus.

NOTE Confidence: 0.8320209

90290161-383e-47fe-8b72-b9fc22d05c85
01:06:19.730 --> 01:06:24.449
As I said in the last
lecture, in current computers,

NOTE Confidence: 0.8320209

a4f7ed81-e30a-4938-af86-d79ee70744af
01:06:24.449 --> 01:06:29.597
the size of the data bus is 64, so the size
of the register instruction

NOTE Confidence: 0.8320209

66da6b34-6c6f-41a3-842d-92bfc9d1ac3f
01:06:29.597 --> 01:06:30.884
register is 64.

NOTE Confidence: 0.8294674

1e7186a7-7f63-4cb5-a950-beec966e7a98
01:06:31.970 --> 01:06:36.926
You could say that what did I
put more focus on

NOTE Confidence: 0.8294674

0355fc22-a0ce-4395-a95c-7dcd60eaecc7
01:06:36.926 --> 01:06:40.820
the size? Because the thing is in
today's computers, the data

NOTE Confidence: 0.8294674

e03f8df9-ee20-4b18-99b7-82abc889e431
01:06:40.820 --> 01:06:45.422
bus and address bus are the same, but
they used to be

NOTE Confidence: 0.8294674

49db6701-c769-4251-b5ff-2631c4f97372
01:06:45.422 --> 01:06:49.316
different. For instance, the
data bus used to be 32, but the

NOTE Confidence: 0.8294674

57b45070-e42b-4b1a-a3c6-f48830691b5c
01:06:49.316 --> 01:06:51.794
address bus used to be 20.

NOTE Confidence: 0.8429635

6b43038d-8a98-4d59-a91e-0623f5f2417e
01:06:52.460 --> 01:06:56.409
So in the previous
computer systems, the size of

NOTE Confidence: 0.8429635

b7d08e4e-aad1-4dbd-bb02-35ba1e42ad4b
01:06:56.409 --> 01:06:59.999
the data and address buses
were different. That's why it's

NOTE Confidence: 0.8429635

4973417e-7207-4c66-89df-8bfb0dee150e
01:06:59.999 --> 01:07:04.307
important to know the size of
the data bus, they might be

NOTE Confidence: 0.8429635

9e9d740c-8560-477e-a987-bf380a728477
01:07:04.307 --> 01:07:05.743
different for any system.

NOTE Confidence: 0.86981916

a71314f4-0d9a-4814-9423-825f863731e0
01:07:09.280 --> 01:07:14.511
There are two other
registers called Memory

NOTE Confidence: 0.86981916

bb3e4911-f2a9-41db-b229-1bf20081707e
01:07:14.511 --> 01:07:15.537
Address Register

NOTE Confidence: 0.8227072

82148b60-835b-4044-a7ed-e46cc40020c2
01:07:16.900 --> 01:07:18.768
and Memory Data Register.

NOTE Confidence: 0.9303861

530acc2f-154b-4b4b-ba84-76cf35276f91
01:07:19.650 --> 01:07:20.758
So what are these?

NOTE Confidence: 0.8935898

7251a96e-f34e-4fb4-8c6b-f7d871cc0e7e
01:07:21.950 --> 01:07:26.360
So we allocate two registers,
the instruction pointer and

NOTE Confidence: 0.8935898

716bc541-a2f5-4c91-890e-a74eb066e0f2
01:07:26.360 --> 01:07:30.280
instruction register just to
load the instructions from

NOTE Confidence: 0.8935898

43d33c93-9e9d-4282-a75c-c6dcc73c357f
01:07:30.280 --> 01:07:32.240
memory to the processor.

NOTE Confidence: 0.87223643

f5d359c2-a4ff-4357-b014-e17982c9bfc0
01:07:32.840 --> 01:07:36.863
How about other memory
locations? If the other memory

NOTE Confidence: 0.87223643

c060c877-48c8-400a-acf5-450aac66f1f4
01:07:36.863 --> 01:07:41.780
locations are not instructions
and they are the actual data, we

NOTE Confidence: 0.87223643

c699309c-95f4-40c7-9b2c-09bc340bb203
01:07:41.780 --> 01:07:47.144
use these two registers to fetch
the value from memory and bring

NOTE Confidence: 0.87223643

496b3df7-5bf3-40de-bcb2-99a650d21097
01:07:47.144 --> 01:07:48.932
them inside the CPU.

NOTE Confidence: 0.88550955

24a0d190-f7b4-4f04-8dd2-ed641e4faaec
01:07:49.570 --> 01:07:52.962
The memory address register
includes the memory location,

NOTE Confidence: 0.88550955

255def2b-5a48-43c4-be7a-7c54e365e821
01:07:52.962 --> 01:07:57.626
the address of the memory
location to read and write data

NOTE Confidence: 0.8928079

718c7aa3-f79a-4467-81c6-778f9ca4820e
01:07:57.626 --> 01:08:03.248
from it. And the memory data
register is the register that

NOTE Confidence: 0.8928079

667ad622-5715-4b56-9333-d9a7af8368e3
01:08:03.248 --> 01:08:07.568
has the actual value of that
memory location inside the

NOTE Confidence: 0.8928079

5a908a64-cae2-4c6b-9068-adcc5e459799
01:08:07.568 --> 01:08:08.000
processor.

NOTE Confidence: 0.8229844

9a734b37-61dd-4cf1-a846-300344dc7ed7
01:08:10.960 --> 01:08:15.998
So basically the memory address
register MAR and the memory data

NOTE Confidence: 0.8229844

f2bfc0ff-1d30-438d-9480-c1d96bda3257
01:08:15.998 --> 01:08:21.494
register MDR is working
hand to hand

NOTE Confidence: 0.8229844

d53d05f0-a3b6-42b9-8d54-7b37a29f406c
01:08:21.494 --> 01:08:27.906
very similar to the IP and IX, but
IP and IX are only for fetching

NOTE Confidence: 0.8229844

e97bc809-1237-4098-8d68-c5ac242890f5
01:08:27.906 --> 01:08:31.112
instructions. MAR and MDR are for

NOTE Confidence: 0.8896145

105e81ee-fd23-404f-b777-92c82bc568f6
01:08:31.112 --> 01:08:36.928
loading any type
of data from memory which

NOTE Confidence: 0.8896145

81f51330-4572-4eb5-a7f2-31487176488c
01:08:36.928 --> 01:08:38.524
are not instructions.

NOTE Confidence: 0.816322

23bf756c-fec7-48ae-9abf-7442bfaa5e28
01:08:39.600 --> 01:08:43.200
Again, the sizes. The MAR,
because it's an address,

NOTE Confidence: 0.816322

b6cdda2f-3cf0-4b4b-b270-c4da9502c604
01:08:43.200 --> 01:08:47.160
depends on the address bus.
MDR depends on the

NOTE Confidence: 0.816322

b83344a3-56d8-49b8-b399-84dc68459768
01:08:47.160 --> 01:08:51.840
data bus, so the size of the
MDR depends on the data bus.

NOTE Confidence: 0.88742936

da949fa3-7216-4386-8178-536d239322c8
01:08:54.840 --> 01:08:59.320
So let's have an example
for executing an

NOTE Confidence: 0.88742936

0f3c6d95-423c-4e8c-b3ee-9e8e73a0462f
01:08:59.320 --> 01:09:01.000
instruction.

NOTE Confidence: 0.89879173

e23a1f81-ee6e-4aae-9683-32628b5ef8e8
01:09:03.130 --> 01:09:04.300
For this instruction.

NOTE Confidence: 0.9135634

7664ffdd-68da-4f80-a764-2af33ef3a5c9
01:09:06.940 --> 01:09:07.710
So.

NOTE Confidence: 0.8513319

24e1a0b9-ae74-4d52-8313-5d5d58be0e33
01:09:09.780 --> 01:09:15.492
We saw how we can fetch the
instructions inside the processor

NOTE Confidence: 0.8513319

6e2a0d9f-b535-4a9d-9213-0ac5220eee66
01:09:15.492 --> 01:09:20.252
to execute. So for instance,
imagine we already fetched the

NOTE Confidence: 0.8513319

bb2995a4-1b96-43b0-b947-a80f40d5d5b0
01:09:20.252 --> 01:09:22.156
instruction at this address.

NOTE Confidence: 0.89286894

996620e8-e37c-4df0-a596-d036383504f7
01:09:22.830 --> 01:09:25.809
So you see that the current
instruction is this.

NOTE Confidence: 0.8421068

c58794dc-0cd4-45d1-9cd8-31b6785275d4
01:09:27.140 --> 01:09:32.236
The IP is the next instruction,
so this is the current IP that

NOTE Confidence: 0.8421068

dc381c82-0ec9-4eb8-b073-a6b857dabef5
01:09:32.236 --> 01:09:34.196
points to the next instruction.

NOTE Confidence: 0.8774443

5065b9ba-ddaa-4a1b-bb9a-3e0a3bdd40bb
01:09:35.780 --> 01:09:39.316
The current instruction, the
actual instruction, is already

NOTE Confidence: 0.8774443

dbc8eb18-ed7a-425e-b292-9b724c9f4667
01:09:39.316 --> 01:09:41.084
loaded to the instruction register.

NOTE Confidence: 0.81716186

0b89e8b6-aac7-4f74-823e-e3b2729f1fe9
01:09:41.890 --> 01:09:46.222
So now we want to execute this
and after executing that, we

NOTE Confidence: 0.81716186

a7ecff6f-7287-453f-8931-fceb5bfa3cf7
01:09:46.222 --> 01:09:50.554
fetch the next instruction. So
let's see how we can do this,

NOTE Confidence: 0.81716186

142354b4-e2ff-482d-9e86-8b39ff3f81c6
01:09:50.554 --> 01:09:51.998
I mean addition.

NOTE Confidence: 0.90268815

c3f308d1-f890-4d11-9090-9584e29ae305
01:09:54.830 --> 01:10:00.392
So for this specific
instruction, the first step is

NOTE Confidence: 0.8677376

7b2f6763-e770-4d4d-ade6-6560bfbdb5c8
01:10:00.530 --> 01:10:03.538
bring inside the processor the
value of A.

NOTE Confidence: 0.9032119

d1cb28c1-1536-48a8-b9d8-171d35cdf046
01:10:04.330 --> 01:10:09.940
But A has an address. This
address is already hidden inside

NOTE Confidence: 0.94123614

93bc6312-6eaf-405a-9d54-3f6c2f91302b
01:10:09.940 --> 01:10:12.341
the translation of the

NOTE Confidence: 0.7952443

52c71b3c-72b8-42b2-8d7c-90fbe5553807
01:10:12.341 --> 01:10:16.611
instruction. The translation of
the instruction is usually called

NOTE Confidence: 0.7952443

dd2ac5d9-01d8-44b8-902d-29b2849d9c5d
01:10:16.611 --> 01:10:18.263
an op code or operation code.

NOTE Confidence: 0.86905456

225f2f96-c28a-4d66-aeaf-ebd8b342ff67
01:10:19.080 --> 01:10:23.128
So the address for the first
operand is already in the

NOTE Confidence: 0.86905456

b1c90b81-6813-43e6-9707-2aa6eadbbcdb
01:10:23.128 --> 01:10:26.072
translation of the
instruction or the output of

NOTE Confidence: 0.86905456

bf5d218b-8f98-4426-a6cb-41fbe5489c4d
01:10:26.072 --> 01:10:26.808
the instruction.

NOTE Confidence: 0.8928931

200a5d1c-9b88-49dc-936c-59f60ea85cf7
01:10:28.450 --> 01:10:33.526
So we said that in order to
load that information from

NOTE Confidence: 0.8928931

a5e65f8b-66a6-48ad-b546-2dba0751222d
01:10:33.526 --> 01:10:37.756
memory, the address can go to
the memory address register.

NOTE Confidence: 0.89877766

0b2ea155-983c-4bc4-8df3-0f43e8db4d48
01:10:39.960 --> 01:10:41.890
So the address goes here.

NOTE Confidence: 0.8481064

c47928cb-b5af-4d6f-ab62-f31d7a6a31ba
01:10:43.320 --> 01:10:47.658
And then this address goes to
the address bus.

NOTE Confidence: 0.8620443

a4b0ae8a-b7f7-4d5c-9c83-fcdadef8f5d4
01:10:50.020 --> 01:10:53.560
And then we load the control bus
with zero, meaning that we are reading.

NOTE Confidence: 0.817151

ce39fb91-e821-406b-b238-3470b2cc04f2
01:10:54.140 --> 01:10:59.028
And then we load the memory
location. This is the address A. A

NOTE Confidence: 0.817151

21aaa2a4-0db0-439d-b98f-c6bc3942aa81
01:10:59.028 --> 01:11:03.916
is the address. This one is the
op code of this instruction set.

NOTE Confidence: 0.81742936

2e74a3a4-b85b-4557-af1e-56277cd65d88
01:11:04.720 --> 01:11:09.556
It goes to MAR. MAR goes to the
address bus and this address is here

NOTE Confidence: 0.81742936

16d7143f-5ac5-46f6-b429-09d5e476e25f
01:11:09.556 --> 01:11:13.648
in this memory location. This is the
value. The actual value is gonna be

NOTE Confidence: 0.81742936

ebf38dca-401d-4f33-9447-f0e7ce16d977
01:11:13.648 --> 01:11:18.856
loaded to MDR, and it goes to
the data bus and that data bus

NOTE Confidence: 0.81742936

5ce3c1b1-1d68-43da-ac75-b3c757137676
01:11:18.856 --> 01:11:19.972
goes to MDR.

NOTE Confidence: 0.7661618

1b919759-6100-4f1b-9987-c07099f46217
01:11:21.080 --> 01:11:24.790
So this is fetching the
first operand from memory.

NOTE Confidence: 0.85882753

8f8cbcf2-ff7f-4ec4-ba42-a4f2615d0bbd
01:11:26.220 --> 01:11:30.268
The second operand, the address
is in the output of the

NOTE Confidence: 0.85882753

585cb4e8-adf1-4ead-96a0-a26a6cbb5315
01:11:30.268 --> 01:11:34.316
instruction, so again the
address goes to MAR and then the

NOTE Confidence: 0.85882753

86bae8e0-f905-4447-a676-4354f7e6ef08
01:11:34.316 --> 01:11:38.732
control bus is gonna be read, and
then we fetch the value from

NOTE Confidence: 0.85882753

884e4f67-9013-4f89-8705-92185af3e728
01:11:38.732 --> 01:11:42.412
this address from memory
location and bring it inside the

NOTE Confidence: 0.85882753

0c47ec88-5c8a-4f47-89f5-692a92ee5c6d
01:11:42.412 --> 01:11:44.252
processor into MDR.

NOTE Confidence: 0.85868794

2f2cc71d-f043-4ae2-bffa-a5ca58e01d00
01:11:47.230 --> 01:11:50.334
And now we have A and B
inside the processor.

NOTE Confidence: 0.79035985

303a02f6-c0ae-4e3d-8870-7c18886292b7
01:11:51.490 --> 01:11:55.758
But there is a problem here.
When we bring inside the

NOTE Confidence: 0.81919676

1406b025-3a2b-4cb9-990e-6bfe52ac1c4f
01:11:55.758 --> 01:11:58.770
processor the B, it overwrites the

NOTE Confidence: 0.8333849

ed1db0b9-8a12-41b3-a59c-5a8103842dcd
01:11:58.770 --> 01:12:01.040
value of A.

NOTE Confidence: 0.7582305

ff11e452-866a-4500-b54c-2fac144152d8
01:12:02.300 --> 01:12:08.748
Because we already brought A inside
into MDR, and now we when we bring B

NOTE Confidence: 0.7582305

41a684ae-3e73-4229-9c23-c869d4256adb
01:12:08.748 --> 01:12:12.220
inside the processor, it
overwrites the MDR

NOTE Confidence: 0.8505249

32e040d3-ee72-4cec-8f80-a7a9abe6ac27
01:12:13.010 --> 01:12:14.600
and overwrites the value of A.

NOTE Confidence: 0.87450373

6b61b82a-d855-4be0-8cfa-92eec7b7deff
01:12:15.320 --> 01:12:20.962
So we have to put the value of A
before bringing the inside the

NOTE Confidence: 0.87450373

394f8e67-2a93-4037-99f3-c1cac096238e
01:12:20.962 --> 01:12:24.589
processor into somewhere. For
instance, somewhere else inside

NOTE Confidence: 0.87450373

1af26afc-031a-4266-8012-1e5b72ecb05e
01:12:24.589 --> 01:12:29.022
the processor, and then bring
inside the B to the processor.

NOTE Confidence: 0.87450373

8008afb3-e872-4158-9029-8daeb8f70bce
01:12:29.022 --> 01:12:33.052
Bring the B from the memory
location inside the processor.

NOTE Confidence: 0.9007127

0758f317-632c-4222-9080-134d34e5d519
01:12:34.840 --> 01:12:36.610
And then apply the addition.

NOTE Confidence: 0.84819645

922b5b2c-81aa-4be9-a8b2-308d899315e8
01:12:37.370 --> 01:12:41.209
Applying the addition makes it goes to a
unit that does the arithmetic, a

NOTE Confidence: 0.84819645

b6514bb4-ba14-41d8-95bd-0ddff1f548cb
01:12:41.209 --> 01:12:42.256
logic unit such as ALU that

NOTE Confidence: 0.5950967

50ae1864-5fae-4da5-ad02-0504ac0da3fe
01:12:43.130 --> 01:12:44.450
uses the n-bit adder.

NOTE Confidence: 0.869263

53e8bbde-d8e1-4526-8ca0-0dd89949728f
01:12:45.480 --> 01:12:48.924
So this is the value of A, we
already put it somewhere called

NOTE Confidence: 0.869263

8c9fefb0-b827-4d6f-951d-33586008e504
01:12:48.924 --> 01:12:52.942
AX, and this is the MDR, which
is the value of B and then

NOTE Confidence: 0.869263

3acee05c-a058-421b-ae72-b7358f79aa3a
01:12:52.942 --> 01:12:56.673
using the internal
bus, it goes to the operand one

NOTE Confidence: 0.869263

76d3dfce-c475-4435-afb8-ba9d8ee562f8
01:12:56.673 --> 01:12:59.830
and two of the ALU, and then we
do the addition.

NOTE Confidence: 0.7879219

dcff227f-bf5a-4b69-9339-a1f4cdc6073f
01:13:01.370 --> 01:13:05.440
Who tells the ALU to do the
addition? The control system

NOTE Confidence: 0.7879219

01700155-a331-4cec-b8c3-9108329b0f3d
01:13:05.440 --> 01:13:06.550
inside the processor.

NOTE Confidence: 0.8195354

6de35223-3adb-4524-b07f-1ca9e8aaf0ca
01:13:07.640 --> 01:13:12.502
How? Because of the op code of
the instruction, the op code of

NOTE Confidence: 0.8195354

a14e90b7-0579-4a29-9d36-e1bf9feece02
01:13:12.502 --> 01:13:16.480
the instruction is 001,
meaning addition so

NOTE Confidence: 0.8195354

2eb2a22b-e418-4ce4-8b83-707145179599
01:13:16.480 --> 01:13:21.342
the control bus tells the
this unit to do the addition.

NOTE Confidence: 0.8195354

14fb9a29-04be-40de-b129-666aa39491cb
01:13:21.342 --> 01:13:26.204
If the op code is another code
for the instruction, it does

NOTE Confidence: 0.8195354

9b4ca32c-36da-4a91-9410-ed26a390c96e
01:13:26.204 --> 01:13:27.530
another action here.

NOTE Confidence: 0.9223329

d0cf44f9-8498-4e62-b01d-453e73508b69
01:13:29.320 --> 01:13:30.950
And then the next step is

NOTE Confidence: 0.83191156

4432277c-2fd7-47e0-8178-09ab85b0bb8b
01:13:31.700 --> 01:13:34.571
the result. Where does the
result go, the result of

NOTE Confidence: 0.83191156

00e03513-0146-4087-ae59-cdb7155ba09e
01:13:34.571 --> 01:13:35.209
the addition?

NOTE Confidence: 0.8623825

08e1e9cb-250e-46b3-b787-385c21763c50
01:13:37.360 --> 01:13:40.972
Meaning that when you do the
addition, it goes where? We did

NOTE Confidence: 0.8623825

4160f639-5e32-4dcb-8340-9dc3fa398f5a
01:13:40.972 --> 01:13:44.584
the addition in the processor,
so we have to decide where to

NOTE Confidence: 0.8623825

97e75d00-e006-43ee-9128-5192136ed70c
01:13:44.584 --> 01:13:45.487
store the result.

NOTE Confidence: 0.8947025

f1247ed9-7392-4d96-b0b6-a60e0477b041
01:13:47.030 --> 01:13:52.322
The thing is, because we are
going to write back the result

NOTE Confidence: 0.8947025

b5d86c1a-e012-4378-b0fc-4415eb7230aa
01:13:52.322 --> 01:13:57.614
inside the memory location, we
have to transfer the result from

NOTE Confidence: 0.8947025

a8ab1e00-b6f7-4a61-aa99-f6058bb240b4
01:13:57.614 --> 01:13:59.378
processor back to memory.

NOTE Confidence: 0.9346965

a8d3a356-7588-4afe-bd8a-194b6b076228
01:14:00.030 --> 01:14:04.330
So one thing is that
we can put the result

NOTE Confidence: 0.70948625

b2b87516-b6d2-46b9-87ce-c3641a14bab2
01:14:05.780 --> 01:14:07.240
back to the MDR.

NOTE Confidence: 0.830945

d02a8bde-6d7f-4353-933a-6beab6557365
01:14:07.950 --> 01:14:14.337
So. 1 + 2 becomes three
and three goes back to MDR.

NOTE Confidence: 0.8659646

cf1ae21f-bbd4-4415-8cbd-aff09ed7514b
01:14:15.970 --> 01:14:20.410
And the reason is because
MDR is for a register

NOTE Confidence: 0.8659646

2dbd1ee0-778c-49d2-9cb8-ee6d3200809f
01:14:20.410 --> 01:14:24.850
which has the value that
is going to be transferred

NOTE Confidence: 0.8659646

dea06f3c-9b48-43ce-8366-b09357972c28
01:14:24.850 --> 01:14:27.514
to the memory by the MAR.

NOTE Confidence: 0.87152725

1dbef8fb-44fa-4a99-a9db-a2f6dd6dc973
01:14:28.530 --> 01:14:32.250
So this is a I mean fast way
to transfer new

NOTE Confidence: 0.87152725

015507e9-53c1-427e-80f2-309e2deefcf2
01:14:32.250 --> 01:14:33.490
information to the memory.

NOTE Confidence: 0.87281877

7f5f5ac2-7aaf-4c7c-b6ff-9014656b5ebd
01:14:35.500 --> 01:14:39.304
That's why we put the result
back into the MDR because the value in MDR

NOTE Confidence: 0.87281877

67121d2b-774d-40c8-a1c8-c8a9e7faa9ad
01:14:39.304 --> 01:14:41.523
is is gonna be pushed back into the

NOTE Confidence: 0.8333547

2a6a4672-8fee-4d67-8f4a-41fbcbd7cc4e
01:14:41.523 --> 01:14:47.060
memory. But at what address?
The address of the C is already

NOTE Confidence: 0.8333547

5e2cbadb-5b1c-416f-82a5-bcee3846b06d
01:14:47.060 --> 01:14:48.784
in the instruction.

NOTE Confidence: 0.85600036

bd0b2d02-faed-44df-8719-b6c4f1b90cb0
01:14:50.550 --> 01:14:52.116
Sorry I have to fix this.

NOTE Confidence: 0.82329464

9682c5a8-15df-41d5-b98d-6951aac8ccf5
01:14:52.890 --> 01:14:57.246
The last part of the op code
for the instruction is this

NOTE Confidence: 0.82329464

d9511f5a-8904-4481-a5a6-97a702f8c001
01:14:57.246 --> 01:15:01.602
address for the result. The
address goes to the MAR and

NOTE Confidence: 0.82329464

71075c4e-ec4a-4264-a487-fe58f61093f5
01:15:01.602 --> 01:15:03.978
then it goes to the address bus.

NOTE Confidence: 0.8139374

ceb5c915-24a3-4fe1-8115-9d3a4b738989
01:15:05.550 --> 01:15:09.822
The data bus is gonna be filled
with the MDR, the results. The

NOTE Confidence: 0.8139374

1d901391-d3cc-44e6-90b3-7b8cc171517f
01:15:09.822 --> 01:15:13.026
control bus now becomes one,
which means writing.

NOTE Confidence: 0.7561467

08d5ebd5-9b87-4976-a0f9-a8eb475933ae
01:15:13.630 --> 01:15:19.598
And then the MDR which is in
the data bus, writes down in the

NOTE Confidence: 0.7561467

9688abd7-291a-4085-95e2-8be65f58d240
01:15:19.598 --> 01:15:21.343
memory location at this address.

NOTE Confidence: 0.88140714

af972211-a00c-4886-bc25-223d7dad9e5d
01:15:24.300 --> 01:15:27.740
So you see that for 1
instruction, it is translated

NOTE Confidence: 0.88140714

9a4fa5bd-ae43-4b61-a965-c5ad110f0df4
01:15:27.740 --> 01:15:31.524
into this binary stream, and these
are the steps that the processor

NOTE Confidence: 0.88140714

89902079-aef3-48b0-9d47-5bb424a09420
01:15:31.524 --> 01:15:35.652
must must do in order to
execute just a single addition.

NOTE Confidence: 0.89783615

4fbffa60-3259-4bb7-b0a0-6cee66868257
01:15:39.170 --> 01:15:43.106
And there are other
registers in the processor.

NOTE Confidence: 0.8169969

90492372-3e98-47c7-9a09-ebe738af5b69
01:15:44.530 --> 01:15:49.084
As you said, so whenever you say
somewhere else, one immediate

NOTE Confidence: 0.8169969

b1f8b089-2b63-4385-a49d-a298c94aaa91
01:15:49.084 --> 01:15:52.810
register in any processor is
called an accumulator, meaning that

NOTE Confidence: 0.8169969

4e4a7197-8db1-47ce-9513-b5f050467a1f
01:15:52.810 --> 01:15:56.950
this register is just for I
mean storing temporary results.

NOTE Confidence: 0.87962765

7dd1a863-8fa2-4990-bec6-608498f85a7c
01:15:57.530 --> 01:16:02.620
AX. There are other registers
that are general purpose that you can use

NOTE Confidence: 0.87962765

d963f3b1-10a7-4c40-9ece-a76320e01c84
01:16:02.620 --> 01:16:06.652
for any other purposes. The
processor uses it for other I mean

NOTE Confidence: 0.7643674

2740723e-8a38-4600-bb58-a83c03244443
01:16:06.652 --> 01:16:11.527
calculations. Usually we call
it R1 or R2 up until Ri.

NOTE Confidence: 0.88914424

fcc1fe68-ba95-4a62-8025-96a2f318e432
01:16:12.850 --> 01:16:18.430
And now, I just wanted
to show you that in any

NOTE Confidence: 0.88914424

ba5623e0-7c53-423c-8ef8-c4138f35abf9
01:16:18.430 --> 01:16:22.615
computer system, you can see
the registers, all the other

NOTE Confidence: 0.88914424

05a9cd47-d6ac-4e71-a536-58afd375ce4f
01:16:22.615 --> 01:16:23.545
registers. So.

NOTE Confidence: 0.87503254

2f083ee5-3e90-422a-a7d7-ec209ce7a8af
01:16:25.790 --> 01:16:28.028
If you go to Eclipse.

NOTE Confidence: 0.74855095

083cfa21-6075-47cf-8d13-965c96f2ebad
01:16:28.760 --> 01:16:34.832
And you debug, not only can you
see the assembly language of

NOTE Confidence: 0.8910861

3cb7a9c1-812b-4679-87a3-dece16f7dfd7
01:16:34.832 --> 01:16:40.410
your program. You can go to
the window and in the window,

NOTE Confidence: 0.8910861

aa7f1aa0-469b-4f7b-a6d4-065713de0f2b
01:16:40.410 --> 01:16:44.270
you can enable a register view
and the register view shows

NOTE Confidence: 0.8910861

b4e8bc9e-b0f6-40b8-8ed6-514e8f0a6c93
01:16:44.270 --> 01:16:47.358
you all the available
registers in your system.

NOTE Confidence: 0.8392117

c40a8d61-fb7b-484d-a9a7-15bd3f9ad0aa
01:16:49.150 --> 01:16:53.492
This is the AX, RAX because
is my computer has a current I

NOTE Confidence: 0.8392117

2bcf8b71-bc09-499d-bfff-a6c4b02d87b4
01:16:53.492 --> 01:16:55.830
mean state of the art CPU.

NOTE Confidence: 0.7245695

e8c12606-c1af-494f-82f5-a639f764cf7c
01:16:55.830 --> 01:16:58.550
So, it is called RAX, and this is

NOTE Confidence: 0.8966744

0f9b9d4d-d2ec-4ff2-b3c9-338a85d52480
01:16:58.550 --> 01:17:04.536
the RIP. As you can see
here, it directs to the

NOTE Confidence: 0.8966744

8e0e1e00-d005-465a-b6de-59c9b366a48e
01:17:04.536 --> 01:17:07.006
instruction available in
my program.

NOTE Confidence: 0.8490143

77fb81ec-25bd-49a0-9a9a-6672939ba50b
01:17:08.720 --> 01:17:12.790
These are the general purpose
registers, R8, R9

NOTE Confidence: 0.8490143

e35298f2-9cba-4c6a-8079-813ca3fb5d28
01:17:12.790 --> 01:17:15.639
and etc. There are
other registers.

NOTE Confidence: 0.8502354

3540e8ac-b95a-4d52-9b2b-b2f9afe79453
01:17:18.530 --> 01:17:23.483
There is another register,
you see here the RDX.

NOTE Confidence: 0.8502354

a06af2a5-6b6b-4dd1-b096-96a014aa912e
01:17:23.483 --> 01:17:27.293
This is the register that is used
for storing information from

NOTE Confidence: 0.8502354

6ef018c0-7fed-4b87-91e1-cdb4bb1786e8
01:17:27.293 --> 01:17:29.198
memory. Any type of that.

NOTE Confidence: 0.6501879

905a2935-d558-41c6-92ea-5e34d05c9b3d
01:17:30.640 --> 01:17:31.519
And etc.

NOTE Confidence: 0.8726363

1890ca8a-4882-43ed-a6fb-2179ca826a22
01:17:33.170 --> 01:17:37.442
So even I mean in your computer
you can explore, for instance,

NOTE Confidence: 0.8726363

450fac88-2be5-4b6f-beea-ffae6957c5fd
01:17:37.442 --> 01:17:41.002
what are the registers, what is
the assembly and etc.

NOTE Confidence: 0.7986454

cc53fadf-49f1-4123-bfd8-7a7c3bf6395a
01:17:42.670 --> 01:17:48.946
The next unit is the logic. The
unit that does the calculation,

NOTE Confidence: 0.7986454

ec27e21d-81b9-49d8-bd0b-e3e8f2eaee72
01:17:48.946 --> 01:17:53.130
the actual calculation. This
unit includes all the

NOTE Confidence: 0.7986454

cd96017d-209c-45f3-9c92-1b2eaa4189c0
01:17:53.130 --> 01:17:56.791
combinational logic we designed
already. For instance, adders,

NOTE Confidence: 0.7986454

1b5d134b-79c8-41e1-a66b-4fe0a5175257
01:17:56.791 --> 01:17:58.360
subtractors, multipliers, etc.

NOTE Confidence: 0.8930803

dcecea77-c589-4a18-a712-10ee20c76bb5
01:17:59.070 --> 01:18:01.995
for doing arithmetic or logic

NOTE Confidence: 0.7875884

867b4621-97a6-4ff1-a090-6feee076852e
01:18:01.995 --> 01:18:08.110
operations. That's why we call
this unit ALU. Any processor for

NOTE Confidence: 0.7875884

363a0082-c4f9-433a-93f2-bfb6b574c564
01:18:08.110 --> 01:18:12.187
doing calculations has an ALU. Some
processors, they just do

NOTE Confidence: 0.7875884

9c73ff4c-9778-4d83-b0ce-48aafab1911e
01:18:12.187 --> 01:18:14.905
arithmetic, so they only have AU.

NOTE Confidence: 0.8408451

905b46bf-14ae-4ad3-a1ca-d46fdf8b3e87
01:18:15.880 --> 01:18:20.577
Some processors only have logic
units, so LU. Some processors have

NOTE Confidence: 0.8408451

555fd78e-65c4-433c-9fec-0cbeb2a578d5
01:18:20.577 --> 01:18:26.555
both units. ALU. As I said, it
depends on the task you want to

NOTE Confidence: 0.8408451

21055463-abd8-42b9-bb9a-7a857fd7384d
01:18:26.555 --> 01:18:28.263
use from the processor.

NOTE Confidence: 0.7695626

0aad1f50-f5c2-475e-a38e-2e219353cb05
01:18:30.100 --> 01:18:33.964
Usually this is the
picture of the ALU.

NOTE Confidence: 0.7890298

2be179b4-c80b-401c-a6fc-001eac05c08e
01:18:35.580 --> 01:18:40.590
In order to do the calculation,
some processor has additional

NOTE Confidence: 0.7890298

95f0b10a-306f-4faf-89f3-4cfc1af35f03
01:18:40.590 --> 01:18:44.097
unit for floating point
arithmetic called FPU.

NOTE Confidence: 0.8244509

6bdcec31-291b-485f-a024-8348a45e756a
01:18:45.910 --> 01:18:51.575
And logic units. These are the
operations that any I mean

NOTE Confidence: 0.8244509

e6ad80e4-260c-4591-9a48-bc779656ebf0
01:18:51.575 --> 01:18:56.725
normal logic unit
is gonna do in processors, in

NOTE Confidence: 0.8244509

9d8f0b09-5ef7-43a0-8705-72bb34a2236d
01:18:56.725 --> 01:18:57.755
normal processors.

NOTE Confidence: 0.8271951

652fc354-8237-4a31-9642-6212710b709b
01:19:00.390 --> 01:19:04.977
And this is the final recap of
today's lecture. Any processor

NOTE Confidence: 0.8271951

8eb5c69c-f5bd-455a-8cac-3062a9ff30d0
01:19:04.977 --> 01:19:09.564
must fetch the instruction by
the fetch cycle and

NOTE Confidence: 0.8271951

a8739f5c-5aaf-40e0-82b3-1c735ad241dd
01:19:09.564 --> 01:19:13.734
then start the execution cycle.
The execution cycle depends on

NOTE Confidence: 0.84368855

59dfe57f-aa61-48f6-afd3-65c91cfdc3cb
01:19:13.734 --> 01:19:19.634
the instruction.. If it
is for instance addition, they have

NOTE Confidence: 0.84368855

245c0651-3fb3-47c2-8a22-bdf538065799
01:19:19.634 --> 01:19:24.350
five or six steps. If it is
assignment, there is just

NOTE Confidence: 0.84368855

1c9151d2-8560-45f6-bd07-3f6df17caefa
01:19:24.350 --> 01:19:28.280
for instance, 2 steps and
etc. So it depends on

NOTE Confidence: 0.84368855

276dc929-6682-41a3-9d1e-9a633eb3acef
01:19:28.280 --> 01:19:32.996
the type of instruction, which
is evident in the op code or

NOTE Confidence: 0.84368855

c85c0953-639d-454e-aebd-457ec2e22cab
01:19:32.996 --> 01:19:35.354
the binary translation of the
instruction.

NOTE Confidence: 0.6282916

8acff6e6-b759-4460-803e-a37b90fd1974
01:19:37.800 --> 01:19:39.618
And then, uh.

NOTE Confidence: 0.87003905

de5b895f-cf78-44cd-95ac-46b695102e06
01:19:40.310 --> 01:19:43.950
We are done with building a
processor, although

NOTE Confidence: 0.830526

f64c2cac-3073-4db3-8266-8c8a82a99306
01:19:45.500 --> 01:19:51.077
as I said, in the next semester,
in the Computer Architecture 2, you

NOTE Confidence: 0.830526

6b791f64-e4fb-48fc-9bfc-aaac9e12c3c3
01:19:51.077 --> 01:19:55.367
are gonna in the whole semester,
the whole purpose is designing

NOTE Confidence: 0.830526

13decaae-c30a-4a0f-ad5d-023cbac80e72
01:19:55.367 --> 01:20:00.515
more units for your processors.
So today I wanted to introduce

NOTE Confidence: 0.85754466

d6e593aa-d01d-4672-9340-038fc982a884
01:20:01.130 --> 01:20:06.050
the basics and the
whole next semester, you are gonna

NOTE Confidence: 0.8734906

6af1e306-02ba-4861-8297-be72235ad403
01:20:06.050 --> 01:20:08.790
fully study about the processors.

NOTE Confidence: 0.8815836

714bf2f6-0eca-436a-9f50-425af2ad83c4
01:20:10.870 --> 01:20:16.183
So we're running out of time,
but for your information,

NOTE Confidence: 0.8815836

630e8514-7e50-42b9-8524-b67c05c8c418
01:20:16.183 --> 01:20:18.115
there are some terminologies.

NOTE Confidence: 0.87542677

2a8ab868-5c48-4e32-b348-1ec5b3d81094
01:20:20.380 --> 01:20:23.355
Microprocessors are just
simple processors that we

NOTE Confidence: 0.87542677

fc86b1a1-6b4d-4e3c-9cca-e0e2adc45897
01:20:23.355 --> 01:20:27.180
introduce and the whole next
semester, you're going to

NOTE Confidence: 0.87542677

a91c1b9e-e8fc-4d8d-822e-d5889389036b
01:20:27.180 --> 01:20:30.580
design microprocessors. The
name says that these processors

NOTE Confidence: 0.87542677

33343f5e-b190-436d-a885-947285ff3d5f
01:20:30.580 --> 01:20:33.980
are very small processors, so
very limited instruction set.

NOTE Confidence: 0.8698747

d9d88f41-9397-4e02-8c9c-77535c5a421f
01:20:35.240 --> 01:20:40.505
However, if you go to the market
today and buy a CPU or buy a

NOTE Confidence: 0.8698747

123e8568-ed60-4f8b-9b42-ed5677162fc9
01:20:40.505 --> 01:20:43.664
processor for your computer,
usually you call them central

NOTE Confidence: 0.8698747

dc49579c-5653-47c7-9b8e-9f79e4860838
01:20:43.664 --> 01:20:45.068
processing unit or CPU.

NOTE Confidence: 0.8560836

856c5231-b986-4a48-a13a-44d456088f5a
01:20:45.730 --> 01:20:49.740
Because they are based on the
this category, they have

NOTE Confidence: 0.86795664

962ddf97-d1ea-43dc-b95d-403da72bc68e
01:20:50.640 --> 01:20:55.047
about as I said, 1000 instructions,
so you can do any type of

NOTE Confidence: 0.86795664

bbc4acef-3ee3-4307-b70f-12a61a5e6d10
01:20:55.047 --> 01:20:56.403
application by these processors.

NOTE Confidence: 0.7995399

fe480d2c-ebf9-47d5-b36c-e06b2e0d75af
01:20:57.270 --> 01:21:01.263
For instacne, the Xeon brand of the
Intel company or the Ryzen

NOTE Confidence: 0.7995399

2c0add40-8034-40f3-a9a0-cb13b8dd4fa3
01:21:01.263 --> 01:21:02.715
brand from AMD.

NOTE Confidence: 0.88868755

cd9bef36-ed71-4292-afbc-feccc7ddd8ed
01:21:03.350 --> 01:21:07.247
But you might also hear about
graphic processing units, GPUs.

NOTE Confidence: 0.7856974

b104925f-64af-44a3-9eb0-2fa6bbbba941
01:21:08.650 --> 01:21:14.293
GPUs are those processors that
specialized on image processing.

NOTE Confidence: 0.9210946

52ba95df-93cb-4063-91db-f8c433956c1f
01:21:15.320 --> 01:21:17.952
And it is very, very good for

NOTE Confidence: 0.8617123

bb0f2ce0-c514-4cd7-b629-fe2f64af41b8
01:21:17.952 --> 01:21:23.960
gaming. And I mean recently
we can use GPUs not

NOTE Confidence: 0.8617123

37e65b9a-070e-4ab8-9c5d-c803878adebb
01:21:23.960 --> 01:21:28.514
only for image processing and
video processing, but also

NOTE Confidence: 0.8617123

3543c9a6-1a91-42b9-9c77-c9c07fb44550
01:21:28.514 --> 01:21:32.056
for some AI or artificial
intelligence tasks.

NOTE Confidence: 0.8696011

e6df0357-6773-40aa-84dc-f0cb68909e02
01:21:33.170 --> 01:21:39.458
Usually the GPUs and the video
cards, for instance, can

NOTE Confidence: 0.8696011

0ab68d7a-5bd4-43cb-ba01-c094a7ea0cf5
01:21:39.458 --> 01:21:41.030
have 2000 processors.

NOTE Confidence: 0.8628858

3dc9ecf6-b36e-4df3-93de-1270273d10c9
01:21:41.650 --> 01:21:47.614
In a system, you might have one
or two processors in the CPU, but in a

NOTE Confidence: 0.8628858

88c127e1-41c4-48ce-ba2c-52b301daf514
01:21:47.614 --> 01:21:51.448
video card for instance, ihis
company NVIDIA produces some

NOTE Confidence: 0.8628858

3e3ecf5c-b05a-43c2-ac86-3b915691723f
01:21:51.448 --> 01:21:56.134
video cards that have 2000s
GPUs. But the GPUs, they are

NOTE Confidence: 0.8628858

51a63126-68c8-42c0-a9b8-f3e7ebcfec30
01:21:56.134 --> 01:22:00.394
not as sophisticated as CPUs, but
they are highly specialized

NOTE Confidence: 0.8628858

f42a0678-a162-4769-9d8c-64b2ed23fa64
01:22:00.394 --> 01:22:03.376
on image processing
and video processing.

NOTE Confidence: 0.829072

58de1630-54c3-4914-baed-9cc8aa9385c3
01:22:04.300 --> 01:22:09.151
And the most up-to-date type of
processors are by Google. It is

NOTE Confidence: 0.8723424

83445bef-303f-4e15-b568-3aed550a672e
01:22:09.151 --> 01:22:14.583
called a TPU. This processor is
only able to run one library,

NOTE Confidence: 0.8723424

24cde8b3-7fd1-420a-8f8e-14a062e66330
01:22:14.583 --> 01:22:18.156
TensorFlow. It is called TensorFlow,
just one program.

NOTE Confidence: 0.92334515

9ecf3149-0d96-4e7c-ab3b-3322d15bc6e8
01:22:18.730 --> 01:22:24.606
Yes, this processor is only able
to run one library, which is a

NOTE Confidence: 0.81189287

c676c9f0-a99a-4801-8cef-c90a9087d7d7
01:22:24.606 --> 01:22:27.582
specialized for AI, artificial

NOTE Confidence: 0.8880866

cca6ea55-4174-47d6-811c-b08b19ff286a
01:22:27.582 --> 01:22:32.756
intelligence. And you cannot ask
this processor to do any

NOTE Confidence: 0.8880866

4b550c72-71ea-4361-b311-5345e2ea1fe0
01:22:32.756 --> 01:22:37.420
general, I mean to do your
program on this processor. They

NOTE Confidence: 0.8880866

1ed96da6-a7af-42c2-8b9a-d30824999d26
01:22:37.420 --> 01:22:42.932
are just for a specific type of
program, but they are very fast.

NOTE Confidence: 0.8880866

cbc4580e-dd08-42a2-88c7-f7852029826d
01:22:42.932 --> 01:22:45.052
That's why they build this.

NOTE Confidence: 0.85381454

f3f1c440-024b-4f76-a85c-8b233b17265c
01:22:45.770 --> 01:22:49.766
They used to use central
processing units, but

NOTE Confidence: 0.85381454

9e90c6c8-bdff-4724-b8d0-87ee65b4b123
01:22:49.766 --> 01:22:53.318
because the instructions
there was not that fast,

NOTE Confidence: 0.85381454

dd2d403c-17fe-4f47-9ce2-ad4f6f1e6451
01:22:53.318 --> 01:22:56.870
they built a specific
processors for doing this

NOTE Confidence: 0.85381454

7cfa5db7-b746-40ec-8f5a-5c22eac75a5f
01:22:56.870 --> 01:22:58.202
type of task.

NOTE Confidence: 0.89327186

2785304a-9271-4133-b18c-903b187655f9
01:23:00.030 --> 01:23:05.889
And this is the start
of the next semester for

NOTE Confidence: 0.89327186

606f0c94-4897-45fa-bcea-bc29b92b2c98
01:23:05.889 --> 01:23:06.330
this course.

NOTE Confidence: 0.88788986

bd51eff7-7254-47c9-981f-ba24bfe2d958
01:23:08.700 --> 01:23:12.660
But this is the end for our
course in this semester.

NOTE Confidence: 0.8978354

59c9f768-80b4-40bf-9820-0f79c276f81d
01:23:13.260 --> 01:23:17.724
And just for your information,
I'm going to be available for

NOTE Confidence: 0.88287866

53794a03-75c1-45e4-bd6e-5fae9a4dda04
01:23:18.400 --> 01:23:22.525
next week for the office hour,
although we don't have any

NOTE Confidence: 0.88287866

d9c0ba23-7ae5-45be-893b-0a21c25dd47f
01:23:22.525 --> 01:23:26.275
class, but I'm ready to
practice on some exam questions

NOTE Confidence: 0.88287866

3e70bef3-90d3-4033-b6e2-11e45048dc9c
01:23:26.275 --> 01:23:31.150
with you. Also, after the final
exam, I'm going to be ready for

NOTE Confidence: 0.88287866

53114758-4071-4a7d-80d3-311477e613a1
01:23:31.150 --> 01:23:36.025
your questions about the exam, so
even the week after the exam,

NOTE Confidence: 0.88287866

d03061e4-edd6-484f-be23-2faa211f750a
01:23:36.025 --> 01:23:39.775
I'll be available for the office
hours for your questions.

NOTE Confidence: 0.8005067

b3534479-89d7-4ba2-8495-44b020188933
01:23:42.130 --> 01:23:46.930
That's it, thank you so much.
Actually we did 8 minutes

NOTE Confidence: 0.8005067

69c4fe59-9d19-4532-aa81-417fad24301e
01:23:46.930 --> 01:23:51.330
after our official time,
I mean time limit, but

NOTE Confidence: 0.90229464

297f838f-e45f-42e3-9579-4d0003ff85b4
01:23:52.890 --> 01:23:55.146
yeah, that was the last lecture.

NOTE Confidence: 0.9033822

7d3413b6-7f4e-4056-a6e0-36f6d85de217
01:23:56.440 --> 01:24:01.497
But again, this is not the last
step of our journey for building

NOTE Confidence: 0.9033822

d5506cfc-bac9-4bf1-9c19-9555cbcd641b
01:24:01.497 --> 01:24:02.664
a computer system.

NOTE Confidence: 0.30733195

7e6e166d-5a0c-437a-bb37-548dc31ea282
01:24:07.220 --> 01:24:08.150
Uh.

NOTE Confidence: 0.8698604

fa064a14-e220-49ba-a2bd-c8920ae658d6
01:24:09.380 --> 01:24:14.177
Yes, I mean on December 18, I
will post the exam, but before that,

NOTE Confidence: 0.8698604

85556d75-e555-4466-991a-9d7f376d550b
01:24:14.177 --> 01:24:18.974
I will prepare a
mock exam kind of for you to

NOTE Confidence: 0.8698604

864f3dee-1758-4a97-9ecf-9a0cb2479b93
01:24:18.974 --> 01:24:23.771
practice on the how to open an
exam and upload your I mean

NOTE Confidence: 0.8698604

ac9c108c-542b-405d-b27b-ba55af50a99e
01:24:23.771 --> 01:24:27.830
answers. The same with the
midterm exam but the actual

NOTE Confidence: 0.8614638

82964546-a25e-4d5e-a0f7-d57e3efaa962
01:24:29.620 --> 01:24:33.238
final exam is gonna be posted on
December 18, yes.

NOTE Confidence: 0.8282185

30395f8f-254f-427b-a8af-7c01f30ccf3d
01:24:36.670 --> 01:24:41.883
Thank you Nelson. Have a great
day too. Nico asked will you

NOTE Confidence: 0.8282185

b620db89-6796-4648-a95d-31037b3e4f87
01:24:41.883 --> 01:24:46.294
be doing an official review
practice? Yes, as I

NOTE Confidence: 0.8282185

042f4917-a841-4809-b4d4-ff8b6485bcb3
01:24:46.294 --> 01:24:51.106
said, I mean in the office
hours. I mean next

NOTE Confidence: 0.8282185

b75fa1fc-db26-40fb-be78-939793fe014a
01:24:51.106 --> 01:24:55.517
week in the office hours on
Monday and Wednesday, I'm going

NOTE Confidence: 0.8282185

4cb44c9f-97a7-47af-95dd-6ab427050b3c
01:24:55.517 --> 01:24:59.928
to practice on some questions in
the assignments or

NOTE Confidence: 0.796465

8baed642-75ab-4ac0-b628-e1539e18f10c
01:25:01.480 --> 01:25:04.630
some sample final exam
questions.

NOTE Confidence: 0.8780287

b1111066-ea98-4515-a72a-cdbe9c5eb96c
01:25:08.570 --> 01:25:13.835
It's very similar to the
midterm, so I released the exam on,

NOTE Confidence: 0.8780287

07a41165-4b32-407f-af6d-7430a802e1ae
01:25:13.835 --> 01:25:18.695
I mean, just in the very morning
of the December 18th, for

NOTE Confidence: 0.8780287

067ad8fc-6a03-4028-96ba-0acd435347fe
01:25:18.695 --> 01:25:21.530
instance at 6:00 AM or 7:00 AM on

NOTE Confidence: 0.91895914

47ff4f3b-4dfd-463b-bf06-51576e8d2293
01:25:21.530 --> 01:25:26.711
December 18th. You are going
to have the whole 24 hours

NOTE Confidence: 0.91895914

022b67a6-2f06-49b6-bf09-76893c00c4b3
01:25:26.711 --> 01:25:31.898
after that to open the exam,
but once you open the

NOTE Confidence: 0.91895914

a391f5ec-5bc7-4c6a-a7f8-8c20d16d3c0d
01:25:31.898 --> 01:25:35.888
exam, you have limited
time. For instance, three or

NOTE Confidence: 0.91895914

ed020067-5227-4000-85e1-eec0902b569b
01:25:35.888 --> 01:25:39.479
four hours to upload your
answers to the blackboard.

NOTE Confidence: 0.86304504

43235a1f-5840-404f-a693-ba80249e2e19
01:25:46.420 --> 01:25:47.560
Any other questions?

NOTE Confidence: 0.8839719

79a653f4-4cfa-4876-8029-66ab970c6fd7
01:25:56.020 --> 01:26:00.271
Thank you Justin and have a
great day and I really hope

NOTE Confidence: 0.8839719

60b7f349-5d1e-4992-a8b7-31e93545dd55
01:26:00.271 --> 01:26:02.233
and wish that

NOTE Confidence: 0.82730246

f9d7660e-e4ae-4c57-b198-51230ef4e0a0
01:26:03.280 --> 01:26:08.675
you have a great exam, I mean
final exam and you continue this

NOTE Confidence: 0.82730246

dcc2a4c1-e844-4621-a3da-c4e7ba52dd4e
01:26:08.675 --> 01:26:10.335
with the next.

NOTE Confidence: 0.72577107

a9c2239d-4d85-44ef-b1d3-029da87f3a82
01:26:11.480 --> 01:26:12.868
course, Computer Architecture 2.

NOTE Confidence: 0.87048817

37e79f32-fff8-4cf5-8821-25d2a47a81b7
01:26:16.050 --> 01:26:21.020
So I'm going to end this session
and I'm going to be in the

NOTE Confidence: 0.87048817

78dc919f-a4c2-4a3f-9720-d8fcd77cfbdf
01:26:21.020 --> 01:26:25.280
office hour, so if you have any
questions, I'm ready there for

NOTE Confidence: 0.8651604

3f1fc519-7e88-431e-9f28-9dee691e24ce
01:26:25.280 --> 01:26:28.370
your questions. And
have a great day!





